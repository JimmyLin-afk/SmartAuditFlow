nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,Detecting aspects,matchList,MAP
TwabRewards.sol,"// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";

/**
 * @title PoolTogether V4 TwabRewards
 * @author PoolTogether Inc Team
 * @notice Contract to distribute rewards to depositors in a pool.
 * This contract supports the creation of several promotions that can run simultaneously.
 * In order to calculate user rewards, we use the TWAB (Time-Weighted Average Balance) from the Ticket contract.
 * This way, users simply need to hold their tickets to be eligible to claim rewards.
 * Rewards are calculated based on the average amount of tickets they hold during the epoch duration.
 */
contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    /* ============ Global Variables ============ */

    /// @notice Settings of each promotion.
    mapping(uint256 => Promotion) internal _promotions;

    /// @notice Latest recorded promotion id.
    /// @dev Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.
    uint256 internal _latestPromotionId;

    /// @notice Keeps track of claimed rewards per user.
    /// @dev _claimedEpochs[promotionId][user] => claimedEpochs
    /// @dev We pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    /* ============ Events ============ */

    /**
        @notice Emitted when a promotion is created.
        @param promotionId Id of the newly created promotion
    */
    event PromotionCreated(uint256 indexed promotionId);

    /**
        @notice Emitted when a promotion is cancelled.
        @param promotionId Id of the promotion being cancelled
        @param amount Amount of tokens transferred to the promotion creator
    */
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    /**
        @notice Emitted when a promotion is extended.
        @param promotionId Id of the promotion being extended
        @param numberOfEpochs Number of epochs the promotion has been extended by
    */
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    /**
        @notice Emitted when rewards have been claimed.
        @param promotionId Id of the promotion for which epoch rewards were claimed
        @param epochIds Ids of the epochs being claimed
        @param user Address of the user for which the rewards were claimed
        @param amount Amount of tokens transferred to the recipient address
    */
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    /* ============ Modifiers ============ */

    /// @dev Ensure that the caller is the creator of the promotion.
    /// @param _promotionId Id of the promotion to check
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    /* ============ External Functions ============ */

    /// @inheritdoc ITwabRewards
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    /// @inheritdoc ITwabRewards
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    /// @inheritdoc ITwabRewards
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    /// @inheritdoc ITwabRewards
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    /* ============ Internal Functions ============ */

    /**
    @notice Determine if address passed is actually a ticket.
    @param _ticket Address to check
   */
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    /**
        @notice Determine if a promotion is active.
        @param _promotion Promotion to check
    */
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    /**
        @notice Get settings for a specific promotion.
        @dev Will revert if the promotion does not exist.
        @param _promotionId Promotion id to get settings for
        @return Promotion settings
     */
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    /**
        @notice Get the current epoch id of a promotion.
        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.
        @param _promotion Promotion to get current epoch for
        @return Epoch id
     */
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        // elapsedTimestamp / epochDurationTimestamp
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    /**
        @notice Get reward amount for a specific user.
        @dev Rewards can only be claimed once the epoch is over.
        @param _user User to get reward amount for
        @param _promotion Promotion from which the epoch is
        @param _epochId Epoch id to get reward amount for
        @return Reward amount
     */
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    /**
        @notice Get the total amount of tokens left to be rewarded.
        @param _promotion Promotion to get the total amount of tokens left to be rewarded for
        @return Amount of tokens left to be rewarded
     */
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        // _tokensPerEpoch * _numberOfEpochsLeft
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    /**
        @notice Set boolean value for a specific epoch.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0011
        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.
        We get: 0000 0001 << 2 = 0000 0100
        We then OR the mask with the word to set the value.
        We get: 0110 0011 | 0000 0100 = 0110 0111
        @param _userClaimedEpochs Tightly packed epoch ids with their boolean values
        @param _epochId Id of the epoch to set the boolean for
        @return Tightly packed epoch ids with the newly boolean value set
    */
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    /**
        @notice Check if rewards of an epoch for a given promotion have already been claimed by the user.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0111
        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.
        We get: 0110 0111 >> 2 = 0001 1001
        We then get the value of the last bit by masking with 1.
        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1
        We then return the boolean value true since the last bit is 1.
        @param _userClaimedEpochs Record of epochs already claimed by the user
        @param _epochId Epoch id to check
        @return true if the rewards have already been claimed for the given epoch, false otherwise
     */
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",3228,378,"[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds
In the current implementation of `createPromotion()`, `_epochDuration` is allowed to be `0`.
However, when `_epochDuration = 0`, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it.
 
[H-02] Backdated `_startTimestamp` can lead to loss of funds
Function `createPromotion()`
This can lead to loss of funds as there is no recovery function of funds stuck like this
  [H-03] Continue claiming reqrds after numberOfEpochs are over
When claiming rewards via `claimRewards()`, the function `_calculateRewardAmount()` is called. The function `_calculateRewardAmount()` has a check to make sure the epoch is over
  “require(block.timestamp > _epochEndTimestamp, “TwabRewards/epoch-not-over"");"" 
However neither functions check if the `_epochId` is within the range of the reward epochs. Ergo it is possible to continue claiming rewards after the reward period is over. This only works as long as there are enough tokens in the contract. But this is the case when not everyone has claimed, or other rewards use the same token.
  [H-04] cancelPromotion is too rigorous
When you cancel a promotion with `cancelPromotion()` then the promotion is complete deleted. This means no-one can claim any rewards anymore, because `_promotions[_promotionId]` no longer exists.
It also means all the unclaimed tokens (of the previous epochs) will stay locked in the contract.
  [H-05] Malicious tickets can lead to the loss of all tokens It allows an attacker to retrieve all the tokens of each promotions.
Anyone can create a new promotion using `createPromotion()`. An attacker can create a new malicious promotion with the following parameters:
- the address of a malicious ticket smart contract
- the token address from the targeted promotion(s)
- optionally, `_numberOfEpochs` equal to 0 to create this promotion for free
The only verification made on the ticket address given by `_requireTicket()` is that the smart contract must implement the `ITicket` interface.
  [H-06] Rewards can be claimed multiple times
An attacker can claim its reward 256 * `epochDuration` seconds after the timestamp at which the promotion started. The vulnerability allows him to claim a reward several times to retrieve all the tokens associated to the promotion.
The function `claimRewards()` claim rewards for a given promotion and epoch. In order to prevent a user from claiming a reward multiple times, the mapping _claimedEpochs keeps track of claimed rewards per user:
  [H-07] Contract does not work with fee-on transfer tokens
Function `_calculateRewardAmount()`
There exist ERC20 tokens that charge a fee for every transfer.
This kind of token does not work correctly with the `TwabRewards` contract as the rewards calculation for an user is based on `promotion.tokensPerEpoch`.
However, the actual amount of tokens the contract holds could be less than `promotion.tokensPerEpoch * promotion.numberOfEpochs` leading to not claimable rewards for users claiming later than others.
  [M-01] `cancelPromotion()` Unable to cancel unstarted promotions
For unstarted promotions, `cancelPromotion()` will revert at `block.timestamp - _promotion.startTimestamp` in `_getCurrentEpochId()`.
Call stack: `cancelPromotion()` -> `_getRemainingRewards()` -> `_getCurrentEpochId()`.
  [M-02] `getRewardsAmount` doesn't check epochs haven't been claimed
In ITwabRewards.sol, it is claimed that `getRewardsAmount` should account for epochs that have already been claimed, and not include these epochs in the total amount (indeed, there is a line that says @dev Will be 0 if user has already claimed rewards for the epoch.)
However, no such check is done in the implementation of getRewardsAmount. This means that users will be shown rewardAmounts that are higher than they should be, and users will be confused when they are transferred fewer tokens than they are told they will. This would cause confusion, and people may begin to mistrust the contract since they think they are being transferred fewer tokens than they are owed.
  [M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account
Users who have a small claim on rewards for various promotions, may not feasibly be able to claim these rewards as gas costs could outweigh the sum they receive in return. Hence, it is likely that a dust balance accrues overtime for tokens allocated for various promotions. Additionally, the `_calculateRewardAmount` calculation may result in truncated results, leading to further accrual of a dust balance. Therefore, it is useful that these funds do not go to waste
  [M-04] Unsafe uint64 casting may overflow
The `_calculateRewardAmount` function casts epoch timestamps from uint256 to uint64 and these may overflow. The epochStartTimestamp value is a function of the user-supplied `_epochId` value, which could be extremely large (up to 2**255 – 1). While Solidity 0.8.x checks for overflows on arithmetic operations, it does not do so for casting – the OpenZeppelin SafeCast library offers this. The overflow condition could cause `_epochStartTimestamp` > `_epochEndTimestamp`, which the Ticket.sol getAverageBalanceBetween may not be expected to handle. The `_epochStartTimestamp` could overflow to have a value before the actual start of the promotion, also impacting the rewards calculation.
  [M-05] Missing Check When Transferring Tokens Out For A Given Promotion
The claimRewards function is called upon by ticket holders who parse a set of `_epochIds` they wish to claim rewards on. An internal call is made to _calculateRewardAmount to calculate the correct reward amount owed to the user. Subsequently, the _updateClaimedEpoch function will set the epoch bit of the tracked _claimedEpochs mapping, ensuring an epochId cannot be claimed twice for a given promotion.
However, there may be inaccuracies in the `_calculateRewardAmount` function, which results in more tokens being sent out than allocated by a promotion creator. This severely impacts the ability for users to claim their owed tokens on other promotions.",12,"pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";


contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    

    
    mapping(uint256 => Promotion) internal _promotions;

    
    
    uint256 internal _latestPromotionId;

    
    
    
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    

    
    event PromotionCreated(uint256 indexed promotionId);

    
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    

    
    
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    

    
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    

    
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",1979,7,5,"{
  ""Findings"": [
    {
      ""Issue"": ""Reentrancy Vulnerabilities in Token Transfer Functions"",
      ""Severity"": ""High"",
      ""Description"": ""The `claimRewards` and `cancelPromotion` functions involve external calls to transfer tokens before updating internal mappings, leading to possible reentrancy attacks."",
      ""Impact"": ""An attacker could exploit these vulnerabilities to claim more rewards than entitled or repeatedly cancel promotions, draining the contract of tokens."",
      ""Location"": ""Functions `claimRewards` at line 98 and `cancelPromotion` at line 64"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""These findings are critical as they address reentrancy vulnerabilities in functions performing token transfers, aligning with the task's focus on security.""
    },
    {
      ""Issue"": ""Lack of Access Control on Promotion Functions"",
      ""Severity"": ""High"",
      ""Description"": ""The `extendPromotion` function lacks the `onlyPromotionCreator` modifier, and `createPromotion` has no explicit access restrictions, allowing unauthorized users to manipulate promotions."",
      ""Impact"": ""Unauthorized users can extend or create promotions, leading to misuse or unauthorized distribution of tokens."",
      ""Location"": ""Functions `extendPromotion` at lines 89-105 and `createPromotion` at lines 47-70"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The findings are relevant as they highlight potential security risks due to lack of access control, posing risks of unauthorized promotion manipulation.""
    },
    {
      ""Issue"": ""Incorrect Reward Calculation and Handling Edge Cases"",
      ""Severity"": ""High"",
      ""Description"": ""The `_calculateRewardAmount` function does not correctly handle cases where the promotion has ended or the epoch is in the future, leading to potential manipulation of reward claims."",
      ""Impact"": ""Users could claim rewards for epochs not part of the promotion, resulting in incorrect reward distribution."",
      ""Location"": ""Function `_calculateRewardAmount` at lines 151-173"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding is relevant as it identifies potential logic flaws in reward calculation, which could impact contract functionality.""
    },
    {
      ""Issue"": ""Arithmetic Overflow in Promotion Calculations"",
      ""Severity"": ""Medium"",
      ""Description"": ""The calculations in `extendPromotion` and `createPromotion` functions do not use safe arithmetic operations, leading to potential overflow with large values."",
      ""Impact"": ""Arithmetic overflow could result in incorrect token transfers, allowing promotions with incorrect reward amounts."",
      ""Location"": ""Functions `createPromotion` at line 47 and `extendPromotion` at line 78"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The findings address arithmetic overflow risks, ensuring safe operations in token-related calculations.""
    },
    {
      ""Issue"": ""Improper Error Handling in External Calls"",
      ""Severity"": ""Medium"",
      ""Description"": ""External calls to the ticket contract in `_calculateRewardAmount` do not have proper error handling mechanisms, leading to unchecked failures."",
      ""Impact"": ""Failures in these calls could result in incorrect calculations and potential reward distribution errors."",
      ""Location"": ""Function `_calculateRewardAmount` starting at line 150"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""This finding highlights potential error handling issues in external calls, crucial for maintaining contract reliability and security.""
    },
    {
      ""Issue"": ""Unchecked Use of External Interface"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract interacts with the ITicket interface without verifying its correct implementation, leading to potential misuse if a malicious contract is used."",
      ""Impact"": ""Failures or unexpected behavior in reward calculations could occur if an incorrect or malicious contract is used."",
      ""Location"": ""Function `_requireTicket`"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding addresses the need to ensure correct interface implementation when interacting with external contracts.""
    },
    {
      ""Issue"": ""Inefficient Function and Loop Operations"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `claimRewards` function has inefficient loops and multiple external calls, leading to high gas costs and potential transaction failures."",
      ""Impact"": ""Increased gas usage and potential transaction failures due to exceeding block gas limits."",
      ""Location"": ""Function `claimRewards` at lines 115-134"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding highlights potential gas inefficiencies, aligning with the task's scope of optimizing gas-heavy operations.""
    },
    {
      ""Issue"": ""Lack of Validation for Epoch Parameters"",
      ""Severity"": ""Medium"",
      ""Description"": ""There is no validation for epoch duration or number when creating or extending promotions, allowing impractical or exploitable promotions."",
      ""Impact"": ""Extreme epoch parameters could lead to unexpected behavior or performance issues."",
      ""Location"": ""Functions `createPromotion` at lines 25-47 and `extendPromotion` at lines 69-85"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding addresses potential validation issues, ensuring reasonable parameters for promotions.""
    }
  ],
  ""FindingNumber"": 8,
  ""AllRelevance"": 25,
  ""RelevanceCount"": 27,
  ""AllValidation"": 23,
  ""ValidationCount"": 24
}","### **Comparison of Issue Report and Response List**

---

#### **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**

**Report Description**:  
The `createPromotion()` function allows `_epochDuration` to be `0`, which makes it impossible for users to claim rewards or for the promotion creator to cancel the promotion. This could freeze the creator's funds indefinitely.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of `_epochDuration` validation, which is a critical oversight in the `createPromotion()` function.

---

#### **[H-02] Backdated `_startTimestamp` can lead to loss of funds**

**Report Description**:  
The `createPromotion()` function does not validate `_startTimestamp`, allowing backdated timestamps. This could result in funds being locked or lost, as there is no recovery mechanism.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of backdated `_startTimestamp`, which is a significant risk.

---

#### **[H-03] Continue claiming rewards after `numberOfEpochs` are over**

**Report Description**:  
The `claimRewards()` function does not check if `_epochId` is within the range of reward epochs, allowing users to claim rewards after the reward period has ended. This could lead to overclaiming if there are sufficient tokens in the contract.

**Match in Response List**:  
Matches with the issue titled **""Incorrect Reward Calculation and Handling Edge Cases""**.

**Validation**:  
**Correct**. The response identifies the issue of incorrect reward calculation but does not explicitly mention the lack of validation for `_epochId` range.

---

#### **[H-04] `cancelPromotion()` is too rigorous**

**Report Description**:  
The `cancelPromotion()` function deletes the promotion entirely, preventing users from claiming rewards and locking unclaimed tokens in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of overly rigorous cancellation, which could lead to locked funds.

---

#### **[H-05] Malicious tickets can lead to the loss of all tokens**

**Report Description**:  
An attacker can create a malicious promotion using a malicious ticket contract, potentially draining all tokens from the contract. The only check is that the ticket contract implements the `ITicket` interface.

**Match in Response List**:  
Matches with the issue titled **""Unchecked Use of External Interface""**.

**Validation**:  
**Correct**. The response accurately identifies the risk of unchecked external interface usage, which aligns with the issue.

---

#### **[H-06] Rewards can be claimed multiple times**

**Report Description**:  
The `claimRewards()` function allows an attacker to claim rewards multiple times for the same epoch, potentially draining all tokens associated with the promotion.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of multiple reward claims, which is a critical vulnerability.

---

#### **[H-07] Contract does not work with fee-on-transfer tokens**

**Report Description**:  
The contract does not account for fee-on-transfer tokens, leading to discrepancies between the calculated rewards and the actual tokens held by the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of fee-on-transfer tokens, which could lead to unclaimable rewards.

---

#### **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**

**Report Description**:  
The `cancelPromotion()` function reverts for unstarted promotions due to an issue in `_getCurrentEpochId()`, preventing the cancellation of unstarted promotions.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unstarted promotions, which could lead to locked funds.

---

#### **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**

**Report Description**:  
The `getRewardsAmount` function does not account for already claimed epochs, leading to incorrect reward calculations and user confusion.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of incorrect reward calculations due to unclaimed epochs.

---

#### **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**

**Report Description**:  
Users with small reward claims may not claim them due to high gas costs, leading to dust balances that cannot be recovered.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of dust token balances, which could lead to wasted funds.

---

#### **[M-04] Unsafe uint64 casting may overflow**

**Report Description**:  
The `_calculateRewardAmount` function casts epoch timestamps from `uint256` to `uint64`, which could overflow and lead to incorrect reward calculations.

**Match in Response List**:  
Matches with the issue titled **""Arithmetic Overflow in Promotion Calculations""**.

**Validation**:  
**Correct**. The response accurately identifies the risk of arithmetic overflow, which aligns with the issue.

---

#### **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

**Report Description**:  
The `claimRewards` function may transfer more tokens than allocated due to inaccuracies in `_calculateRewardAmount`, impacting other promotions.

**Match in Response List**:  
Matches with the issue titled **""Incorrect Reward Calculation and Handling Edge Cases""**.

**Validation**:  
**Partially Correct**. The response identifies the issue of incorrect reward calculation but does not explicitly mention the risk of over-transferring tokens.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
 - **[H-03] Continue claiming rewards after `numberOfEpochs` are over**
- **[H-05] Malicious tickets can lead to the loss of all tokens**
- **[M-04] Unsafe uint64 casting may overflow** - **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**
- **[H-02] Backdated `_startTimestamp` can lead to loss of funds**
- **[H-04] `cancelPromotion()` is too rigorous**
- **[H-06] Rewards can be claimed multiple times**
- **[H-07] Contract does not work with fee-on-transfer tokens**
- **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**
- **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**
- **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**

--- 

The response list covers some issues but misses several critical vulnerabilities and risks identified in the issue report. Significant gaps remain in addressing input validation, backdated timestamps, rigorous cancellation, multiple reward claims, fee-on-transfer tokens, unstarted promotions, and dust token balances.",4,0,8,8,25,"```
1. Malicious tickets can lead to the loss of all tokens
2. Unsafe uint64 casting may overflow 3. Incorrect Reward Calculation and Handling Edge Cases 4. Incorrect Reward Calculation and Handling Edge Cases
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks of the true positives in the ranked list of predictions**:
   - The true positives provided are:
     ```
     1. Malicious tickets can lead to the loss of all tokens
     2. Unsafe uint64 casting may overflow
     3. Incorrect Reward Calculation and Handling Edge Cases
     4. Incorrect Reward Calculation and Handling Edge Cases
     ```
   - From the ranked predictions, the only true positive that appears is:
     ```
     3. Incorrect Reward Calculation and Handling Edge Cases
     ```
   - This true positive appears at rank 3 in the ranked list of predictions.

2. **Calculate the precision at the rank where the true positive appears**:
   - Precision at rank 3 (\( P@3 \)) is calculated as:
     \[
     P@3 = \frac{\text{Number of true positives up to rank 3}}{\text{Rank}} = \frac{1}{3} \approx 0.333
     \]

3. **Compute the Average Precision (AP)**:
   - Since there is only one true positive, the AP is simply the precision at the rank where it appears:
     \[
     AP = P@3 = 0.333
     \]

**Output**:
```
0.333
```"
