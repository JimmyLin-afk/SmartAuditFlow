nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
Vault.sol,"pragma solidity 0.8.10;

/**
 * @author InsureDAO
 * @title InsureDAO vault contract
 * @notice
 * SPDX-License-Identifier: GPL-3.0
 */
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import ""./interfaces/IOwnership.sol"";
import ""./interfaces/IVault.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IRegistry.sol"";

contract Vault is IVault {
    using SafeERC20 for IERC20;

    /**
     * Storage
     */

    address public override token;
    IController public controller;
    IRegistry public registry;
    IOwnership public immutable ownership;

    mapping(address => uint256) public override debts;
    mapping(address => uint256) public attributions;
    uint256 public totalAttributions;

    address public keeper; //keeper can operate utilize(), if address zero, anyone can operate.
    uint256 public balance; //balance of underlying token
    uint256 public totalDebt; //total debt balance. 1debt:1token

    uint256 private constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation



    event ControllerSet(address controller);
    event KeeperChanged(address keeper);

    modifier onlyOwner() {
        require(
            ownership.owner() == msg.sender,
            ""Caller is not allowed to operate""
        );
        _;
    }

    modifier onlyMarket() {
        require(
            IRegistry(registry).isListed(msg.sender),
            ""ERROR_ONLY_MARKET""
        );
        _;
    }

    constructor(
        address _token,
        address _registry,
        address _controller,
        address _ownership
    ) {
        require(_token != address(0), ""ERROR_ZERO_ADDRESS"");
        require(_registry != address(0), ""ERROR_ZERO_ADDRESS"");
        require(_ownership != address(0), ""ERROR_ZERO_ADDRESS"");
        //controller can be zero

        token = _token;
        registry = IRegistry(_registry);
        controller = IController(_controller);
        ownership = IOwnership(_ownership);
    }

    /**
     * Vault Functions
     */

    /**
     * @notice A market contract can deposit collateral and get attribution point in return
     * @param  _amount amount of tokens to deposit
     * @param _from sender's address
     * @param _beneficiaries beneficiary's address array
     * @param _shares funds share within beneficiaries (100% = 1e6)
     * @return _allocations attribution amount generated from the transaction
     */
    function addValueBatch(
        uint256 _amount,
        address _from,
        address[2] calldata _beneficiaries,
        uint256[2] calldata _shares
    ) external override onlyMarket returns (uint256[2] memory _allocations) {
        
        require(_shares[0] + _shares[1] == 1000000, ""ERROR_INCORRECT_SHARE"");

        uint256 _attributions;
        uint256 _pool = valueAll();
        if (totalAttributions == 0) {
            _attributions = _amount;
        } else {
            require(_pool != 0, ""ERROR_VALUE_ALL_IS_ZERO""); //should never triggered
            _attributions = (_amount * totalAttributions) / _pool;
        }
        IERC20(token).safeTransferFrom(_from, address(this), _amount);

        balance += _amount;
        totalAttributions += _attributions;

        uint256 _allocation = (_shares[0] * _attributions) / MAGIC_SCALE_1E6;
        attributions[_beneficiaries[0]] += _allocation;
        _allocations[0] = _allocation;

        _allocation = (_shares[1] * _attributions) / MAGIC_SCALE_1E6;
        attributions[_beneficiaries[1]] += _allocation;
        _allocations[1] = _allocation;
    }

    /**
     * @notice A market contract can deposit collateral and get attribution point in return
     * @param  _amount amount of tokens to deposit
     * @param _from sender's address
     * @param _beneficiary beneficiary's address
     * @return _attributions attribution amount generated from the transaction
     */

    function addValue(
        uint256 _amount,
        address _from,
        address _beneficiary
    ) external override onlyMarket returns (uint256 _attributions) {

        if (totalAttributions == 0) {
            _attributions = _amount;
        } else {
            uint256 _pool = valueAll();
            _attributions = (_amount * totalAttributions) / _pool;
        }
        IERC20(token).safeTransferFrom(_from, address(this), _amount);
        balance += _amount;
        totalAttributions += _attributions;
        attributions[_beneficiary] += _attributions;
    }

    /**
     * @notice an address that has balance in the vault can withdraw underlying value
     * @param _amount amount of tokens to withdraw
     * @param _to address to get underlying tokens
     * @return _attributions amount of attributions burnet
     */
    function withdrawValue(uint256 _amount, address _to)
        external
        override
        returns (uint256 _attributions)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");
        
        uint256 _valueAll = valueAll();
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""WITHDRAW-VALUE_BADCONDITIONS""
        );

        _attributions = (totalAttributions * _amount) / _valueAll;
        uint256 _available = available();

        require(
            attributions[msg.sender] >= _attributions,
            ""WITHDRAW-VALUE_BADCONDITIONS""
        );
        attributions[msg.sender] -= _attributions;

        totalAttributions -= _attributions;

        if (_available < _amount) {
            //when USDC in this contract isn't enough
            uint256 _shortage;
            unchecked {
                _shortage = _amount - _available;
            }
            _unutilize(_shortage);

            require(available() >= _amount, ""Withdraw amount > Available"");
        }

        balance -= _amount;
        IERC20(token).safeTransfer(_to, _amount);
    }

    /**
     * @notice an address that has balance in the vault can transfer underlying value
     * @param _amount sender of value
     * @param _destination reciepient of value
     */

    function transferValue(uint256 _amount, address _destination)
        external
        override
        returns (uint256 _attributions)
    {
        require(_destination != address(0), ""ERROR_ZERO_ADDRESS"");
        
        uint256 _valueAll = valueAll();
        
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""TRANSFER-VALUE_BADCONDITIONS""
        );
        _attributions = (_amount * totalAttributions) / _valueAll;
        attributions[msg.sender] -= _attributions;
        attributions[_destination] += _attributions;
    }

    /**
     * @notice a registered contract can borrow balance from the vault
     * @param _amount borrow amount
     * @param _to borrower's address
     */
    function borrowValue(uint256 _amount, address _to) external onlyMarket override {
        if (_amount != 0) {
            debts[msg.sender] += _amount;
            totalDebt += _amount;

            IERC20(token).safeTransfer(_to, _amount);
        }
    }

    /**
     * @notice an address that has balance in the vault can offset an address's debt
     * @param _amount debt amount to offset
     * @param _target borrower's address
     */

    function offsetDebt(uint256 _amount, address _target)
        external
        override
        returns (uint256 _attributions)
    {
        uint256 _valueAll = valueAll();
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""ERROR_REPAY_DEBT_BADCONDITIONS""
        );
        _attributions = (_amount * totalAttributions) / _valueAll;
        attributions[msg.sender] -= _attributions;
        totalAttributions -= _attributions;
        balance -= _amount;
        debts[_target] -= _amount;
        totalDebt -= _amount;
    }

    /**
     * @notice a registerd market can transfer their debt to system debt
     * @param _amount debt amount to transfer
     * @dev will be called when CDS could not afford when resume the market.
     */
    function transferDebt(uint256 _amount) external onlyMarket override {

        if(_amount != 0){
            debts[msg.sender] -= _amount;
            debts[address(0)] += _amount;
        }
    }

    /**
     * @notice anyone can repay the system debt by sending tokens to this contract
     * @param _amount debt amount to repay
     * @param _target borrower's address
     */
    function repayDebt(uint256 _amount, address _target) external override {
        uint256 _debt = debts[_target];

        if (_debt > _amount) {
            unchecked {
                debts[_target] = _debt - _amount;
            }
        } else {
            debts[_target] = 0;
            _amount = _debt;
        }
        totalDebt -= _amount;
        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);
    }

    /**
     * @notice an address that has balance in the vault can withdraw value denominated in attribution
     * @param _attribution amount of attribution to burn
     * @param _to beneficiary's address
     * @return _retVal number of tokens withdrawn from the transaction
     */
    function withdrawAttribution(uint256 _attribution, address _to)
        external
        override
        returns (uint256 _retVal)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");

        _retVal = _withdrawAttribution(_attribution, _to);
    }

    /**
     * @notice an address that has balance in the vault can withdraw all value
     * @param _to beneficiary's address
     * @return _retVal number of tokens withdrawn from the transaction
     */
    function withdrawAllAttribution(address _to)
        external
        override
        returns (uint256 _retVal)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");
        
        _retVal = _withdrawAttribution(attributions[msg.sender], _to);
    }

    /**
     * @notice an address that has balance in the vault can withdraw all value
     * @param _attribution amount of attribution to burn
     * @param _to beneficiary's address
     * @return _retVal number of tokens withdrawn from the transaction
     */
    function _withdrawAttribution(uint256 _attribution, address _to)
        internal
        returns (uint256 _retVal)
    {
        require(
            attributions[msg.sender] >= _attribution,
            ""WITHDRAW-ATTRIBUTION_BADCONS""
        );
        uint256 _available = available();
        _retVal = (_attribution * valueAll()) / totalAttributions;

        unchecked {
            attributions[msg.sender] -= _attribution;
        }
        totalAttributions -= _attribution;

        if (_available < _retVal) {
            uint256 _shortage;
            unchecked {
                _shortage = _retVal - _available;
            }
            _unutilize(_shortage);
        }

        balance -= _retVal;
        IERC20(token).safeTransfer(_to, _retVal);
    }

    /**
     * @notice an address that has balance in the vault can transfer value denominated in attribution
     * @param _amount amount of attribution to transfer
     * @param _destination reciepient of attribution
     */
    function transferAttribution(uint256 _amount, address _destination)
        external
        override
    {
        require(_destination != address(0), ""ERROR_ZERO_ADDRESS"");

        require(
            _amount != 0 && attributions[msg.sender] >= _amount,
            ""TRANSFER-ATTRIBUTION_BADCONS""
        );

        unchecked {
            attributions[msg.sender] -= _amount;
        }
        attributions[_destination] += _amount;
    }

    /**
     * @notice utilize all available underwritten funds into the set controller.
     * @return _amount amount of tokens utilized
     */
    function utilize() external override returns (uint256 _amount) {
        require(address(controller) != address(0), ""ERROR_CONTROLLER_NOT_SET"");
        
        address _token = token;
        if (keeper != address(0)) {
            require(msg.sender == keeper, ""ERROR_NOT_KEEPER"");
        }
        _amount = available(); //balance
        if (_amount != 0) {
            IERC20(_token).safeTransfer(address(controller), _amount);
            balance -= _amount;
            controller.earn(_token, _amount);
        }
    }

    /**
     * @notice get attribution number for the specified address
     * @param _target target address
     * @return amount of attritbution
     */

    function attributionOf(address _target)
        external
        view
        override
        returns (uint256)
    {
        return attributions[_target];
    }

    /**
     * @notice get all attribution number for this contract
     * @return amount of all attribution
     */
    function attributionAll() external view returns (uint256) {
        return totalAttributions;
    }

    /**
     * @notice Convert attribution number into underlying assset value
     * @param _attribution amount of attribution
     * @return token value of input attribution
     */
    function attributionValue(uint256 _attribution)
        external
        view
        override
        returns (uint256)
    {
        uint256 _totalAttributions = totalAttributions;

        if (_totalAttributions != 0 && _attribution != 0) {
            return (_attribution * valueAll()) / _totalAttributions;
        }
    }

    /**
     * @notice return underlying value of the specified address
     * @param _target target address
     * @return token value of target address
     */
    function underlyingValue(address _target)
        public
        view
        override
        returns (uint256)
    {
        uint256 _valueAll = valueAll();
        uint256 attribution = attributions[_target];

        if (_valueAll != 0 && attribution != 0) {
            return (_valueAll * attribution) / totalAttributions;
        }
    }
    
    function underlyingValue(address _target, uint256 _valueAll)
        public
        view
        returns (uint256)
    {
        uint256 attribution = attributions[_target];
        if (_valueAll != 0 && attribution != 0) {
            return (_valueAll * attribution) / totalAttributions;
        }
    }

    /**
     * @notice return underlying value of this contract
     * @return all token value of the vault
     */
    function valueAll() public view returns (uint256) {
        if (address(controller) != address(0)) {
            return balance + controller.valueAll();
        } else {
            return balance;
        }
    }

    /**
     * @notice internal function to unutilize the funds and keep utilization rate
     * @param _amount amount to withdraw from controller
     */
    function _unutilize(uint256 _amount) internal {
        require(address(controller) != address(0), ""ERROR_CONTROLLER_NOT_SET"");

        uint256 beforeBalance = IERC20(token).balanceOf(address(this));
        controller.withdraw(address(this), _amount);
        uint256 received = IERC20(token).balanceOf(address(this)) - beforeBalance;
        require(received >= _amount, ""ERROR_INSUFFICIENT_RETURN_VALUE"");
        balance += received;
    }

    /**
     * @notice return how much funds in this contract is available to be utilized
     * @return available balance to utilize
     */
    function available() public view returns (uint256) {
        return balance - totalDebt;
    }

    /**
     * @notice return how much price for each attribution
     * @return value of one share of attribution
     */
    function getPricePerFullShare() external view returns (uint256) {
        return (valueAll() * MAGIC_SCALE_1E6) / totalAttributions;
    }

    /**
     * onlyOwner
     */

    /**
     * @notice withdraw redundant token stored in this contract
     * @param _token token address
     * @param _to beneficiary's address
     */
    function withdrawRedundant(address _token, address _to)
        external
        override
        onlyOwner
    {
        uint256 _balance = balance;
        uint256 _tokenBalance = IERC20(_token).balanceOf(address(this));
        if (
            _token == token &&
            _balance < _tokenBalance
        ) {
            uint256 _redundant;
            unchecked{
                _redundant = _tokenBalance - _balance;
            }
            IERC20(token).safeTransfer(_to, _redundant);
        } else if (_tokenBalance != 0) {
            IERC20(_token).safeTransfer(
                _to,
                _tokenBalance
            );
        }
    }

    /**
     * @notice admin function to set controller address
     * @param _controller address of the controller
     */
    function setController(address _controller) external override onlyOwner {
        require(_controller != address(0), ""ERROR_ZERO_ADDRESS"");

        if (address(controller) != address(0)) {
            uint256 beforeUnderlying = controller.valueAll();
            controller.migrate(address(_controller));
            require(IController(_controller).valueAll() >= beforeUnderlying, ""ERROR_VALUE_ALL_DECREASED"");
        }
        controller = IController(_controller);

        emit ControllerSet(_controller);
    }

    /**
     * @notice set keeper to incentivize calling utilize()
     * @param _keeper keeper address
     */
    function setKeeper(address _keeper) external override onlyOwner {
        if (keeper != _keeper) {
            keeper = _keeper;
        }

        emit KeeperChanged(_keeper);
    }
}",3963.0,570.0,"[H-01] Tokens can be burned with no access control
The Vault.sol contract has two address state variables, the keeper variable and the `controller` variable, which are both permitted to be the zero address. If both variables are zero simultaneously, any address can burn the available funds (available funds = balance - totalDebt) by sending these tokens to the zero address with the unprotected `utilitize()` function. If a user has no totalDebt, the user can lose their entire underlying token balance because of this.
 
[H-05] backdoor in withdrawRedundant
The Vault.withdrawRedundant has wrong logic that allows the admins to steal the underlying vault token.
  [H-07] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances
The current design/implementation allows a `market` address (registered on `registry`) to call Vault#`addValue()` and transfer tokens from an arbitrary address to a specified `_beneficiary` up the approved amount at any time, and the `_beneficiary` can withdraw the funds by calling Vault#`withdrawAllAttribution()` immediately.
This poses a very dangerous risk to all the users that approved their tokens to the Vault contracts (each one holds all users' allowances for that token).
  [H-09] Vault#setController() owner of the Vault contracts can drain funds from the Vault function `setController()`   [H-10] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts
In modifier `onlyMarket()`    [M-01] `repayDebt` in Vault.sol could DOS functionality for markets
Any user can pay the debt for any borrower in Vault.sol, by using `repayDebt()`. This function allows anyone to repay any amount of borrowed value, up-to and including the totalDebt value; it works by setting the `debts[_target]` to zero, and decreasing `totalDebt` by the given amount, up to zero. However, all debts of the other borrowers are left untouched.
If a malicious (but generous) user were to repay the debt for all the borrowers, markets functionality regarding borrowing would be DOSed: the vault would try to decrease the debt of the market, successfully, but would fail to decrease `totalDebt` as it would result in an underflow
  [M-05] Vault.sol Tokens with fee on transfer are not supported
There are ERC20 tokens that charge fee for every `transfer()` / `transferFrom()`.
Vault.sol#`addValue()` assumes that the received amount is the same as the transfer amount, and uses it to calculate attributions, balance amounts, etc. While the actual transferred amount can be lower for those tokens.",7.0,"pragma solidity 0.8.10;


import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import ""./interfaces/IOwnership.sol"";
import ""./interfaces/IVault.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IRegistry.sol"";

contract Vault is IVault {
    using SafeERC20 for IERC20;

    

    address public override token;
    IController public controller;
    IRegistry public registry;
    IOwnership public immutable ownership;

    mapping(address => uint256) public override debts;
    mapping(address => uint256) public attributions;
    uint256 public totalAttributions;

    address public keeper; 
    uint256 public balance; 
    uint256 public totalDebt; 

    uint256 private constant MAGIC_SCALE_1E6 = 1e6; 



    event ControllerSet(address controller);
    event KeeperChanged(address keeper);

    modifier onlyOwner() {
        require(
            ownership.owner() == msg.sender,
            ""Caller is not allowed to operate""
        );
        _;
    }

    modifier onlyMarket() {
        require(
            IRegistry(registry).isListed(msg.sender),
            ""ERROR_ONLY_MARKET""
        );
        _;
    }

    constructor(
        address _token,
        address _registry,
        address _controller,
        address _ownership
    ) {
        require(_token != address(0), ""ERROR_ZERO_ADDRESS"");
        require(_registry != address(0), ""ERROR_ZERO_ADDRESS"");
        require(_ownership != address(0), ""ERROR_ZERO_ADDRESS"");
        

        token = _token;
        registry = IRegistry(_registry);
        controller = IController(_controller);
        ownership = IOwnership(_ownership);
    }

    

    
    function addValueBatch(
        uint256 _amount,
        address _from,
        address[2] calldata _beneficiaries,
        uint256[2] calldata _shares
    ) external override onlyMarket returns (uint256[2] memory _allocations) {
        
        require(_shares[0] + _shares[1] == 1000000, ""ERROR_INCORRECT_SHARE"");

        uint256 _attributions;
        uint256 _pool = valueAll();
        if (totalAttributions == 0) {
            _attributions = _amount;
        } else {
            require(_pool != 0, ""ERROR_VALUE_ALL_IS_ZERO""); 
            _attributions = (_amount * totalAttributions) / _pool;
        }
        IERC20(token).safeTransferFrom(_from, address(this), _amount);

        balance += _amount;
        totalAttributions += _attributions;

        uint256 _allocation = (_shares[0] * _attributions) / MAGIC_SCALE_1E6;
        attributions[_beneficiaries[0]] += _allocation;
        _allocations[0] = _allocation;

        _allocation = (_shares[1] * _attributions) / MAGIC_SCALE_1E6;
        attributions[_beneficiaries[1]] += _allocation;
        _allocations[1] = _allocation;
    }

    

    function addValue(
        uint256 _amount,
        address _from,
        address _beneficiary
    ) external override onlyMarket returns (uint256 _attributions) {

        if (totalAttributions == 0) {
            _attributions = _amount;
        } else {
            uint256 _pool = valueAll();
            _attributions = (_amount * totalAttributions) / _pool;
        }
        IERC20(token).safeTransferFrom(_from, address(this), _amount);
        balance += _amount;
        totalAttributions += _attributions;
        attributions[_beneficiary] += _attributions;
    }

    
    function withdrawValue(uint256 _amount, address _to)
        external
        override
        returns (uint256 _attributions)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");
        
        uint256 _valueAll = valueAll();
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""WITHDRAW-VALUE_BADCONDITIONS""
        );

        _attributions = (totalAttributions * _amount) / _valueAll;
        uint256 _available = available();

        require(
            attributions[msg.sender] >= _attributions,
            ""WITHDRAW-VALUE_BADCONDITIONS""
        );
        attributions[msg.sender] -= _attributions;

        totalAttributions -= _attributions;

        if (_available < _amount) {
            
            uint256 _shortage;
            unchecked {
                _shortage = _amount - _available;
            }
            _unutilize(_shortage);

            require(available() >= _amount, ""Withdraw amount > Available"");
        }

        balance -= _amount;
        IERC20(token).safeTransfer(_to, _amount);
    }

    

    function transferValue(uint256 _amount, address _destination)
        external
        override
        returns (uint256 _attributions)
    {
        require(_destination != address(0), ""ERROR_ZERO_ADDRESS"");
        
        uint256 _valueAll = valueAll();
        
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""TRANSFER-VALUE_BADCONDITIONS""
        );
        _attributions = (_amount * totalAttributions) / _valueAll;
        attributions[msg.sender] -= _attributions;
        attributions[_destination] += _attributions;
    }

    
    function borrowValue(uint256 _amount, address _to) external onlyMarket override {
        if (_amount != 0) {
            debts[msg.sender] += _amount;
            totalDebt += _amount;

            IERC20(token).safeTransfer(_to, _amount);
        }
    }

    

    function offsetDebt(uint256 _amount, address _target)
        external
        override
        returns (uint256 _attributions)
    {
        uint256 _valueAll = valueAll();
        require(
            attributions[msg.sender] != 0 &&
                underlyingValue(msg.sender, _valueAll) >= _amount,
            ""ERROR_REPAY_DEBT_BADCONDITIONS""
        );
        _attributions = (_amount * totalAttributions) / _valueAll;
        attributions[msg.sender] -= _attributions;
        totalAttributions -= _attributions;
        balance -= _amount;
        debts[_target] -= _amount;
        totalDebt -= _amount;
    }

    
    function transferDebt(uint256 _amount) external onlyMarket override {

        if(_amount != 0){
            debts[msg.sender] -= _amount;
            debts[address(0)] += _amount;
        }
    }

    
    function repayDebt(uint256 _amount, address _target) external override {
        uint256 _debt = debts[_target];

        if (_debt > _amount) {
            unchecked {
                debts[_target] = _debt - _amount;
            }
        } else {
            debts[_target] = 0;
            _amount = _debt;
        }
        totalDebt -= _amount;
        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);
    }

    
    function withdrawAttribution(uint256 _attribution, address _to)
        external
        override
        returns (uint256 _retVal)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");

        _retVal = _withdrawAttribution(_attribution, _to);
    }

    
    function withdrawAllAttribution(address _to)
        external
        override
        returns (uint256 _retVal)
    {
        require(_to != address(0), ""ERROR_ZERO_ADDRESS"");
        
        _retVal = _withdrawAttribution(attributions[msg.sender], _to);
    }

    
    function _withdrawAttribution(uint256 _attribution, address _to)
        internal
        returns (uint256 _retVal)
    {
        require(
            attributions[msg.sender] >= _attribution,
            ""WITHDRAW-ATTRIBUTION_BADCONS""
        );
        uint256 _available = available();
        _retVal = (_attribution * valueAll()) / totalAttributions;

        unchecked {
            attributions[msg.sender] -= _attribution;
        }
        totalAttributions -= _attribution;

        if (_available < _retVal) {
            uint256 _shortage;
            unchecked {
                _shortage = _retVal - _available;
            }
            _unutilize(_shortage);
        }

        balance -= _retVal;
        IERC20(token).safeTransfer(_to, _retVal);
    }

    
    function transferAttribution(uint256 _amount, address _destination)
        external
        override
    {
        require(_destination != address(0), ""ERROR_ZERO_ADDRESS"");

        require(
            _amount != 0 && attributions[msg.sender] >= _amount,
            ""TRANSFER-ATTRIBUTION_BADCONS""
        );

        unchecked {
            attributions[msg.sender] -= _amount;
        }
        attributions[_destination] += _amount;
    }

    
    function utilize() external override returns (uint256 _amount) {
        require(address(controller) != address(0), ""ERROR_CONTROLLER_NOT_SET"");
        
        address _token = token;
        if (keeper != address(0)) {
            require(msg.sender == keeper, ""ERROR_NOT_KEEPER"");
        }
        _amount = available(); 
        if (_amount != 0) {
            IERC20(_token).safeTransfer(address(controller), _amount);
            balance -= _amount;
            controller.earn(_token, _amount);
        }
    }

    

    function attributionOf(address _target)
        external
        view
        override
        returns (uint256)
    {
        return attributions[_target];
    }

    
    function attributionAll() external view returns (uint256) {
        return totalAttributions;
    }

    
    function attributionValue(uint256 _attribution)
        external
        view
        override
        returns (uint256)
    {
        uint256 _totalAttributions = totalAttributions;

        if (_totalAttributions != 0 && _attribution != 0) {
            return (_attribution * valueAll()) / _totalAttributions;
        }
    }

    
    function underlyingValue(address _target)
        public
        view
        override
        returns (uint256)
    {
        uint256 _valueAll = valueAll();
        uint256 attribution = attributions[_target];

        if (_valueAll != 0 && attribution != 0) {
            return (_valueAll * attribution) / totalAttributions;
        }
    }
    
    function underlyingValue(address _target, uint256 _valueAll)
        public
        view
        returns (uint256)
    {
        uint256 attribution = attributions[_target];
        if (_valueAll != 0 && attribution != 0) {
            return (_valueAll * attribution) / totalAttributions;
        }
    }

    
    function valueAll() public view returns (uint256) {
        if (address(controller) != address(0)) {
            return balance + controller.valueAll();
        } else {
            return balance;
        }
    }

    
    function _unutilize(uint256 _amount) internal {
        require(address(controller) != address(0), ""ERROR_CONTROLLER_NOT_SET"");

        uint256 beforeBalance = IERC20(token).balanceOf(address(this));
        controller.withdraw(address(this), _amount);
        uint256 received = IERC20(token).balanceOf(address(this)) - beforeBalance;
        require(received >= _amount, ""ERROR_INSUFFICIENT_RETURN_VALUE"");
        balance += received;
    }

    
    function available() public view returns (uint256) {
        return balance - totalDebt;
    }

    
    function getPricePerFullShare() external view returns (uint256) {
        return (valueAll() * MAGIC_SCALE_1E6) / totalAttributions;
    }

    

    
    function withdrawRedundant(address _token, address _to)
        external
        override
        onlyOwner
    {
        uint256 _balance = balance;
        uint256 _tokenBalance = IERC20(_token).balanceOf(address(this));
        if (
            _token == token &&
            _balance < _tokenBalance
        ) {
            uint256 _redundant;
            unchecked{
                _redundant = _tokenBalance - _balance;
            }
            IERC20(token).safeTransfer(_to, _redundant);
        } else if (_tokenBalance != 0) {
            IERC20(_token).safeTransfer(
                _to,
                _tokenBalance
            );
        }
    }

    
    function setController(address _controller) external override onlyOwner {
        require(_controller != address(0), ""ERROR_ZERO_ADDRESS"");

        if (address(controller) != address(0)) {
            uint256 beforeUnderlying = controller.valueAll();
            controller.migrate(address(_controller));
            require(IController(_controller).valueAll() >= beforeUnderlying, ""ERROR_VALUE_ALL_DECREASED"");
        }
        controller = IController(_controller);

        emit ControllerSet(_controller);
    }

    
    function setKeeper(address _keeper) external override onlyOwner {
        if (keeper != _keeper) {
            keeper = _keeper;
        }

        emit KeeperChanged(_keeper);
    }
}",2849.0,5,2,"{
  ""Findings"": [
    {
      ""Issue"": ""Potential Reentrancy Vulnerabilities in Withdraw Functions"",
      ""Severity"": ""Critical"",
      ""Description"": ""The `withdrawValue` and `_withdrawAttribution` functions involve external token transfers before updating internal state variables. This sequence can be exploited in a reentrancy attack, allowing malicious actors to repeatedly call these functions before the state is correctly updated."",
      ""Impact"": ""An attacker could potentially drain the contract of its entire balance, leading to significant financial losses."",
      ""Location"": ""Functions `withdrawValue` and `_withdrawAttribution`."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Reentrancy vulnerabilities are well-documented risks in smart contracts. Given the logic and sequence of operations, this finding is both relevant and valid.""
    },
    {
      ""Issue"": ""Improper Access Control on `utilize` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `utilize` function can be called by anyone if the keeper address is not set. This allows unauthorized users to transfer tokens to the controller, potentially leading to misuse or mismanagement of funds."",
      ""Impact"": ""Unauthorized token transfers can disrupt the intended operation and fund management of the vault, leading to potential financial loss."",
      ""Location"": ""Function `utilize` across various line numbers."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding is relevant and valid as it identifies a critical security risk where sensitive operations lack proper access control.""
    },
    {
      ""Issue"": ""Unchecked External Calls"",
      ""Severity"": ""Medium"",
      ""Description"": ""Several functions, such as `utilize`, make unchecked external calls, potentially leading to unexpected behavior if the external contract is malicious or incorrectly implemented."",
      ""Impact"": ""A malicious or compromised contract could manipulate the vault's balance or state, leading to loss of funds or inconsistent state."",
      ""Location"": ""Functions involving unchecked external calls."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Unchecked external calls can lead to significant security vulnerabilities, and ensuring their success is crucial for contract integrity.""
    },
    {
      ""Issue"": ""Lack of Event Emission for Critical State Changes"",
      ""Severity"": ""Low"",
      ""Description"": ""Functions like `addValue`, `withdrawValue`, `transferValue`, and others do not emit events after modifying critical state variables, making it difficult to track these changes off-chain."",
      ""Impact"": ""Without events, monitoring and debugging of the contract's state changes are hindered, potentially obscuring malicious activity or bugs."",
      ""Location"": ""Functions `addValue`, `withdrawValue`, `transferValue`, etc."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Event emissions are crucial for tracking state changes in smart contracts, particularly for auditability and transparency.""
    },
    {
      ""Issue"": ""Zero Address Checks"",
      ""Severity"": ""Low"",
      ""Description"": ""While there are checks for zero addresses in many places, some function parameters lack this validation, which could lead to unintended behavior."",
      ""Impact"": ""Passing zero addresses could result in lost tokens or failed transactions."",
      ""Location"": ""Functions such as `borrowValue`, `repayDebt`, etc."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Ensuring zero address checks is a fundamental practice to prevent unintended contract behaviors or errors.""
    }
  ],
  ""FindingNumber"": 5,
  ""AllRelevance"": 54,
  ""RelevanceCount"": 45,
  ""AllValidation"": 54,
  ""ValidationCount"": 45
}","### **Comparison of Issue Report and Response List**

---

#### **[H-01] Tokens can be burned with no access control**

**Report Description**:  
The `Vault.sol` contract has two address state variables, the `keeper` and `controller`, which are both permitted to be the zero address. If both variables are zero simultaneously, any address can burn the available funds (available funds = balance - totalDebt) by sending these tokens to the zero address with the unprotected `utilize()` function. If a user has no totalDebt, the user can lose their entire underlying token balance because of this.

**Match in Response List**:  
Matches with the issue titled **""Improper Access Control on `utilize` Function""**.

**Validation**:  
**Correct**. The response accurately identifies the issue with improper access control in the `utilize` function. It correctly explains the risks associated with unauthorized token transfers when the `keeper` address is not set, which aligns with the issue described in the report.

---

#### **[H-05] Backdoor in `withdrawRedundant`**

**Report Description**:  
The `Vault.withdrawRedundant` has wrong logic that allows the admins to steal the underlying vault token.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this specific issue, which involves a backdoor in the `withdrawRedundant` function that could allow admins to steal funds.

---

#### **[H-07] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances**

**Report Description**:  
The current design/implementation allows a `market` address (registered on `registry`) to call `Vault#addValue()` and transfer tokens from an arbitrary address to a specified `_beneficiary` up to the approved amount at any time. The `_beneficiary` can withdraw the funds by calling `Vault#withdrawAllAttribution()` immediately. This poses a very dangerous risk to all users that approved their tokens to the Vault contracts (each one holds all users' allowances for that token).

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this issue, which involves a critical design flaw in permission control that could allow malicious actors to steal funds.

---

#### **[H-09] `Vault#setController()` owner of the Vault contracts can drain funds from the Vault**

**Report Description**:  
The `setController()` function allows the owner of the Vault contracts to drain funds from the Vault.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this issue, which involves a critical vulnerability in the `setController()` function that could allow the owner to drain funds.

---

#### **[H-10] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts**

**Report Description**:  
In the `onlyMarket()` modifier, a malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this issue, which involves a critical vulnerability in the `onlyMarket()` modifier that could allow malicious actors to drain funds.

---

#### **[M-01] `repayDebt` in Vault.sol could DOS functionality for markets**

**Report Description**:  
Any user can pay the debt for any borrower in `Vault.sol` using `repayDebt()`. This function allows anyone to repay any amount of borrowed value, up to and including the `totalDebt` value. It works by setting the `debts[_target]` to zero and decreasing `totalDebt` by the given amount, up to zero. However, all debts of the other borrowers are left untouched. If a malicious (but generous) user were to repay the debt for all the borrowers, markets functionality regarding borrowing would be DOSed: the vault would try to decrease the debt of the market, successfully, but would fail to decrease `totalDebt` as it would result in an underflow.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this issue, which involves a potential denial-of-service (DOS) vulnerability in the `repayDebt` function.

---

#### **[M-05] `Vault.sol` Tokens with fee on transfer are not supported**

**Report Description**:  
There are ERC20 tokens that charge a fee for every `transfer()` / `transferFrom()`. `Vault.sol#addValue()` assumes that the received amount is the same as the transfer amount and uses it to calculate attributions, balance amounts, etc. However, the actual transferred amount can be lower for those tokens.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Missed Issue**. The response list does not address this issue, which involves a vulnerability related to tokens with fee-on-transfer mechanisms.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-01] Tokens can be burned with no access control**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-05] Backdoor in `withdrawRedundant`**
- **[H-07] Wrong design/implementation of permission control allows malicious/compromised Registry or Factory admin to steal funds from users' wallet balances**
- **[H-09] `Vault#setController()` owner of the Vault contracts can drain funds from the Vault**
- **[H-10] A malicious/compromised Registry or Factory admin can drain all the funds from the Vault contracts**
- **[M-01] `repayDebt` in Vault.sol could DOS functionality for markets**
- **[M-05] `Vault.sol` Tokens with fee on transfer are not supported**

---

The response list covers only one issue ([H-01]) correctly but misses several critical and medium-severity issues from the issue report. This indicates significant gaps in the coverage of vulnerabilities and risks in the smart contract.",1,0,6,54.0,"```
1. Improper Access Control on `utilize` Function
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the rank of the true positive**:
   - The true positive is ""Improper Access Control on `utilize` Function"".
   - In the ranked list of predictions, this issue appears at **rank 2**.

2. **Calculate the precision at that rank**:
   - Precision at rank 2 (\( P@2 \)) is calculated as the number of true positives up to rank 2 divided by the rank.
   - Since there is only one true positive up to rank 2, \( P@2 = \frac{1}{2} = 0.5 \).

3. **Compute the Average Precision (AP)**:
   - Since there is only one true positive, the AP is simply the precision at its rank.
   - \( AP = 0.5 \).

**Output**:
```
0.5
```"
PoolTemplate.sol,"pragma solidity 0.8.7;

/**
 * @author InsureDAO
 * @title InsureDAO pool template contract
 * SPDX-License-Identifier: GPL-3.0
 */
import ""@openzeppelin/contracts/utils/cryptography/MerkleProof.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"";

import ""./InsureDAOERC20.sol"";
import ""./interfaces/IPoolTemplate.sol"";
import ""./interfaces/IUniversalMarket.sol"";

import ""./interfaces/IParameters.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IIndexTemplate.sol"";

contract PoolTemplate is InsureDAOERC20, IPoolTemplate, IUniversalMarket {
    /**
     * EVENTS
     */
    event Deposit(address indexed depositor, uint256 amount, uint256 mint);
    event WithdrawRequested(
        address indexed withdrawer,
        uint256 amount,
        uint256 time
    );
    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);
    event Unlocked(uint256 indexed id, uint256 amount);
    event Insured(
        uint256 indexed id,
        uint256 amount,
        bytes32 target,
        uint256 startTime,
        uint256 endTime,
        address insured,
        uint256 premium
    );
    event Redeemed(
        uint256 indexed id,
        address insured,
        bytes32 target,
        uint256 amount,
        uint256 payout
    );
    event CoverApplied(
        uint256 pending,
        uint256 payoutNumerator,
        uint256 payoutDenominator,
        uint256 incidentTimestamp,
        bytes32 merkleRoot,
        string rawdata,
        string memo
    );
    event TransferInsurance(uint256 indexed id, address from, address to);
    event CreditIncrease(address indexed depositor, uint256 credit);
    event CreditDecrease(address indexed withdrawer, uint256 credit);
    event MarketStatusChanged(MarketStatus statusValue);
    event Paused(bool paused);
    event MetadataChanged(string metadata);

    /**
     * Storage
     */
    /// @notice Market setting
    bool public initialized;
    bool public override paused;
    string public metadata;

    /// @notice External contract call addresses
    IParameters public parameters;
    IRegistry public registry;
    IVault public vault;

    /// @notice Market variables
    uint256 public attributionDebt; //pool's attribution for indices
    uint256 public override lockedAmount; //Liquidity locked when utilized
    uint256 public override totalCredit; //Liquidity from index
    uint256 public rewardPerCredit; //Times MAGIC_SCALE_1E6. To avoid reward decimal truncation *See explanation below.
    uint256 public pendingEnd; //pending time when paying out

    /// @notice Market variables for margin account
    struct IndexInfo {
        uint256 credit; //How many credit (equal to liquidity) the index has allocated
        uint256 rewardDebt; // Reward debt. *See explanation below.
        bool exist; //true if the index has allocated credit
    }

    mapping(address => IndexInfo) public indicies;
    address[] public indexList;

    //
    // * We do some fancy math for premium calculation of indicies.
    // Basically, any point in time, the amount of premium entitled to an index but is pending to be distributed is:
    //
    //   pending reward = (index.credit * rewardPerCredit) - index.rewardDebt
    //
    // When the pool receives premium, it updates rewardPerCredit
    //
    // Whenever an index deposits, withdraws credit to a pool, Here's what happens:
    //   1. The index receives the pending reward sent to the index vault.
    //   2. The index's rewardDebt get updated.
    //
    // This mechanism is widely used (e.g. SushiSwap: MasterChef.sol)
    //

    ///@notice Market status transition management
    enum MarketStatus {
        Trading,
        Payingout
    }
    MarketStatus public marketStatus;

    ///@notice user's withdrawal status management
    struct Withdrawal {
        uint256 timestamp;
        uint256 amount;
    }
    mapping(address => Withdrawal) public withdrawalReq;

    ///@notice insurance status management
    struct Insurance {
        uint256 id; //each insuance has their own id
        uint256 startTime; //timestamp of starttime
        uint256 endTime; //timestamp of endtime
        uint256 amount; //insured amount
        bytes32 target; //target id in bytes32
        address insured; //the address holds the right to get insured
        bool status; //true if insurance is not expired or redeemed
    }
    mapping(uint256 => Insurance) public insurances;
    uint256 public allInsuranceCount;

    ///@notice incident status management
    struct Incident {
        uint256 payoutNumerator;
        uint256 payoutDenominator;
        uint256 incidentTimestamp;
        bytes32 merkleRoot;
    }
    Incident public incident;

    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation

    modifier onlyOwner() {
        require(
            msg.sender == parameters.getOwner(),
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor() {
        initialized = true;
    }

    /**
     * Initialize interaction
     */

    /**
     * @notice Initialize market
     * This function registers market conditions.
     * references[0] = target governance token address
     * references[1] = underlying token address
     * references[2] = registry
     * references[3] = parameter
     * references[4] = initialDepositor
     * conditions[0] = minimim deposit amount defined by the factory
     * conditions[1] = initial deposit amount defined by the creator
     * @param _metaData arbitrary string to store market information
     * @param _conditions array of conditions
     * @param _references array of references
     */
    function initialize(
        string calldata _metaData,
        uint256[] calldata _conditions,
        address[] calldata _references
    ) external override {
        require(
            initialized == false &&
                bytes(_metaData).length > 0 &&
                _references[0] != address(0) &&
                _references[1] != address(0) &&
                _references[2] != address(0) &&
                _references[3] != address(0) &&
                _references[4] != address(0) &&
                _conditions[0] <= _conditions[1],
            ""ERROR: INITIALIZATION_BAD_CONDITIONS""
        );
        initialized = true;

        string memory _name = string(
            abi.encodePacked(
                ""InsureDAO-"",
                IERC20Metadata(_references[1]).name(),
                ""-PoolInsurance""
            )
        );
        string memory _symbol = string(
            abi.encodePacked(""i-"", IERC20Metadata(_references[1]).symbol())
        );
        uint8 _decimals = IERC20Metadata(_references[0]).decimals();

        initializeToken(_name, _symbol, _decimals);

        registry = IRegistry(_references[2]);
        parameters = IParameters(_references[3]);
        vault = IVault(parameters.getVault(_references[1]));

        metadata = _metaData;

        marketStatus = MarketStatus.Trading;

        if (_conditions[1] > 0) {
            _depositFrom(_conditions[1], _references[4]);
        }
    }

    /**
     * Pool interactions
     */

    /**
     * @notice A liquidity provider supplies tokens to the pool and receives iTokens
     * @param _amount amount of tokens to deposit
     * @return _mintAmount the amount of iTokens minted from the transaction
     */
    function deposit(uint256 _amount) public returns (uint256 _mintAmount) {
        require(
            marketStatus == MarketStatus.Trading && paused == false,
            ""ERROR: DEPOSIT_DISABLED""
        );
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        _mintAmount = worth(_amount);

        vault.addValue(_amount, msg.sender, address(this));

        emit Deposit(msg.sender, _amount, _mintAmount);

        //mint iToken
        _mint(msg.sender, _mintAmount);
    }

    /**
     * @notice Internal deposit function that allows third party to deposit
     * @param _amount amount of tokens to deposit
     * @param _from deposit beneficiary's address
     * @return _mintAmount the amount of iTokens minted from the transaction
     */
    function _depositFrom(uint256 _amount, address _from)
        internal
        returns (uint256 _mintAmount)
    {
        require(
            marketStatus == MarketStatus.Trading && paused == false,
            ""ERROR: DEPOSIT_DISABLED""
        );
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        _mintAmount = worth(_amount);

        vault.addValue(_amount, _from, address(this));

        emit Deposit(_from, _amount, _mintAmount);

        //mint iToken
        _mint(_from, _mintAmount);
    }

    /**
     * @notice A liquidity provider request withdrawal of collateral
     * @param _amount amount of iTokens to burn
     */
    function requestWithdraw(uint256 _amount) external {
        uint256 _balance = balanceOf(msg.sender);
        require(_balance >= _amount, ""ERROR: REQUEST_EXCEED_BALANCE"");
        require(_amount > 0, ""ERROR: REQUEST_ZERO"");
        withdrawalReq[msg.sender].timestamp = block.timestamp;
        withdrawalReq[msg.sender].amount = _amount;
        emit WithdrawRequested(msg.sender, _amount, block.timestamp);
    }

    /**
     * @notice A liquidity provider burns iTokens and receives collateral from the pool
     * @param _amount amount of iTokens to burn
     * @return _retVal the amount underlying tokens returned
     */
    function withdraw(uint256 _amount) external returns (uint256 _retVal) {
        uint256 _supply = totalSupply();
        require(_supply != 0, ""ERROR: NO_AVAILABLE_LIQUIDITY"");

        uint256 _liquidity = originalLiquidity();
        _retVal = (_amount * _liquidity) / _supply;

        require(
            marketStatus == MarketStatus.Trading,
            ""ERROR: WITHDRAWAL_PENDING""
        );
        require(
            withdrawalReq[msg.sender].timestamp +
                parameters.getLockup(msg.sender) <
                block.timestamp,
            ""ERROR: WITHDRAWAL_QUEUE""
        );
        require(
            withdrawalReq[msg.sender].timestamp +
                parameters.getLockup(msg.sender) +
                parameters.getWithdrawable(msg.sender) >
                block.timestamp,
            ""ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST""
        );
        require(
            withdrawalReq[msg.sender].amount >= _amount,
            ""ERROR: WITHDRAWAL_EXCEEDED_REQUEST""
        );
        require(_amount > 0, ""ERROR: WITHDRAWAL_ZERO"");
        require(
            _retVal <= availableBalance(),
            ""ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY""
        );
        //reduce requested amount
        withdrawalReq[msg.sender].amount -= _amount;

        //Burn iToken
        _burn(msg.sender, _amount);

        //Withdraw liquidity
        vault.withdrawValue(_retVal, msg.sender);

        emit Withdraw(msg.sender, _amount, _retVal);
    }

    /**
     * @notice Unlocks an array of insurances
     * @param _ids array of ids to unlock
     */
    function unlockBatch(uint256[] calldata _ids) external {
        for (uint256 i = 0; i < _ids.length; i++) {
            unlock(_ids[i]);
        }
    }

    /**
     * @notice Unlock funds locked in the expired insurance
     * @param _id id of the insurance policy to unlock liquidity
     */
    function unlock(uint256 _id) public {
        require(
            insurances[_id].status == true &&
                marketStatus == MarketStatus.Trading &&
                insurances[_id].endTime + parameters.getGrace(msg.sender) <
                block.timestamp,
            ""ERROR: UNLOCK_BAD_COINDITIONS""
        );
        insurances[_id].status == false;

        lockedAmount = lockedAmount - insurances[_id].amount;

        emit Unlocked(_id, insurances[_id].amount);
    }

    /**
     * Index interactions
     */

    /**
     * @notice Allocate credit from an index. Allocated credits are deemed as equivalent liquidity as real token deposits.
     * @param _credit credit (liquidity amount) to be added to this pool
     * @return _pending pending preium for the caller index
     */

    function allocateCredit(uint256 _credit)
        external
        override
        returns (uint256 _pending)
    {
        require(
            IRegistry(registry).isListed(msg.sender),
            ""ERROR: ALLOCATE_CREDIT_BAD_CONDITIONS""
        );
        IndexInfo storage _index = indicies[msg.sender];
        uint256 _rewardPerCredit = rewardPerCredit;
        if (_index.exist == false) {
            _index.exist = true;
            indexList.push(msg.sender);
        } else if (_index.credit > 0) {
            _pending = _sub(
                (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,
                _index.rewardDebt
            );
            if (_pending > 0) {
                vault.transferAttribution(_pending, msg.sender);
                attributionDebt -= _pending;
            }
        }
        if (_credit > 0) {
            totalCredit += _credit;
            _index.credit += _credit;
            emit CreditIncrease(msg.sender, _credit);
        }
        _index.rewardDebt =
            (_index.credit * _rewardPerCredit) /
            MAGIC_SCALE_1E6;
    }

    /**
     * @notice An index withdraw credit and earn accrued premium
     * @param _credit credit (liquidity amount) to be withdrawn from this pool
     * @return _pending pending preium for the caller index
     */
    function withdrawCredit(uint256 _credit)
        external
        override
        returns (uint256 _pending)
    {
        IndexInfo storage _index = indicies[msg.sender];
        uint256 _rewardPerCredit = rewardPerCredit;
        require(
            IRegistry(registry).isListed(msg.sender) &&
                _index.credit >= _credit &&
                _credit <= availableBalance(),
            ""ERROR: WITHDRAW_CREDIT_BAD_CONDITIONS""
        );

        //calculate acrrued premium
        _pending = _sub(
            (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,
            _index.rewardDebt
        );

        //Withdraw liquidity
        if (_credit > 0) {
            totalCredit -= _credit;
            _index.credit -= _credit;
            emit CreditDecrease(msg.sender, _credit);
        }

        //withdraw acrrued premium
        if (_pending > 0) {
            vault.transferAttribution(_pending, msg.sender);
            attributionDebt -= _pending;
            _index.rewardDebt =
                (_index.credit * _rewardPerCredit) /
                MAGIC_SCALE_1E6;
        }
    }

    /**
     * Insurance interactions
     */

    /**
     * @notice Get insured for the specified amount for specified span
     * @param _amount target amount to get covered
     * @param _maxCost maximum cost to pay for the premium. revert if the premium is higher
     * @param _span length to get covered(e.g. 7 days)
     * @param _target target id
     * @return id of the insurance policy
     */
    function insure(
        uint256 _amount,
        uint256 _maxCost,
        uint256 _span,
        bytes32 _target
    ) external returns (uint256) {
        //Distribute premium and fee
        uint256 _endTime = _span + block.timestamp;
        uint256 _premium = getPremium(_amount, _span);
        uint256 _fee = parameters.getFeeRate(msg.sender);

        require(
            _amount <= availableBalance(),
            ""ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE""
        );
        require(_premium <= _maxCost, ""ERROR: INSURE_EXCEEDED_MAX_COST"");
        require(_span <= 365 days, ""ERROR: INSURE_EXCEEDED_MAX_SPAN"");
        require(
            parameters.getMinDate(msg.sender) <= _span,
            ""ERROR: INSURE_SPAN_BELOW_MIN""
        );

        require(
            marketStatus == MarketStatus.Trading,
            ""ERROR: INSURE_MARKET_PENDING""
        );
        require(paused == false, ""ERROR: INSURE_MARKET_PAUSED"");

        //current liquidity
        uint256 _liquidity = totalLiquidity();
        uint256 _totalCredit = totalCredit;

        //accrue premium/fee
        uint256[2] memory _newAttribution = vault.addValueBatch(
            _premium,
            msg.sender,
            [address(this), parameters.getOwner()],
            [MAGIC_SCALE_1E6 - _fee, _fee]
        );

        //Lock covered amount
        uint256 _id = allInsuranceCount;
        lockedAmount += _amount;
        Insurance memory _insurance = Insurance(
            _id,
            block.timestamp,
            _endTime,
            _amount,
            _target,
            msg.sender,
            true
        );
        insurances[_id] = _insurance;
        allInsuranceCount += 1;

        //Calculate liquidity for index
        if (_totalCredit > 0) {
            uint256 _attributionForIndex = (_newAttribution[0] * _totalCredit) /
                _liquidity;
            attributionDebt += _attributionForIndex;
            rewardPerCredit += ((_attributionForIndex * MAGIC_SCALE_1E6) /
                _totalCredit);
        }

        emit Insured(
            _id,
            _amount,
            _target,
            block.timestamp,
            _endTime,
            msg.sender,
            _premium
        );

        return _id;
    }

    /**
     * @notice Redeem an insurance policy
     * @param _id the id of the insurance policy
     * @param _merkleProof merkle proof (similar to ""verify"" function of MerkleProof.sol of OpenZeppelin
     * Ref: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol
     */
    function redeem(uint256 _id, bytes32[] calldata _merkleProof) external {
        Insurance storage _insurance = insurances[_id];
        require(_insurance.status == true, ""ERROR: INSURANCE_NOT_ACTIVE"");

        uint256 _payoutNumerator = incident.payoutNumerator;
        uint256 _payoutDenominator = incident.payoutDenominator;
        uint256 _incidentTimestamp = incident.incidentTimestamp;
        bytes32 _targets = incident.merkleRoot;

        require(
            marketStatus == MarketStatus.Payingout,
            ""ERROR: NO_APPLICABLE_INCIDENT""
        );
        require(_insurance.insured == msg.sender, ""ERROR: NOT_YOUR_INSURANCE"");
        require(
            marketStatus == MarketStatus.Payingout &&
                _insurance.startTime <= _incidentTimestamp &&
                _insurance.endTime >= _incidentTimestamp,
            ""ERROR: INSURANCE_NOT_APPLICABLE""
        );
        require(
            MerkleProof.verify(
                _merkleProof,
                _targets,
                keccak256(
                    abi.encodePacked(_insurance.target, _insurance.insured)
                )
            ) ||
                MerkleProof.verify(
                    _merkleProof,
                    _targets,
                    keccak256(abi.encodePacked(_insurance.target, address(0)))
                ),
            ""ERROR: INSURANCE_EXEMPTED""
        );
        _insurance.status = false;
        lockedAmount -= _insurance.amount;

        uint256 _payoutAmount = (_insurance.amount * _payoutNumerator) /
            _payoutDenominator;

        vault.borrowValue(_payoutAmount, msg.sender);

        emit Redeemed(
            _id,
            msg.sender,
            _insurance.target,
            _insurance.amount,
            _payoutAmount
        );
    }

    /**
     * @notice Transfers an active insurance
     * @param _id id of the insurance policy
     * @param _to receipient of of the policy
     */
    function transferInsurance(uint256 _id, address _to) external {
        Insurance storage insurance = insurances[_id];

        require(
            _to != address(0) &&
                insurance.insured == msg.sender &&
                insurance.endTime >= block.timestamp &&
                insurance.status == true,
            ""ERROR: INSURANCE_TRANSFER_BAD_CONDITIONS""
        );

        insurance.insured = _to;
        emit TransferInsurance(_id, msg.sender, _to);
    }

    /**
     * @notice Get how much premium for the specified amount and span
     * @param _amount amount to get insured
     * @param _span span to get covered
     */
    function getPremium(uint256 _amount, uint256 _span)
        public
        view
        returns (uint256 premium)
    {
        return
            parameters.getPremium(
                _amount,
                _span,
                totalLiquidity(),
                lockedAmount,
                address(this)
            );
    }

    /**
     * Reporting interactions
     */

    /**
     * @notice Decision to make a payout
     * @param _pending length of time to allow policyholders to redeem their policy
     * @param _payoutNumerator Numerator of the payout *See below
     * @param _payoutDenominator Denominator of the payout *See below
     * @param _incidentTimestamp Unixtimestamp of the incident
     * @param _merkleRoot Merkle root of the payout id list
     * @param _rawdata raw data before the data set is coverted to merkle tree (to be emiｔted within event)
     * @param _memo additional memo for the payout report (to be emmited within event)
     * payout ratio is determined by numerator/denominator (e.g. 50/100 = 50% payout
     */
    function applyCover(
        uint256 _pending,
        uint256 _payoutNumerator,
        uint256 _payoutDenominator,
        uint256 _incidentTimestamp,
        bytes32 _merkleRoot,
        string calldata _rawdata,
        string calldata _memo
    ) external override onlyOwner {
        require(paused == false, ""ERROR: UNABLE_TO_APPLY"");
        incident.payoutNumerator = _payoutNumerator;
        incident.payoutDenominator = _payoutDenominator;
        incident.incidentTimestamp = _incidentTimestamp;
        incident.merkleRoot = _merkleRoot;
        marketStatus = MarketStatus.Payingout;
        pendingEnd = block.timestamp + _pending;
        for (uint256 i = 0; i < indexList.length; i++) {
            if (indicies[indexList[i]].credit > 0) {
                IIndexTemplate(indexList[i]).lock();
            }
        }
        emit CoverApplied(
            _pending,
            _payoutNumerator,
            _payoutDenominator,
            _incidentTimestamp,
            _merkleRoot,
            _rawdata,
            _memo
        );
        emit MarketStatusChanged(marketStatus);
    }

    /**
     * @notice Anyone can resume the market after a pending period ends
     */
    function resume() external {
        require(
            marketStatus == MarketStatus.Payingout &&
                pendingEnd < block.timestamp,
            ""ERROR: UNABLE_TO_RESUME""
        );

        uint256 _debt = vault.debts(address(this));
        uint256 _totalCredit = totalCredit;
        uint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) /
            totalLiquidity();
        uint256 _actualDeduction;
        for (uint256 i = 0; i < indexList.length; i++) {
            address _index = indexList[i];
            uint256 _credit = indicies[_index].credit;
            if (_credit > 0) {
                uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /
                    _totalCredit;
                uint256 _redeemAmount = _divCeil(
                    _deductionFromIndex,
                    _shareOfIndex
                );
                _actualDeduction += IIndexTemplate(_index).compensate(
                    _redeemAmount
                );
            }
        }

        uint256 _deductionFromPool = _debt -
            _deductionFromIndex /
            MAGIC_SCALE_1E6;
        uint256 _shortage = _deductionFromIndex /
            MAGIC_SCALE_1E6 -
            _actualDeduction;

        if (_deductionFromPool > 0) {
            vault.offsetDebt(_deductionFromPool, address(this));
        }

        vault.transferDebt(_shortage);

        marketStatus = MarketStatus.Trading;
        emit MarketStatusChanged(MarketStatus.Trading);
    }

    /**
     * Utilities
     */

    /**
     * @notice Get the exchange rate of LP tokens against underlying asset(scaled by MAGIC_SCALE_1E6)
     * @return The value against the underlying tokens balance.
     */
    function rate() external view returns (uint256) {
        if (totalSupply() > 0) {
            return (originalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();
        } else {
            return 0;
        }
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @param _owner the target address to look up value
     * @return The balance of underlying tokens for the specified address
     */
    function valueOfUnderlying(address _owner)
        public
        view
        override
        returns (uint256)
    {
        uint256 _balance = balanceOf(_owner);
        if (_balance == 0) {
            return 0;
        } else {
            return (_balance * originalLiquidity()) / totalSupply();
        }
    }

    /**
     * @notice Get the accrued value for an index
     * @param _index the address of index
     * @return The pending premium for the specified index
     */
    function pendingPremium(address _index)
        external
        view
        override
        returns (uint256)
    {
        uint256 _credit = indicies[_index].credit;
        if (_credit == 0) {
            return 0;
        } else {
            return
                _sub(
                    (_credit * rewardPerCredit) / MAGIC_SCALE_1E6,
                    indicies[_index].rewardDebt
                );
        }
    }

    /**
     * @notice Get token number for the specified underlying value
     * @param _value amount of iToken
     * @return _amount The balance of underlying tokens for the specified amount
     */
    function worth(uint256 _value) public view returns (uint256 _amount) {
        uint256 _supply = totalSupply();
        uint256 _originalLiquidity = originalLiquidity();
        if (_supply > 0 && _originalLiquidity > 0) {
            _amount = (_value * _supply) / _originalLiquidity;
        } else if (_supply > 0 && _originalLiquidity == 0) {
            _amount = _value * _supply;
        } else {
            _amount = _value;
        }
    }

    /**
     * @notice Get allocated credit
     * @param _index address of an index
     * @return The balance of credit allocated by the specified index
     */
    function allocatedCredit(address _index)
        public
        view
        override
        returns (uint256)
    {
        return indicies[_index].credit;
    }

    /**
     * @notice Returns the amount of underlying tokens available for withdrawals
     * @return _balance available liquidity of this pool
     */
    function availableBalance()
        public
        view
        override
        returns (uint256 _balance)
    {
        if (totalLiquidity() > 0) {
            return totalLiquidity() - lockedAmount;
        } else {
            return 0;
        }
    }

    /**
     * @notice Returns the utilization rate for this pool. Scaled by 1e6 (100% = 1e6)
     * @return _rate utilization rate
     */
    function utilizationRate() public view override returns (uint256 _rate) {
        if (lockedAmount > 0) {
            return (lockedAmount * MAGIC_SCALE_1E6) / totalLiquidity();
        } else {
            return 0;
        }
    }

    /**
     * @notice Pool's Liquidity + Liquidity from Index (how much can the pool sell cover)
     * @return _balance total liquidity of this pool
     */
    function totalLiquidity() public view override returns (uint256 _balance) {
        return originalLiquidity() + totalCredit;
    }

    /**
     * @notice Pool's Liquidity
     * @return _balance total liquidity of this pool
     */
    function originalLiquidity() public view returns (uint256 _balance) {
        return
            vault.underlyingValue(address(this)) -
            vault.attributionValue(attributionDebt);
    }

    /**
     * Admin functions
     */

    /**
     * @notice Used for changing settlementFeeRecipient
     * @param _state true to set paused and vice versa
     */
    function setPaused(bool _state) external override onlyOwner {
        if (paused != _state) {
            paused = _state;
            emit Paused(_state);
        }
    }

    /**
     * @notice Change metadata string
     * @param _metadata new metadata string
     */
    function changeMetadata(string calldata _metadata)
        external
        override
        onlyOwner
    {
        metadata = _metadata;
        emit MetadataChanged(_metadata);
    }

    /**
     * Internal functions
     */

    /**
     * @notice Internal function to offset withdraw request and latest balance
     * @param from the account who send
     * @param to a
     * @param amount the amount of tokens to offset
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        if (from != address(0)) {
            uint256 _after = balanceOf(from) - amount;
            if (_after < withdrawalReq[from].amount) {
                withdrawalReq[from].amount = _after;
            }
        }
    }

    /**
     * @notice Internal function for safe division
     */
    function _divCeil(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        if (a % b != 0) c = c + 1;
        return c;
    }

    /**
     * @notice Internal function for overflow free subtraction
     */
    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a < b) {
            return 0;
        } else {
            return a - b;
        }
    }
}",6686.0,945.0,"[H-02] Typo in PoolTemplate unlock function results in user being able to unlock multiple times
The function `unlock()` in PoolTemplate has a typo where it compares `insurances[_id].status` to `false` rather than setting it to `false`. If the conditions are met to unlock the funds for an id, the user should be able to call the `unlock()` function once for that id as `insurances[_id].amount` is subtracted from `lockedAmount`. However, since `insurances[_id].status` does not get set to false, a user can call unlock() multiple times for the same id, resulting in `lockedAmount` being way smaller than it should be since `insurances[_id].amount` is subtracted multiple times.
  [H-04] Initial pool deposit can be stolen
Note that the `PoolTemplate.initialize` function, called when creating a market with `Factory.createMarket`, calls a vault function to transfer an initial deposit amount (`conditions[1]`) from the initial depositor (`_references[4]`):
 
[H-06] the first depositor to a pool can drain all users
If there is no liquidity in the pool, the first deposit determines the total liquidity, if the amount is too small the minted liquidity for the next liquidity providers will round down to zero.
An attacker can steal all money from liquidity providers.
  [H-11] PoolTemplate.sol#`resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools
Function `resume()`
Wrong arithmetic.
  [M-02] Owner can call `applyCover` multiple times in PoolTemplate.sol
The owner could potentially extend the insurance period indefinitely in the `applyCover` function without ever allowing the market to resume. This is because there is no check in applyCover to ensure that the market is in a Trading state.
This can also allow the owner to emit fraudulent MarketStatusChanged events.
  [M-03] Signature replay
Signature replay in PoolTemplate.
  [M-04] System Debt Is Not Handled When Insurance Pools Become Insolvent
If an incident has occurred where an insurance policy is to be redeemed. The market is put into the `MarketStatus.Payingout` mode where the `_insurance.insured` account is allowed to redeem their cover and receive a payout amount. Upon paying out the insurance cover, any user is able to resume the market by calling `PoolTemplate.resume()`. This function will compensate the insurance pool if it is insolvent by querying `IndexTemplate.compensate()` which in turn queries `CDSTemplate.compensate()` to cover any shortage.
In the event none of these entities are able to cover the shortage in debt, the system accrues the debt. However, there is currently no mechanism to ensure when `transferDebt()` is called in `PoolTemplate.resume()`, the accrued system debt is paid off. Therefore, the system may incorrectly handle insolvency on an extreme edge case, generating system instability.
  [M-07] `requestWithdraw` without obligation to withdraw allow underwriter to avoid payout
To prevent withdrawal front-running, a lockup period is set between withdrawal request and withdrawal. However, there are no obligation to withdraw after the lockup period and the capital will keep earning premium during lockup. A strategy for underwriter is to keep requesting withdrawal every lockup period to keep their average lockup to lockup period/2.
 
[M-08] Unbounded iteration over all indexes (2)
In the function `resume()`, The transactions could fail if the array get too big and the transaction would consume more gas than the block limit. This will then result in a denial of service for the desired functionality and break core functionality.",9.0,"pragma solidity 0.8.7;


import ""@openzeppelin/contracts/utils/cryptography/MerkleProof.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"";

import ""./InsureDAOERC20.sol"";
import ""./interfaces/IPoolTemplate.sol"";
import ""./interfaces/IUniversalMarket.sol"";

import ""./interfaces/IParameters.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IIndexTemplate.sol"";

contract PoolTemplate is InsureDAOERC20, IPoolTemplate, IUniversalMarket {
    
    event Deposit(address indexed depositor, uint256 amount, uint256 mint);
    event WithdrawRequested(
        address indexed withdrawer,
        uint256 amount,
        uint256 time
    );
    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);
    event Unlocked(uint256 indexed id, uint256 amount);
    event Insured(
        uint256 indexed id,
        uint256 amount,
        bytes32 target,
        uint256 startTime,
        uint256 endTime,
        address insured,
        uint256 premium
    );
    event Redeemed(
        uint256 indexed id,
        address insured,
        bytes32 target,
        uint256 amount,
        uint256 payout
    );
    event CoverApplied(
        uint256 pending,
        uint256 payoutNumerator,
        uint256 payoutDenominator,
        uint256 incidentTimestamp,
        bytes32 merkleRoot,
        string rawdata,
        string memo
    );
    event TransferInsurance(uint256 indexed id, address from, address to);
    event CreditIncrease(address indexed depositor, uint256 credit);
    event CreditDecrease(address indexed withdrawer, uint256 credit);
    event MarketStatusChanged(MarketStatus statusValue);
    event Paused(bool paused);
    event MetadataChanged(string metadata);

    
    
    bool public initialized;
    bool public override paused;
    string public metadata;

    
    IParameters public parameters;
    IRegistry public registry;
    IVault public vault;

    
    uint256 public attributionDebt; 
    uint256 public override lockedAmount; 
    uint256 public override totalCredit; 
    uint256 public rewardPerCredit; 
    uint256 public pendingEnd; 

    
    struct IndexInfo {
        uint256 credit; 
        uint256 rewardDebt; 
        bool exist; 
    }

    mapping(address => IndexInfo) public indicies;
    address[] public indexList;

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    enum MarketStatus {
        Trading,
        Payingout
    }
    MarketStatus public marketStatus;

    
    struct Withdrawal {
        uint256 timestamp;
        uint256 amount;
    }
    mapping(address => Withdrawal) public withdrawalReq;

    
    struct Insurance {
        uint256 id; 
        uint256 startTime; 
        uint256 endTime; 
        uint256 amount; 
        bytes32 target; 
        address insured; 
        bool status; 
    }
    mapping(uint256 => Insurance) public insurances;
    uint256 public allInsuranceCount;

    
    struct Incident {
        uint256 payoutNumerator;
        uint256 payoutDenominator;
        uint256 incidentTimestamp;
        bytes32 merkleRoot;
    }
    Incident public incident;

    uint256 public constant MAGIC_SCALE_1E6 = 1e6; 

    modifier onlyOwner() {
        require(
            msg.sender == parameters.getOwner(),
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor() {
        initialized = true;
    }

    

    
    function initialize(
        string calldata _metaData,
        uint256[] calldata _conditions,
        address[] calldata _references
    ) external override {
        require(
            initialized == false &&
                bytes(_metaData).length > 0 &&
                _references[0] != address(0) &&
                _references[1] != address(0) &&
                _references[2] != address(0) &&
                _references[3] != address(0) &&
                _references[4] != address(0) &&
                _conditions[0] <= _conditions[1],
            ""ERROR: INITIALIZATION_BAD_CONDITIONS""
        );
        initialized = true;

        string memory _name = string(
            abi.encodePacked(
                ""InsureDAO-"",
                IERC20Metadata(_references[1]).name(),
                ""-PoolInsurance""
            )
        );
        string memory _symbol = string(
            abi.encodePacked(""i-"", IERC20Metadata(_references[1]).symbol())
        );
        uint8 _decimals = IERC20Metadata(_references[0]).decimals();

        initializeToken(_name, _symbol, _decimals);

        registry = IRegistry(_references[2]);
        parameters = IParameters(_references[3]);
        vault = IVault(parameters.getVault(_references[1]));

        metadata = _metaData;

        marketStatus = MarketStatus.Trading;

        if (_conditions[1] > 0) {
            _depositFrom(_conditions[1], _references[4]);
        }
    }

    

    
    function deposit(uint256 _amount) public returns (uint256 _mintAmount) {
        require(
            marketStatus == MarketStatus.Trading && paused == false,
            ""ERROR: DEPOSIT_DISABLED""
        );
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        _mintAmount = worth(_amount);

        vault.addValue(_amount, msg.sender, address(this));

        emit Deposit(msg.sender, _amount, _mintAmount);

        
        _mint(msg.sender, _mintAmount);
    }

    
    function _depositFrom(uint256 _amount, address _from)
        internal
        returns (uint256 _mintAmount)
    {
        require(
            marketStatus == MarketStatus.Trading && paused == false,
            ""ERROR: DEPOSIT_DISABLED""
        );
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        _mintAmount = worth(_amount);

        vault.addValue(_amount, _from, address(this));

        emit Deposit(_from, _amount, _mintAmount);

        
        _mint(_from, _mintAmount);
    }

    
    function requestWithdraw(uint256 _amount) external {
        uint256 _balance = balanceOf(msg.sender);
        require(_balance >= _amount, ""ERROR: REQUEST_EXCEED_BALANCE"");
        require(_amount > 0, ""ERROR: REQUEST_ZERO"");
        withdrawalReq[msg.sender].timestamp = block.timestamp;
        withdrawalReq[msg.sender].amount = _amount;
        emit WithdrawRequested(msg.sender, _amount, block.timestamp);
    }

    
    function withdraw(uint256 _amount) external returns (uint256 _retVal) {
        uint256 _supply = totalSupply();
        require(_supply != 0, ""ERROR: NO_AVAILABLE_LIQUIDITY"");

        uint256 _liquidity = originalLiquidity();
        _retVal = (_amount * _liquidity) / _supply;

        require(
            marketStatus == MarketStatus.Trading,
            ""ERROR: WITHDRAWAL_PENDING""
        );
        require(
            withdrawalReq[msg.sender].timestamp +
                parameters.getLockup(msg.sender) <
                block.timestamp,
            ""ERROR: WITHDRAWAL_QUEUE""
        );
        require(
            withdrawalReq[msg.sender].timestamp +
                parameters.getLockup(msg.sender) +
                parameters.getWithdrawable(msg.sender) >
                block.timestamp,
            ""ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST""
        );
        require(
            withdrawalReq[msg.sender].amount >= _amount,
            ""ERROR: WITHDRAWAL_EXCEEDED_REQUEST""
        );
        require(_amount > 0, ""ERROR: WITHDRAWAL_ZERO"");
        require(
            _retVal <= availableBalance(),
            ""ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY""
        );
        
        withdrawalReq[msg.sender].amount -= _amount;

        
        _burn(msg.sender, _amount);

        
        vault.withdrawValue(_retVal, msg.sender);

        emit Withdraw(msg.sender, _amount, _retVal);
    }

    
    function unlockBatch(uint256[] calldata _ids) external {
        for (uint256 i = 0; i < _ids.length; i++) {
            unlock(_ids[i]);
        }
    }

    
    function unlock(uint256 _id) public {
        require(
            insurances[_id].status == true &&
                marketStatus == MarketStatus.Trading &&
                insurances[_id].endTime + parameters.getGrace(msg.sender) <
                block.timestamp,
            ""ERROR: UNLOCK_BAD_COINDITIONS""
        );
        insurances[_id].status == false;

        lockedAmount = lockedAmount - insurances[_id].amount;

        emit Unlocked(_id, insurances[_id].amount);
    }

    

    

    function allocateCredit(uint256 _credit)
        external
        override
        returns (uint256 _pending)
    {
        require(
            IRegistry(registry).isListed(msg.sender),
            ""ERROR: ALLOCATE_CREDIT_BAD_CONDITIONS""
        );
        IndexInfo storage _index = indicies[msg.sender];
        uint256 _rewardPerCredit = rewardPerCredit;
        if (_index.exist == false) {
            _index.exist = true;
            indexList.push(msg.sender);
        } else if (_index.credit > 0) {
            _pending = _sub(
                (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,
                _index.rewardDebt
            );
            if (_pending > 0) {
                vault.transferAttribution(_pending, msg.sender);
                attributionDebt -= _pending;
            }
        }
        if (_credit > 0) {
            totalCredit += _credit;
            _index.credit += _credit;
            emit CreditIncrease(msg.sender, _credit);
        }
        _index.rewardDebt =
            (_index.credit * _rewardPerCredit) /
            MAGIC_SCALE_1E6;
    }

    
    function withdrawCredit(uint256 _credit)
        external
        override
        returns (uint256 _pending)
    {
        IndexInfo storage _index = indicies[msg.sender];
        uint256 _rewardPerCredit = rewardPerCredit;
        require(
            IRegistry(registry).isListed(msg.sender) &&
                _index.credit >= _credit &&
                _credit <= availableBalance(),
            ""ERROR: WITHDRAW_CREDIT_BAD_CONDITIONS""
        );

        
        _pending = _sub(
            (_index.credit * _rewardPerCredit) / MAGIC_SCALE_1E6,
            _index.rewardDebt
        );

        
        if (_credit > 0) {
            totalCredit -= _credit;
            _index.credit -= _credit;
            emit CreditDecrease(msg.sender, _credit);
        }

        
        if (_pending > 0) {
            vault.transferAttribution(_pending, msg.sender);
            attributionDebt -= _pending;
            _index.rewardDebt =
                (_index.credit * _rewardPerCredit) /
                MAGIC_SCALE_1E6;
        }
    }

    

    
    function insure(
        uint256 _amount,
        uint256 _maxCost,
        uint256 _span,
        bytes32 _target
    ) external returns (uint256) {
        
        uint256 _endTime = _span + block.timestamp;
        uint256 _premium = getPremium(_amount, _span);
        uint256 _fee = parameters.getFeeRate(msg.sender);

        require(
            _amount <= availableBalance(),
            ""ERROR: INSURE_EXCEEDED_AVAILABLE_BALANCE""
        );
        require(_premium <= _maxCost, ""ERROR: INSURE_EXCEEDED_MAX_COST"");
        require(_span <= 365 days, ""ERROR: INSURE_EXCEEDED_MAX_SPAN"");
        require(
            parameters.getMinDate(msg.sender) <= _span,
            ""ERROR: INSURE_SPAN_BELOW_MIN""
        );

        require(
            marketStatus == MarketStatus.Trading,
            ""ERROR: INSURE_MARKET_PENDING""
        );
        require(paused == false, ""ERROR: INSURE_MARKET_PAUSED"");

        
        uint256 _liquidity = totalLiquidity();
        uint256 _totalCredit = totalCredit;

        
        uint256[2] memory _newAttribution = vault.addValueBatch(
            _premium,
            msg.sender,
            [address(this), parameters.getOwner()],
            [MAGIC_SCALE_1E6 - _fee, _fee]
        );

        
        uint256 _id = allInsuranceCount;
        lockedAmount += _amount;
        Insurance memory _insurance = Insurance(
            _id,
            block.timestamp,
            _endTime,
            _amount,
            _target,
            msg.sender,
            true
        );
        insurances[_id] = _insurance;
        allInsuranceCount += 1;

        
        if (_totalCredit > 0) {
            uint256 _attributionForIndex = (_newAttribution[0] * _totalCredit) /
                _liquidity;
            attributionDebt += _attributionForIndex;
            rewardPerCredit += ((_attributionForIndex * MAGIC_SCALE_1E6) /
                _totalCredit);
        }

        emit Insured(
            _id,
            _amount,
            _target,
            block.timestamp,
            _endTime,
            msg.sender,
            _premium
        );

        return _id;
    }

    
    function redeem(uint256 _id, bytes32[] calldata _merkleProof) external {
        Insurance storage _insurance = insurances[_id];
        require(_insurance.status == true, ""ERROR: INSURANCE_NOT_ACTIVE"");

        uint256 _payoutNumerator = incident.payoutNumerator;
        uint256 _payoutDenominator = incident.payoutDenominator;
        uint256 _incidentTimestamp = incident.incidentTimestamp;
        bytes32 _targets = incident.merkleRoot;

        require(
            marketStatus == MarketStatus.Payingout,
            ""ERROR: NO_APPLICABLE_INCIDENT""
        );
        require(_insurance.insured == msg.sender, ""ERROR: NOT_YOUR_INSURANCE"");
        require(
            marketStatus == MarketStatus.Payingout &&
                _insurance.startTime <= _incidentTimestamp &&
                _insurance.endTime >= _incidentTimestamp,
            ""ERROR: INSURANCE_NOT_APPLICABLE""
        );
        require(
            MerkleProof.verify(
                _merkleProof,
                _targets,
                keccak256(
                    abi.encodePacked(_insurance.target, _insurance.insured)
                )
            ) ||
                MerkleProof.verify(
                    _merkleProof,
                    _targets,
                    keccak256(abi.encodePacked(_insurance.target, address(0)))
                ),
            ""ERROR: INSURANCE_EXEMPTED""
        );
        _insurance.status = false;
        lockedAmount -= _insurance.amount;

        uint256 _payoutAmount = (_insurance.amount * _payoutNumerator) /
            _payoutDenominator;

        vault.borrowValue(_payoutAmount, msg.sender);

        emit Redeemed(
            _id,
            msg.sender,
            _insurance.target,
            _insurance.amount,
            _payoutAmount
        );
    }

    
    function transferInsurance(uint256 _id, address _to) external {
        Insurance storage insurance = insurances[_id];

        require(
            _to != address(0) &&
                insurance.insured == msg.sender &&
                insurance.endTime >= block.timestamp &&
                insurance.status == true,
            ""ERROR: INSURANCE_TRANSFER_BAD_CONDITIONS""
        );

        insurance.insured = _to;
        emit TransferInsurance(_id, msg.sender, _to);
    }

    
    function getPremium(uint256 _amount, uint256 _span)
        public
        view
        returns (uint256 premium)
    {
        return
            parameters.getPremium(
                _amount,
                _span,
                totalLiquidity(),
                lockedAmount,
                address(this)
            );
    }

    

    
    function applyCover(
        uint256 _pending,
        uint256 _payoutNumerator,
        uint256 _payoutDenominator,
        uint256 _incidentTimestamp,
        bytes32 _merkleRoot,
        string calldata _rawdata,
        string calldata _memo
    ) external override onlyOwner {
        require(paused == false, ""ERROR: UNABLE_TO_APPLY"");
        incident.payoutNumerator = _payoutNumerator;
        incident.payoutDenominator = _payoutDenominator;
        incident.incidentTimestamp = _incidentTimestamp;
        incident.merkleRoot = _merkleRoot;
        marketStatus = MarketStatus.Payingout;
        pendingEnd = block.timestamp + _pending;
        for (uint256 i = 0; i < indexList.length; i++) {
            if (indicies[indexList[i]].credit > 0) {
                IIndexTemplate(indexList[i]).lock();
            }
        }
        emit CoverApplied(
            _pending,
            _payoutNumerator,
            _payoutDenominator,
            _incidentTimestamp,
            _merkleRoot,
            _rawdata,
            _memo
        );
        emit MarketStatusChanged(marketStatus);
    }

    
    function resume() external {
        require(
            marketStatus == MarketStatus.Payingout &&
                pendingEnd < block.timestamp,
            ""ERROR: UNABLE_TO_RESUME""
        );

        uint256 _debt = vault.debts(address(this));
        uint256 _totalCredit = totalCredit;
        uint256 _deductionFromIndex = (_debt * _totalCredit * MAGIC_SCALE_1E6) /
            totalLiquidity();
        uint256 _actualDeduction;
        for (uint256 i = 0; i < indexList.length; i++) {
            address _index = indexList[i];
            uint256 _credit = indicies[_index].credit;
            if (_credit > 0) {
                uint256 _shareOfIndex = (_credit * MAGIC_SCALE_1E6) /
                    _totalCredit;
                uint256 _redeemAmount = _divCeil(
                    _deductionFromIndex,
                    _shareOfIndex
                );
                _actualDeduction += IIndexTemplate(_index).compensate(
                    _redeemAmount
                );
            }
        }

        uint256 _deductionFromPool = _debt -
            _deductionFromIndex /
            MAGIC_SCALE_1E6;
        uint256 _shortage = _deductionFromIndex /
            MAGIC_SCALE_1E6 -
            _actualDeduction;

        if (_deductionFromPool > 0) {
            vault.offsetDebt(_deductionFromPool, address(this));
        }

        vault.transferDebt(_shortage);

        marketStatus = MarketStatus.Trading;
        emit MarketStatusChanged(MarketStatus.Trading);
    }

    

    
    function rate() external view returns (uint256) {
        if (totalSupply() > 0) {
            return (originalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();
        } else {
            return 0;
        }
    }

    
    function valueOfUnderlying(address _owner)
        public
        view
        override
        returns (uint256)
    {
        uint256 _balance = balanceOf(_owner);
        if (_balance == 0) {
            return 0;
        } else {
            return (_balance * originalLiquidity()) / totalSupply();
        }
    }

    
    function pendingPremium(address _index)
        external
        view
        override
        returns (uint256)
    {
        uint256 _credit = indicies[_index].credit;
        if (_credit == 0) {
            return 0;
        } else {
            return
                _sub(
                    (_credit * rewardPerCredit) / MAGIC_SCALE_1E6,
                    indicies[_index].rewardDebt
                );
        }
    }

    
    function worth(uint256 _value) public view returns (uint256 _amount) {
        uint256 _supply = totalSupply();
        uint256 _originalLiquidity = originalLiquidity();
        if (_supply > 0 && _originalLiquidity > 0) {
            _amount = (_value * _supply) / _originalLiquidity;
        } else if (_supply > 0 && _originalLiquidity == 0) {
            _amount = _value * _supply;
        } else {
            _amount = _value;
        }
    }

    
    function allocatedCredit(address _index)
        public
        view
        override
        returns (uint256)
    {
        return indicies[_index].credit;
    }

    
    function availableBalance()
        public
        view
        override
        returns (uint256 _balance)
    {
        if (totalLiquidity() > 0) {
            return totalLiquidity() - lockedAmount;
        } else {
            return 0;
        }
    }

    
    function utilizationRate() public view override returns (uint256 _rate) {
        if (lockedAmount > 0) {
            return (lockedAmount * MAGIC_SCALE_1E6) / totalLiquidity();
        } else {
            return 0;
        }
    }

    
    function totalLiquidity() public view override returns (uint256 _balance) {
        return originalLiquidity() + totalCredit;
    }

    
    function originalLiquidity() public view returns (uint256 _balance) {
        return
            vault.underlyingValue(address(this)) -
            vault.attributionValue(attributionDebt);
    }

    

    
    function setPaused(bool _state) external override onlyOwner {
        if (paused != _state) {
            paused = _state;
            emit Paused(_state);
        }
    }

    
    function changeMetadata(string calldata _metadata)
        external
        override
        onlyOwner
    {
        metadata = _metadata;
        emit MetadataChanged(_metadata);
    }

    

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        if (from != address(0)) {
            uint256 _after = balanceOf(from) - amount;
            if (_after < withdrawalReq[from].amount) {
                withdrawalReq[from].amount = _after;
            }
        }
    }

    
    function _divCeil(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        if (a % b != 0) c = c + 1;
        return c;
    }

    
    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a < b) {
            return 0;
        } else {
            return a - b;
        }
    }
}",4787.0,4,5,"{
  ""Findings"": [
    {
      ""Issue"": ""Reentrancy Vulnerabilities in Withdraw and Redeem Functions"",
      ""Severity"": ""High"",
      ""Description"": ""The `withdraw` and `redeem` functions involve external calls to the `vault` contract before updating the state. This pattern can be exploited through reentrancy attacks to drain funds from the contract."",
      ""Impact"": ""An attacker could repeatedly call these functions before the state is updated, resulting in financial loss from unauthorized withdrawals."",
      ""Location"": ""Functions `withdraw` (lines 126-154) and `redeem` (lines 265-293)"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding accurately identifies reentrancy vulnerabilities, which are critical to prevent in functions interacting with external contracts.""
    },
    {
      ""Issue"": ""Lack of Comprehensive Access Control Mechanisms"",
      ""Severity"": ""High"",
      ""Description"": ""Critical functions such as `initialize`, `setPaused`, `changeMetadata`, and `unlock` lack robust access control mechanisms, relying primarily on the `onlyOwner` modifier."",
      ""Impact"": ""If ownership is compromised or functions are called by unauthorized addresses, it could lead to improper contract initialization, pausing, or unauthorized fund manipulation."",
      ""Location"": ""Functions `initialize`, `setPaused`, `changeMetadata`, `unlock`"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""This highlights the importance of ensuring secure access control for critical functions to prevent misuse and security breaches.""
    },
    {
      ""Issue"": ""Improper Handling of External Contract Interactions"",
      ""Severity"": ""High"",
      ""Description"": ""The contract interacts with external contracts (`vault`, `parameters`, and `registry`) without ensuring these interactions are safe, following the Checks-Effects-Interactions pattern."",
      ""Impact"": ""May lead to reentrancy attacks or state inconsistencies, causing unauthorized withdrawal of funds or improper state changes."",
      ""Location"": ""Functions `deposit`, `withdraw`, `allocateCredit`, `withdrawCredit`, `insure`, `redeem`."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Identifies a critical security issue, emphasizing the need for best practices in handling external contract interactions.""
    },
    {
      ""Issue"": ""Inadequate Verification of Merkle Proof in Redeem Function"",
      ""Severity"": ""Critical"",
      ""Description"": ""The `redeem` function's Merkle proof verification lacks robustness, allowing potential unauthorized claims."",
      ""Impact"": ""Unauthorized users may claim payouts, leading to significant financial loss."",
      ""Location"": ""Function `redeem`, MerkleProof verification logic."",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Directly impacts the security of the `redeem` function, ensuring integrity in handling Merkle proofs.""
    },
    {
      ""Issue"": ""Inefficient Loop in UnlockBatch Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `unlockBatch` function iterates over the `_ids` array, calling `unlock` for each element, leading to unnecessary gas consumption."",
      ""Impact"": ""Can result in high transaction costs when dealing with large arrays."",
      ""Location"": ""Function `unlockBatch` defined in lines 351-355"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Identifies an opportunity to optimize gas usage by reducing external calls in batch operations.""
    }
  ],
  ""FindingNumber"": 5,
  ""AllRelevance"": 29,
  ""RelevanceCount"": 25,
  ""AllValidation"": 29,
  ""ValidationCount"": 25
}","### **Comparison of Issue Report and Response List**

---

#### **[H-02] Typo in PoolTemplate unlock function results in user being able to unlock multiple times**

**Report Description**:  
The `unlock()` function in `PoolTemplate` contains a typo where it compares `insurances[_id].status` to `false` instead of setting it to `false`. This allows users to call `unlock()` multiple times for the same `id`, repeatedly subtracting `insurances[_id].amount` from `lockedAmount`. This results in `lockedAmount` being significantly smaller than it should be, leading to potential fund mismanagement.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The typo in the `unlock()` function is a critical vulnerability that allows users to exploit the contract by repeatedly unlocking funds. This oversight is not covered in the response list.

---

#### **[H-04] Initial pool deposit can be stolen**

**Report Description**:  
The `PoolTemplate.initialize` function, called during market creation, transfers an initial deposit amount (`conditions[1]`) from the initial depositor (`_references[4]`). However, there is no mechanism to ensure the deposit is secure, potentially allowing the initial deposit to be stolen.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The lack of security mechanisms in the `initialize` function is a significant vulnerability that could lead to theft of the initial deposit. This issue is not covered in the response list.

---

#### **[H-06] The first depositor to a pool can drain all users**

**Report Description**:  
If there is no liquidity in the pool, the first deposit determines the total liquidity. If the amount is too small, the minted liquidity for subsequent liquidity providers will round down to zero. This allows an attacker to steal all funds from liquidity providers.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The vulnerability related to the first depositor draining funds from liquidity providers is a critical security concern that is not covered in the response list.

---

#### **[H-11] PoolTemplate.sol#`resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools**

**Report Description**:  
The `resume()` function contains incorrect arithmetic, leading to overcompensation of the redeem amount from index pools. This could result in financial losses for the system.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The incorrect arithmetic in the `resume()` function is a critical vulnerability that could lead to financial mismanagement. This issue is not covered in the response list.

---

#### **[M-02] Owner can call `applyCover` multiple times in PoolTemplate.sol**

**Report Description**:  
The owner can call `applyCover` multiple times without ensuring the market is in a `Trading` state. This allows the owner to indefinitely extend the insurance period and emit fraudulent `MarketStatusChanged` events.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The lack of state checks in the `applyCover` function is a significant vulnerability that could lead to misuse by the owner. This issue is not covered in the response list.

---

#### **[M-03] Signature replay**

**Report Description**:  
The contract is vulnerable to signature replay attacks, where a valid signature can be reused to execute unauthorized transactions.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. Signature replay attacks are a critical security concern that is not covered in the response list.

---

#### **[M-04] System Debt Is Not Handled When Insurance Pools Become Insolvent**

**Report Description**:  
When insurance pools become insolvent, the system accrues debt. However, there is no mechanism to ensure the accrued debt is paid off when `transferDebt()` is called in `PoolTemplate.resume()`. This could lead to system instability in extreme cases.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The lack of a mechanism to handle system debt is a significant vulnerability that could lead to financial instability. This issue is not covered in the response list.

---

#### **[M-07] `requestWithdraw` without obligation to withdraw allow underwriter to avoid payout**

**Report Description**:  
Underwriters can repeatedly request withdrawals without actually withdrawing, allowing them to avoid payouts and continue earning premiums during the lockup period.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The ability for underwriters to avoid payouts by repeatedly requesting withdrawals is a significant vulnerability that is not covered in the response list.

---

#### **[M-08] Unbounded iteration over all indexes (2)**

**Report Description**:  
The `resume()` function iterates over all indexes, which could lead to transaction failures if the array becomes too large, exceeding the block gas limit. This results in a denial of service for the desired functionality.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The unbounded iteration in the `resume()` function is a significant vulnerability that could lead to denial of service. This issue is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-02] Typo in PoolTemplate unlock function results in user being able to unlock multiple times**  
- **[H-04] Initial pool deposit can be stolen**  
- **[H-06] The first depositor to a pool can drain all users**  
- **[H-11] PoolTemplate.sol#`resume()` Wrong implementation of `resume()` will compensate overmuch redeem amount from index pools**  
- **[M-02] Owner can call `applyCover` multiple times in PoolTemplate.sol**  
- **[M-03] Signature replay**  
- **[M-04] System Debt Is Not Handled When Insurance Pools Become Insolvent**  
- **[M-07] `requestWithdraw` without obligation to withdraw allow underwriter to avoid payout**  
- **[M-08] Unbounded iteration over all indexes (2)**

---

### **Conclusion**  
The response list does not address any of the issues in the issue report. All issues are either **incorrectly matched** or **missed entirely**. This highlights significant gaps in the response list's coverage of critical vulnerabilities and risks in the Solidity smart contracts.",0,3,6,29.0,"```
None.
```","Since there are no true positives provided in the `true_positives` list, the **Average Precision (AP)** for the query is:

**0.0**"
Factory.sol,"/**
 * @title Factory
 * @author @InsureDAO
 * @notice This contract is the functory contract that manages functions related to market creation activities.
 * SPDX-License-Identifier: GPL-3.0
 */

pragma solidity 0.8.7;

import ""./interfaces/IOwnership.sol"";
import ""./interfaces/IUniversalMarket.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IFactory.sol"";
import ""hardhat/console.sol"";

contract Factory is IFactory {
    event MarketCreated(
        address indexed market,
        address indexed template,
        string _metaData,
        uint256[] conditions,
        address[] references
    );
    event TemplateApproval(
        IUniversalMarket indexed template,
        bool approval,
        bool isOpen,
        bool duplicate
    );
    event ReferenceApproval(
        IUniversalMarket indexed template,
        uint256 indexed slot,
        address target,
        bool approval
    );
    event ConditionApproval(
        IUniversalMarket indexed template,
        uint256 indexed slot,
        uint256 target
    );

    address[] public markets;

    struct Template {
        bool isOpen; //true if the market allows anyone to create a market
        bool approval; //true if the template exists
        bool allowDuplicate; //true if the market with same ID is allowed
    }
    mapping(address => Template) public templates;
    //mapping of authorized market template address

    mapping(address => mapping(uint256 => mapping(address => bool)))
        public reflist;
    //Authorized reference(address) list for market market template
    //Each template has different set of references
    //true if that address is authorized within the template
    // Example reference list for pool template v1
    // references[0] = target governance token address
    // references[1] = underlying token address
    // references[2] = registry
    // references[3] = parameter

    mapping(address => mapping(uint256 => uint256)) public conditionlist;
    //Authorized condition(uint256) list for market temaplate
    //Each template has different set of conditions
    //true if that address is authorized within the template
    // Example condition list for pool template v1
    // conditions[0] = minimim deposit amount

    address public registry;
    IOwnership public ownership;

    modifier onlyOwner() {
        require(
            ownership.owner() == msg.sender,
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor(address _registry, address _ownership) {
        registry = _registry;
        ownership = IOwnership(_ownership);
    }

    /**
     * @notice A function to approve or disapprove templates.
     * Only owner of the contract can operate.
     * @param _template template address, which must be registered
     * @param _approval true if a market is allowed to create based on the template
     * @param _isOpen true if anyone can create a market based on the template
     * @param _duplicate true if a market with duplicate target id is allowed
     */
    function approveTemplate(
        IUniversalMarket _template,
        bool _approval,
        bool _isOpen,
        bool _duplicate
    ) external override onlyOwner {
        require(address(_template) != address(0));
        templates[address(_template)].approval = _approval;
        templates[address(_template)].isOpen = _isOpen;
        templates[address(_template)].allowDuplicate = _duplicate;
        emit TemplateApproval(_template, _approval, _isOpen, _duplicate);
    }

    /**
     * @notice A function to preset reference.
     * Only owner of the contract can operate.
     * @param _template template address, which must be registered
     * @param _slot the index within reference array
     * @param _target the reference  address
     * @param _approval true if the reference is approved
     */
    function approveReference(
        IUniversalMarket _template,
        uint256 _slot,
        address _target,
        bool _approval
    ) external override onlyOwner {
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        reflist[address(_template)][_slot][_target] = _approval;
        emit ReferenceApproval(_template, _slot, _target, _approval);
    }

    /**
     * @notice A function to preset reference.
     * Only owner of the contract can operate.
     * @param _template template address, which must be registered
     * @param _slot the index within condition array
     * @param _target the condition uint
     */
    function setCondition(
        IUniversalMarket _template,
        uint256 _slot,
        uint256 _target
    ) external override onlyOwner {
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        conditionlist[address(_template)][_slot] = _target;
        emit ConditionApproval(_template, _slot, _target);
    }

    /**
     * @notice A function to create markets.
     * This function is market model agnostic.
     * @param _template template address, which must be registered
     * @param _metaData arbitrary string to store market information
     * @param _conditions array of conditions
     * @param _references array of references
     * @return created market address
     */
    function createMarket(
        IUniversalMarket _template,
        string memory _metaData,
        uint256[] memory _conditions,
        address[] memory _references
    ) public override returns (address) {
        //check eligibility
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        if (templates[address(_template)].isOpen == false) {
            require(
                ownership.owner() == msg.sender,
                ""ERROR: UNAUTHORIZED_SENDER""
            );
        }
        if (_references.length > 0) {
            for (uint256 i = 0; i < _references.length; i++) {
                require(
                    reflist[address(_template)][i][_references[i]] == true ||
                        reflist[address(_template)][i][address(0)] == true,
                    ""ERROR: UNAUTHORIZED_REFERENCE""
                );
            }
        }

        if (_conditions.length > 0) {
            for (uint256 i = 0; i < _conditions.length; i++) {
                if (conditionlist[address(_template)][i] > 0) {
                    _conditions[i] = conditionlist[address(_template)][i];
                }
            }
        }

        if (
            IRegistry(registry).confirmExistence(
                address(_template),
                _references[0]
            ) == false
        ) {
            IRegistry(registry).setExistence(
                address(_template),
                _references[0]
            );
        } else {
            if (templates[address(_template)].allowDuplicate == false) {
                revert(""ERROR: DUPLICATE_MARKET"");
            }
        }

        //create market
        IUniversalMarket market = IUniversalMarket(
            _createClone(address(_template))
        );

        IRegistry(registry).supportMarket(address(market));
        
        markets.push(address(market));


        //initialize
        market.initialize(_metaData, _conditions, _references);

        emit MarketCreated(
            address(market),
            address(_template),
            _metaData,
            _conditions,
            _references
        );

        return address(market);
    }

    /**
     * @notice Template Code for the create clone method:
     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1167.md
     */
    function _createClone(address target) internal returns (address result) {
        // convert address to bytes20 for assembly use
        bytes20 targetBytes = bytes20(target);
        assembly {
            // allocate clone memory
            let clone := mload(0x40)
            // store initial portion of the delegation contract code in bytes form
            mstore(
                clone,
                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000
            )
            // store the provided address
            mstore(add(clone, 0x14), targetBytes)
            // store the remaining delegation contract code
            mstore(
                add(clone, 0x28),
                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000
            )
            // create the actual delegate contract reference and return its address
            result := create(0, clone, 0x37)
        }
    }
}",1839.0,259.0,"[H-03] Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts
The current method of market creation involves calling `Factory.createMarket()` with a list of approved `_conditions` and `_references` accounts. If a registered template address has `templates[address(_template)].isOpen == true`, then any user is able to call `createMarket()` using this template. If the template points to PoolTemplate.sol, then a malicious market creator can abuse `PoolTemplate.initialize()` as it makes a vault deposit from an account that they control. The vulnerable internal function, `_depositFrom()`, makes a vault deposit from the `_references[4]` address (arbitrarily set to an approved reference address upon market creation).
Hence, if approved `_references` accounts have set an unlimited approval amount for Vault.sol before deploying their market, a malicious user can frontrun market creation and cause these tokens to be transferred to the incorrect market.
This issue can cause honest market creators to have their tokens transferred to an incorrectly configured market, leading to unrecoverable funds. If their approval to Vault.sol was set to the unlimited amount, malicious users will also be able to force honest market creators to transfer more tokens than they would normally want to allow.",1.0,"pragma solidity 0.8.7;

import ""./interfaces/IOwnership.sol"";
import ""./interfaces/IUniversalMarket.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IFactory.sol"";
import ""hardhat/console.sol"";

contract Factory is IFactory {
    event MarketCreated(
        address indexed market,
        address indexed template,
        string _metaData,
        uint256[] conditions,
        address[] references
    );
    event TemplateApproval(
        IUniversalMarket indexed template,
        bool approval,
        bool isOpen,
        bool duplicate
    );
    event ReferenceApproval(
        IUniversalMarket indexed template,
        uint256 indexed slot,
        address target,
        bool approval
    );
    event ConditionApproval(
        IUniversalMarket indexed template,
        uint256 indexed slot,
        uint256 target
    );

    address[] public markets;

    struct Template {
        bool isOpen; 
        bool approval; 
        bool allowDuplicate; 
    }
    mapping(address => Template) public templates;
    

    mapping(address => mapping(uint256 => mapping(address => bool)))
        public reflist;
    
    
    
    
    
    
    
    

    mapping(address => mapping(uint256 => uint256)) public conditionlist;
    
    
    
    
    

    address public registry;
    IOwnership public ownership;

    modifier onlyOwner() {
        require(
            ownership.owner() == msg.sender,
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor(address _registry, address _ownership) {
        registry = _registry;
        ownership = IOwnership(_ownership);
    }

    
    function approveTemplate(
        IUniversalMarket _template,
        bool _approval,
        bool _isOpen,
        bool _duplicate
    ) external override onlyOwner {
        require(address(_template) != address(0));
        templates[address(_template)].approval = _approval;
        templates[address(_template)].isOpen = _isOpen;
        templates[address(_template)].allowDuplicate = _duplicate;
        emit TemplateApproval(_template, _approval, _isOpen, _duplicate);
    }

    
    function approveReference(
        IUniversalMarket _template,
        uint256 _slot,
        address _target,
        bool _approval
    ) external override onlyOwner {
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        reflist[address(_template)][_slot][_target] = _approval;
        emit ReferenceApproval(_template, _slot, _target, _approval);
    }

    
    function setCondition(
        IUniversalMarket _template,
        uint256 _slot,
        uint256 _target
    ) external override onlyOwner {
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        conditionlist[address(_template)][_slot] = _target;
        emit ConditionApproval(_template, _slot, _target);
    }

    
    function createMarket(
        IUniversalMarket _template,
        string memory _metaData,
        uint256[] memory _conditions,
        address[] memory _references
    ) public override returns (address) {
        
        require(
            templates[address(_template)].approval == true,
            ""ERROR: UNAUTHORIZED_TEMPLATE""
        );
        if (templates[address(_template)].isOpen == false) {
            require(
                ownership.owner() == msg.sender,
                ""ERROR: UNAUTHORIZED_SENDER""
            );
        }
        if (_references.length > 0) {
            for (uint256 i = 0; i < _references.length; i++) {
                require(
                    reflist[address(_template)][i][_references[i]] == true ||
                        reflist[address(_template)][i][address(0)] == true,
                    ""ERROR: UNAUTHORIZED_REFERENCE""
                );
            }
        }

        if (_conditions.length > 0) {
            for (uint256 i = 0; i < _conditions.length; i++) {
                if (conditionlist[address(_template)][i] > 0) {
                    _conditions[i] = conditionlist[address(_template)][i];
                }
            }
        }

        if (
            IRegistry(registry).confirmExistence(
                address(_template),
                _references[0]
            ) == false
        ) {
            IRegistry(registry).setExistence(
                address(_template),
                _references[0]
            );
        } else {
            if (templates[address(_template)].allowDuplicate == false) {
                revert(""ERROR: DUPLICATE_MARKET"");
            }
        }

        
        IUniversalMarket market = IUniversalMarket(
            _createClone(address(_template))
        );

        IRegistry(registry).supportMarket(address(market));
        
        markets.push(address(market));


        
        market.initialize(_metaData, _conditions, _references);

        emit MarketCreated(
            address(market),
            address(_template),
            _metaData,
            _conditions,
            _references
        );

        return address(market);
    }

    
    function _createClone(address target) internal returns (address result) {
        
        bytes20 targetBytes = bytes20(target);
        assembly {
            
            let clone := mload(0x40)
            
            mstore(
                clone,
                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000
            )
            
            mstore(add(clone, 0x14), targetBytes)
            
            mstore(
                add(clone, 0x28),
                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000
            )
            
            result := create(0, clone, 0x37)
        }
    }
}",1212.0,1,0,"{
  ""Findings"": [
    {
      ""Issue"": ""Potential Reentrancy Vulnerability in Market Creation"",
      ""Severity"": ""High"",
      ""Description"": ""The `createMarket` function involves multiple external calls and state modifications without a reentrancy guard. This can allow reentrant calls, potentially leading to unauthorized market creation or manipulation of state variables."",
      ""Impact"": ""Reentrancy attacks could lead to unauthorized market creation, state manipulation, and potential financial loss."",
      ""Location"": ""Function `createMarket`, lines 92-204"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding is relevant as it highlights a critical security vulnerability common in Ethereum smart contracts. Implementing reentrancy protection (e.g., using ReentrancyGuard) would mitigate this risk.""
    },
    {
      ""Issue"": ""Improper Validation of Template Address"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `approveTemplate` function does not adequately validate if the `_template` address is a valid contract address. This could lead to incorrect template approvals, potentially allowing malicious or unintended market creations."",
      ""Impact"": ""Allowing invalid or malicious templates could compromise the security and integrity of markets created using these templates."",
      ""Location"": ""Function `approveTemplate`, lines 53-77"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Verifying contract addresses is a standard security practice to prevent misuse, making this finding relevant and valid.""
    },
    {
      ""Issue"": ""Unchecked External Calls and Return Values"",
      ""Severity"": ""Medium"",
      ""Description"": ""Functions like `createMarket` rely on external calls without checking return values. Unchecked calls may lead to incorrect operations, such as unauthorized market creations or failure to detect duplicates."",
      ""Impact"": ""If external contracts behave unexpectedly or are compromised, it could result in incorrect market states, unauthorized actions, and potential security risks."",
      ""Location"": ""Functions `createMarket`, `approveTemplate`, lines 101-154"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Unchecked external calls are a common security issue and checking return values is crucial for contract integrity.""
    },
    {
      ""Issue"": ""Potential for Duplicate Market Creation"",
      ""Severity"": ""Medium"",
      ""Description"": ""The logic for preventing duplicate markets relies on the `allowDuplicate` flag, which may not fully protect against race conditions or provide comprehensive duplicate detection."",
      ""Impact"": ""This could result in unintended duplicate markets, leading to inconsistencies and possible financial discrepancies."",
      ""Location"": ""Function `createMarket`, lines 109-164"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The finding is relevant as it points out potential race conditions that could affect market integrity.""
    },
    {
      ""Issue"": ""Use of Low-level Assembly for Clone Creation"",
      ""Severity"": ""Low"",
      ""Description"": ""The `_createClone` function uses inline assembly, which can be error-prone and harder to audit, increasing complexity and risk of subtle bugs."",
      ""Impact"": ""Increased risk of undetected bugs or security issues due to the complexity of assembly code."",
      ""Location"": ""Function `_createClone`, lines 145-197"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""The use of assembly is a known pattern, but the complexity and difficulty of debugging justify the identification of this issue.""
    },
    {
      ""Issue"": ""Lack of Event Emission After State Changes"",
      ""Severity"": ""Low"",
      ""Description"": ""Critical state changes, such as modifications to `reflist` and `conditionlist`, lack event emission, which could hinder tracking and auditing of state changes."",
      ""Impact"": ""Without events, it can be challenging to detect or audit unauthorized changes, potentially concealing malicious activity or errors."",
      ""Location"": ""Functions `approveReference`, `setCondition`, lines 77-104"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Event emissions are important for transparency and auditing purposes, making this finding relevant.""
    }
  ],
  ""FindingNumber"": 6,
  ""AllRelevance"": 69,
  ""RelevanceCount"": 51,
  ""AllValidation"": 69,
  ""ValidationCount"": 51
}","---

**[H-03] Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts**

**Report Description**:
The `Factory.createMarket()` function allows any user to create a market using a registered template if `templates[address(_template)].isOpen == true`. If the template points to `PoolTemplate.sol`, a malicious market creator can abuse the `PoolTemplate.initialize()` function to make a vault deposit from an account they control. The vulnerable internal function, `_depositFrom()`, deposits tokens from the `_references[4]` address, which is arbitrarily set to an approved reference address during market creation. If approved `_references` accounts have set unlimited approval amounts for `Vault.sol`, a malicious user can frontrun market creation and transfer tokens to an incorrect market. This can lead to unrecoverable funds and allow malicious users to force honest market creators to transfer more tokens than intended.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the specific issue of malicious market creators exploiting approved reference accounts to steal tokens. While the response list includes findings related to reentrancy, template validation, unchecked external calls, and duplicate market creation, none of these directly address the vulnerability described in the issue report. The issue involves improper access control and token transfer risks, which are not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-03] Malicious Market Creators Can Steal Tokens From Unsuspecting Approved Reference Accounts**

---",0,0,1,69.0,"```
None.
```",0.0
IndexTemplate.sol,"pragma solidity 0.8.7;
/**
 * @author InsureDAO
 * @title InsureDAO market template contract
 * SPDX-License-Identifier: GPL-3.0
 */
 import ""hardhat/console.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"";

import ""./InsureDAOERC20.sol"";
import ""./interfaces/IIndexTemplate.sol"";
import ""./interfaces/IUniversalMarket.sol"";

import ""./interfaces/IVault.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IParameters.sol"";
import ""./interfaces/IPoolTemplate.sol"";
import ""./interfaces/ICDSTemplate.sol"";

/**
 * An index pool can index a certain number of pools with leverage.
 *
 * Index A
 * 　├ Pool A
 * 　├ Pool B
 * 　├ Pool C
 * 　...
 *
 */

contract IndexTemplate is InsureDAOERC20, IIndexTemplate, IUniversalMarket {
    /**
     * EVENTS
     */
    event Deposit(address indexed depositor, uint256 amount, uint256 mint);
    event WithdrawRequested(
        address indexed withdrawer,
        uint256 amount,
        uint256 time
    );
    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);
    event Compensated(address indexed index, uint256 amount);
    event Paused(bool paused);
    event Resumed();
    event Locked();
    event MetadataChanged(string metadata);
    event LeverageSet(uint256 target);
    event AllocationSet(
        uint256 indexed _index,
        address indexed pool,
        uint256 allocPoint
    );

    /**
     * Storage
     */
    /// @notice Market setting
    bool public initialized;
    bool public paused;
    bool public locked;
    uint256 public pendingEnd;
    string public metadata;

    /// @notice External contract call addresses
    IParameters public parameters;
    IVault public vault;
    IRegistry public registry;

    /// @notice Market variables for margin account
    uint256 public totalAllocatedCredit; //total allocated credit(liquidity)
    mapping(address => uint256) public allocPoints; //allocation point for each pool
    uint256 public totalAllocPoint; //total allocation point
    address[] public poolList; //list of all pools
    uint256 public targetLev; //1x = MAGIC_SCALE_1E6
    //The allocated credits are deemed as liquidity in each underlying pool
    //Credit amount(liquidity) will be determined by the following math
    //credit for a pool = total liquidity of this pool * leverage rate * allocation point for a pool / total allocation point

    ///@notice user status management
    struct Withdrawal {
        uint256 timestamp;
        uint256 amount;
    }
    mapping(address => Withdrawal) public withdrawalReq;

    struct PoolStatus {
        uint256 current;
        uint256 available;
        uint256 allocation;
        address addr;
    }

    ///@notice magic numbers
    uint256 public constant MAGIC_SCALE_1E6 = 1e6; //internal multiplication scale 1e6 to reduce decimal truncation

    /**
     * @notice Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(
            msg.sender == parameters.getOwner(),
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor() {
        initialized = true;
    }

    /**
     * Initialize interaction
     */

    /**
     * @notice Initialize market
     * This function registers market conditions.
     * references[0] = underlying token address
     * references[1] = registry
     * references[2] = parameter
     * @param _metaData arbitrary string to store market information
     * @param _conditions array of conditions
     * @param _references array of references
     */
    function initialize(
        string calldata _metaData,
        uint256[] calldata _conditions,
        address[] calldata _references
    ) external override {
        require(
            initialized == false &&
                bytes(_metaData).length > 0 &&
                _references[0] != address(0) &&
                _references[1] != address(0) &&
                _references[2] != address(0),
            ""ERROR: INITIALIZATION_BAD_CONDITIONS""
        );

        initialized = true;

        string memory _name = ""InsureDAO-Index"";
        string memory _symbol = ""iIndex"";
        uint8 _decimals = IERC20Metadata(_references[0]).decimals();

        initializeToken(_name, _symbol, _decimals);

        parameters = IParameters(_references[2]);
        vault = IVault(parameters.getVault(_references[0]));
        registry = IRegistry(_references[1]);

        metadata = _metaData;
    }

    /**
     * Pool interactions
     */

    /**
     * @notice A liquidity provider supplies collateral to the pool and receives iTokens
     * @param _amount amount of token to deposit
     * @return _mintAmount the amount of iToken minted from the transaction
     */
    function deposit(uint256 _amount) public returns (uint256 _mintAmount) {
        require(locked == false && paused == false, ""ERROR: DEPOSIT_DISABLED"");
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        uint256 _supply = totalSupply();
        uint256 _totalLiquidity = totalLiquidity();
        vault.addValue(_amount, msg.sender, address(this));

        if (_supply > 0 && _totalLiquidity > 0) {
            _mintAmount = (_amount * _supply) / _totalLiquidity;
        } else if (_supply > 0 && _totalLiquidity == 0) {
            //when
            _mintAmount = _amount * _supply;
        } else {
            _mintAmount = _amount;
        }
        emit Deposit(msg.sender, _amount, _mintAmount);
        //mint iToken
        _mint(msg.sender, _mintAmount);
        uint256 _liquidityAfter = _totalLiquidity + _amount;
        uint256 _leverage = (totalAllocatedCredit * MAGIC_SCALE_1E6) /
            _liquidityAfter;
        //execut adjustAlloc only when the leverage became below target - lower-slack
        if (targetLev - parameters.getLowerSlack(address(this)) > _leverage) {
            _adjustAlloc(_liquidityAfter);
        }
    }

    /**
     * @notice A liquidity provider requests withdrawal of collateral
     * @param _amount amount of iToken to burn
     */
    function requestWithdraw(uint256 _amount) external {
        uint256 _balance = balanceOf(msg.sender);
        require(_balance >= _amount, ""ERROR: REQUEST_EXCEED_BALANCE"");
        require(_amount > 0, ""ERROR: REQUEST_ZERO"");
        withdrawalReq[msg.sender].timestamp = block.timestamp;
        withdrawalReq[msg.sender].amount = _amount;
        emit WithdrawRequested(msg.sender, _amount, block.timestamp);
    }

    /**
     * @notice A liquidity provider burns iToken and receives collateral from the pool
     * @param _amount amount of iToken to burn
     * @return _retVal the amount underlying token returned
     */
    function withdraw(uint256 _amount) external returns (uint256 _retVal) {
        //Calculate underlying value

        uint256 _liquidty = totalLiquidity();
        uint256 _lockup = parameters.getLockup(msg.sender);
        uint256 _requestTime = withdrawalReq[msg.sender].timestamp;
        _retVal = (_liquidty * _amount) / totalSupply();
        require(locked == false, ""ERROR: WITHDRAWAL_PENDING"");
        require(
            _requestTime + _lockup < block.timestamp,
            ""ERROR: WITHDRAWAL_QUEUE""
        );
        require(
            _requestTime + _lockup + parameters.getWithdrawable(msg.sender) >
                block.timestamp,
            ""ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST""
        );
        require(
            withdrawalReq[msg.sender].amount >= _amount,
            ""ERROR: WITHDRAWAL_EXCEEDED_REQUEST""
        );
        require(_amount > 0, ""ERROR: WITHDRAWAL_ZERO"");

        require(
            _retVal <= withdrawable(),
            ""ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY""
        );

        //reduce requested amount
        withdrawalReq[msg.sender].amount -= _amount;
        //Burn iToken
        _burn(msg.sender, _amount);

        //Check current leverage rate and get updated target total credit allocation
        uint256 _liquidityAfter = _liquidty - _retVal;

        if (_liquidityAfter > 0) {
            uint256 _leverage = (totalAllocatedCredit * MAGIC_SCALE_1E6) /
                _liquidityAfter;
            //execute adjustAlloc only when the leverage became above target + upper-slack
            if (
                targetLev + parameters.getUpperSlack(address(this)) < _leverage
            ) {
                _adjustAlloc(_liquidityAfter);
            }
        } else {
            _adjustAlloc(0);
        }

        //Withdraw liquidity
        vault.withdrawValue(_retVal, msg.sender);

        emit Withdraw(msg.sender, _amount, _retVal);
    }

    /**
     * @notice Get how much can a user withdraw from this index
     * Withdrawable amount = Index liquidity - necessary amount to support credit liquidity
     * Necessary amoount Locked * totalAllocPoint / allocpoint of the lowest available liquidity market
     * Otherwise, the allocation to a specific pool may take up the overall allocation, and may break the risk sharing.
     * @return _retVal withdrawable amount
     */
    function withdrawable() public view returns (uint256 _retVal) {
        uint256 _totalLiquidity = totalLiquidity();
        if(_totalLiquidity > 0){
            uint256 _length = poolList.length;
            uint256 _lowestAvailableRate = MAGIC_SCALE_1E6;
            uint256 _targetAllocPoint;
            uint256 _targetLockedCreditScore;
            //Check which pool has the lowest available rate and keep stats
            for (uint256 i = 0; i < _length; i++) {
                address _poolAddress = poolList[i];
                uint256 _allocPoint = allocPoints[_poolAddress];
                if (_allocPoint > 0) {
                    uint256 _allocated = IPoolTemplate(_poolAddress)
                        .allocatedCredit(address(this));
                    uint256 _availableBalance = IPoolTemplate(_poolAddress)
                        .availableBalance();
                    //check if some portion of credit is locked
                    if (_allocated > _availableBalance) {
                        uint256 _availableRate = (_availableBalance *
                            MAGIC_SCALE_1E6) / _allocated;
                        uint256 _lockedCredit = _allocated - _availableBalance;
                        if (i == 0 || _availableRate < _lowestAvailableRate) {
                            _lowestAvailableRate = _availableRate;
                            _targetLockedCreditScore = _lockedCredit;
                            _targetAllocPoint = _allocPoint;
                        }
                    }
                }
            }
            //Calculate the return value
            if (_lowestAvailableRate == MAGIC_SCALE_1E6) {
                _retVal = _totalLiquidity;
            } else {
                uint256 _necessaryAmount = _targetLockedCreditScore * totalAllocPoint /  _targetAllocPoint;
                _necessaryAmount = _necessaryAmount *  MAGIC_SCALE_1E6 / targetLev;
                if(_necessaryAmount < _totalLiquidity){
                    _retVal = _totalLiquidity - _necessaryAmount;
                }else{
                    _retVal = 0;
                }
            }
        }
    }

    /**
     * @notice Adjust allocation of credit based on the target leverage rate
     */
    function adjustAlloc() public {
        _adjustAlloc(totalLiquidity());
    }

    /**
     * @notice Internal function to adjust allocation
     * @param _liquidity available liquidity of the index
     * Allocation adjustment of credit is done by the following steps
     * 1)Check total allocatable balance of the index
     * 2)Calculate ideal allocation for each pool
     * 3)Check Current allocated balance for each pool
     * 4)Adjust (withdraw/deposit) allocation for each Pool*
     *
     * Liquidity in pool may be locked and cannot withdraw. In that case, the index try to withdraw all available liquidity first,
     * then recalculated available balance and iterate 1)~4) for the remaining.
     *
     * The index may allocate credit beyond the share settings to maintain the leverage rate not to surpass the leverage setting.
     *
     * Along with adjustment the index clears accrued premiums in underlying pools to this pool during allocation.
     */
    function _adjustAlloc(uint256 _liquidity) internal {
        //Check current leverage rate and get target total credit allocation
        uint256 _targetCredit = (targetLev * _liquidity) / MAGIC_SCALE_1E6;
        uint256 _allocatable = _targetCredit;
        uint256 _allocatablePoints = totalAllocPoint;
        uint256 _length = poolList.length;
        PoolStatus[] memory _poolList = new PoolStatus[](_length);

        //Check each pool and if current credit allocation > target && it is impossible to adjust, then withdraw all availablle credit
        for (uint256 i = 0; i < _length; i++) {
            address _pool = poolList[i];
            if (_pool != address(0)) {
                uint256 _allocation = allocPoints[_pool];
                //Target credit allocation for a pool
                uint256 _target = (_targetCredit * _allocation) /
                    _allocatablePoints;
                //get how much has been allocated for a pool
                uint256 _current = IPoolTemplate(_pool).allocatedCredit(
                    address(this)
                );
                //get how much liquidty is available to withdraw
                uint256 _available = IPoolTemplate(_pool).availableBalance();
                //if needed to withdraw credit but unable, then withdraw all available.
                //Otherwise, skip.
                if (
                    (_current > _target && _current - _target > _available) ||
                    IPoolTemplate(_pool).paused() == true
                ) {
                    IPoolTemplate(_pool).withdrawCredit(_available);
                    totalAllocatedCredit -= _available;
                    _poolList[i].addr = address(0);
                    _allocatable -= _current - _available;
                    _allocatablePoints -= _allocation;
                } else {
                    _poolList[i].addr = _pool;
                    _poolList[i].current = _current;
                    _poolList[i].available = _available;
                    _poolList[i].allocation = _allocation;
                }
            }
        }
        //Check pools that was not falling under the previous criteria, then adjust to meet the target credit allocation.
        for (uint256 i = 0; i < _length; i++) {
            if (_poolList[i].addr != address(0)) {
                //Target credit allocation for a pool
                uint256 _target = (_allocatable * _poolList[i].allocation) /
                    _allocatablePoints;
                //get how much has been allocated for a pool
                uint256 _current = _poolList[i].current;
                //get how much liquidty is available to withdraw
                uint256 _available = _poolList[i].available;
                //Withdraw or Deposit credit
                if (_current > _target && _available != 0) {
                    //if allocated credit is higher than the target, try to decrease
                    uint256 _decrease = _current - _target;
                    IPoolTemplate(_poolList[i].addr).withdrawCredit(_decrease);
                    totalAllocatedCredit -= _decrease;
                }
                if (_current < _target) {
                    //Sometimes we need to allocate more
                    uint256 _allocate = _target - _current;
                    IPoolTemplate(_poolList[i].addr).allocateCredit(_allocate);
                    totalAllocatedCredit += _allocate;
                }
                if (_current == _target) {
                    IPoolTemplate(_poolList[i].addr).allocateCredit(0);
                }
            }
        }
    }

    /**
     * Insurance interactions
     */

    /**
     * @notice Make a payout if an accident occured in a underlying pool
     * @param _amount amount of liquidity to compensate for the called pool
     * We compensate underlying pools by the following steps
     * 1) Compensate underlying pools from the liquidity of this pool
     * 2) If this pool is unable to cover a compensation, can get compensated from the CDS pool
     */
    function compensate(uint256 _amount)
        external
        override
        returns (uint256 _compensated)
    {
        require(
            allocPoints[msg.sender] > 0,
            ""ERROR_COMPENSATE_UNAUTHORIZED_CALLER""
        );
        uint256 _value = vault.underlyingValue(address(this));
        if (_value >= _amount) {
            //When the deposited value without earned premium is enough to cover
            vault.offsetDebt(_amount, msg.sender);
            //vault.transferValue(_amount, msg.sender);
            _compensated = _amount;
        } else {
            //Withdraw credit to cashout the earnings
            uint256 _shortage;
            if (totalLiquidity() < _amount) {
                //Insolvency case
                _shortage = _amount - _value;
                uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))
                    .compensate(_shortage);
                _compensated = _value + _cds;
            }
            vault.offsetDebt(_compensated, msg.sender);
        }
        adjustAlloc();
        emit Compensated(msg.sender, _compensated);
    }

    /**
     * Reporting interactions
     */

    /**
     * @notice Resume market
     */
    function resume() external override {
        uint256 _poolLength = poolList.length;

        for (uint256 i = 0; i < _poolLength; i++) {
            require(
                IPoolTemplate(poolList[i]).paused() == false,
                ""ERROR: POOL_IS_PAUSED""
            );
        }

        locked = false;
        emit Resumed();
    }

    /**
     * @notice lock market withdrawal
     */
    function lock() external override {
        require(allocPoints[msg.sender] > 0);

        locked = true;
        emit Locked();
    }

    /**
     * Utilities
     */

    /**
     * @notice get the current leverage rate 1e6x
     * @return _rate leverage rate
     */
    function leverage() public view returns (uint256 _rate) {
        //check current leverage rate
        if (totalLiquidity() > 0) {
            return (totalAllocatedCredit * MAGIC_SCALE_1E6) / totalLiquidity();
        } else {
            return 0;
        }
    }

    /**
     * @notice total Liquidity of the pool (how much can the pool sell cover)
     * @return _balance total liquidity of the pool
     */
    function totalLiquidity() public view returns (uint256 _balance) {
        return vault.underlyingValue(address(this)) + _accruedPremiums();
    }

    /**
     * @notice Get the exchange rate of LP token against underlying asset(scaled by MAGIC_SCALE_1E6)
     * @return The value against the underlying token balance.
     */
    function rate() external view returns (uint256) {
        if (totalSupply() > 0) {
            return (totalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();
        } else {
            return 0;
        }
    }

    /**
     * @notice Get the underlying balance of the `owner`
     * @param _owner the target address to look up value
     * @return The balance of underlying token for the specified address
     */
    function valueOfUnderlying(address _owner) public view returns (uint256) {
        uint256 _balance = balanceOf(_owner);
        if (_balance == 0) {
            return 0;
        } else {
            return (_balance * totalLiquidity()) / totalSupply();
        }
    }

    /**
     * @notice Get all underlying pools
     * @return pool array
     */
    function getAllPools() external view returns (address[] memory) {
        return poolList;
    }

    /**
     * Admin functions
     */

    /**
     * @notice Used for changing settlementFeeRecipient
     * @param _state true to set paused and vice versa
     */
    function setPaused(bool _state) external override onlyOwner {
        if (paused != _state) {
            paused = _state;
            emit Paused(_state);
        }
    }

    /**
     * @notice Change metadata string
     * @param _metadata new metadata string
     */
    function changeMetadata(string calldata _metadata)
        external
        override
        onlyOwner
    {
        metadata = _metadata;
        emit MetadataChanged(_metadata);
    }

    /**
     * @notice Change target leverate rate for this index x 1e6
     * @param _target new leverage rate
     */
    function setLeverage(uint256 _target) external override onlyOwner {
        targetLev = _target;
        adjustAlloc();
        emit LeverageSet(_target);
    }

    /**
     * @notice Change allocation point for each pool
     * @param _index target id of the underlying pool
     * @param _pool address of pool
     * @param _allocPoint new allocation point
     */
    function set(
        uint256 _index,
        address _pool,
        uint256 _allocPoint
    ) public override onlyOwner {
        require(registry.isListed(_pool), ""ERROR:UNREGISTERED_POOL"");
        require(
            _index <= parameters.getMaxList(address(this)),
            ""ERROR: EXCEEEDED_MAX_INDEX""
        );
        uint256 _length = poolList.length;

        //create a new pool or replace existing
        if (_length <= _index) {
            require(_length == _index, ""ERROR: BAD_INDEX"");
            poolList.push(_pool);
        } else {
            address _poolAddress = poolList[_index];
            if (_poolAddress != address(0) && _poolAddress != _pool) {
                uint256 _current = IPoolTemplate(_poolAddress).allocatedCredit(
                    address(this)
                );
                IPoolTemplate(_poolAddress).withdrawCredit(_current);
            }
            poolList[_index] = _pool;
        }
        if (totalAllocPoint > 0) {
            totalAllocPoint =
                totalAllocPoint -
                allocPoints[_pool] +
                _allocPoint;
        } else {
            totalAllocPoint = _allocPoint;
        }
        allocPoints[_pool] = _allocPoint;
        adjustAlloc();
        emit AllocationSet(_index, _pool, _allocPoint);
    }

    /**
     * Internal functions
     */

    /**
     * @notice Internal function to offset withdraw request and latest balance
     * @param from the account who send
     * @param to a
     * @param amount the amount of token to offset
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        if (from != address(0)) {
            uint256 _after = balanceOf(from) - amount;
            if (_after < withdrawalReq[from].amount) {
                withdrawalReq[from].amount = _after;
            }
        }
    }

    /**
     * @notice Get the total equivalent value of credit to token
     * @return _totalValue accrued but yet claimed premium within underlying pools
     */
    function _accruedPremiums() internal view returns (uint256 _totalValue) {
        for (uint256 i = 0; i < poolList.length; i++) {
            if (allocPoints[poolList[i]] > 0) {
                _totalValue =
                    _totalValue +
                    IPoolTemplate(poolList[i]).pendingPremium(address(this));
            }
        }
    }
}",5159.0,663.0,"[H-08] IndexTemplate.sol#compensate() will most certainly fail
Precision loss while converting between {the amount of shares} and {the amount of underlying tokens} back and forth is not handled properly.
In the current implementation, when someone tries to resume the market after a pending period ends by calling PoolTemplate.sol#`resume()`, IndexTemplate.sol#`compensate()` will be called internally to make a payout. If the index pool is unable to cover the compensation, the CDS pool will then be used to cover the shortage.
However, while CDSTemplate.sol#compensate() takes a parameter for the amount of underlying tokens, it uses `vault.transferValue()` to transfer corresponding `_attributions (shares)` instead of underlying tokens.
  [H-12] IndexTemplate.sol Wrong implementation allows lp of the index pool to resume a locked PayingOut pool and escape the responsibility for the compensation
Based on the context, the system intends to lock all the lps during PayingOut period.
However, the current implementation allows anyone, including LPs to call `resume()` and unlock the index pool.
It allows a malicious LP to escape the responsibility for the compensation, at the expense of other LPs paying more than expected.
  [H-13] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool
In the current implementation, when an incident is reported for a certain pool, the index pool can still `withdrawCredit()` from the pool, which in the best interest of an index pool, the admin of the index pool is preferred to do so.
This allows the index pool to escape from the responsibility for the risks of invested pools.
Making the LPs of the pool take an unfair share of the responsibility.
  [M-06] Index compensate is 0 when `totalLiquidity()` is enough to cover the whole amount
In IndexTemplate, function `compensate`, When `_amount > _value`, and `<= totalLiquidity()`, the value of `_compensated` is not set, so it gets a default value of 0:
But nevertheless, in both cases, it calls `vault.offsetDebt`, even when the `_compensated` is 0 (no else block).",4.0,"pragma solidity 0.8.7;

 import ""hardhat/console.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol"";

import ""./InsureDAOERC20.sol"";
import ""./interfaces/IIndexTemplate.sol"";
import ""./interfaces/IUniversalMarket.sol"";

import ""./interfaces/IVault.sol"";
import ""./interfaces/IRegistry.sol"";
import ""./interfaces/IParameters.sol"";
import ""./interfaces/IPoolTemplate.sol"";
import ""./interfaces/ICDSTemplate.sol"";



contract IndexTemplate is InsureDAOERC20, IIndexTemplate, IUniversalMarket {
    
    event Deposit(address indexed depositor, uint256 amount, uint256 mint);
    event WithdrawRequested(
        address indexed withdrawer,
        uint256 amount,
        uint256 time
    );
    event Withdraw(address indexed withdrawer, uint256 amount, uint256 retVal);
    event Compensated(address indexed index, uint256 amount);
    event Paused(bool paused);
    event Resumed();
    event Locked();
    event MetadataChanged(string metadata);
    event LeverageSet(uint256 target);
    event AllocationSet(
        uint256 indexed _index,
        address indexed pool,
        uint256 allocPoint
    );

    
    
    bool public initialized;
    bool public paused;
    bool public locked;
    uint256 public pendingEnd;
    string public metadata;

    
    IParameters public parameters;
    IVault public vault;
    IRegistry public registry;

    
    uint256 public totalAllocatedCredit; 
    mapping(address => uint256) public allocPoints; 
    uint256 public totalAllocPoint; 
    address[] public poolList; 
    uint256 public targetLev; 
    
    
    

    
    struct Withdrawal {
        uint256 timestamp;
        uint256 amount;
    }
    mapping(address => Withdrawal) public withdrawalReq;

    struct PoolStatus {
        uint256 current;
        uint256 available;
        uint256 allocation;
        address addr;
    }

    
    uint256 public constant MAGIC_SCALE_1E6 = 1e6; 

    
    modifier onlyOwner() {
        require(
            msg.sender == parameters.getOwner(),
            ""Restricted: caller is not allowed to operate""
        );
        _;
    }

    constructor() {
        initialized = true;
    }

    

    
    function initialize(
        string calldata _metaData,
        uint256[] calldata _conditions,
        address[] calldata _references
    ) external override {
        require(
            initialized == false &&
                bytes(_metaData).length > 0 &&
                _references[0] != address(0) &&
                _references[1] != address(0) &&
                _references[2] != address(0),
            ""ERROR: INITIALIZATION_BAD_CONDITIONS""
        );

        initialized = true;

        string memory _name = ""InsureDAO-Index"";
        string memory _symbol = ""iIndex"";
        uint8 _decimals = IERC20Metadata(_references[0]).decimals();

        initializeToken(_name, _symbol, _decimals);

        parameters = IParameters(_references[2]);
        vault = IVault(parameters.getVault(_references[0]));
        registry = IRegistry(_references[1]);

        metadata = _metaData;
    }

    

    
    function deposit(uint256 _amount) public returns (uint256 _mintAmount) {
        require(locked == false && paused == false, ""ERROR: DEPOSIT_DISABLED"");
        require(_amount > 0, ""ERROR: DEPOSIT_ZERO"");

        uint256 _supply = totalSupply();
        uint256 _totalLiquidity = totalLiquidity();
        vault.addValue(_amount, msg.sender, address(this));

        if (_supply > 0 && _totalLiquidity > 0) {
            _mintAmount = (_amount * _supply) / _totalLiquidity;
        } else if (_supply > 0 && _totalLiquidity == 0) {
            
            _mintAmount = _amount * _supply;
        } else {
            _mintAmount = _amount;
        }
        emit Deposit(msg.sender, _amount, _mintAmount);
        
        _mint(msg.sender, _mintAmount);
        uint256 _liquidityAfter = _totalLiquidity + _amount;
        uint256 _leverage = (totalAllocatedCredit * MAGIC_SCALE_1E6) /
            _liquidityAfter;
        
        if (targetLev - parameters.getLowerSlack(address(this)) > _leverage) {
            _adjustAlloc(_liquidityAfter);
        }
    }

    
    function requestWithdraw(uint256 _amount) external {
        uint256 _balance = balanceOf(msg.sender);
        require(_balance >= _amount, ""ERROR: REQUEST_EXCEED_BALANCE"");
        require(_amount > 0, ""ERROR: REQUEST_ZERO"");
        withdrawalReq[msg.sender].timestamp = block.timestamp;
        withdrawalReq[msg.sender].amount = _amount;
        emit WithdrawRequested(msg.sender, _amount, block.timestamp);
    }

    
    function withdraw(uint256 _amount) external returns (uint256 _retVal) {
        

        uint256 _liquidty = totalLiquidity();
        uint256 _lockup = parameters.getLockup(msg.sender);
        uint256 _requestTime = withdrawalReq[msg.sender].timestamp;
        _retVal = (_liquidty * _amount) / totalSupply();
        require(locked == false, ""ERROR: WITHDRAWAL_PENDING"");
        require(
            _requestTime + _lockup < block.timestamp,
            ""ERROR: WITHDRAWAL_QUEUE""
        );
        require(
            _requestTime + _lockup + parameters.getWithdrawable(msg.sender) >
                block.timestamp,
            ""ERROR: WITHDRAWAL_NO_ACTIVE_REQUEST""
        );
        require(
            withdrawalReq[msg.sender].amount >= _amount,
            ""ERROR: WITHDRAWAL_EXCEEDED_REQUEST""
        );
        require(_amount > 0, ""ERROR: WITHDRAWAL_ZERO"");

        require(
            _retVal <= withdrawable(),
            ""ERROR: WITHDRAW_INSUFFICIENT_LIQUIDITY""
        );

        
        withdrawalReq[msg.sender].amount -= _amount;
        
        _burn(msg.sender, _amount);

        
        uint256 _liquidityAfter = _liquidty - _retVal;

        if (_liquidityAfter > 0) {
            uint256 _leverage = (totalAllocatedCredit * MAGIC_SCALE_1E6) /
                _liquidityAfter;
            
            if (
                targetLev + parameters.getUpperSlack(address(this)) < _leverage
            ) {
                _adjustAlloc(_liquidityAfter);
            }
        } else {
            _adjustAlloc(0);
        }

        
        vault.withdrawValue(_retVal, msg.sender);

        emit Withdraw(msg.sender, _amount, _retVal);
    }

    
    function withdrawable() public view returns (uint256 _retVal) {
        uint256 _totalLiquidity = totalLiquidity();
        if(_totalLiquidity > 0){
            uint256 _length = poolList.length;
            uint256 _lowestAvailableRate = MAGIC_SCALE_1E6;
            uint256 _targetAllocPoint;
            uint256 _targetLockedCreditScore;
            
            for (uint256 i = 0; i < _length; i++) {
                address _poolAddress = poolList[i];
                uint256 _allocPoint = allocPoints[_poolAddress];
                if (_allocPoint > 0) {
                    uint256 _allocated = IPoolTemplate(_poolAddress)
                        .allocatedCredit(address(this));
                    uint256 _availableBalance = IPoolTemplate(_poolAddress)
                        .availableBalance();
                    
                    if (_allocated > _availableBalance) {
                        uint256 _availableRate = (_availableBalance *
                            MAGIC_SCALE_1E6) / _allocated;
                        uint256 _lockedCredit = _allocated - _availableBalance;
                        if (i == 0 || _availableRate < _lowestAvailableRate) {
                            _lowestAvailableRate = _availableRate;
                            _targetLockedCreditScore = _lockedCredit;
                            _targetAllocPoint = _allocPoint;
                        }
                    }
                }
            }
            
            if (_lowestAvailableRate == MAGIC_SCALE_1E6) {
                _retVal = _totalLiquidity;
            } else {
                uint256 _necessaryAmount = _targetLockedCreditScore * totalAllocPoint /  _targetAllocPoint;
                _necessaryAmount = _necessaryAmount *  MAGIC_SCALE_1E6 / targetLev;
                if(_necessaryAmount < _totalLiquidity){
                    _retVal = _totalLiquidity - _necessaryAmount;
                }else{
                    _retVal = 0;
                }
            }
        }
    }

    
    function adjustAlloc() public {
        _adjustAlloc(totalLiquidity());
    }

    
    function _adjustAlloc(uint256 _liquidity) internal {
        
        uint256 _targetCredit = (targetLev * _liquidity) / MAGIC_SCALE_1E6;
        uint256 _allocatable = _targetCredit;
        uint256 _allocatablePoints = totalAllocPoint;
        uint256 _length = poolList.length;
        PoolStatus[] memory _poolList = new PoolStatus[](_length);

        
        for (uint256 i = 0; i < _length; i++) {
            address _pool = poolList[i];
            if (_pool != address(0)) {
                uint256 _allocation = allocPoints[_pool];
                
                uint256 _target = (_targetCredit * _allocation) /
                    _allocatablePoints;
                
                uint256 _current = IPoolTemplate(_pool).allocatedCredit(
                    address(this)
                );
                
                uint256 _available = IPoolTemplate(_pool).availableBalance();
                
                
                if (
                    (_current > _target && _current - _target > _available) ||
                    IPoolTemplate(_pool).paused() == true
                ) {
                    IPoolTemplate(_pool).withdrawCredit(_available);
                    totalAllocatedCredit -= _available;
                    _poolList[i].addr = address(0);
                    _allocatable -= _current - _available;
                    _allocatablePoints -= _allocation;
                } else {
                    _poolList[i].addr = _pool;
                    _poolList[i].current = _current;
                    _poolList[i].available = _available;
                    _poolList[i].allocation = _allocation;
                }
            }
        }
        
        for (uint256 i = 0; i < _length; i++) {
            if (_poolList[i].addr != address(0)) {
                
                uint256 _target = (_allocatable * _poolList[i].allocation) /
                    _allocatablePoints;
                
                uint256 _current = _poolList[i].current;
                
                uint256 _available = _poolList[i].available;
                
                if (_current > _target && _available != 0) {
                    
                    uint256 _decrease = _current - _target;
                    IPoolTemplate(_poolList[i].addr).withdrawCredit(_decrease);
                    totalAllocatedCredit -= _decrease;
                }
                if (_current < _target) {
                    
                    uint256 _allocate = _target - _current;
                    IPoolTemplate(_poolList[i].addr).allocateCredit(_allocate);
                    totalAllocatedCredit += _allocate;
                }
                if (_current == _target) {
                    IPoolTemplate(_poolList[i].addr).allocateCredit(0);
                }
            }
        }
    }

    

    
    function compensate(uint256 _amount)
        external
        override
        returns (uint256 _compensated)
    {
        require(
            allocPoints[msg.sender] > 0,
            ""ERROR_COMPENSATE_UNAUTHORIZED_CALLER""
        );
        uint256 _value = vault.underlyingValue(address(this));
        if (_value >= _amount) {
            
            vault.offsetDebt(_amount, msg.sender);
            
            _compensated = _amount;
        } else {
            
            uint256 _shortage;
            if (totalLiquidity() < _amount) {
                
                _shortage = _amount - _value;
                uint256 _cds = ICDSTemplate(registry.getCDS(address(this)))
                    .compensate(_shortage);
                _compensated = _value + _cds;
            }
            vault.offsetDebt(_compensated, msg.sender);
        }
        adjustAlloc();
        emit Compensated(msg.sender, _compensated);
    }

    

    
    function resume() external override {
        uint256 _poolLength = poolList.length;

        for (uint256 i = 0; i < _poolLength; i++) {
            require(
                IPoolTemplate(poolList[i]).paused() == false,
                ""ERROR: POOL_IS_PAUSED""
            );
        }

        locked = false;
        emit Resumed();
    }

    
    function lock() external override {
        require(allocPoints[msg.sender] > 0);

        locked = true;
        emit Locked();
    }

    

    
    function leverage() public view returns (uint256 _rate) {
        
        if (totalLiquidity() > 0) {
            return (totalAllocatedCredit * MAGIC_SCALE_1E6) / totalLiquidity();
        } else {
            return 0;
        }
    }

    
    function totalLiquidity() public view returns (uint256 _balance) {
        return vault.underlyingValue(address(this)) + _accruedPremiums();
    }

    
    function rate() external view returns (uint256) {
        if (totalSupply() > 0) {
            return (totalLiquidity() * MAGIC_SCALE_1E6) / totalSupply();
        } else {
            return 0;
        }
    }

    
    function valueOfUnderlying(address _owner) public view returns (uint256) {
        uint256 _balance = balanceOf(_owner);
        if (_balance == 0) {
            return 0;
        } else {
            return (_balance * totalLiquidity()) / totalSupply();
        }
    }

    
    function getAllPools() external view returns (address[] memory) {
        return poolList;
    }

    

    
    function setPaused(bool _state) external override onlyOwner {
        if (paused != _state) {
            paused = _state;
            emit Paused(_state);
        }
    }

    
    function changeMetadata(string calldata _metadata)
        external
        override
        onlyOwner
    {
        metadata = _metadata;
        emit MetadataChanged(_metadata);
    }

    
    function setLeverage(uint256 _target) external override onlyOwner {
        targetLev = _target;
        adjustAlloc();
        emit LeverageSet(_target);
    }

    
    function set(
        uint256 _index,
        address _pool,
        uint256 _allocPoint
    ) public override onlyOwner {
        require(registry.isListed(_pool), ""ERROR:UNREGISTERED_POOL"");
        require(
            _index <= parameters.getMaxList(address(this)),
            ""ERROR: EXCEEEDED_MAX_INDEX""
        );
        uint256 _length = poolList.length;

        
        if (_length <= _index) {
            require(_length == _index, ""ERROR: BAD_INDEX"");
            poolList.push(_pool);
        } else {
            address _poolAddress = poolList[_index];
            if (_poolAddress != address(0) && _poolAddress != _pool) {
                uint256 _current = IPoolTemplate(_poolAddress).allocatedCredit(
                    address(this)
                );
                IPoolTemplate(_poolAddress).withdrawCredit(_current);
            }
            poolList[_index] = _pool;
        }
        if (totalAllocPoint > 0) {
            totalAllocPoint =
                totalAllocPoint -
                allocPoints[_pool] +
                _allocPoint;
        } else {
            totalAllocPoint = _allocPoint;
        }
        allocPoints[_pool] = _allocPoint;
        adjustAlloc();
        emit AllocationSet(_index, _pool, _allocPoint);
    }

    

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        if (from != address(0)) {
            uint256 _after = balanceOf(from) - amount;
            if (_after < withdrawalReq[from].amount) {
                withdrawalReq[from].amount = _after;
            }
        }
    }

    
    function _accruedPremiums() internal view returns (uint256 _totalValue) {
        for (uint256 i = 0; i < poolList.length; i++) {
            if (allocPoints[poolList[i]] > 0) {
                _totalValue =
                    _totalValue +
                    IPoolTemplate(poolList[i]).pendingPremium(address(this));
            }
        }
    }
}",3558.0,3,1,"{
  ""Findings"": [
    {
      ""Issue"": ""Lack of Access Control on Initialization Functions"",
      ""Severity"": ""High"",
      ""Description"": ""The `initialize` function lacks proper access control, allowing any user to initialize the contract's parameters. This can lead to unauthorized initialization with malicious values."",
      ""Impact"": ""Unauthorized entities can set critical contract parameters, compromising contract integrity and security."",
      ""Location"": ""Function `initialize` in various lines across different contracts"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""This finding is relevant as it addresses a critical vulnerability in contract initialization, ensuring only authorized users can perform this action.""
    },
    {
      ""Issue"": ""Reentrancy Vulnerabilities in Withdraw Functions"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `withdraw` function is vulnerable to reentrancy attacks as it updates state variables after performing external calls."",
      ""Impact"": ""An attacker could exploit reentrancy to drain the contract's funds before the state is updated."",
      ""Location"": ""Function `withdraw` across various lines in different contracts"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Reentrancy vulnerabilities are crucial in ensuring the safety of funds in smart contracts.""
    },
    {
      ""Issue"": ""Lack of Input Validation in Set Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `set` function does not validate indices or allocation points, leading to potential out-of-bounds access or incorrect allocations."",
      ""Impact"": ""This can lead to erroneous behavior, financial instability, or mismanagement of resources."",
      ""Location"": ""Function `set` found in various lines across different contracts"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Input validation is essential to prevent runtime errors and ensure contract integrity.""
    },
    {
      ""Issue"": ""Unchecked External Calls"",
      ""Severity"": ""Low"",
      ""Description"": ""Functions making external calls do not check the success of these calls, potentially leading to inconsistent state or unexpected behavior."",
      ""Impact"": ""Failure of these calls could result in loss of funds or incorrect contract behavior."",
      ""Location"": ""Functions making external calls in various contracts"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Checking the success of external calls is a standard practice to ensure consistent state management.""
    },
    {
      ""Issue"": ""Lack of Event Emission in Critical State Changes"",
      ""Severity"": ""Low"",
      ""Description"": ""Some functions do not emit events during critical state changes, reducing transparency and auditability."",
      ""Impact"": ""Lack of event logs can hinder tracking and auditing of important state changes."",
      ""Location"": ""Functions such as `_adjustAlloc` in various contracts"",
      ""Relevance"": true,
      ""Validation"": true,
      ""Note"": ""Proper event emission is crucial for transparency and accountability in smart contract operations.""
    }
  ],
  ""FindingNumber"": 5,
  ""AllRelevance"": 40,
  ""RelevanceCount"": 33,
  ""AllValidation"": 40,
  ""ValidationCount"": 33
}","### **Output**

---

**[H-08] IndexTemplate.sol#compensate() will most certainly fail**

**Report Description**:
The `compensate()` function in `IndexTemplate.sol` suffers from precision loss when converting between the amount of shares and the amount of underlying tokens. This issue arises when resuming the market after a pending period ends by calling `PoolTemplate.sol#resume()`. If the index pool cannot cover the compensation, the CDS pool is used to cover the shortage. However, `CDSTemplate.sol#compensate()` uses `vault.transferValue()` to transfer shares instead of underlying tokens, leading to potential failures in compensation.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of precision loss or the incorrect handling of token transfers in the `compensate()` function. This is a critical vulnerability that is entirely missed in the response list.

---

**[H-12] IndexTemplate.sol Wrong implementation allows lp of the index pool to resume a locked PayingOut pool and escape the responsibility for the compensation**

**Report Description**:
The system intends to lock all LPs during the PayingOut period. However, the current implementation allows anyone, including LPs, to call `resume()` and unlock the index pool. This allows a malicious LP to escape the responsibility for the compensation, at the expense of other LPs paying more than expected.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of improper access control in the `resume()` function, which allows unauthorized unlocking of the index pool. This is a significant security oversight.

---

**[H-13] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool**

**Report Description**:
When an incident is reported for a certain pool, the index pool can still `withdrawCredit()` from the pool. This allows the index pool to escape from the responsibility for the risks of invested pools, making the LPs of the pool take an unfair share of the responsibility.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of improper access control or the unfair withdrawal of credit by the admin. This is a critical vulnerability that is entirely missed in the response list.

---

**[M-06] Index compensate is 0 when `totalLiquidity()` is enough to cover the whole amount**

**Report Description**:
In `IndexTemplate`, the function `compensate` does not set the value of `_compensated` when `_amount > _value` and `<= totalLiquidity()`, resulting in a default value of 0. Despite this, it calls `vault.offsetDebt` even when `_compensated` is 0, leading to incorrect behavior.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of incorrect default values and improper handling of compensation in the `compensate()` function. This is a significant oversight in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- *None*

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-08] IndexTemplate.sol#compensate() will most certainly fail**
- **[H-12] IndexTemplate.sol Wrong implementation allows lp of the index pool to resume a locked PayingOut pool and escape the responsibility for the compensation**
- **[H-13] Admin of the index pool can `withdrawCredit()` after `applyCover()` to avoid taking loss for the compensation paid for a certain pool**
- **[M-06] Index compensate is 0 when `totalLiquidity()` is enough to cover the whole amount**

---

### **Conclusion**

The response list fails to address any of the issues reported in the `issue` list. Each issue in the `issue` list represents a significant vulnerability or risk that is entirely missed in the `response_list`. This indicates a substantial gap in the coverage, accuracy, and sufficiency of the responses provided.",0,1,3,,"```
None.
```",0.0
,,,,,,,,13,8,,,1,4,16,152.0,,
