nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
swap.sol,"pragma solidity ^0.8.0;

import ""../governance/EmergencyPausable.sol"";
import ""../utils/Math.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@openzeppelin/contracts/utils/math/SafeMath.sol"";

contract Swap is EmergencyPausable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Math for uint256;

    /// @notice An address to receive swap fees. The 0 address prevents fee
    ///         withdrawal.
    address payable public feeRecipient;
    /// @notice divide by the SWAP_FEE_DIVISOR to get the fee ratio, deducted
    ///         from the proceeds of each swap.
    uint256 public swapFee;
    uint256 public constant SWAP_FEE_DIVISOR = 100_000;

    event SwappedTokens(
        address tokenSold,
        address tokenBought,
        uint256 amountSold,
        uint256 amountBought,
        uint256 amountBoughtFee
    );

    event NewSwapFee(
        uint256 newSwapFee
    );

    event NewFeeRecipient(
        address newFeeRecipient
    );

    event FeesSwept(
        address token,
        uint256 amount,
        address recipient
    );

    /// @param owner_ A new contract owner, expected to implement
    ///               TimelockGovernorWithEmergencyGovernance.
    /// @param feeRecipient_ A payable address to receive swap fees. Setting the
    ///        0 address prevents fee withdrawal, and can be set later by
    ///        governance.
    /// @param swapFee_ A fee, which divided by SWAP_FEE_DIVISOR sets the fee
    ///                 ratio charged for each swap.
    constructor(address owner_, address payable feeRecipient_, uint256 swapFee_) {
        require(owner_ != address(0), ""Swap::constructor: Owner must not be 0"");
        transferOwnership(owner_);
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    /// @notice Set the fee taken from each swap's proceeds.
    /// @dev Only timelocked governance can set the swap fee.
    /// @param swapFee_ A fee, which divided by SWAP_FEE_DIVISOR sets the fee ratio.
    function setSwapFee(uint256 swapFee_) external onlyTimelock {
        require(swapFee_ < SWAP_FEE_DIVISOR, ""Swap::setSwapFee: Swap fee must not exceed 100%"");
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    /// @notice Set the address permitted to receive swap fees.
    /// @dev Only timelocked governance can set the fee recipient.
    /// @param feeRecipient_ A payable address to receive swap fees. Setting the
    ///        0 address prevents fee withdrawal.
    function setFeeRecipient(address payable feeRecipient_) external onlyTimelock {
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
    }

    /// @notice Swap by filling a 0x quote.
    /// @dev Execute a swap by filling a 0x quote, as provided by the 0x API.
    ///      Charges a governable swap fee that comes out of the bought asset,
    ///      be it token or ETH. Unfortunately, the fee is also charged on any
    ///      refunded ETH from 0x protocol fees due to an implementation oddity.
    ///      This behavior shouldn't impact most users.
    ///
    ///      Learn more about the 0x API and quotes at https://0x.org/docs/api
    /// @param zrxSellTokenAddress The contract address of the token to be sold,
    ///        as returned by the 0x `/swap/v1/quote` API endpoint. If selling
    ///        unwrapped ETH included via msg.value, this should be address(0)
    /// @param amountToSell Amount of token to sell, with the same precision as
    ///        zrxSellTokenAddress. This information is also encoded in zrxData.
    ///        If selling unwrapped ETH via msg.value, this should be 0.
    /// @param zrxBuyTokenAddress The contract address of the token to be bought,
    ///        as returned by the 0x `/swap/v1/quote` API endpoint. To buy
    ///        unwrapped ETH, use `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`
    /// @param minimumAmountReceived The minimum amount expected to be received
    ///        from filling the quote, before the swap fee is deducted, in
    ///        zrxBuyTokenAddress. Reverts if not met
    /// @param zrxAllowanceTarget Contract address that needs to be approved for
    ///        zrxSellTokenAddress, as returned by the 0x `/swap/v1/quote` API
    ///        endpoint. Should be address(0) for purchases uses unwrapped ETH
    /// @param zrxTo Contract to fill the 0x quote, as returned by the 0x
    ///        `/swap/v1/quote` API endpoint
    /// @param zrxData Data encoding the 0x quote, as returned by the 0x
    ///        `/swap/v1/quote` API endpoint
    /// @param deadline Timestamp after which the swap will be reverted.
    function swapByQuote(
        address zrxSellTokenAddress,
        uint256 amountToSell,
        address zrxBuyTokenAddress,
        uint256 minimumAmountReceived,
        address zrxAllowanceTarget,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 deadline
    ) external payable whenNotPaused nonReentrant {
        require(
            block.timestamp <= deadline,
            ""Swap::swapByQuote: Deadline exceeded""
        );
        require(
            !signifiesETHOrZero(zrxSellTokenAddress) || msg.value > 0,
            ""Swap::swapByQuote: Unwrapped ETH must be swapped via msg.value""
        );

        // if zrxAllowanceTarget is 0, this is an ETH sale
        if (zrxAllowanceTarget != address(0)) {
            // transfer tokens to this contract
            IERC20(zrxSellTokenAddress).safeTransferFrom(msg.sender, address(this), amountToSell);
            // approve token transfer to 0x contracts
            // TODO (handle approval special cases like USDT, KNC, etc)
            IERC20(zrxSellTokenAddress).safeIncreaseAllowance(zrxAllowanceTarget, amountToSell);
        }

        // execute 0x quote
        (uint256 boughtERC20Amount, uint256 boughtETHAmount) = fillZrxQuote(
            IERC20(zrxBuyTokenAddress),
            zrxTo,
            zrxData,
            msg.value
        );

        require(
            (
                !signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtERC20Amount >= minimumAmountReceived
            ) ||
            (
                signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtETHAmount >= minimumAmountReceived
            ),
            ""Swap::swapByQuote: Minimum swap proceeds requirement not met""
        );
        if (boughtERC20Amount > 0) {
            // take the swap fee from the ERC20 proceeds and return the rest
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);
            IERC20(zrxBuyTokenAddress).safeTransfer(msg.sender, toTransfer);
            // return any refunded ETH
            payable(msg.sender).transfer(boughtETHAmount);

            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtERC20Amount,
                boughtERC20Amount.sub(toTransfer)
            );
        } else {

            // take the swap fee from the ETH proceeds and return the rest. Note
            // that if any 0x protocol fee is refunded in ETH, it also suffers
            // the swap fee tax
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtETHAmount).div(SWAP_FEE_DIVISOR);
            payable(msg.sender).transfer(toTransfer);
            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtETHAmount,
                boughtETHAmount.sub(toTransfer)
            );
        }
        if (zrxAllowanceTarget != address(0)) {
            // remove any dangling token allowance
            IERC20(zrxSellTokenAddress).safeApprove(zrxAllowanceTarget, 0);
        }
    }

    /// @notice Fill a 0x quote as provided by the API, and return any ETH or
    ///         ERC20 proceeds.
    /// @dev Learn more at https://0x.org/docs/api
    /// @param zrxBuyTokenAddress The contract address of the token to be bought,
    ///        as provided by the 0x API. `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`
    ///        signifies the user is buying unwrapped ETH.
    /// @param zrxTo Contract to fill the 0x quote, as provided by the 0x API
    /// @param zrxData Data encoding the 0x quote, as provided by the 0x API
    /// @param ethAmount The amount of ETH required to fill the quote, including
    ///        any ETH being traded as well as protocol fees
    /// @return any positive `zrxBuyTokenAddress` ERC20 balance change, as well
    ///         as any positive ETH balance change
    function fillZrxQuote(
        IERC20 zrxBuyTokenAddress,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 ethAmount
    ) internal returns (uint256, uint256) {
        uint256 originalERC20Balance = 0;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
        }
        uint256 originalETHBalance = address(this).balance;

        (bool success,) = zrxTo.call{value: ethAmount}(zrxData);
        require(success, ""Swap::fillZrxQuote: Failed to fill quote"");

        uint256 ethDelta = address(this).balance.subOrZero(originalETHBalance);
        uint256 erc20Delta;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            erc20Delta = zrxBuyTokenAddress.balanceOf(address(this)).subOrZero(originalERC20Balance);
            require(erc20Delta > 0, ""Swap::fillZrxQuote: Didn't receive bought token"");
        } else {
            require(ethDelta > 0, ""Swap::fillZrxQuote: Didn't receive bought ETH"");
        }

        return (erc20Delta, ethDelta);
    }

    /// @notice Test whether an address is zero, or the magic address the 0x
    ///         platform uses to signify ""unwrapped ETH"" rather than an ERC20.
    /// @param tokenAddress An address that might point toward an ERC-20.
    function signifiesETHOrZero(address tokenAddress) internal pure returns (bool) {
        return (
            tokenAddress == address(0) ||
            tokenAddress == address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
        );
    }

    /// @notice Sweeps accrued ETH and ERC20 swap fees to the pre-established
    ///         fee recipient address.
    /// @dev Fees are tracked based on the contract's balances, rather than
    ///      using any additional bookkeeping. If there are bugs in swap
    ///      accounting, this function could jeopardize funds.
    /// @param tokens An array of ERC20 contracts to withdraw token fees
    function sweepFees(
        address[] calldata tokens
    ) external nonReentrant {
        require(
            feeRecipient != address(0),
            ""Swap::withdrawAccruedFees: feeRecipient is not initialized""
        );
        for (uint8 i = 0; i<tokens.length; i++) {
            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));
            if (balance > 0) {
                IERC20(tokens[i]).safeTransfer(feeRecipient, balance);
                emit FeesSwept(tokens[i], balance, feeRecipient);
            }
        }
        feeRecipient.transfer(address(this).balance);
        emit FeesSwept(address(0), address(this).balance, feeRecipient);
    }

    fallback() external payable {}
    receive() external payable {}
}",2733,263,"[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets
A call to an arbitrary contract with custom calldata is made in `fillZrxQuote()`, which means the contract can be an ERC20 token, and the calldata can be `transferFrom` a previously approved user.
  [H-02] Wrong calculation of erc20Delta and ethDelta
“function fillZrxQuote()”
When a user tries to swap unwrapped ETH to ERC20, even if there is a certain amount of ETH refunded, at L215, `ethDelta` will always be 0.
That's because `originalETHBalance` already includes the `msg.value` sent by the caller.
Let's say the ETH balance of the contract is 1 ETH before the swap.
- A user swaps 10 ETH to USDC;
- `originalETHBalance` will be 11 ETH;
- If there is 1 ETH of refund;
- `ethDelta` will be 0 as the new balance is 2 ETH and `subOrZero(2, 11)` is 0.
Similarly, erc20Delta is also computed wrong.
Consider a special case of a user trying to arbitrage from WBTC to WBTC, the `originalERC20Balance` already includes the input amount, erc20Delta will always be much lower than the actual delta amount.
For example, for an arb swap from 1 WBTC to 1.1 WBTC, the ethDelta will be 0.1 WBTC while it should be 1.1 WBTC.
  [M-01] Swap.sol implements potentially dangerous transfer
The use of `transfer()` in  Swap.sol may have unintended outcomes on the eth being sent to the receiver. Eth may be irretrievable or undelivered if the msg.sender or feeRecipient is a smart contract. Funds can potentially be lost if;
The smart contract fails to implement the payable fallback function
The fallback function uses more than 2300 gas units
The latter situation may occur in the instance of gas cost changes. The impact would mean that any contracts receiving funds would potentially be unable to retrieve funds from the swap.   [M-02] Unused ERC20 tokens are not refunded
Based on the context and comments in the code, we assume that it's possible that there will be some leftover sell tokens, not only when users are selling unwrapped ETH but also for ERC20 tokens.
However, in the current implementation, only refunded ETH is returned (L158).
Because of this, the leftover tkoens may be left in the contract unintentionally.
 
[M-03] Users can avoid paying fees for ETH swaps
Users can call `Swap.swapByQuote()` to execute an ETH swap (where they receive ETH) without paying swap fee for the gained ETH. They can trick the system by setting `zrxBuyTokenAddress` to an address of a malicious contract and making it think they have executed an ERC20 swap when they have actually executed an ETH swap. In this case, the system will give them the ETH they got from the swap (`boughtETHAmount`) without charging any swap fees for it, because the systems consideres this ETH as ""refunded ETH"" that wasn't part of the ""ERC20"" swap.",5,"pragma solidity ^0.8.0;

import ""../governance/EmergencyPausable.sol"";
import ""../utils/Math.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@openzeppelin/contracts/utils/math/SafeMath.sol"";

contract Swap is EmergencyPausable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Math for uint256;

    
    
    address payable public feeRecipient;
    
    
    uint256 public swapFee;
    uint256 public constant SWAP_FEE_DIVISOR = 100_000;

    event SwappedTokens(
        address tokenSold,
        address tokenBought,
        uint256 amountSold,
        uint256 amountBought,
        uint256 amountBoughtFee
    );

    event NewSwapFee(
        uint256 newSwapFee
    );

    event NewFeeRecipient(
        address newFeeRecipient
    );

    event FeesSwept(
        address token,
        uint256 amount,
        address recipient
    );

    
    
    
    
    
    
    
    constructor(address owner_, address payable feeRecipient_, uint256 swapFee_) {
        require(owner_ != address(0), ""Swap::constructor: Owner must not be 0"");
        transferOwnership(owner_);
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    
    
    
    function setSwapFee(uint256 swapFee_) external onlyTimelock {
        require(swapFee_ < SWAP_FEE_DIVISOR, ""Swap::setSwapFee: Swap fee must not exceed 100%"");
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    
    
    
    
    function setFeeRecipient(address payable feeRecipient_) external onlyTimelock {
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    function swapByQuote(
        address zrxSellTokenAddress,
        uint256 amountToSell,
        address zrxBuyTokenAddress,
        uint256 minimumAmountReceived,
        address zrxAllowanceTarget,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 deadline
    ) external payable whenNotPaused nonReentrant {
        require(
            block.timestamp <= deadline,
            ""Swap::swapByQuote: Deadline exceeded""
        );
        require(
            !signifiesETHOrZero(zrxSellTokenAddress) || msg.value > 0,
            ""Swap::swapByQuote: Unwrapped ETH must be swapped via msg.value""
        );

        
        if (zrxAllowanceTarget != address(0)) {
            
            IERC20(zrxSellTokenAddress).safeTransferFrom(msg.sender, address(this), amountToSell);
            
            
            IERC20(zrxSellTokenAddress).safeIncreaseAllowance(zrxAllowanceTarget, amountToSell);
        }

        
        (uint256 boughtERC20Amount, uint256 boughtETHAmount) = fillZrxQuote(
            IERC20(zrxBuyTokenAddress),
            zrxTo,
            zrxData,
            msg.value
        );

        require(
            (
                !signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtERC20Amount >= minimumAmountReceived
            ) ||
            (
                signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtETHAmount >= minimumAmountReceived
            ),
            ""Swap::swapByQuote: Minimum swap proceeds requirement not met""
        );
        if (boughtERC20Amount > 0) {
            
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);
            IERC20(zrxBuyTokenAddress).safeTransfer(msg.sender, toTransfer);
            
            payable(msg.sender).transfer(boughtETHAmount);

            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtERC20Amount,
                boughtERC20Amount.sub(toTransfer)
            );
        } else {

            
            
            
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtETHAmount).div(SWAP_FEE_DIVISOR);
            payable(msg.sender).transfer(toTransfer);
            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtETHAmount,
                boughtETHAmount.sub(toTransfer)
            );
        }
        if (zrxAllowanceTarget != address(0)) {
            
            IERC20(zrxSellTokenAddress).safeApprove(zrxAllowanceTarget, 0);
        }
    }

    
    
    
    
    
    
    
    
    
    
    
    
    function fillZrxQuote(
        IERC20 zrxBuyTokenAddress,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 ethAmount
    ) internal returns (uint256, uint256) {
        uint256 originalERC20Balance = 0;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
        }
        uint256 originalETHBalance = address(this).balance;

        (bool success,) = zrxTo.call{value: ethAmount}(zrxData);
        require(success, ""Swap::fillZrxQuote: Failed to fill quote"");

        uint256 ethDelta = address(this).balance.subOrZero(originalETHBalance);
        uint256 erc20Delta;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            erc20Delta = zrxBuyTokenAddress.balanceOf(address(this)).subOrZero(originalERC20Balance);
            require(erc20Delta > 0, ""Swap::fillZrxQuote: Didn't receive bought token"");
        } else {
            require(ethDelta > 0, ""Swap::fillZrxQuote: Didn't receive bought ETH"");
        }

        return (erc20Delta, ethDelta);
    }

    
    
    
    function signifiesETHOrZero(address tokenAddress) internal pure returns (bool) {
        return (
            tokenAddress == address(0) ||
            tokenAddress == address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
        );
    }

    
    
    
    
    
    
    function sweepFees(
        address[] calldata tokens
    ) external nonReentrant {
        require(
            feeRecipient != address(0),
            ""Swap::withdrawAccruedFees: feeRecipient is not initialized""
        );
        for (uint8 i = 0; i<tokens.length; i++) {
            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));
            if (balance > 0) {
                IERC20(tokens[i]).safeTransfer(feeRecipient, balance);
                emit FeesSwept(tokens[i], balance, feeRecipient);
            }
        }
        feeRecipient.transfer(address(this).balance);
        emit FeesSwept(address(0), address(this).balance, feeRecipient);
    }

    fallback() external payable {}
    receive() external payable {}
}",1505,2,3,"Identified vulnerabilities:
1. **Integer Overflow/Underflow in `Math` library** *(CRITICAL)*:  
   **Description:**  
   The `Math` library used in the contract does not provide safe arithmetic operations. If the `mul` or `sub` functions are used with very large or small values, they can result in integer overflows or underflows, which could lead to incorrect calculations.  For example, `SWAP_FEE_DIVISOR.sub(swapFee)` could underflow if `swapFee` is greater than `SWAP_FEE_DIVISOR`.
   
   **Impact:**  
   Incorrect fee calculations could lead to users being charged less than intended, or receiving more tokens than they should. This could also lead to unexpected behavior in other parts of the contract.

   **Mitigation:**  
   ```solidity
   // Replace unsafe math operations with SafeMath or Solidity 0.8+ built-in safety
   uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee); // This is unsafe in Solidity < 0.8.0
   // Use SafeMath instead:
   // toTransfer = SWAP_FEE_DIVISOR.sub(swapFee);
   // toTransfer = toTransfer.mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);
   ```

2. **Reentrancy Vulnerability in `fillZrxQuote`** *(High)*:  
   **Description:**  
   The `fillZrxQuote` function uses a low-level `call` to execute external code. This can lead to a reentrancy attack if the external contract calls back into the `fillZrxQuote` function before it completes execution.
   
   **Impact:**  
   An attacker could potentially drain the contract's funds by recursively calling the `fillZrxQuote` function before the original call completes.

   **Mitigation:**  
   ```solidity
   // Use a reentrancy guard to prevent reentrant calls
   // Add the nonReentrant modifier from OpenZeppelin's ReentrancyGuard
   // contract Swap is EmergencyPausable, ReentrancyGuard {... }
   // function fillZrxQuote(...) internal nonReentrant {... }
   ```

3. **Unprotected `setSwapFee` and `setFeeRecipient`** *(Medium)*:  
   **Description:**  
   The `setSwapFee` and `setFeeRecipient` functions are protected by the `onlyTimelock` modifier, which is not defined in the provided code. If the `onlyTimelock` modifier is not properly implemented, these functions could be called by any address, allowing unauthorized users to set the swap fee and fee recipient.
   
   **Impact:**  
   Unauthorized users could set the swap fee to 0, effectively allowing them to receive tokens for free, or set the fee recipient to their own address.

   **Mitigation:**  
   ```solidity
   // Ensure the onlyTimelock modifier is properly implemented
   // function setSwapFee(uint256 swapFee_) external onlyTimelock {
   //     require(swapFee_ < SWAP_FEE_DIVISOR, ""Swap::setSwapFee: Swap fee must not exceed 100%"");
   //     swapFee = swapFee_;
   //     emit NewSwapFee(swapFee);
   // }
   // function setFeeRecipient(address payable feeRecipient_) external onlyTimelock {
   //     feeRecipient = feeRecipient_;
   //     emit NewFeeRecipient(feeRecipient);
   // }
   ```

4. **Unprotected `sweepFees`** *(Medium)*:  
   **Description:**  
   The `sweepFees` function is protected by the `nonReentrant` modifier, but it transfers the entire contract balance to the fee recipient without any checks or restrictions on the recipient's address.
   
   **Impact:**  
   An attacker could potentially drain the contract's balance by setting the fee recipient to their own address.

   **Mitigation:**  
   ```solidity
   // Add a check to ensure the fee recipient is valid
   function sweepFees(
       address[] calldata tokens
   ) external nonReentrant {
       require(
           feeRecipient!= address(0),
           ""Swap::withdrawAccruedFees: feeRecipient is not initialized""
       );
       for (uint8 i = 0; i<tokens.length; i++) {
           uint256 balance = IERC20(tokens[i]).balanceOf(address(this));
           if (balance > 0) {
               IERC20(tokens[i]).safeTransfer(feeRecipient, balance);
               emit FeesSwept(tokens[i], balance, feeRecipient);
           }
       }
       require(feeRecipient!= address(0), ""Swap::withdrawAccruedFees: feeRecipient","### **Comparison of Issue Report and Response List**

---

#### **[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets**

**Report Description**:  
The `fillZrxQuote()` function makes a call to an arbitrary contract with custom calldata, which could be an ERC20 token with `transferFrom` data targeting a previously approved user. This allows attackers to steal ERC20 tokens from users' wallets.

**Match in Response List**:  
Matches with the issue titled **""Reentrancy Vulnerability in `fillZrxQuote`""**.

**Validation**:  
**Partially Correct**. The response identifies the use of a low-level `call` in `fillZrxQuote` and correctly flags it as a reentrancy risk. However, it does not explicitly address the specific issue of arbitrary contract calls allowing ERC20 token theft. The mitigation proposed (reentrancy guard) is relevant but insufficient to fully address the described vulnerability.

---

#### **[H-02] Wrong calculation of `erc20Delta` and `ethDelta`**

**Report Description**:  
The `fillZrxQuote()` function incorrectly calculates `erc20Delta` and `ethDelta`. For example, when swapping unwrapped ETH to ERC20, `ethDelta` is always `0` because `originalETHBalance` already includes `msg.value`. Similarly, `erc20Delta` is miscalculated when arbitraging between the same token (e.g., WBTC to WBTC), leading to incorrect delta amounts.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The miscalculation of `erc20Delta` and `ethDelta` is a critical flaw that could lead to incorrect token transfers and financial losses. This issue should be flagged and mitigated.

---

#### **[M-01] Swap.sol implements potentially dangerous transfer**

**Report Description**:  
The use of `transfer()` in `Swap.sol` may lead to unintended outcomes when sending ETH to smart contracts. If the recipient's fallback function uses more than 2300 gas or is not payable, funds may be lost. This is particularly risky in the context of gas cost changes.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The use of `transfer()` is a known anti-pattern in Solidity, and the described risks are valid. This issue should be flagged and mitigated by using `call` with proper gas limits or other secure transfer mechanisms.

---

#### **[M-02] Unused ERC20 tokens are not refunded**

**Report Description**:  
The current implementation of `fillZrxQuote()` only refunds ETH, leaving unused ERC20 tokens in the contract. This could lead to unintended token accumulation and potential loss of user funds.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The failure to refund unused ERC20 tokens is a significant oversight that could lead to financial losses for users. This issue should be flagged and mitigated by implementing proper refund mechanisms.

---

#### **[M-03] Users can avoid paying fees for ETH swaps**

**Report Description**:  
Users can exploit the system by setting `zrxBuyTokenAddress` to a malicious contract, tricking the system into treating an ETH swap as an ERC20 swap. This allows them to receive ETH without paying swap fees.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The described exploit is a serious flaw that could lead to revenue loss for the protocol. This issue should be flagged and mitigated by implementing proper validation and fee calculation logic.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- **[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets**

**Missed Issues from Issue Report**:  
- **[H-02] Wrong calculation of `erc20Delta` and `ethDelta`**  
- **[M-01] Swap.sol implements potentially dangerous transfer**  
- **[M-02] Unused ERC20 tokens are not refunded**  
- **[M-03] Users can avoid paying fees for ETH swaps**

---

### **Conclusion**  
The response list partially addresses one issue ([H-01]) but misses or inadequately covers the remaining issues. The gaps in coverage, particularly for critical issues like miscalculations and fee avoidance, indicate a need for a more comprehensive review and mitigation strategy.",1,1,3,11,"```
None.
```",0.0
