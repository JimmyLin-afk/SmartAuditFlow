Severity,Description,Line
High,"Reentrancy in Basket.burn(uint256) (contracts/Basket.sol#89-100):
	External calls:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#96)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransfer(to,tokenAmount) (contracts/Basket.sol#233)
	External calls sending eth:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#96)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- _burn(msg.sender,amount) (contracts/Basket.sol#97)
		- _balances[account] = accountBalance - amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#290)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#40) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#282-298)
	- ERC20Upgradeable._mint(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#256-269)
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#227-245)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#106-108)
	- _burn(msg.sender,amount) (contracts/Basket.sol#97)
		- _totalSupply -= amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#292)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#44) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#282-298)
	- ERC20Upgradeable._mint(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#256-269)
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#99-101)
",89-100
High,"Reentrancy in Basket.mintTo(uint256,address) (contracts/Basket.sol#76-87):
	External calls:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#82)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransferFrom(from,address(this),tokenAmount) (contracts/Basket.sol#240)
	External calls sending eth:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#82)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- _mint(to,amount) (contracts/Basket.sol#84)
		- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#264)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#40) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#282-298)
	- ERC20Upgradeable._mint(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#256-269)
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#227-245)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#106-108)
	- _mint(to,amount) (contracts/Basket.sol#84)
		- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#44) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#282-298)
	- ERC20Upgradeable._mint(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#256-269)
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#99-101)
",76-87
Medium,"Basket.handleFees() (contracts/Basket.sol#110-129) performs a multiplication on the result of a division:
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#118)
	- _mint(publisher,fee * (BASE - factory.ownerSplit()) / BASE) (contracts/Basket.sol#120)
",110-129
Medium,"Basket.handleFees() (contracts/Basket.sol#110-129) performs a multiplication on the result of a division:
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#118)
	- _mint(Ownable(address(factory)).owner(),fee * factory.ownerSplit() / BASE) (contracts/Basket.sol#121)
",110-129
Medium,"Basket.handleFees() (contracts/Basket.sol#110-129) performs a multiplication on the result of a division:
	- feePct = timeDiff * licenseFee / ONE_YEAR (contracts/Basket.sol#117)
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#118)
",110-129
Medium,"Basket.changeLicenseFee(uint256) (contracts/Basket.sol#152-166) uses a dangerous strict equality:
	- require(bool)(pendingLicenseFee.licenseFee == newLicenseFee) (contracts/Basket.sol#155)
",152-166
Medium,"Basket.handleFees() (contracts/Basket.sol#110-129) uses a dangerous strict equality:
	- lastFee == 0 (contracts/Basket.sol#111)
",110-129
Medium,"Reentrancy in Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194):
	External calls:
	- auction.killAuction() (contracts/Basket.sol#182)
	State variables written after the call(s):
	- pendingWeights.tokens = _tokens (contracts/Basket.sol#184)
	Basket.pendingWeights (contracts/Basket.sol#29) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#207-214)
	- Basket.getPendingWeights() (contracts/Basket.sol#49-51)
	- Basket.pendingWeights (contracts/Basket.sol#29)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194)
	- Basket.setNewWeights() (contracts/Basket.sol#196-204)
	- pendingWeights.weights = _weights (contracts/Basket.sol#185)
	Basket.pendingWeights (contracts/Basket.sol#29) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#207-214)
	- Basket.getPendingWeights() (contracts/Basket.sol#49-51)
	- Basket.pendingWeights (contracts/Basket.sol#29)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194)
	- Basket.setNewWeights() (contracts/Basket.sol#196-204)
	- pendingWeights.block = block.number (contracts/Basket.sol#186)
	Basket.pendingWeights (contracts/Basket.sol#29) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#207-214)
	- Basket.getPendingWeights() (contracts/Basket.sol#49-51)
	- Basket.pendingWeights (contracts/Basket.sol#29)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194)
	- Basket.setNewWeights() (contracts/Basket.sol#196-204)
",170-194
Medium,"Basket.approveUnderlying(address) (contracts/Basket.sol#224-228) ignores return value by IERC20(tokens[i]).approve(spender,type()(uint256).max) (contracts/Basket.sol#226)
",224-228
Low,"Reentrancy in Basket.initialize(IFactory.Proposal,IAuction) (contracts/Basket.sol#36-47):
	External calls:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#44)
		- IERC20(tokens[i]).approve(spender,type()(uint256).max) (contracts/Basket.sol#226)
	State variables written after the call(s):
	- __ERC20_init(proposal.tokenName,proposal.tokenSymbol) (contracts/Basket.sol#46)
		- _name = name_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#60)
	- __ERC20_init(proposal.tokenName,proposal.tokenSymbol) (contracts/Basket.sol#46)
		- _symbol = symbol_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#61)
",36-47
Low,"Reentrancy in Basket.mintTo(uint256,address) (contracts/Basket.sol#76-87):
	External calls:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#82)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransferFrom(from,address(this),tokenAmount) (contracts/Basket.sol#240)
	External calls sending eth:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#82)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	Event emitted after the call(s):
	- Minted(to,amount) (contracts/Basket.sol#86)
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#266)
		- _mint(to,amount) (contracts/Basket.sol#84)
",76-87
Low,"Reentrancy in Basket.setNewWeights() (contracts/Basket.sol#196-204):
	External calls:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#201)
		- IERC20(tokens[i]).approve(spender,type()(uint256).max) (contracts/Basket.sol#226)
	Event emitted after the call(s):
	- WeightsSet() (contracts/Basket.sol#203)
",196-204
Low,"Reentrancy in Basket.burn(uint256) (contracts/Basket.sol#89-100):
	External calls:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#96)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransfer(to,tokenAmount) (contracts/Basket.sol#233)
	External calls sending eth:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#96)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	Event emitted after the call(s):
	- Burned(msg.sender,amount) (contracts/Basket.sol#99)
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#295)
		- _burn(msg.sender,amount) (contracts/Basket.sol#97)
",89-100
Low,"Reentrancy in Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194):
	External calls:
	- auction.startAuction() (contracts/Basket.sol#176)
	Event emitted after the call(s):
	- PublishedNewIndex(publisher) (contracts/Basket.sol#178)
",170-194
Low,"Basket.burn(uint256) (contracts/Basket.sol#89-100) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(balanceOf(msg.sender) >= amount) (contracts/Basket.sol#92)
",89-100
Low,"Basket.handleFees() (contracts/Basket.sol#110-129) uses timestamp for comparisons
	Dangerous comparisons:
	- lastFee == 0 (contracts/Basket.sol#111)
",110-129
Informational,"Basket.mintTo(uint256,address) (contracts/Basket.sol#76-87) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#77)
",76-87
Informational,"Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#170-194) compares to a boolean constant:
	-auction.auctionOngoing() == false (contracts/Basket.sol#175)
",170-194
Informational,"Basket.burn(uint256) (contracts/Basket.sol#89-100) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#90)
",89-100
Informational,"Basket.deleteNewIndex() (contracts/Basket.sol#207-214) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#209)
",207-214
