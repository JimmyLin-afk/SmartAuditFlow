Check,Severity,Description,Filename,Line
arbitrary-send-eth,High,"Maximillion.repayBehalfExplicit(address,CEther) (contracts/Maximillion.sol#39-48) sends eth to arbitrary user
	Dangerous calls:
	- cEther_.repayBorrowBehalf.value(borrows)(borrower) (contracts/Maximillion.sol#43)
","address,CEther) (contracts/Maximillion.sol",39-48
arbitrary-send-eth,High,"GovernorAlpha.execute(uint256) (contracts/Governance/GovernorAlpha.sol#194-202) sends eth to arbitrary user
	Dangerous calls:
	- timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#199)
",uint256) (contracts/Governance/GovernorAlpha.sol,194-202
weak-prng,High,"UniswapV2OracleLibrary.currentBlockTimestamp() (contracts/UniswapOracle/UniswapLib.sol#37-39) uses a weak PRNG: ""uint32(block.timestamp % 2 ** 32) (contracts/UniswapOracle/UniswapLib.sol#38)"" 
",) (contracts/UniswapOracle/UniswapLib.sol,37-39
controlled-delegatecall,High,"Unitroller.fallback() (contracts/Unitroller.sol#137-149) uses delegatecall to a input-controlled function id
	- (success,None) = comptrollerImplementation.delegatecall(msg.data) (contracts/Unitroller.sol#139)
",) (contracts/Unitroller.sol,137-149
unchecked-transfer,High,"Reservoir.drip() (contracts/Reservoir.sol#46-67) ignores return value by token_.transfer(target_,toDrip_) (contracts/Reservoir.sol#64)
",) (contracts/Reservoir.sol,46-67
unchecked-transfer,High,"Comptroller.transferComp(address,uint256,uint256) (contracts/Comptroller.sol#1290-1300) ignores return value by blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
","address,uint256,uint256) (contracts/Comptroller.sol",1290-1300
uninitialized-state,High,"UnitrollerAdminStorage.comptrollerImplementation (contracts/ComptrollerStorage.sol#22) is never initialized. It is used in:
	- Comptroller.adminOrInitializing() (contracts/Comptroller.sol#1148-1150)
",) (contracts/Comptroller.sol,1148-1150
boolean-cst,Medium,"Comptroller.seizeVerify(address,address,address,address,uint256) (contracts/Comptroller.sol#592-609) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#606)
","address,address,address,address,uint256) (contracts/Comptroller.sol",592-609
boolean-cst,Medium,"Comptroller.repayBorrowVerify(address,address,address,uint256,uint256) (contracts/Comptroller.sol#457-474) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#471)
","address,address,address,uint256,uint256) (contracts/Comptroller.sol",457-474
boolean-cst,Medium,"Comptroller.mintVerify(address,address,uint256,uint256) (contracts/Comptroller.sol#270-281) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#278)
","address,address,uint256,uint256) (contracts/Comptroller.sol",270-281
boolean-cst,Medium,"Comptroller.transferVerify(address,address,address,uint256) (contracts/Comptroller.sol#645-656) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#653)
","address,address,address,uint256) (contracts/Comptroller.sol",645-656
boolean-cst,Medium,"Comptroller.borrowVerify(address,address,uint256) (contracts/Comptroller.sol#408-418) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#415)
","address,address,uint256) (contracts/Comptroller.sol",408-418
boolean-cst,Medium,"Comptroller.liquidateBorrowVerify(address,address,address,address,uint256,uint256) (contracts/Comptroller.sol#527-546) uses a Boolean constant improperly:
	-false (contracts/Comptroller.sol#543)
","address,address,address,address,uint256,uint256) (contracts/Comptroller.sol",527-546
divide-before-multiply,Medium,"JumpRateModelV2.getSupplyRate(uint256,uint256,uint256,uint256) (contracts/JumpRateModelV2.sol#35-46) performs a multiplication on the result of a division:
	- rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18) (contracts/JumpRateModelV2.sol#44)
	- utilizationRate(cash,borrows,reserves).mul(rateToPool).div(1e18) (contracts/JumpRateModelV2.sol#45)
","uint256,uint256,uint256,uint256) (contracts/JumpRateModelV2.sol",35-46
divide-before-multiply,Medium,"JumpRateModel.getSupplyRate(uint256,uint256,uint256,uint256) (contracts/JumpRateModel.sol#101-106) performs a multiplication on the result of a division:
	- rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18) (contracts/JumpRateModel.sol#104)
	- utilizationRate(cash,borrows,reserves).mul(rateToPool).div(1e18) (contracts/JumpRateModel.sol#105)
","uint256,uint256,uint256,uint256) (contracts/JumpRateModel.sol",101-106
divide-before-multiply,Medium,"DAIInterestRateModelV3.dsrPerBlock() (contracts/DAIInterestRateModelV3.sol#84-89) performs a multiplication on the result of a division:
	- pot.dsr().sub(1e27).div(1e9).mul(15) (contracts/DAIInterestRateModelV3.sol#85-88)
",) (contracts/DAIInterestRateModelV3.sol,84-89
divide-before-multiply,Medium,"BaseJumpRateModelV2.getSupplyRate(uint256,uint256,uint256,uint256) (contracts/BaseJumpRateModelV2.sol#117-122) performs a multiplication on the result of a division:
	- rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18) (contracts/BaseJumpRateModelV2.sol#120)
	- utilizationRate(cash,borrows,reserves).mul(rateToPool).div(1e18) (contracts/BaseJumpRateModelV2.sol#121)
","uint256,uint256,uint256,uint256) (contracts/BaseJumpRateModelV2.sol",117-122
divide-before-multiply,Medium,"DAIInterestRateModelV3.poke() (contracts/DAIInterestRateModelV3.sol#94-109) performs a multiplication on the result of a division:
	- stabilityFeePerBlock = duty.add(jug.base()).sub(1e27).mul(1e18).div(1e27).mul(15) (contracts/DAIInterestRateModelV3.sol#96)
",) (contracts/DAIInterestRateModelV3.sol,94-109
erc20-interface,Medium,"EIP20NonStandardInterface (contracts/EIP20NonStandardInterface.sol#10-72) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (contracts/EIP20NonStandardInterface.sol#50)
",contracts/EIP20NonStandardInterface.sol,10-72
erc20-interface,Medium,"EIP20NonStandardInterface (contracts/EIP20NonStandardInterface.sol#10-72) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (contracts/EIP20NonStandardInterface.sol#36)
",contracts/EIP20NonStandardInterface.sol,10-72
incorrect-equality,Medium,"CToken.accrueInterest() (contracts/CToken.sol#386-464) uses a dangerous strict equality:
	- require(bool,string)(mathErr == MathError.NO_ERROR,could not calculate block delta) (contracts/CToken.sol#408)
",) (contracts/CToken.sol,386-464
incorrect-equality,Medium,"CToken.accrueInterest() (contracts/CToken.sol#386-464) uses a dangerous strict equality:
	- accrualBlockNumberPrior == currentBlockNumber (contracts/CToken.sol#392)
",) (contracts/CToken.sol,386-464
incorrect-equality,Medium,"CToken.exchangeRateStored() (contracts/CToken.sol#330-334) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,exchangeRateStored: exchangeRateStoredInternal failed) (contracts/CToken.sol#332)
",) (contracts/CToken.sol,330-334
incorrect-equality,Medium,"CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol#28-59) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting comptroller failed) (contracts/CToken.sol#43)
","ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol",28-59
incorrect-equality,Medium,"CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022) uses a dangerous strict equality:
	- require(bool,string)(seizeError == uint256(Error.NO_ERROR),token seizure failed) (contracts/CToken.sol#1013)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
incorrect-equality,Medium,"CEther.requireNoError(uint256,string) (contracts/CEther.sol#150-169) uses a dangerous strict equality:
	- require(bool,string)(errCode == uint256(Error.NO_ERROR),string(fullMessage)) (contracts/CEther.sol#168)
","uint256,string) (contracts/CEther.sol",150-169
incorrect-equality,Medium,"CToken.exchangeRateStoredInternal() (contracts/CToken.sol#341-371) uses a dangerous strict equality:
	- _totalSupply == 0 (contracts/CToken.sol#343)
",) (contracts/CToken.sol,341-371
incorrect-equality,Medium,"Exponential.mul_(uint256,uint256,string) (contracts/Exponential.sol#307-314) uses a dangerous strict equality:
	- a == 0 || b == 0 (contracts/Exponential.sol#308)
","uint256,uint256,string) (contracts/Exponential.sol",307-314
incorrect-equality,Medium,"CToken.mintFresh(address,uint256) (contracts/CToken.sol#499-563) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED) (contracts/CToken.sol#546)
","address,uint256) (contracts/CToken.sol",499-563
incorrect-equality,Medium,"CarefulMath.divUInt(uint256,uint256) (contracts/CarefulMath.sol#43-49) uses a dangerous strict equality:
	- b == 0 (contracts/CarefulMath.sol#44)
","uint256,uint256) (contracts/CarefulMath.sol",43-49
incorrect-equality,Medium,"CEther.requireNoError(uint256,string) (contracts/CEther.sol#150-169) uses a dangerous strict equality:
	- errCode == uint256(Error.NO_ERROR) (contracts/CEther.sol#151)
","uint256,string) (contracts/CEther.sol",150-169
incorrect-equality,Medium,"Blo._writeCheckpoint(address,uint32,uint96,uint96) (contracts/Governance/Blo.sol#264-275) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/Governance/Blo.sol#267)
","address,uint32,uint96,uint96) (contracts/Governance/Blo.sol",264-275
incorrect-equality,Medium,"Reservoir.mul(uint256,uint256,string) (contracts/Reservoir.sol#83-90) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (contracts/Reservoir.sol#88)
","uint256,uint256,string) (contracts/Reservoir.sol",83-90
incorrect-equality,Medium,"CToken.transferFrom(address,address,uint256) (contracts/CToken.sol#148-150) uses a dangerous strict equality:
	- transferTokens(msg.sender,src,dst,amount) == uint256(Error.NO_ERROR) (contracts/CToken.sol#149)
","address,address,uint256) (contracts/CToken.sol",148-150
incorrect-equality,Medium,"CToken.repayBorrowFresh(address,address,uint256) (contracts/CToken.sol#852-918) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED) (contracts/CToken.sol#901)
","address,address,uint256) (contracts/CToken.sol",852-918
incorrect-equality,Medium,"UniswapAnchoredView.mul(uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol#233-238) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,multiplication overflow) (contracts/UniswapOracle/UniswapAnchoredView.sol#236)
","uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol",233-238
incorrect-equality,Medium,"CToken.mintFresh(address,uint256) (contracts/CToken.sol#499-563) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED) (contracts/CToken.sol#549)
","address,uint256) (contracts/CToken.sol",499-563
incorrect-equality,Medium,"CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol#28-59) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting interest rate model failed) (contracts/CToken.sol#51)
","ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol",28-59
incorrect-equality,Medium,"CToken.balanceOfUnderlying(address) (contracts/CToken.sol#192-197) uses a dangerous strict equality:
	- require(bool,string)(mErr == MathError.NO_ERROR,balance could not be calculated) (contracts/CToken.sol#195)
",address) (contracts/CToken.sol,192-197
incorrect-equality,Medium,"CToken.repayBorrowFresh(address,address,uint256) (contracts/CToken.sol#852-918) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED) (contracts/CToken.sol#904)
","address,address,uint256) (contracts/CToken.sol",852-918
incorrect-equality,Medium,"CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022) uses a dangerous strict equality:
	- require(bool,string)(amountSeizeError == uint256(Error.NO_ERROR),LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED) (contracts/CToken.sol#999)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
incorrect-equality,Medium,"CEther.getCashPrior() (contracts/CEther.sol#126-130) uses a dangerous strict equality:
	- require(bool)(err == MathError.NO_ERROR) (contracts/CEther.sol#128)
",) (contracts/CEther.sol,126-130
incorrect-equality,Medium,"UniswapAnchoredView.mul(uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol#233-238) uses a dangerous strict equality:
	- a == 0 (contracts/UniswapOracle/UniswapAnchoredView.sol#234)
","uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol",233-238
incorrect-equality,Medium,"CToken.borrowBalanceStored(address) (contracts/CToken.sol#273-277) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,borrowBalanceStored: borrowBalanceStoredInternal failed) (contracts/CToken.sol#275)
",address) (contracts/CToken.sol,273-277
incorrect-equality,Medium,"Exponential.mulExp(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#148-168) uses a dangerous strict equality:
	- assert(bool)(err2 == MathError.NO_ERROR) (contracts/Exponential.sol#165)
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",148-168
incorrect-equality,Medium,"CToken.transfer(address,uint256) (contracts/CToken.sol#137-139) uses a dangerous strict equality:
	- transferTokens(msg.sender,msg.sender,dst,amount) == uint256(Error.NO_ERROR) (contracts/CToken.sol#138)
","address,uint256) (contracts/CToken.sol",137-139
incorrect-equality,Medium,"CToken.mintFresh(address,uint256) (contracts/CToken.sol#499-563) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_EXCHANGE_CALCULATION_FAILED) (contracts/CToken.sol#538)
","address,uint256) (contracts/CToken.sol",499-563
incorrect-equality,Medium,"CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol#28-59) uses a dangerous strict equality:
	- require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once) (contracts/CToken.sol#35)
","ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CToken.sol",28-59
incorrect-equality,Medium,"Exponential.mul_(uint256,uint256,string) (contracts/Exponential.sol#307-314) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (contracts/Exponential.sol#312)
","uint256,uint256,string) (contracts/Exponential.sol",307-314
incorrect-equality,Medium,"Comptroller._addCompMarketInternal(address) (contracts/Comptroller.sol#1387-1408) uses a dangerous strict equality:
	- compSupplyState[cToken].index == 0 && compSupplyState[cToken].block == 0 (contracts/Comptroller.sol#1395)
",address) (contracts/Comptroller.sol,1387-1408
incorrect-equality,Medium,"CarefulMath.mulUInt(uint256,uint256) (contracts/CarefulMath.sol#26-38) uses a dangerous strict equality:
	- a == 0 (contracts/CarefulMath.sol#27)
","uint256,uint256) (contracts/CarefulMath.sol",26-38
incorrect-equality,Medium,"UniswapAnchoredView.priceInternal(UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol#97-113) uses a dangerous strict equality:
	- timeElapsed >= anchorPeriod || prices[config.symbolHash] == 0 (contracts/UniswapOracle/UniswapAnchoredView.sol#102)
",UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol,97-113
incorrect-equality,Medium,"CEther.doTransferIn(address,uint256) (contracts/CEther.sol#138-143) uses a dangerous strict equality:
	- require(bool,string)(msg.value == amount,value mismatch) (contracts/CEther.sol#141)
","address,uint256) (contracts/CEther.sol",138-143
reentrancy-no-eth,Medium,"Reentrancy in GovernorAlpha.queue(uint256) (contracts/Governance/GovernorAlpha.sol#178-187):
	External calls:
	- _queueOrRevert(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],eta) (contracts/Governance/GovernorAlpha.sol#183)
		- timelock.queueTransaction(target,value,signature,data,eta) (contracts/Governance/GovernorAlpha.sol#191)
	State variables written after the call(s):
	- proposal.eta = eta (contracts/Governance/GovernorAlpha.sol#185)
	GovernorAlpha.proposals (contracts/Governance/GovernorAlpha.sol#106) can be used in cross function reentrancies:
	- GovernorAlpha._castVote(address,uint256,bool) (contracts/Governance/GovernorAlpha.sol#263-281)
	- GovernorAlpha.cancel(uint256) (contracts/Governance/GovernorAlpha.sol#204-217)
	- GovernorAlpha.execute(uint256) (contracts/Governance/GovernorAlpha.sol#194-202)
	- GovernorAlpha.getActions(uint256) (contracts/Governance/GovernorAlpha.sol#219-222)
	- GovernorAlpha.getReceipt(uint256,address) (contracts/Governance/GovernorAlpha.sol#224-226)
	- GovernorAlpha.proposals (contracts/Governance/GovernorAlpha.sol#106)
	- GovernorAlpha.propose(address[],uint256[],string[],bytes[],string) (contracts/Governance/GovernorAlpha.sol#138-176)
	- GovernorAlpha.queue(uint256) (contracts/Governance/GovernorAlpha.sol#178-187)
	- GovernorAlpha.state(uint256) (contracts/Governance/GovernorAlpha.sol#228-248)
",uint256) (contracts/Governance/GovernorAlpha.sol,178-187
reentrancy-no-eth,Medium,"Reentrancy in Comptroller.seizeAllowed(address,address,address,address,uint256) (contracts/Comptroller.sol#556-582):
	External calls:
	- distributeSupplierComp(cTokenCollateral,borrower,false) (contracts/Comptroller.sol#578)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(cTokenCollateral,liquidator,false) (contracts/Comptroller.sol#579)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	State variables written after the call(s):
	- distributeSupplierComp(cTokenCollateral,liquidator,false) (contracts/Comptroller.sol#579)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,0) (contracts/Comptroller.sol#1257)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,compClaimThreshold) (contracts/Comptroller.sol#1257)
	ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- distributeSupplierComp(cTokenCollateral,liquidator,false) (contracts/Comptroller.sol#579)
		- compSupplierIndex[cToken][supplier] = supplyIndex.mantissa (contracts/Comptroller.sol#1247)
	ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
","address,address,address,address,uint256) (contracts/Comptroller.sol",556-582
reentrancy-no-eth,Medium,"Reentrancy in CToken.redeemFresh(address,uint256,uint256) (contracts/CToken.sol#615-709):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (contracts/CToken.sol#655)
	State variables written after the call(s):
	- totalSupply = vars.totalSupplyNew (contracts/CToken.sol#690)
	CTokenStorage.totalSupply (contracts/CTokenInterfaces.sol#93) can be used in cross function reentrancies:
	- CToken.exchangeRateStoredInternal() (contracts/CToken.sol#341-371)
	- CTokenStorage.totalSupply (contracts/CTokenInterfaces.sol#93)
","address,uint256,uint256) (contracts/CToken.sol",615-709
reentrancy-no-eth,Medium,"Reentrancy in Comptroller.claimComp(address[],CToken[],bool,bool) (contracts/Comptroller.sol#1328-1346):
	External calls:
	- distributeBorrowerComp(address(cToken),holders[j],borrowIndex,true) (contracts/Comptroller.sol#1336)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(address(cToken),holders[j_scope_0],true) (contracts/Comptroller.sol#1342)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	State variables written after the call(s):
	- distributeBorrowerComp(address(cToken),holders[j],borrowIndex,true) (contracts/Comptroller.sol#1336)
		- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,0) (contracts/Comptroller.sol#1278)
		- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,compClaimThreshold) (contracts/Comptroller.sol#1278)
	ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- distributeSupplierComp(address(cToken),holders[j_scope_0],true) (contracts/Comptroller.sol#1342)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,0) (contracts/Comptroller.sol#1257)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,compClaimThreshold) (contracts/Comptroller.sol#1257)
	ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- updateCompBorrowIndex(address(cToken),borrowIndex) (contracts/Comptroller.sol#1334)
		- compBorrowState[cToken] = CompMarketState({index:safe224(index.mantissa,new index exceeds 224 bits),block:safe32(blockNumber,block number exceeds 32 bits)}) (contracts/Comptroller.sol#1229-1232)
		- borrowState.block = safe32(blockNumber,block number exceeds 32 bits) (contracts/Comptroller.sol#1234)
	ComptrollerV3Storage.compBorrowState (contracts/ComptrollerStorage.sol#121) can be used in cross function reentrancies:
	- Comptroller._addCompMarketInternal(address) (contracts/Comptroller.sol#1387-1408)
	- ComptrollerV3Storage.compBorrowState (contracts/ComptrollerStorage.sol#121)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- Comptroller.updateCompBorrowIndex(address,Exponential.Exp) (contracts/Comptroller.sol#1219-1236)
	- distributeBorrowerComp(address(cToken),holders[j],borrowIndex,true) (contracts/Comptroller.sol#1336)
		- compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa (contracts/Comptroller.sol#1271)
	ComptrollerV3Storage.compBorrowerIndex (contracts/ComptrollerStorage.sol#127) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compBorrowerIndex (contracts/ComptrollerStorage.sol#127)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- distributeSupplierComp(address(cToken),holders[j_scope_0],true) (contracts/Comptroller.sol#1342)
		- compSupplierIndex[cToken][supplier] = supplyIndex.mantissa (contracts/Comptroller.sol#1247)
	ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- updateCompSupplyIndex(address(cToken)) (contracts/Comptroller.sol#1340)
		- compSupplyState[cToken] = CompMarketState({index:safe224(index.mantissa,new index exceeds 224 bits),block:safe32(blockNumber,block number exceeds 32 bits)}) (contracts/Comptroller.sol#1206-1209)
		- supplyState.block = safe32(blockNumber,block number exceeds 32 bits) (contracts/Comptroller.sol#1211)
	ComptrollerV3Storage.compSupplyState (contracts/ComptrollerStorage.sol#118) can be used in cross function reentrancies:
	- Comptroller._addCompMarketInternal(address) (contracts/Comptroller.sol#1387-1408)
	- ComptrollerV3Storage.compSupplyState (contracts/ComptrollerStorage.sol#118)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- Comptroller.updateCompSupplyIndex(address) (contracts/Comptroller.sol#1196-1213)
","address[],CToken[],bool,bool) (contracts/Comptroller.sol",1328-1346
reentrancy-no-eth,Medium,"Reentrancy in Comptroller.refreshCompSpeedsInternal() (contracts/Comptroller.sol#1162-1190):
	External calls:
	- assetPrice = Exp({mantissa:oracle.getUnderlyingPrice(cToken_scope_1)}) (contracts/Comptroller.sol#1177)
	State variables written after the call(s):
	- compSpeeds[address(cToken_scope_3)] = newSpeed (contracts/Comptroller.sol#1187)
	ComptrollerV3Storage.compSpeeds (contracts/ComptrollerStorage.sol#115) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compSpeeds (contracts/ComptrollerStorage.sol#115)
	- Comptroller.refreshCompSpeedsInternal() (contracts/Comptroller.sol#1162-1190)
	- Comptroller.updateCompBorrowIndex(address,Exponential.Exp) (contracts/Comptroller.sol#1219-1236)
	- Comptroller.updateCompSupplyIndex(address) (contracts/Comptroller.sol#1196-1213)
",) (contracts/Comptroller.sol,1162-1190
reentrancy-no-eth,Medium,"Reentrancy in Comptroller.transferAllowed(address,address,address,uint256) (contracts/Comptroller.sol#619-636):
	External calls:
	- allowed = redeemAllowedInternal(cToken,src,transferTokens) (contracts/Comptroller.sol#625)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	- distributeSupplierComp(cToken,src,false) (contracts/Comptroller.sol#632)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(cToken,dst,false) (contracts/Comptroller.sol#633)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	State variables written after the call(s):
	- distributeSupplierComp(cToken,dst,false) (contracts/Comptroller.sol#633)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,0) (contracts/Comptroller.sol#1257)
		- compAccrued[supplier] = transferComp(supplier,supplierAccrued,compClaimThreshold) (contracts/Comptroller.sol#1257)
	ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130)
	- Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
	- distributeSupplierComp(cToken,dst,false) (contracts/Comptroller.sol#633)
		- compSupplierIndex[cToken][supplier] = supplyIndex.mantissa (contracts/Comptroller.sol#1247)
	ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124) can be used in cross function reentrancies:
	- ComptrollerV3Storage.compSupplierIndex (contracts/ComptrollerStorage.sol#124)
	- Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259)
","address,address,address,uint256) (contracts/Comptroller.sol",619-636
reentrancy-no-eth,Medium,"Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface) (contracts/CToken.sol#928-943):
	External calls:
	- error = cTokenCollateral.accrueInterest() (contracts/CToken.sol#935)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (contracts/CToken.sol#942)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (contracts/CToken.sol#956)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1049)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1090)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (contracts/CToken.sol#915)
		- (amountSeizeError,seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this),address(cTokenCollateral),actualRepayAmount) (contracts/CToken.sol#998)
		- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (contracts/CToken.sol#1009)
		- comptroller.liquidateBorrowVerify(address(this),address(cTokenCollateral),liquidator,borrower,actualRepayAmount,seizeTokens) (contracts/CToken.sol#1019)
	State variables written after the call(s):
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (contracts/CToken.sol#942)
		- totalBorrows = vars.totalBorrowsNew (contracts/CToken.sol#909)
	CTokenStorage.totalBorrows (contracts/CTokenInterfaces.sol#83) can be used in cross function reentrancies:
	- CToken.accrueInterest() (contracts/CToken.sol#386-464)
	- CToken.borrowRatePerBlock() (contracts/CToken.sol#237-239)
	- CToken.exchangeRateStoredInternal() (contracts/CToken.sol#341-371)
	- CToken.supplyRatePerBlock() (contracts/CToken.sol#245-247)
	- CTokenStorage.totalBorrows (contracts/CTokenInterfaces.sol#83)
","address,uint256,CTokenInterface) (contracts/CToken.sol",928-943
uninitialized-local,Medium,"CToken.redeemFresh(address,uint256,uint256).vars (contracts/CToken.sol#618) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CToken.mintFresh(address,uint256).vars (contracts/CToken.sol#511) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CToken._addReservesFresh(uint256).actualAddAmount (contracts/CToken.sol#1243) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"UniswapAnchoredView.getUnderlyingPriceView(address).price (contracts/UniswapOracle/UniswapAnchoredView.sol#123) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CToken.borrowFresh(address,uint256).vars (contracts/CToken.sol#755) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CToken.repayBorrowFresh(address,address,uint256).vars (contracts/CToken.sol#864) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"GovernorAlpha.__queueSetTimelockPendingAdmin(address,uint256) (contracts/Governance/GovernorAlpha.sol#293-296) ignores return value by timelock.queueTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (contracts/Governance/GovernorAlpha.sol#295)
","address,uint256) (contracts/Governance/GovernorAlpha.sol",293-296
unused-return,Medium,"Comptroller._supportMarket(CToken) (contracts/Comptroller.sol#1015-1033) ignores return value by cToken.isCToken() (contracts/Comptroller.sol#1024)
",CToken) (contracts/Comptroller.sol,1015-1033
unused-return,Medium,"UniswapAnchoredView.currentCumulativePrice(UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol#165-172) ignores return value by (cumulativePrice0,cumulativePrice1,None) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket) (contracts/UniswapOracle/UniswapAnchoredView.sol#166)
",UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol,165-172
unused-return,Medium,"DAIInterestRateModelV3.poke() (contracts/DAIInterestRateModelV3.sol#94-109) ignores return value by (duty,None) = jug.ilks(ETH-A) (contracts/DAIInterestRateModelV3.sol#95)
",) (contracts/DAIInterestRateModelV3.sol,94-109
unused-return,Medium,"Comptroller.exitMarket(address) (contracts/Comptroller.sol#183-233) ignores return value by (oErr,tokensHeld,amountOwed,None) = cToken.getAccountSnapshot(msg.sender) (contracts/Comptroller.sol#186)
",address) (contracts/Comptroller.sol,183-233
unused-return,Medium,"CompoundLens.setProposal(CompoundLens.GovProposal,GovernorAlpha,uint256) (contracts/Lens/CompoundLens.sol#207-228) ignores return value by (None,proposer,eta,startBlock,endBlock,forVotes,againstVotes,canceled,executed) = governor.proposals(proposalId) (contracts/Lens/CompoundLens.sol#208-218)
","CompoundLens.GovProposal,GovernorAlpha,uint256) (contracts/Lens/CompoundLens.sol",207-228
unused-return,Medium,"GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol#189-192) ignores return value by timelock.queueTransaction(target,value,signature,data,eta) (contracts/Governance/GovernorAlpha.sol#191)
","address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol",189-192
unused-return,Medium,"CErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CErc20.sol#23-36) ignores return value by EIP20Interface(underlying).totalSupply() (contracts/CErc20.sol#35)
","address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (contracts/CErc20.sol",23-36
unused-return,Medium,"GovernorAlpha.execute(uint256) (contracts/Governance/GovernorAlpha.sol#194-202) ignores return value by timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#199)
",uint256) (contracts/Governance/GovernorAlpha.sol,194-202
unused-return,Medium,"GovernorAlpha.__executeSetTimelockPendingAdmin(address,uint256) (contracts/Governance/GovernorAlpha.sol#298-301) ignores return value by timelock.executeTransaction(address(timelock),0,setPendingAdmin(address),abi.encode(newPendingAdmin),eta) (contracts/Governance/GovernorAlpha.sol#300)
","address,uint256) (contracts/Governance/GovernorAlpha.sol",298-301
shadowing-local,Low,"UniswapAnchoredView.getUnderlyingPriceView(address).price (contracts/UniswapOracle/UniswapAnchoredView.sol#123) shadows:
	- UniswapAnchoredView.price(string) (contracts/UniswapOracle/UniswapAnchoredView.sol#85-95) (function)
",string) (contracts/UniswapOracle/UniswapAnchoredView.sol,85-95
shadowing-local,Low,"Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (contracts/Exponential.sol#137) shadows:
	- Exponential.fraction(uint256,uint256) (contracts/Exponential.sol#349-351) (function)
","uint256,uint256) (contracts/Exponential.sol",349-351
shadowing-local,Low,"Comptroller.updateCompBorrowIndex(address,Exponential.Exp).compAccrued (contracts/Comptroller.sol#1226) shadows:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) (state variable)
",N/A,N/A
shadowing-local,Low,"Comptroller.updateCompSupplyIndex(address).compAccrued (contracts/Comptroller.sol#1203) shadows:
	- ComptrollerV3Storage.compAccrued (contracts/ComptrollerStorage.sol#130) (state variable)
",N/A,N/A
shadowing-local,Low,"GovernorAlpha.cancel(uint256).state (contracts/Governance/GovernorAlpha.sol#205) shadows:
	- GovernorAlpha.state(uint256) (contracts/Governance/GovernorAlpha.sol#228-248) (function)
",uint256) (contracts/Governance/GovernorAlpha.sol,228-248
events-maths,Low,"DAIInterestRateModelV3.updateJumpRateModel(uint256,uint256,uint256,uint256) (contracts/DAIInterestRateModelV3.sol#53-58) should emit an event for: 
	- gapPerBlock = gapPerYear / blocksPerYear (contracts/DAIInterestRateModelV3.sol#55) 
","uint256,uint256,uint256,uint256) (contracts/DAIInterestRateModelV3.sol",53-58
missing-zero-check,Low,"Timelock.setPendingAdmin(address).pendingAdmin_ (contracts/Timelock.sol#55) lacks a zero-check on :
		- pendingAdmin = pendingAdmin_ (contracts/Timelock.sol#57)
",N/A,N/A
missing-zero-check,Low,"GovernorAlpha.constructor(address,address,address).guardian_ (contracts/Governance/GovernorAlpha.sol#132) lacks a zero-check on :
		- guardian = guardian_ (contracts/Governance/GovernorAlpha.sol#135)
",N/A,N/A
missing-zero-check,Low,"Unitroller._setPendingImplementation(address).newPendingImplementation (contracts/Unitroller.sol#40) lacks a zero-check on :
		- pendingComptrollerImplementation = newPendingImplementation (contracts/Unitroller.sol#48)
",N/A,N/A
missing-zero-check,Low,"Comptroller._setBorrowCapGuardian(address).newBorrowCapGuardian (contracts/Comptroller.sol#1067) lacks a zero-check on :
		- borrowCapGuardian = newBorrowCapGuardian (contracts/Comptroller.sol#1074)
",N/A,N/A
missing-zero-check,Low,"Unitroller._setPendingAdmin(address).newPendingAdmin (contracts/Unitroller.sol#87) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (contracts/Unitroller.sol#97)
",N/A,N/A
missing-zero-check,Low,"CEther.constructor(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8,address).admin_ (contracts/CEther.sol#29) lacks a zero-check on :
		- admin = admin_ (contracts/CEther.sol#36)
",N/A,N/A
missing-zero-check,Low,"Reservoir.constructor(uint256,EIP20Interface,address).target_ (contracts/Reservoir.sol#33) lacks a zero-check on :
		- target = target_ (contracts/Reservoir.sol#37)
",N/A,N/A
missing-zero-check,Low,"Timelock.constructor(address,uint256).admin_ (contracts/Timelock.sol#28) lacks a zero-check on :
		- admin = admin_ (contracts/Timelock.sol#32)
",N/A,N/A
missing-zero-check,Low,"CErc20Immutable.constructor(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8,address).admin_ (contracts/CErc20Immutable.sol#31) lacks a zero-check on :
		- admin = admin_ (contracts/CErc20Immutable.sol#39)
",N/A,N/A
missing-zero-check,Low,"Comptroller._setPauseGuardian(address).newPauseGuardian (contracts/Comptroller.sol#1085) lacks a zero-check on :
		- pauseGuardian = newPauseGuardian (contracts/Comptroller.sol#1094)
",N/A,N/A
missing-zero-check,Low,"Comptroller._setCompAddress(address)._comp (contracts/Comptroller.sol#1354) lacks a zero-check on :
		- comp = _comp (contracts/Comptroller.sol#1356)
",N/A,N/A
missing-zero-check,Low,"CToken._setPendingAdmin(address).newPendingAdmin (contracts/CToken.sol#1104) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (contracts/CToken.sol#1114)
",N/A,N/A
missing-zero-check,Low,"CErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8).underlying_ (contracts/CErc20.sol#23) lacks a zero-check on :
		- underlying = underlying_ (contracts/CErc20.sol#34)
",N/A,N/A
missing-zero-check,Low,"Timelock.executeTransaction(address,uint256,string,bytes,uint256).target (contracts/Timelock.sol#82) lacks a zero-check on :
		- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#101)
",N/A,N/A
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: tokenBalance = underlying.balanceOf(account) (contracts/Lens/CompoundLens.sol#105)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: (isListed,collateralFactorMantissa) = comptroller.markets(address(cToken)) (contracts/Lens/CompoundLens.sol#43)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"CompoundLens.cTokenUnderlyingPrice(CToken) (contracts/Lens/CompoundLens.sol#133-141) has external calls inside a loop: priceOracle = comptroller.oracle() (contracts/Lens/CompoundLens.sol#135)
",CToken) (contracts/Lens/CompoundLens.sol,133-141
calls-loop,Low,"CompoundLens.getCompVotes(Blo,address,uint32[]) (contracts/Lens/CompoundLens.sol#301-310) has external calls inside a loop: res[i] = CompVotes({blockNumber:uint256(blockNumbers[i]),votes:uint256(comp.getPriorVotes(account,blockNumbers[i]))}) (contracts/Lens/CompoundLens.sol#304-307)
","Blo,address,uint32[]) (contracts/Lens/CompoundLens.sol",301-310
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: borrowBalanceCurrent = cToken.borrowBalanceCurrent(account) (contracts/Lens/CompoundLens.sol#94)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"CompoundLens.getGovReceipts(GovernorAlpha,address,uint256[]) (contracts/Lens/CompoundLens.sol#176-189) has external calls inside a loop: receipt = governor.getReceipt(proposalIds[i],voter) (contracts/Lens/CompoundLens.sol#180)
","GovernorAlpha,address,uint256[]) (contracts/Lens/CompoundLens.sol",176-189
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: compareStrings(cToken.symbol(),bETH) (contracts/Lens/CompoundLens.sol#47)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: CTokenMetadata({cToken:address(cToken),exchangeRateCurrent:exchangeRateCurrent,supplyRatePerBlock:cToken.supplyRatePerBlock(),borrowRatePerBlock:cToken.borrowRatePerBlock(),reserveFactorMantissa:cToken.reserveFactorMantissa(),totalBorrows:cToken.totalBorrows(),totalReserves:cToken.totalReserves(),totalSupply:cToken.totalSupply(),totalCash:cToken.getCash(),isListed:isListed,collateralFactorMantissa:collateralFactorMantissa,underlyingAssetAddress:underlyingAssetAddress,cTokenDecimals:cToken.decimals(),underlyingDecimals:underlyingDecimals}) (contracts/Lens/CompoundLens.sol#56-71)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: tokenAllowance = underlying.allowance(account,address(cToken)) (contracts/Lens/CompoundLens.sol#106)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"CompoundLens.setProposal(CompoundLens.GovProposal,GovernorAlpha,uint256) (contracts/Lens/CompoundLens.sol#207-228) has external calls inside a loop: (None,proposer,eta,startBlock,endBlock,forVotes,againstVotes,canceled,executed) = governor.proposals(proposalId) (contracts/Lens/CompoundLens.sol#208-218)
","CompoundLens.GovProposal,GovernorAlpha,uint256) (contracts/Lens/CompoundLens.sol",207-228
calls-loop,Low,"UniswapV2OracleLibrary.currentCumulativePrices(address) (contracts/UniswapOracle/UniswapLib.sol#42-60) has external calls inside a loop: price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast() (contracts/UniswapOracle/UniswapLib.sol#47)
",address) (contracts/UniswapOracle/UniswapLib.sol,42-60
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: comptroller = ComptrollerLensInterface(address(cToken.comptroller())) (contracts/Lens/CompoundLens.sol#42)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"Comptroller.updateCompBorrowIndex(address,Exponential.Exp) (contracts/Comptroller.sol#1219-1236) has external calls inside a loop: borrowAmount = div_(CToken(cToken).totalBorrows(),marketBorrowIndex) (contracts/Comptroller.sol#1225)
","address,Exponential.Exp) (contracts/Comptroller.sol",1219-1236
calls-loop,Low,"GovernorAlpha.execute(uint256) (contracts/Governance/GovernorAlpha.sol#194-202) has external calls inside a loop: timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#199)
",uint256) (contracts/Governance/GovernorAlpha.sol,194-202
calls-loop,Low,"Comptroller.transferComp(address,uint256,uint256) (contracts/Comptroller.sol#1290-1300) has external calls inside a loop: bloRemaining = blo.balanceOf(address(this)) (contracts/Comptroller.sol#1293)
","address,uint256,uint256) (contracts/Comptroller.sol",1290-1300
calls-loop,Low,"Comptroller.updateCompSupplyIndex(address) (contracts/Comptroller.sol#1196-1213) has external calls inside a loop: supplyTokens = CToken(cToken).totalSupply() (contracts/Comptroller.sol#1202)
",address) (contracts/Comptroller.sol,1196-1213
calls-loop,Low,"GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol#189-192) has external calls inside a loop: timelock.queueTransaction(target,value,signature,data,eta) (contracts/Governance/GovernorAlpha.sol#191)
","address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol",189-192
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: balanceOf = cToken.balanceOf(account) (contracts/Lens/CompoundLens.sol#93)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259) has external calls inside a loop: supplierTokens = CToken(cToken).balanceOf(supplier) (contracts/Comptroller.sol#1254)
","address,address,bool) (contracts/Comptroller.sol",1243-1259
calls-loop,Low,"UniswapV2OracleLibrary.currentCumulativePrices(address) (contracts/UniswapOracle/UniswapLib.sol#42-60) has external calls inside a loop: (reserve0,reserve1,blockTimestampLast) = IUniswapV2Pair(pair).getReserves() (contracts/UniswapOracle/UniswapLib.sol#50)
",address) (contracts/UniswapOracle/UniswapLib.sol,42-60
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: underlyingAssetAddress = cErc20.underlying() (contracts/Lens/CompoundLens.sol#52)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"CompoundLens.cTokenUnderlyingPrice(CToken) (contracts/Lens/CompoundLens.sol#133-141) has external calls inside a loop: CTokenUnderlyingPrice({cToken:address(cToken),underlyingPrice:priceOracle.getUnderlyingPrice(cToken)}) (contracts/Lens/CompoundLens.sol#137-140)
",CToken) (contracts/Lens/CompoundLens.sol,133-141
calls-loop,Low,"CompoundLens.getGovProposals(GovernorAlpha,uint256[]) (contracts/Lens/CompoundLens.sol#230-257) has external calls inside a loop: (targets,values,signatures,calldatas) = governor.getActions(proposalIds[i]) (contracts/Lens/CompoundLens.sol#233-238)
","GovernorAlpha,uint256[]) (contracts/Lens/CompoundLens.sol",230-257
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: underlying = EIP20Interface(cErc20.underlying()) (contracts/Lens/CompoundLens.sol#104)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"UniswapV2OracleLibrary.currentCumulativePrices(address) (contracts/UniswapOracle/UniswapLib.sol#42-60) has external calls inside a loop: price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast() (contracts/UniswapOracle/UniswapLib.sol#46)
",address) (contracts/UniswapOracle/UniswapLib.sol,42-60
calls-loop,Low,"CompoundLens.cTokenUnderlyingPrice(CToken) (contracts/Lens/CompoundLens.sol#133-141) has external calls inside a loop: comptroller = ComptrollerLensInterface(address(cToken.comptroller())) (contracts/Lens/CompoundLens.sol#134)
",CToken) (contracts/Lens/CompoundLens.sol,133-141
calls-loop,Low,"GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol#189-192) has external calls inside a loop: require(bool,string)(! timelock.queuedTransactions(keccak256(bytes)(abi.encode(target,value,signature,data,eta))),GovernorAlpha::_queueOrRevert: proposal action already queued at eta) (contracts/Governance/GovernorAlpha.sol#190)
","address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol",189-192
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: underlyingDecimals = EIP20Interface(cErc20.underlying()).decimals() (contracts/Lens/CompoundLens.sol#53)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"Comptroller.transferComp(address,uint256,uint256) (contracts/Comptroller.sol#1290-1300) has external calls inside a loop: blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
","address,uint256,uint256) (contracts/Comptroller.sol",1290-1300
calls-loop,Low,"Comptroller.claimComp(address[],CToken[],bool,bool) (contracts/Comptroller.sol#1328-1346) has external calls inside a loop: borrowIndex = Exp({mantissa:cToken.borrowIndex()}) (contracts/Comptroller.sol#1333)
","address[],CToken[],bool,bool) (contracts/Comptroller.sol",1328-1346
calls-loop,Low,"CompoundLens.cTokenMetadata(CToken) (contracts/Lens/CompoundLens.sol#40-72) has external calls inside a loop: exchangeRateCurrent = cToken.exchangeRateCurrent() (contracts/Lens/CompoundLens.sol#41)
",CToken) (contracts/Lens/CompoundLens.sol,40-72
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: balanceOfUnderlying = cToken.balanceOfUnderlying(account) (contracts/Lens/CompoundLens.sol#95)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281) has external calls inside a loop: borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower),marketBorrowIndex) (contracts/Comptroller.sol#1275)
","address,address,Exponential.Exp,bool) (contracts/Comptroller.sol",1267-1281
calls-loop,Low,"CompoundLens.cTokenBalances(CToken,address) (contracts/Lens/CompoundLens.sol#92-117) has external calls inside a loop: compareStrings(cToken.symbol(),bETH) (contracts/Lens/CompoundLens.sol#99)
","CToken,address) (contracts/Lens/CompoundLens.sol",92-117
calls-loop,Low,"GovernorAlpha.cancel(uint256) (contracts/Governance/GovernorAlpha.sol#204-217) has external calls inside a loop: timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#213)
",uint256) (contracts/Governance/GovernorAlpha.sol,204-217
reentrancy-benign,Low,"Reentrancy in CToken.borrowFresh(address,uint256) (contracts/CToken.sol#738-801):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (contracts/CToken.sol#740)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (contracts/CToken.sol#782)
	- accountBorrows[borrower].interestIndex = borrowIndex (contracts/CToken.sol#783)
	- totalBorrows = vars.totalBorrowsNew (contracts/CToken.sol#784)
","address,uint256) (contracts/CToken.sol",738-801
reentrancy-benign,Low,"Reentrancy in Comptroller.transferAllowed(address,address,address,uint256) (contracts/Comptroller.sol#619-636):
	External calls:
	- allowed = redeemAllowedInternal(cToken,src,transferTokens) (contracts/Comptroller.sol#625)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	State variables written after the call(s):
	- updateCompSupplyIndex(cToken) (contracts/Comptroller.sol#631)
		- compSupplyState[cToken] = CompMarketState({index:safe224(index.mantissa,new index exceeds 224 bits),block:safe32(blockNumber,block number exceeds 32 bits)}) (contracts/Comptroller.sol#1206-1209)
		- supplyState.block = safe32(blockNumber,block number exceeds 32 bits) (contracts/Comptroller.sol#1211)
","address,address,address,uint256) (contracts/Comptroller.sol",619-636
reentrancy-benign,Low,"Reentrancy in CToken.seizeInternal(address,address,address,uint256) (contracts/CToken.sol#1047-1093):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1049)
	State variables written after the call(s):
	- accountTokens[borrower] = borrowerTokensNew (contracts/CToken.sol#1083)
	- accountTokens[liquidator] = liquidatorTokensNew (contracts/CToken.sol#1084)
","address,address,address,uint256) (contracts/CToken.sol",1047-1093
reentrancy-benign,Low,"Reentrancy in CToken.mintFresh(address,uint256) (contracts/CToken.sol#499-563):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (contracts/CToken.sol#501)
	State variables written after the call(s):
	- accountTokens[minter] = vars.accountTokensNew (contracts/CToken.sol#553)
	- totalSupply = vars.totalSupplyNew (contracts/CToken.sol#552)
","address,uint256) (contracts/CToken.sol",499-563
reentrancy-benign,Low,"Reentrancy in Comptroller.borrowAllowed(address,address,uint256) (contracts/Comptroller.sol#350-400):
	External calls:
	- (err_scope_0,None,shortfall) = getHypotheticalAccountLiquidityInternal(borrower,CToken(cToken),0,borrowAmount) (contracts/Comptroller.sol#386)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	State variables written after the call(s):
	- updateCompBorrowIndex(cToken,borrowIndex) (contracts/Comptroller.sol#396)
		- compBorrowState[cToken] = CompMarketState({index:safe224(index.mantissa,new index exceeds 224 bits),block:safe32(blockNumber,block number exceeds 32 bits)}) (contracts/Comptroller.sol#1229-1232)
		- borrowState.block = safe32(blockNumber,block number exceeds 32 bits) (contracts/Comptroller.sol#1234)
","address,address,uint256) (contracts/Comptroller.sol",350-400
reentrancy-benign,Low,"Reentrancy in CToken.transferTokens(address,address,address,uint256) (contracts/CToken.sol#70-129):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (contracts/CToken.sol#72)
	State variables written after the call(s):
	- accountTokens[src] = srcTokensNew (contracts/CToken.sol#115)
	- accountTokens[dst] = dstTokensNew (contracts/CToken.sol#116)
	- transferAllowances[src][spender] = allowanceNew (contracts/CToken.sol#120)
","address,address,address,uint256) (contracts/CToken.sol",70-129
reentrancy-benign,Low,"Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (contracts/CToken.sol#852-918):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (contracts/CToken.sol#907)
	- accountBorrows[borrower].interestIndex = borrowIndex (contracts/CToken.sol#908)
	- totalBorrows = vars.totalBorrowsNew (contracts/CToken.sol#909)
","address,address,uint256) (contracts/CToken.sol",852-918
reentrancy-benign,Low,"Reentrancy in CToken.redeemFresh(address,uint256,uint256) (contracts/CToken.sol#615-709):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (contracts/CToken.sol#655)
	State variables written after the call(s):
	- accountTokens[redeemer] = vars.accountTokensNew (contracts/CToken.sol#691)
","address,uint256,uint256) (contracts/CToken.sol",615-709
reentrancy-benign,Low,"Reentrancy in Comptroller.redeemAllowed(address,address,uint256) (contracts/Comptroller.sol#290-301):
	External calls:
	- allowed = redeemAllowedInternal(cToken,redeemer,redeemTokens) (contracts/Comptroller.sol#291)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	State variables written after the call(s):
	- updateCompSupplyIndex(cToken) (contracts/Comptroller.sol#297)
		- compSupplyState[cToken] = CompMarketState({index:safe224(index.mantissa,new index exceeds 224 bits),block:safe32(blockNumber,block number exceeds 32 bits)}) (contracts/Comptroller.sol#1206-1209)
		- supplyState.block = safe32(blockNumber,block number exceeds 32 bits) (contracts/Comptroller.sol#1211)
","address,address,uint256) (contracts/Comptroller.sol",290-301
reentrancy-events,Low,"Reentrancy in Comptroller.exitMarket(address) (contracts/Comptroller.sol#183-233):
	External calls:
	- allowed = redeemAllowedInternal(cTokenAddress,msg.sender,tokensHeld) (contracts/Comptroller.sol#195)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#69)
		- failOpaque(Error.REJECTION,FailureInfo.EXIT_MARKET_REJECTION,allowed) (contracts/Comptroller.sol#197)
	- MarketExited(cToken,msg.sender) (contracts/Comptroller.sol#230)
",address) (contracts/Comptroller.sol,183-233
reentrancy-events,Low,"Reentrancy in Comptroller.borrowAllowed(address,address,uint256) (contracts/Comptroller.sol#350-400):
	External calls:
	- (err_scope_0,None,shortfall) = getHypotheticalAccountLiquidityInternal(borrower,CToken(cToken),0,borrowAmount) (contracts/Comptroller.sol#386)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	- distributeBorrowerComp(cToken,borrower,borrowIndex,false) (contracts/Comptroller.sol#397)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedBorrowerComp(CToken(cToken),borrower,borrowerDelta,borrowIndex.mantissa) (contracts/Comptroller.sol#1279)
		- distributeBorrowerComp(cToken,borrower,borrowIndex,false) (contracts/Comptroller.sol#397)
","address,address,uint256) (contracts/Comptroller.sol",350-400
reentrancy-events,Low,"Reentrancy in Comptroller.transferAllowed(address,address,address,uint256) (contracts/Comptroller.sol#619-636):
	External calls:
	- allowed = redeemAllowedInternal(cToken,src,transferTokens) (contracts/Comptroller.sol#625)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	- distributeSupplierComp(cToken,src,false) (contracts/Comptroller.sol#632)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(cToken,dst,false) (contracts/Comptroller.sol#633)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
		- distributeSupplierComp(cToken,dst,false) (contracts/Comptroller.sol#633)
","address,address,address,uint256) (contracts/Comptroller.sol",619-636
reentrancy-events,Low,"Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (contracts/CToken.sol#956)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (contracts/CToken.sol#915)
	- (amountSeizeError,seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this),address(cTokenCollateral),actualRepayAmount) (contracts/CToken.sol#998)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (contracts/CToken.sol#1007)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1049)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1090)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (contracts/CToken.sol#1007)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (contracts/CToken.sol#1007)
	- Transfer(borrower,liquidator,seizeTokens) (contracts/CToken.sol#1087)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (contracts/CToken.sol#1007)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
reentrancy-events,Low,"Reentrancy in Comptroller.redeemAllowed(address,address,uint256) (contracts/Comptroller.sol#290-301):
	External calls:
	- allowed = redeemAllowedInternal(cToken,redeemer,redeemTokens) (contracts/Comptroller.sol#291)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	- distributeSupplierComp(cToken,redeemer,false) (contracts/Comptroller.sol#298)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
		- distributeSupplierComp(cToken,redeemer,false) (contracts/Comptroller.sol#298)
","address,address,uint256) (contracts/Comptroller.sol",290-301
reentrancy-events,Low,"Reentrancy in Comptroller.refreshCompSpeedsInternal() (contracts/Comptroller.sol#1162-1190):
	External calls:
	- assetPrice = Exp({mantissa:oracle.getUnderlyingPrice(cToken_scope_1)}) (contracts/Comptroller.sol#1177)
	Event emitted after the call(s):
	- CompSpeedUpdated(cToken_scope_3,newSpeed) (contracts/Comptroller.sol#1188)
",) (contracts/Comptroller.sol,1162-1190
reentrancy-events,Low,"Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#82-107):
	External calls:
	- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#101)
	Event emitted after the call(s):
	- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Timelock.sol#104)
","address,uint256,string,bytes,uint256) (contracts/Timelock.sol",82-107
reentrancy-events,Low,"Reentrancy in Comptroller.seizeAllowed(address,address,address,address,uint256) (contracts/Comptroller.sol#556-582):
	External calls:
	- distributeSupplierComp(cTokenCollateral,borrower,false) (contracts/Comptroller.sol#578)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(cTokenCollateral,liquidator,false) (contracts/Comptroller.sol#579)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
		- distributeSupplierComp(cTokenCollateral,liquidator,false) (contracts/Comptroller.sol#579)
","address,address,address,address,uint256) (contracts/Comptroller.sol",556-582
reentrancy-events,Low,"Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (contracts/CToken.sol#956)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (contracts/CToken.sol#915)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (contracts/CToken.sol#990)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (contracts/CToken.sol#912)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
reentrancy-events,Low,"Reentrancy in Comptroller.distributeSupplierComp(address,address,bool) (contracts/Comptroller.sol#1243-1259):
	External calls:
	- compAccrued[supplier] = transferComp(supplier,supplierAccrued,0) (contracts/Comptroller.sol#1257)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- compAccrued[supplier] = transferComp(supplier,supplierAccrued,compClaimThreshold) (contracts/Comptroller.sol#1257)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
","address,address,bool) (contracts/Comptroller.sol",1243-1259
reentrancy-events,Low,"Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (contracts/CToken.sol#956)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (contracts/CToken.sol#988)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (contracts/CToken.sol#915)
	- (amountSeizeError,seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this),address(cTokenCollateral),actualRepayAmount) (contracts/CToken.sol#998)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (contracts/CToken.sol#1007)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1049)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (contracts/CToken.sol#1090)
	- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (contracts/CToken.sol#1009)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (contracts/CToken.sol#1016)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
reentrancy-events,Low,"Reentrancy in Comptroller._setCollateralFactor(CToken,uint256) (contracts/Comptroller.sol#919-952):
	External calls:
	- newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0 (contracts/Comptroller.sol#940)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#60)
		- fail(Error.PRICE_ERROR,FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE) (contracts/Comptroller.sol#941)
","CToken,uint256) (contracts/Comptroller.sol",919-952
reentrancy-events,Low,"Reentrancy in GovernorAlpha.queue(uint256) (contracts/Governance/GovernorAlpha.sol#178-187):
	External calls:
	- _queueOrRevert(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],eta) (contracts/Governance/GovernorAlpha.sol#183)
		- timelock.queueTransaction(target,value,signature,data,eta) (contracts/Governance/GovernorAlpha.sol#191)
	Event emitted after the call(s):
	- ProposalQueued(proposalId,eta) (contracts/Governance/GovernorAlpha.sol#186)
",uint256) (contracts/Governance/GovernorAlpha.sol,178-187
reentrancy-events,Low,"Reentrancy in Comptroller.claimComp(address[],CToken[],bool,bool) (contracts/Comptroller.sol#1328-1346):
	External calls:
	- distributeBorrowerComp(address(cToken),holders[j],borrowIndex,true) (contracts/Comptroller.sol#1336)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- distributeSupplierComp(address(cToken),holders[j_scope_0],true) (contracts/Comptroller.sol#1342)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedBorrowerComp(CToken(cToken),borrower,borrowerDelta,borrowIndex.mantissa) (contracts/Comptroller.sol#1279)
		- distributeBorrowerComp(address(cToken),holders[j],borrowIndex,true) (contracts/Comptroller.sol#1336)
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
		- distributeSupplierComp(address(cToken),holders[j_scope_0],true) (contracts/Comptroller.sol#1342)
","address[],CToken[],bool,bool) (contracts/Comptroller.sol",1328-1346
reentrancy-events,Low,"Reentrancy in Comptroller.transferAllowed(address,address,address,uint256) (contracts/Comptroller.sol#619-636):
	External calls:
	- allowed = redeemAllowedInternal(cToken,src,transferTokens) (contracts/Comptroller.sol#625)
		- vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset) (contracts/Comptroller.sol#755)
	- distributeSupplierComp(cToken,src,false) (contracts/Comptroller.sol#632)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedSupplierComp(CToken(cToken),supplier,supplierDelta,supplyIndex.mantissa) (contracts/Comptroller.sol#1258)
		- distributeSupplierComp(cToken,src,false) (contracts/Comptroller.sol#632)
","address,address,address,uint256) (contracts/Comptroller.sol",619-636
reentrancy-events,Low,"Reentrancy in GovernorAlpha.execute(uint256) (contracts/Governance/GovernorAlpha.sol#194-202):
	External calls:
	- timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#199)
	Event emitted after the call(s):
	- ProposalExecuted(proposalId) (contracts/Governance/GovernorAlpha.sol#201)
",uint256) (contracts/Governance/GovernorAlpha.sol,194-202
reentrancy-events,Low,"Reentrancy in GovernorAlpha.cancel(uint256) (contracts/Governance/GovernorAlpha.sol#204-217):
	External calls:
	- timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta) (contracts/Governance/GovernorAlpha.sol#213)
	Event emitted after the call(s):
	- ProposalCanceled(proposalId) (contracts/Governance/GovernorAlpha.sol#216)
",uint256) (contracts/Governance/GovernorAlpha.sol,204-217
reentrancy-events,Low,"Reentrancy in Comptroller.distributeBorrowerComp(address,address,Exponential.Exp,bool) (contracts/Comptroller.sol#1267-1281):
	External calls:
	- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,0) (contracts/Comptroller.sol#1278)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	- compAccrued[borrower] = transferComp(borrower,borrowerAccrued,compClaimThreshold) (contracts/Comptroller.sol#1278)
		- blo.transfer(user,userAccrued) (contracts/Comptroller.sol#1295)
	Event emitted after the call(s):
	- DistributedBorrowerComp(CToken(cToken),borrower,borrowerDelta,borrowIndex.mantissa) (contracts/Comptroller.sol#1279)
","address,address,Exponential.Exp,bool) (contracts/Comptroller.sol",1267-1281
reentrancy-events,Low,"Reentrancy in CToken.borrowFresh(address,uint256) (contracts/CToken.sol#738-801):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (contracts/CToken.sol#740)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (contracts/CToken.sol#795)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (contracts/CToken.sol#774)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (contracts/CToken.sol#764)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (contracts/CToken.sol#752)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (contracts/CToken.sol#742)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (contracts/CToken.sol#769)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (contracts/CToken.sol#747)
","address,uint256) (contracts/CToken.sol",738-801
reentrancy-events,Low,"Reentrancy in CToken.mintFresh(address,uint256) (contracts/CToken.sol#499-563):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (contracts/CToken.sol#501)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (contracts/CToken.sol#508)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,uint256(vars.mathErr)),0) (contracts/CToken.sol#515)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (contracts/CToken.sol#503)
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (contracts/CToken.sol#556)
	- Transfer(address(this),minter,vars.mintTokens) (contracts/CToken.sol#557)
","address,uint256) (contracts/CToken.sol",499-563
reentrancy-events,Low,"Reentrancy in CToken.redeemFresh(address,uint256,uint256) (contracts/CToken.sol#615-709):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (contracts/CToken.sol#655)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE) (contracts/CToken.sol#682)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.REDEEM_FRESHNESS_CHECK) (contracts/CToken.sol#662)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REDEEM_COMPTROLLER_REJECTION,allowed) (contracts/CToken.sol#657)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,uint256(vars.mathErr)) (contracts/CToken.sol#672)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (contracts/CToken.sol#677)
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (contracts/CToken.sol#703)
	- Transfer(redeemer,address(this),vars.redeemTokens) (contracts/CToken.sol#702)
","address,uint256,uint256) (contracts/CToken.sol",615-709
reentrancy-events,Low,"Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (contracts/CToken.sol#852-918):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (contracts/CToken.sol#854)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (contracts/CToken.sol#856)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)),0) (contracts/CToken.sol#872)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (contracts/CToken.sol#861)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (contracts/CToken.sol#912)
","address,address,uint256) (contracts/CToken.sol",852-918
reentrancy-events,Low,"Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (contracts/CToken.sol#954-1022):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (contracts/CToken.sol#956)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (contracts/CToken.sol#978)
	- Failure(uint256(err),uint256(info),opaqueError) (contracts/ErrorReporter.sol#205)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (contracts/CToken.sol#958)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (contracts/CToken.sol#968)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (contracts/CToken.sol#973)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (contracts/CToken.sol#983)
	- Failure(uint256(err),uint256(info),0) (contracts/ErrorReporter.sol#196)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (contracts/CToken.sol#963)
","address,address,uint256,CTokenInterface) (contracts/CToken.sol",954-1022
timestamp,Low,"GovernorAlpha.add256(uint256,uint256) (contracts/Governance/GovernorAlpha.sol#303-307) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(c >= a,addition overflow) (contracts/Governance/GovernorAlpha.sol#305)
","uint256,uint256) (contracts/Governance/GovernorAlpha.sol",303-307
timestamp,Low,"Blo.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/Governance/Blo.sol#163-172) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,Comp::delegateBySig: signature expired) (contracts/Governance/Blo.sol#170)
","address,uint256,uint256,uint8,bytes32,bytes32) (contracts/Governance/Blo.sol",163-172
timestamp,Low,"GovernorAlpha._queueOrRevert(address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol#189-192) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! timelock.queuedTransactions(keccak256(bytes)(abi.encode(target,value,signature,data,eta))),GovernorAlpha::_queueOrRevert: proposal action already queued at eta) (contracts/Governance/GovernorAlpha.sol#190)
","address,uint256,string,bytes,uint256) (contracts/Governance/GovernorAlpha.sol",189-192
timestamp,Low,"UniswapAnchoredView.fetchAnchorPrice(UniswapConfig.TokenConfig,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol#186-207) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > oldTimestamp,now must come after before) (contracts/UniswapOracle/UniswapAnchoredView.sol#190)
","UniswapConfig.TokenConfig,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol",186-207
timestamp,Low,"UniswapAnchoredView.pokeWindowValues(UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol#213-230) uses timestamp for comparisons
	Dangerous comparisons:
	- timeElapsed >= anchorPeriod (contracts/UniswapOracle/UniswapAnchoredView.sol#221)
",UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol,213-230
timestamp,Low,"UniswapAnchoredView.mul(uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol#233-238) uses timestamp for comparisons
	Dangerous comparisons:
	- a == 0 (contracts/UniswapOracle/UniswapAnchoredView.sol#234)
	- require(bool,string)(c / a == b,multiplication overflow) (contracts/UniswapOracle/UniswapAnchoredView.sol#236)
","uint256,uint256) (contracts/UniswapOracle/UniswapAnchoredView.sol",233-238
timestamp,Low,"GovernorAlpha.state(uint256) (contracts/Governance/GovernorAlpha.sol#228-248) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= add256(proposal.eta,timelock.GRACE_PERIOD()) (contracts/Governance/GovernorAlpha.sol#243)
",uint256) (contracts/Governance/GovernorAlpha.sol,228-248
timestamp,Low,"UniswapV2OracleLibrary.currentCumulativePrices(address) (contracts/UniswapOracle/UniswapLib.sol#42-60) uses timestamp for comparisons
	Dangerous comparisons:
	- blockTimestampLast != blockTimestamp (contracts/UniswapOracle/UniswapLib.sol#51)
",address) (contracts/UniswapOracle/UniswapLib.sol,42-60
timestamp,Low,"Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#62-71) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.) (contracts/Timelock.sol#64)
","address,uint256,string,bytes,uint256) (contracts/Timelock.sol",62-71
timestamp,Low,"UniswapAnchoredView.priceInternal(UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol#97-113) uses timestamp for comparisons
	Dangerous comparisons:
	- timeElapsed >= anchorPeriod || prices[config.symbolHash] == 0 (contracts/UniswapOracle/UniswapAnchoredView.sol#102)
	- require(bool,string)(usdPerEth > 0,ETH price not set, cannot convert to dollars) (contracts/UniswapOracle/UniswapAnchoredView.sol#110)
",UniswapConfig.TokenConfig) (contracts/UniswapOracle/UniswapAnchoredView.sol,97-113
timestamp,Low,"Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#82-107) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Timelock.sol#87)
	- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Timelock.sol#88)
","address,uint256,string,bytes,uint256) (contracts/Timelock.sol",82-107
assembly,Informational,"Unitroller.fallback() (contracts/Unitroller.sol#137-149) uses assembly
	- INLINE ASM (contracts/Unitroller.sol#141-148)
",) (contracts/Unitroller.sol,137-149
assembly,Informational,"CErc20.doTransferOut(address,uint256) (contracts/CErc20.sol#180-199) uses assembly
	- INLINE ASM (contracts/CErc20.sol#185-197)
","address,uint256) (contracts/CErc20.sol",180-199
assembly,Informational,"Blo.getChainId() (contracts/Governance/Blo.sol#298-302) uses assembly
	- INLINE ASM (contracts/Governance/Blo.sol#300)
",) (contracts/Governance/Blo.sol,298-302
assembly,Informational,"GovernorAlpha.getChainId() (contracts/Governance/GovernorAlpha.sol#314-318) uses assembly
	- INLINE ASM (contracts/Governance/GovernorAlpha.sol#316)
",) (contracts/Governance/GovernorAlpha.sol,314-318
assembly,Informational,"CErc20.doTransferIn(address,uint256) (contracts/CErc20.sol#144-169) uses assembly
	- INLINE ASM (contracts/CErc20.sol#150-162)
","address,uint256) (contracts/CErc20.sol",144-169
boolean-equal,Informational,"GovernorAlpha._castVote(address,uint256,bool) (contracts/Governance/GovernorAlpha.sol#263-281) compares to a boolean constant:
	-require(bool,string)(receipt.hasVoted == false,GovernorAlpha::_castVote: voter already voted) (contracts/Governance/GovernorAlpha.sol#267)
","address,uint256,bool) (contracts/Governance/GovernorAlpha.sol",263-281
boolean-equal,Informational,"Comptroller.claimComp(address[],CToken[],bool,bool) (contracts/Comptroller.sol#1328-1346) compares to a boolean constant:
	-borrowers == true (contracts/Comptroller.sol#1332)
","address[],CToken[],bool,bool) (contracts/Comptroller.sol",1328-1346
boolean-equal,Informational,"Comptroller._addCompMarketInternal(address) (contracts/Comptroller.sol#1387-1408) compares to a boolean constant:
	-require(bool,string)(market.isComped == false,comp market already added) (contracts/Comptroller.sol#1390)
",address) (contracts/Comptroller.sol,1387-1408
boolean-equal,Informational,"Comptroller._setBorrowPaused(CToken,bool) (contracts/Comptroller.sol#1112-1120) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,not an admin) (contracts/Comptroller.sol#1115)
","CToken,bool) (contracts/Comptroller.sol",1112-1120
boolean-equal,Informational,"Comptroller._setSeizePaused(bool) (contracts/Comptroller.sol#1131-1138) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,not an admin) (contracts/Comptroller.sol#1133)
",bool) (contracts/Comptroller.sol,1131-1138
boolean-equal,Informational,"Comptroller.addToMarketInternal(CToken,address) (contracts/Comptroller.sol#145-174) compares to a boolean constant:
	-marketToJoin.accountMembership[borrower] == true (contracts/Comptroller.sol#153)
","CToken,address) (contracts/Comptroller.sol",145-174
boolean-equal,Informational,"Comptroller.claimComp(address[],CToken[],bool,bool) (contracts/Comptroller.sol#1328-1346) compares to a boolean constant:
	-suppliers == true (contracts/Comptroller.sol#1339)
","address[],CToken[],bool,bool) (contracts/Comptroller.sol",1328-1346
boolean-equal,Informational,"Comptroller._dropCompMarket(address) (contracts/Comptroller.sol#1414-1424) compares to a boolean constant:
	-require(bool,string)(market.isComped == true,market is not a comp market) (contracts/Comptroller.sol#1418)
",address) (contracts/Comptroller.sol,1414-1424
boolean-equal,Informational,"Comptroller._setTransferPaused(bool) (contracts/Comptroller.sol#1122-1129) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,not an admin) (contracts/Comptroller.sol#1124)
",bool) (contracts/Comptroller.sol,1122-1129
boolean-equal,Informational,"Comptroller._setMintPaused(CToken,bool) (contracts/Comptroller.sol#1102-1110) compares to a boolean constant:
	-require(bool,string)(msg.sender == admin || state == true,not an admin) (contracts/Comptroller.sol#1105)
","CToken,bool) (contracts/Comptroller.sol",1102-1110
boolean-equal,Informational,"Comptroller._addCompMarketInternal(address) (contracts/Comptroller.sol#1387-1408) compares to a boolean constant:
	-require(bool,string)(market.isListed == true,comp market is not listed) (contracts/Comptroller.sol#1389)
",address) (contracts/Comptroller.sol,1387-1408
pragma,Informational,"3 different versions of Solidity are used:
	- Version constraint 0.6.12 is used by:
		-0.6.12 (contracts/BaseJumpRateModelV2.sol#3)
		-0.6.12 (contracts/CErc20.sol#3)
		-0.6.12 (contracts/CErc20Immutable.sol#3)
		-0.6.12 (contracts/CEther.sol#3)
		-0.6.12 (contracts/CToken.sol#3)
		-0.6.12 (contracts/CTokenInterfaces.sol#3)
		-0.6.12 (contracts/CarefulMath.sol#3)
		-0.6.12 (contracts/Comptroller.sol#3)
		-0.6.12 (contracts/ComptrollerInterface.sol#3)
		-0.6.12 (contracts/ComptrollerStorage.sol#3)
		-0.6.12 (contracts/DAIInterestRateModelV3.sol#3)
		-0.6.12 (contracts/EIP20Interface.sol#3)
		-0.6.12 (contracts/EIP20NonStandardInterface.sol#3)
		-0.6.12 (contracts/ErrorReporter.sol#3)
		-0.6.12 (contracts/Exponential.sol#3)
		-0.6.12 (contracts/Governance/Blo.sol#3)
		-0.6.12 (contracts/Governance/GovernorAlpha.sol#3)
		-0.6.12 (contracts/InterestRateModel.sol#3)
		-0.6.12 (contracts/JumpRateModel.sol#3)
		-0.6.12 (contracts/JumpRateModelV2.sol#3)
		-0.6.12 (contracts/Lens/CompoundLens.sol#3)
		-0.6.12 (contracts/Maximillion.sol#3)
		-0.6.12 (contracts/PriceOracle.sol#3)
		-0.6.12 (contracts/Reservoir.sol#3)
		-0.6.12 (contracts/SafeMath.sol#3)
		-0.6.12 (contracts/SimplePriceOracle.sol#3)
		-0.6.12 (contracts/Timelock.sol#3)
		-0.6.12 (contracts/Unitroller.sol#3)
	- Version constraint ^0.6.10 is used by:
		-^0.6.10 (contracts/UniswapOracle/UniswapAnchoredView.sol#3)
		-^0.6.10 (contracts/UniswapOracle/UniswapConfig.sol#3)
		-^0.6.10 (contracts/UniswapOracle/UniswapLib.sol#3)
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (node_modules/openzeppelin-solidity/contracts/access/Ownable.sol#3)
		->=0.6.0<0.8.0 (node_modules/openzeppelin-solidity/contracts/utils/Context.sol#3)
",N/A,N/A
dead-code,Informational,"Exponential.divScalar(Exponential.Exp,uint256) (contracts/Exponential.sol#104-111) is never used and should be removed
","Exponential.Exp,uint256) (contracts/Exponential.sol",104-111
dead-code,Informational,"Exponential.div_(uint256,Exponential.Double) (contracts/Exponential.sol#336-338) is never used and should be removed
","uint256,Exponential.Double) (contracts/Exponential.sol",336-338
dead-code,Informational,"Exponential.mul_(Exponential.Double,uint256) (contracts/Exponential.sol#295-297) is never used and should be removed
","Exponential.Double,uint256) (contracts/Exponential.sol",295-297
dead-code,Informational,"Exponential.subExp(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#59-63) is never used and should be removed
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",59-63
dead-code,Informational,"Exponential.div_(Exponential.Double,uint256) (contracts/Exponential.sol#332-334) is never used and should be removed
","Exponential.Double,uint256) (contracts/Exponential.sol",332-334
dead-code,Informational,"Exponential.mul_(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#279-281) is never used and should be removed
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",279-281
dead-code,Informational,"Exponential.mul_(Exponential.Double,Exponential.Double) (contracts/Exponential.sol#291-293) is never used and should be removed
","Exponential.Double,Exponential.Double) (contracts/Exponential.sol",291-293
dead-code,Informational,"Exponential.isZeroExp(Exponential.Exp) (contracts/Exponential.sol#230-232) is never used and should be removed
",Exponential.Exp) (contracts/Exponential.sol,230-232
dead-code,Informational,"Exponential.addExp(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#50-54) is never used and should be removed
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",50-54
dead-code,Informational,"Exponential.greaterThanExp(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#223-225) is never used and should be removed
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",223-225
dead-code,Informational,"Exponential.div_(Exponential.Exp,uint256) (contracts/Exponential.sol#320-322) is never used and should be removed
","Exponential.Exp,uint256) (contracts/Exponential.sol",320-322
dead-code,Informational,"Exponential.sub_(Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol#262-264) is never used and should be removed
","Exponential.Exp,Exponential.Exp) (contracts/Exponential.sol",262-264
dead-code,Informational,"Exponential.div_(Exponential.Double,Exponential.Double) (contracts/Exponential.sol#328-330) is never used and should be removed
","Exponential.Double,Exponential.Double) (contracts/Exponential.sol",328-330
solc-version,Informational,"Version constraint ^0.6.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.6.10 (contracts/UniswapOracle/UniswapAnchoredView.sol#3)
	- ^0.6.10 (contracts/UniswapOracle/UniswapConfig.sol#3)
	- ^0.6.10 (contracts/UniswapOracle/UniswapLib.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/BaseJumpRateModelV2.sol#3)
	- 0.6.12 (contracts/CErc20.sol#3)
	- 0.6.12 (contracts/CErc20Immutable.sol#3)
	- 0.6.12 (contracts/CEther.sol#3)
	- 0.6.12 (contracts/CToken.sol#3)
	- 0.6.12 (contracts/CTokenInterfaces.sol#3)
	- 0.6.12 (contracts/CarefulMath.sol#3)
	- 0.6.12 (contracts/Comptroller.sol#3)
	- 0.6.12 (contracts/ComptrollerInterface.sol#3)
	- 0.6.12 (contracts/ComptrollerStorage.sol#3)
	- 0.6.12 (contracts/DAIInterestRateModelV3.sol#3)
	- 0.6.12 (contracts/EIP20Interface.sol#3)
	- 0.6.12 (contracts/EIP20NonStandardInterface.sol#3)
	- 0.6.12 (contracts/ErrorReporter.sol#3)
	- 0.6.12 (contracts/Exponential.sol#3)
	- 0.6.12 (contracts/Governance/Blo.sol#3)
	- 0.6.12 (contracts/Governance/GovernorAlpha.sol#3)
	- 0.6.12 (contracts/InterestRateModel.sol#3)
	- 0.6.12 (contracts/JumpRateModel.sol#3)
	- 0.6.12 (contracts/JumpRateModelV2.sol#3)
	- 0.6.12 (contracts/Lens/CompoundLens.sol#3)
	- 0.6.12 (contracts/Maximillion.sol#3)
	- 0.6.12 (contracts/PriceOracle.sol#3)
	- 0.6.12 (contracts/Reservoir.sol#3)
	- 0.6.12 (contracts/SafeMath.sol#3)
	- 0.6.12 (contracts/SimplePriceOracle.sol#3)
	- 0.6.12 (contracts/Timelock.sol#3)
	- 0.6.12 (contracts/Unitroller.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (node_modules/openzeppelin-solidity/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/openzeppelin-solidity/contracts/utils/Context.sol#3)
",N/A,N/A
solc-version,Informational,"solc-0.6.12 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
low-level-calls,Informational,"Low level call in Unitroller.fallback() (contracts/Unitroller.sol#137-149):
	- (success,None) = comptrollerImplementation.delegatecall(msg.data) (contracts/Unitroller.sol#139)
",) (contracts/Unitroller.sol,137-149
low-level-calls,Informational,"Low level call in CEther.doTransferOut(address,uint256) (contracts/CEther.sol#145-148):
	- (success,None) = to.call.value(amount)() (contracts/CEther.sol#146)
","address,uint256) (contracts/CEther.sol",145-148
low-level-calls,Informational,"Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#82-107):
	- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#101)
","address,uint256,string,bytes,uint256) (contracts/Timelock.sol",82-107
missing-inheritance,Informational,"Blo (contracts/Governance/Blo.sol#6-303) should inherit from CompInterface (contracts/Governance/GovernorAlpha.sol#331-333)
",contracts/Governance/Blo.sol,6-303
naming-convention,Informational,"Constant Exponential.mantissaOne (contracts/Exponential.sol#18) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function Comptroller._dropCompMarket(address) (contracts/Comptroller.sol#1414-1424) is not in mixedCase
",address) (contracts/Comptroller.sol,1414-1424
naming-convention,Informational,"Function CToken._setReserveFactor(uint256) (contracts/CToken.sol#1178-1186) is not in mixedCase
",uint256) (contracts/CToken.sol,1178-1186
naming-convention,Informational,"Function Comptroller._setCompRate(uint256) (contracts/Comptroller.sol#1363-1371) is not in mixedCase
",uint256) (contracts/Comptroller.sol,1363-1371
naming-convention,Informational,"Constant CTokenStorage.borrowRateMaxMantissa (contracts/CTokenInterfaces.sol#33) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function CTokenInterface._setInterestRateModel(InterestRateModel) (contracts/CTokenInterfaces.sol#242) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function CTokenInterface._acceptAdmin() (contracts/CTokenInterfaces.sol#238) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Unitroller._acceptAdmin() (contracts/Unitroller.sol#110-130) is not in mixedCase
",) (contracts/Unitroller.sol,110-130
naming-convention,Informational,"Constant UniswapAnchoredView.rotateHash (contracts/UniswapOracle/UniswapAnchoredView.sol#45) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Constant Exponential.halfExpScale (contracts/Exponential.sol#17) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setMaxAssets(uint256) (contracts/Comptroller.sol#960-971) is not in mixedCase
",uint256) (contracts/Comptroller.sol,960-971
naming-convention,Informational,"Function Unitroller._setPendingAdmin(address) (contracts/Unitroller.sol#87-103) is not in mixedCase
",address) (contracts/Unitroller.sol,87-103
naming-convention,Informational,"Function CTokenInterface._setComptroller(ComptrollerInterface) (contracts/CTokenInterfaces.sol#239) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setLiquidationIncentive(uint256) (contracts/Comptroller.sol#979-1007) is not in mixedCase
",uint256) (contracts/Comptroller.sol,979-1007
naming-convention,Informational,"Function Comptroller._setCollateralFactor(CToken,uint256) (contracts/Comptroller.sol#919-952) is not in mixedCase
","CToken,uint256) (contracts/Comptroller.sol",919-952
naming-convention,Informational,"Function Comptroller._setCompAddress(address) (contracts/Comptroller.sol#1354-1357) is not in mixedCase
",address) (contracts/Comptroller.sol,1354-1357
naming-convention,Informational,"Function Comptroller._setCloseFactor(uint256) (contracts/Comptroller.sol#888-910) is not in mixedCase
",uint256) (contracts/Comptroller.sol,888-910
naming-convention,Informational,"Function Comptroller._supportMarket(CToken) (contracts/Comptroller.sol#1015-1033) is not in mixedCase
",CToken) (contracts/Comptroller.sol,1015-1033
naming-convention,Informational,"Function CErc20Interface._addReserves(uint256) (contracts/CTokenInterfaces.sol#267) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setPriceOracle(PriceOracle) (contracts/Comptroller.sol#864-880) is not in mixedCase
",PriceOracle) (contracts/Comptroller.sol,864-880
naming-convention,Informational,"Constant Comptroller.collateralFactorMaxMantissa (contracts/Comptroller.sol#86) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function CToken._setPendingAdmin(address) (contracts/CToken.sol#1104-1120) is not in mixedCase
",address) (contracts/CToken.sol,1104-1120
naming-convention,Informational,"Struct FixedPoint.uq112x112 (contracts/UniswapOracle/UniswapLib.sol#10-12) is not in CapWords
",contracts/UniswapOracle/UniswapLib.sol,10-12
naming-convention,Informational,"Function Unitroller._acceptImplementation() (contracts/Unitroller.sol#60-78) is not in mixedCase
",) (contracts/Unitroller.sol,60-78
naming-convention,Informational,"Function CToken._acceptAdmin() (contracts/CToken.sol#1127-1147) is not in mixedCase
",) (contracts/CToken.sol,1127-1147
naming-convention,Informational,"Function CTokenInterface._setPendingAdmin(address) (contracts/CTokenInterfaces.sol#237) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setTransferPaused(bool) (contracts/Comptroller.sol#1122-1129) is not in mixedCase
",bool) (contracts/Comptroller.sol,1122-1129
naming-convention,Informational,"Constant Comptroller.closeFactorMaxMantissa (contracts/Comptroller.sol#83) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function CDelegatorInterface._setImplementation(address,bool,bytes) (contracts/CTokenInterfaces.sol#289) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setBorrowCapGuardian(address) (contracts/Comptroller.sol#1067-1078) is not in mixedCase
",address) (contracts/Comptroller.sol,1067-1078
naming-convention,Informational,"Function Comptroller._setMarketBorrowCaps(CToken[],uint256[]) (contracts/Comptroller.sol#1049-1061) is not in mixedCase
","CToken[],uint256[]) (contracts/Comptroller.sol",1049-1061
naming-convention,Informational,"Function GovernorAlpha.__executeSetTimelockPendingAdmin(address,uint256) (contracts/Governance/GovernorAlpha.sol#298-301) is not in mixedCase
","address,uint256) (contracts/Governance/GovernorAlpha.sol",298-301
naming-convention,Informational,"Function CTokenInterface._reduceReserves(uint256) (contracts/CTokenInterfaces.sol#241) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant CTokenStorage.reserveFactorMaxMantissa (contracts/CTokenInterfaces.sol#38) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Constant Exponential.doubleScale (contracts/Exponential.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function CDelegateInterface._becomeImplementation(bytes) (contracts/CTokenInterfaces.sol#298) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function GovernorAlpha.__abdicate() (contracts/Governance/GovernorAlpha.sol#288-291) is not in mixedCase
",) (contracts/Governance/GovernorAlpha.sol,288-291
naming-convention,Informational,"Function Unitroller._setPendingImplementation(address) (contracts/Unitroller.sol#40-53) is not in mixedCase
",address) (contracts/Unitroller.sol,40-53
naming-convention,Informational,"Function Comptroller._become(Unitroller) (contracts/Comptroller.sol#1140-1143) is not in mixedCase
",Unitroller) (contracts/Comptroller.sol,1140-1143
naming-convention,Informational,"Function CToken._setInterestRateModel(InterestRateModel) (contracts/CToken.sol#1350-1358) is not in mixedCase
",InterestRateModel) (contracts/CToken.sol,1350-1358
naming-convention,Informational,"Variable ComptrollerV2Storage._mintGuardianPaused (contracts/ComptrollerStorage.sol#91) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant Comptroller.closeFactorMinMantissa (contracts/Comptroller.sol#80) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setPauseGuardian(address) (contracts/Comptroller.sol#1085-1100) is not in mixedCase
",address) (contracts/Comptroller.sol,1085-1100
naming-convention,Informational,"Function Comptroller._setSeizePaused(bool) (contracts/Comptroller.sol#1131-1138) is not in mixedCase
",bool) (contracts/Comptroller.sol,1131-1138
naming-convention,Informational,"Parameter Comptroller._setCompAddress(address)._comp (contracts/Comptroller.sol#1354) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function CErc20._addReserves(uint256) (contracts/CErc20.sol#119-121) is not in mixedCase
",uint256) (contracts/CErc20.sol,119-121
naming-convention,Informational,"Function GovernorAlpha.__acceptAdmin() (contracts/Governance/GovernorAlpha.sol#283-286) is not in mixedCase
",) (contracts/Governance/GovernorAlpha.sol,283-286
naming-convention,Informational,"Variable ComptrollerV2Storage._borrowGuardianPaused (contracts/ComptrollerStorage.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function TimelockInterface.GRACE_PERIOD() (contracts/Governance/GovernorAlpha.sol#323) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setMintPaused(CToken,bool) (contracts/Comptroller.sol#1102-1110) is not in mixedCase
","CToken,bool) (contracts/Comptroller.sol",1102-1110
naming-convention,Informational,"Function CToken._reduceReserves(uint256) (contracts/CToken.sol#1285-1293) is not in mixedCase
",uint256) (contracts/CToken.sol,1285-1293
naming-convention,Informational,"Constant Exponential.expScale (contracts/Exponential.sol#15) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function Comptroller._setBorrowPaused(CToken,bool) (contracts/Comptroller.sol#1112-1120) is not in mixedCase
","CToken,bool) (contracts/Comptroller.sol",1112-1120
naming-convention,Informational,"Function GovernorAlpha.__queueSetTimelockPendingAdmin(address,uint256) (contracts/Governance/GovernorAlpha.sol#293-296) is not in mixedCase
","address,uint256) (contracts/Governance/GovernorAlpha.sol",293-296
naming-convention,Informational,"Function CToken._setComptroller(ComptrollerInterface) (contracts/CToken.sol#1154-1171) is not in mixedCase
",ComptrollerInterface) (contracts/CToken.sol,1154-1171
naming-convention,Informational,"Constant Comptroller.liquidationIncentiveMinMantissa (contracts/Comptroller.sol#89) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Constant Comptroller.liquidationIncentiveMaxMantissa (contracts/Comptroller.sol#92) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function Comptroller._addCompMarkets(address[]) (contracts/Comptroller.sol#1377-1385) is not in mixedCase
",address[]) (contracts/Comptroller.sol,1377-1385
naming-convention,Informational,"Function CTokenInterface._setReserveFactor(uint256) (contracts/CTokenInterfaces.sol#240) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function CDelegateInterface._resignImplementation() (contracts/CTokenInterfaces.sol#303) is not in mixedCase
",N/A,N/A
redundant-statements,Informational,"Redundant expression ""repayAmount (contracts/Comptroller.sol#436)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""transferTokens (contracts/Comptroller.sol#650)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""liquidator (contracts/Comptroller.sol#491)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrower (contracts/Comptroller.sol#466)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrower (contracts/Comptroller.sol#602)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""this (node_modules/openzeppelin-solidity/contracts/utils/Context.sol#21)"" inContext (node_modules/openzeppelin-solidity/contracts/utils/Context.sol#15-24)
",node_modules/openzeppelin-solidity/contracts/utils/Context.sol,15-24
redundant-statements,Informational,"Redundant expression ""borrowAmount (contracts/Comptroller.sol#412)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""liquidator (contracts/Comptroller.sol#537)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""mintTokens (contracts/Comptroller.sol#275)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""payer (contracts/Comptroller.sol#434)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""payer (contracts/Comptroller.sol#465)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""actualRepayAmount (contracts/Comptroller.sol#467)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cToken (contracts/Comptroller.sol#647)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""seizeTokens (contracts/Comptroller.sol#566)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrowerIndex (contracts/Comptroller.sol#468)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""src (contracts/Comptroller.sol#648)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cTokenBorrowed (contracts/Comptroller.sol#535)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cTokenCollateral (contracts/Comptroller.sol#536)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""seizeTokens (contracts/Comptroller.sol#540)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cToken (contracts/Comptroller.sol#272)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cTokenBorrowed (contracts/Comptroller.sol#600)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""liquidator (contracts/Comptroller.sol#601)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""mintAmount (contracts/Comptroller.sol#250)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""minter (contracts/Comptroller.sol#273)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""redeemer (contracts/Comptroller.sol#335)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrower (contracts/Comptroller.sol#435)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cTokenCollateral (contracts/Comptroller.sol#599)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrower (contracts/Comptroller.sol#411)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cToken (contracts/Comptroller.sol#334)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""dst (contracts/Comptroller.sol#649)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""minter (contracts/Comptroller.sol#249)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""seizeTokens (contracts/Comptroller.sol#603)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""actualRepayAmount (contracts/Comptroller.sol#539)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""borrower (contracts/Comptroller.sol#538)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cToken (contracts/Comptroller.sol#464)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""cToken (contracts/Comptroller.sol#410)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
redundant-statements,Informational,"Redundant expression ""actualMintAmount (contracts/Comptroller.sol#274)"" inComptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
too-many-digits,Informational,"Blo.slitherConstructorConstantVariables() (contracts/Governance/Blo.sol#6-303) uses literals with too many digits:
	- totalSupply = 100000000e18 (contracts/Governance/Blo.sol#17)
",) (contracts/Governance/Blo.sol,6-303
too-many-digits,Informational,"GovernorAlpha.quorumVotes() (contracts/Governance/GovernorAlpha.sol#11) uses literals with too many digits:
	- 4000000e18 (contracts/Governance/GovernorAlpha.sol#11)
",N/A,N/A
too-many-digits,Informational,"GovernorAlpha.proposalThreshold() (contracts/Governance/GovernorAlpha.sol#14) uses literals with too many digits:
	- 1000000e18 (contracts/Governance/GovernorAlpha.sol#14)
",N/A,N/A
unused-state,Informational,"Exponential.mantissaOne (contracts/Exponential.sol#18) is never used in Comptroller (contracts/Comptroller.sol#18-1446)
",contracts/Comptroller.sol,18-1446
unused-state,Informational,"UniswapAnchoredView.rotateHash (contracts/UniswapOracle/UniswapAnchoredView.sol#45) is never used in UniswapAnchoredView (contracts/UniswapOracle/UniswapAnchoredView.sol#14-239)
",contracts/UniswapOracle/UniswapAnchoredView.sol,14-239
cache-array-length,Optimization,"Loop condition i < allMarkets.length (contracts/Comptroller.sol#1036) should use cached array length instead of referencing `length` member of the storage array.
 ",N/A,N/A
constable-states,Optimization,"UnitrollerAdminStorage.pendingComptrollerImplementation (contracts/ComptrollerStorage.sol#27) should be constant 
",N/A,N/A
constable-states,Optimization,"ComptrollerV2Storage._mintGuardianPaused (contracts/ComptrollerStorage.sol#91) should be constant 
",N/A,N/A
constable-states,Optimization,"UnitrollerAdminStorage.comptrollerImplementation (contracts/ComptrollerStorage.sol#22) should be constant 
",N/A,N/A
constable-states,Optimization,"ComptrollerV2Storage._borrowGuardianPaused (contracts/ComptrollerStorage.sol#92) should be constant 
",N/A,N/A
constable-states,Optimization,"UnitrollerAdminStorage.pendingAdmin (contracts/ComptrollerStorage.sol#17) should be constant 
",N/A,N/A
immutable-states,Optimization,"JumpRateModel.multiplierPerBlock (contracts/JumpRateModel.sol#25) should be immutable 
",N/A,N/A
immutable-states,Optimization,"DAIInterestRateModelV3.pot (contracts/DAIInterestRateModelV3.sol#28) should be immutable 
",N/A,N/A
immutable-states,Optimization,"UnitrollerAdminStorage.admin (contracts/ComptrollerStorage.sol#12) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Maximillion.cEther (contracts/Maximillion.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Reservoir.token (contracts/Reservoir.sol#19) should be immutable 
",N/A,N/A
immutable-states,Optimization,"JumpRateModel.baseRatePerBlock (contracts/JumpRateModel.sol#30) should be immutable 
",N/A,N/A
immutable-states,Optimization,"GovernorAlpha.comp (contracts/Governance/GovernorAlpha.sol#29) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Reservoir.dripRate (contracts/Reservoir.sol#16) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Reservoir.dripStart (contracts/Reservoir.sol#13) should be immutable 
",N/A,N/A
immutable-states,Optimization,"GovernorAlpha.timelock (contracts/Governance/GovernorAlpha.sol#26) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Reservoir.target (contracts/Reservoir.sol#22) should be immutable 
",N/A,N/A
immutable-states,Optimization,"JumpRateModel.kink (contracts/JumpRateModel.sol#40) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseJumpRateModelV2.owner (contracts/BaseJumpRateModelV2.sol#20) should be immutable 
",N/A,N/A
immutable-states,Optimization,"JumpRateModel.jumpMultiplierPerBlock (contracts/JumpRateModel.sol#35) should be immutable 
",N/A,N/A
immutable-states,Optimization,"DAIInterestRateModelV3.jug (contracts/DAIInterestRateModelV3.sol#29) should be immutable 
",N/A,N/A
