Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"MockdYdXSoloMargin._deposit(Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol#71-87) uses arbitrary from in transferFrom: IERC20(tokens[args.market]).safeTransferFrom(args.from,address(this),args.amount.value) (contracts/mock/MockdYdXSoloMargin.sol#83)
",Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol,71-87
reentrancy-eth,High,"Reentrancy in MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.amount = user.amount.add(_shares) (contracts/legacy/MetaVault.sol#500)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
	- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#501)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",uint256) (contracts/legacy/MetaVault.sol,496-503
reentrancy-eth,High,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (contracts/legacy/MetaVault.sol#578)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",uint256) (contracts/legacy/MetaVault.sol,572-583
reentrancy-eth,High,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#254)
	ERC20._balances (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#36) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#208-217)
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#103-105)
","uint256,address) (contracts/legacy/MetaVault.sol",591-633
reentrancy-eth,High,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
	ERC20._totalSupply (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#40) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#96-98)
","address,uint256,uint256) (contracts/legacy/MetaVault.sol",471-494
reentrancy-eth,High,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#581)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",uint256) (contracts/legacy/MetaVault.sol,572-583
reentrancy-eth,High,"Reentrancy in MockdYdXSoloMargin._runActions(Account.Info[],Actions.ActionArgs[]) (contracts/mock/MockdYdXSoloMargin.sol#55-69):
	External calls:
	- _deposit(Actions.parseDepositArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#64)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- IERC20(tokens[args.market]).safeTransferFrom(args.from,address(this),args.amount.value) (contracts/mock/MockdYdXSoloMargin.sol#83)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _withdraw(Actions.parseWithdrawArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#66)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- IERC20(tokens[args.market]).safeTransfer(args.to,args.amount.value) (contracts/mock/MockdYdXSoloMargin.sol#100)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _deposit(Actions.parseDepositArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#64)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _withdraw(Actions.parseWithdrawArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#66)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _deposit(Actions.parseDepositArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#64)
		- balances[args.account.owner][args.market] = newBalance (contracts/mock/MockdYdXSoloMargin.sol#86)
	MockdYdXSoloMargin.balances (contracts/mock/MockdYdXSoloMargin.sol#20) can be used in cross function reentrancies:
	- MockdYdXSoloMargin._deposit(Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol#71-87)
	- MockdYdXSoloMargin._withdraw(Actions.WithdrawArgs) (contracts/mock/MockdYdXSoloMargin.sol#89-104)
	- MockdYdXSoloMargin.getAccountWei(Account.Info,uint256) (contracts/mock/MockdYdXSoloMargin.sol#110-121)
	- _withdraw(Actions.parseWithdrawArgs(accounts,action)) (contracts/mock/MockdYdXSoloMargin.sol#66)
		- balances[args.account.owner][args.market] = newBalance (contracts/mock/MockdYdXSoloMargin.sol#103)
	MockdYdXSoloMargin.balances (contracts/mock/MockdYdXSoloMargin.sol#20) can be used in cross function reentrancies:
	- MockdYdXSoloMargin._deposit(Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol#71-87)
	- MockdYdXSoloMargin._withdraw(Actions.WithdrawArgs) (contracts/mock/MockdYdXSoloMargin.sol#89-104)
	- MockdYdXSoloMargin.getAccountWei(Account.Info,uint256) (contracts/mock/MockdYdXSoloMargin.sol#110-121)
","Account.Info[],Actions.ActionArgs[]) (contracts/mock/MockdYdXSoloMargin.sol",55-69
reentrancy-eth,High,"Reentrancy in Rewards.exit() (contracts/token/Rewards.sol#207-210):
	External calls:
	- withdraw(balanceOf(msg.sender)) (contracts/token/Rewards.sol#208)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- stakingToken.safeTransfer(msg.sender,amount) (contracts/token/Rewards.sol#118)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- getReward() (contracts/token/Rewards.sol#209)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- rewardToken.safeTransfer(msg.sender,reward) (contracts/token/Rewards.sol#216)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- withdraw(balanceOf(msg.sender)) (contracts/token/Rewards.sol#208)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- getReward() (contracts/token/Rewards.sol#209)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- getReward() (contracts/token/Rewards.sol#209)
		- lastUpdateTime = lastTimeRewardApplicable() (contracts/token/Rewards.sol#152)
	Rewards.lastUpdateTime (contracts/token/Rewards.sol#128) can be used in cross function reentrancies:
	- Rewards.lastUpdateTime (contracts/token/Rewards.sol#128)
	- Rewards.notifyRewardAmount(uint256) (contracts/token/Rewards.sol#221-237)
	- Rewards.rewardPerToken() (contracts/token/Rewards.sol#172-184)
	- Rewards.updateReward(address) (contracts/token/Rewards.sol#150-158)
	- getReward() (contracts/token/Rewards.sol#209)
		- rewardPerTokenStored = rewardPerToken() (contracts/token/Rewards.sol#151)
	Rewards.rewardPerTokenStored (contracts/token/Rewards.sol#129) can be used in cross function reentrancies:
	- Rewards.rewardPerToken() (contracts/token/Rewards.sol#172-184)
	- Rewards.rewardPerTokenStored (contracts/token/Rewards.sol#129)
	- Rewards.updateReward(address) (contracts/token/Rewards.sol#150-158)
	- getReward() (contracts/token/Rewards.sol#209)
		- rewards[msg.sender] = 0 (contracts/token/Rewards.sol#215)
		- rewards[account] = earned(account) (contracts/token/Rewards.sol#154)
	Rewards.rewards (contracts/token/Rewards.sol#131) can be used in cross function reentrancies:
	- Rewards.earned(address) (contracts/token/Rewards.sol#186-192)
	- Rewards.getReward() (contracts/token/Rewards.sol#212-219)
	- Rewards.rewards (contracts/token/Rewards.sol#131)
	- Rewards.updateReward(address) (contracts/token/Rewards.sol#150-158)
	- getReward() (contracts/token/Rewards.sol#209)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (contracts/token/Rewards.sol#155)
	Rewards.userRewardPerTokenPaid (contracts/token/Rewards.sol#130) can be used in cross function reentrancies:
	- Rewards.earned(address) (contracts/token/Rewards.sol#186-192)
	- Rewards.updateReward(address) (contracts/token/Rewards.sol#150-158)
	- Rewards.userRewardPerTokenPaid (contracts/token/Rewards.sol#130)
",) (contracts/token/Rewards.sol,207-210
reentrancy-eth,High,"Reentrancy in MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554):
	External calls:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
		- IController(controller).withdraw(address(token3CRV),_toWithdraw) (contracts/legacy/MetaVault.sol#616)
		- token3CRV.safeTransfer(msg.sender,r) (contracts/legacy/MetaVault.sol#626)
		- token3CRV.safeTransfer(address(converter),r) (contracts/legacy/MetaVault.sol#629)
		- _outputAmount = converter.convert(address(token3CRV),_output,r) (contracts/legacy/MetaVault.sol#630)
		- IERC20(_output).safeTransfer(msg.sender,_outputAmount) (contracts/legacy/MetaVault.sol#631)
	External calls sending eth:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#254)
	ERC20._balances (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#36) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#208-217)
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#103-105)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- accYaxPerShare = accYaxPerShare.add(_multiplier.mul(yaxPerBlock).mul(1e12).div(lpSupply)) (contracts/legacy/MetaVault.sol#533)
	MetaVault.accYaxPerShare (contracts/legacy/MetaVault.sol#56) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.accYaxPerShare (contracts/legacy/MetaVault.sol#56)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- lastRewardBlock = block.number (contracts/legacy/MetaVault.sol#529)
		- lastRewardBlock = block.number (contracts/legacy/MetaVault.sol#534)
	MetaVault.lastRewardBlock (contracts/legacy/MetaVault.sol#55) can be used in cross function reentrancies:
	- MetaVault.constructor(IERC20,IERC20,IERC20,IERC20,IERC20,uint256,uint256) (contracts/legacy/MetaVault.sol#96-112)
	- MetaVault.lastRewardBlock (contracts/legacy/MetaVault.sol#55)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- user.accEarned = user.accEarned.add(_pendingYax) (contracts/legacy/MetaVault.sol#541)
		- user.amount = user.amount.sub(_amount) (contracts/legacy/MetaVault.sol#578)
		- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#581)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",address) (contracts/legacy/MetaVault.sol,551-554
unchecked-transfer,High,"MockPickleJar.withdraw(uint256) (contracts/mock/MockPickleJar.sol#40-44) ignores return value by t3crv.transfer(msg.sender,r) (contracts/mock/MockPickleJar.sol#43)
",uint256) (contracts/mock/MockPickleJar.sol,40-44
unchecked-transfer,High,"MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35) ignores return value by pickleToken.transfer(msg.sender,user.amount / 10) (contracts/mock/MockPickleMasterChef.sol#33)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",30-35
unchecked-transfer,High,"MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28) ignores return value by lpToken.transferFrom(msg.sender,address(this),_amount) (contracts/mock/MockPickleMasterChef.sol#24)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",23-28
unchecked-transfer,High,"MockPickleJar.deposit(uint256) (contracts/mock/MockPickleJar.sol#30-34) ignores return value by t3crv.transferFrom(msg.sender,address(this),_amount) (contracts/mock/MockPickleJar.sol#31)
",uint256) (contracts/mock/MockPickleJar.sol,30-34
unchecked-transfer,High,"MetaVault.stakeShares(uint256) (contracts/legacy/MetaVault.sol#462-469) ignores return value by IERC20(address(this)).transferFrom(msg.sender,address(this),_shares) (contracts/legacy/MetaVault.sol#464)
",uint256) (contracts/legacy/MetaVault.sol,462-469
unchecked-transfer,High,"MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583) ignores return value by IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
",uint256) (contracts/legacy/MetaVault.sol,572-583
unchecked-transfer,High,"MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28) ignores return value by pickleToken.transfer(msg.sender,user.amount / 10) (contracts/mock/MockPickleMasterChef.sol#26)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",23-28
unchecked-transfer,High,"YaxisVoteProxy.governanceRecoverUnsupported(IERC20,uint256,address) (contracts/governance/YaxisVoteProxy.sol#53-56) ignores return value by _token.transfer(to,amount) (contracts/governance/YaxisVoteProxy.sol#55)
","IERC20,uint256,address) (contracts/governance/YaxisVoteProxy.sol",53-56
unchecked-transfer,High,"MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35) ignores return value by lpToken.transfer(msg.sender,_amount) (contracts/mock/MockPickleMasterChef.sol#31)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",30-35
unchecked-transfer,High,"MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46) ignores return value by lpToken.transfer(msg.sender,user.amount) (contracts/mock/MockPickleMasterChef.sol#43)
",uint256) (contracts/mock/MockPickleMasterChef.sol,41-46
divide-before-multiply,Medium,"MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633) performs a multiplication on the result of a division:
	- r = (balance().mul(_shares)).div(totalSupply()) (contracts/legacy/MetaVault.sol#598)
	- _withdrawalProtection = r.mul(_withdrawalProtectionFee).div(10000) (contracts/legacy/MetaVault.sol#606)
","uint256,address) (contracts/legacy/MetaVault.sol",591-633
divide-before-multiply,Medium,"Vault.withdraw(uint256,address) (contracts/v3/Vault.sol#231-264) performs a multiplication on the result of a division:
	- _amount = (balance().mul(_shares)).div(totalSupply()) (contracts/v3/Vault.sol#239)
	- _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX) (contracts/v3/Vault.sol#244)
","uint256,address) (contracts/v3/Vault.sol",231-264
divide-before-multiply,Medium,"MockzpaToken.redeem(uint256) (contracts/mock/MockzpaToken.sol#48-70) performs a multiplication on the result of a division:
	- _underlyingAmount = _amount.mul(pricePerToken()).div(1e18) (contracts/mock/MockzpaToken.sol#49)
	- fee = _underlyingAmount.mul(fee).div(divisionFactor) (contracts/mock/MockzpaToken.sol#64)
",uint256) (contracts/mock/MockzpaToken.sol,48-70
erc20-interface,Medium,"MockERC20NonStandard (contracts/mock/MockERC20NonStandard.sol#5-135) has incorrect ERC20 function interface:MockERC20NonStandard.transfer(address,uint256) (contracts/mock/MockERC20NonStandard.sol#119-121)
",contracts/mock/MockERC20NonStandard.sol,5-135
erc20-interface,Medium,"MockERC20NonStandard (contracts/mock/MockERC20NonStandard.sol#5-135) has incorrect ERC20 function interface:MockERC20NonStandard.approve(address,uint256) (contracts/mock/MockERC20NonStandard.sol#100-103)
",contracts/mock/MockERC20NonStandard.sol,5-135
erc20-interface,Medium,"MockERC20NonStandard (contracts/mock/MockERC20NonStandard.sol#5-135) has incorrect ERC20 function interface:MockERC20NonStandard.transferFrom(address,address,uint256) (contracts/mock/MockERC20NonStandard.sol#123-130)
",contracts/mock/MockERC20NonStandard.sol,5-135
incorrect-equality,Medium,"MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/legacy/MetaVault.sol#483)
","address,uint256,uint256) (contracts/legacy/MetaVault.sol",471-494
incorrect-equality,Medium,"MockFlamIncomeVault.deposit(uint256) (contracts/mock/MockFlamIncome.sol#43-56) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mock/MockFlamIncome.sol#50)
",uint256) (contracts/mock/MockFlamIncome.sol,43-56
incorrect-equality,Medium,"MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mock/MockGenericVault.sol#51)
",uint256) (contracts/mock/MockGenericVault.sol,44-57
incorrect-equality,Medium,"MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535) uses a dangerous strict equality:
	- lpSupply == 0 (contracts/legacy/MetaVault.sol#528)
",) (contracts/legacy/MetaVault.sol,523-535
incorrect-equality,Medium,"MockYearnV2.deposit(uint256) (contracts/mock/MockYearnV2.sol#33-47) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mock/MockYearnV2.sol#40)
",uint256) (contracts/mock/MockYearnV2.sol,33-47
incorrect-equality,Medium,"MockYaxisBar.getPricePerFullShare() (contracts/legacy/mock/MockYaxisBar.sol#58-66) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/legacy/mock/MockYaxisBar.sol#63-65)
",) (contracts/legacy/mock/MockYaxisBar.sol,58-66
reentrancy-no-eth,Medium,"Reentrancy in MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46):
	External calls:
	- lpToken.transfer(msg.sender,user.amount) (contracts/mock/MockPickleMasterChef.sol#43)
	State variables written after the call(s):
	- user.amount = 0 (contracts/mock/MockPickleMasterChef.sol#44)
	MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16) can be used in cross function reentrancies:
	- MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28)
	- MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46)
	- MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16)
	- MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35)
	- user.rewardDebt = 0 (contracts/mock/MockPickleMasterChef.sol#45)
	MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16) can be used in cross function reentrancies:
	- MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28)
	- MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46)
	- MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16)
	- MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35)
",uint256) (contracts/mock/MockPickleMasterChef.sol,41-46
reentrancy-no-eth,Medium,"Reentrancy in Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472):
	External calls:
	- IStrategy(_strategies[i]).withdraw(_amounts[i]) (contracts/v3/controllers/Controller.sol#459)
	- IERC20(_want).safeTransfer(_converter,_amounts[i]) (contracts/v3/controllers/Controller.sol#464)
	- IConverter(_converter).convert(_want,_token,_amounts[i],1) (contracts/v3/controllers/Controller.sol#466)
	State variables written after the call(s):
	- updateBalance(msg.sender,_strategies[i]) (contracts/v3/controllers/Controller.sol#460)
		- _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#628)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
	- _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount) (contracts/v3/controllers/Controller.sol#470)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
","address,uint256) (contracts/v3/controllers/Controller.sol",441-472
reentrancy-no-eth,Medium,"Reentrancy in MockdYdXSoloMargin._withdraw(Actions.WithdrawArgs) (contracts/mock/MockdYdXSoloMargin.sol#89-104):
	External calls:
	- IERC20(tokens[args.market]).safeTransfer(args.to,args.amount.value) (contracts/mock/MockdYdXSoloMargin.sol#100)
	State variables written after the call(s):
	- balances[args.account.owner][args.market] = newBalance (contracts/mock/MockdYdXSoloMargin.sol#103)
	MockdYdXSoloMargin.balances (contracts/mock/MockdYdXSoloMargin.sol#20) can be used in cross function reentrancies:
	- MockdYdXSoloMargin._deposit(Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol#71-87)
	- MockdYdXSoloMargin._withdraw(Actions.WithdrawArgs) (contracts/mock/MockdYdXSoloMargin.sol#89-104)
	- MockdYdXSoloMargin.getAccountWei(Account.Info,uint256) (contracts/mock/MockdYdXSoloMargin.sol#110-121)
",Actions.WithdrawArgs) (contracts/mock/MockdYdXSoloMargin.sol,89-104
reentrancy-no-eth,Medium,"Reentrancy in MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28):
	External calls:
	- lpToken.transferFrom(msg.sender,address(this),_amount) (contracts/mock/MockPickleMasterChef.sol#24)
	- pickleToken.transfer(msg.sender,user.amount / 10) (contracts/mock/MockPickleMasterChef.sol#26)
	State variables written after the call(s):
	- user.amount = user.amount + _amount (contracts/mock/MockPickleMasterChef.sol#27)
	MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16) can be used in cross function reentrancies:
	- MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28)
	- MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46)
	- MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16)
	- MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",23-28
reentrancy-no-eth,Medium,"Reentrancy in MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35):
	External calls:
	- lpToken.transfer(msg.sender,_amount) (contracts/mock/MockPickleMasterChef.sol#31)
	- pickleToken.transfer(msg.sender,user.amount / 10) (contracts/mock/MockPickleMasterChef.sol#33)
	State variables written after the call(s):
	- user.amount = user.amount - _amount (contracts/mock/MockPickleMasterChef.sol#34)
	MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16) can be used in cross function reentrancies:
	- MockPickleMasterChef.deposit(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#23-28)
	- MockPickleMasterChef.emergencyWithdraw(uint256) (contracts/mock/MockPickleMasterChef.sol#41-46)
	- MockPickleMasterChef.userInfo (contracts/mock/MockPickleMasterChef.sol#16)
	- MockPickleMasterChef.withdraw(uint256,uint256) (contracts/mock/MockPickleMasterChef.sol#30-35)
","uint256,uint256) (contracts/mock/MockPickleMasterChef.sol",30-35
reentrancy-no-eth,Medium,"Reentrancy in Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365):
	External calls:
	- IStrategy(_strategy).withdrawAll() (contracts/v3/controllers/Controller.sol#347)
	- IERC20(_want).safeTransfer(address(_converter),_amount) (contracts/v3/controllers/Controller.sol#353)
	- _amount = _converter.convert(_want,_convert,_amount,1) (contracts/v3/controllers/Controller.sol#354)
	- IERC20(_convert).safeTransfer(_vault,_amount) (contracts/v3/controllers/Controller.sol#355)
	- IERC20(_want).safeTransfer(_vault,_amount) (contracts/v3/controllers/Controller.sol#357)
	State variables written after the call(s):
	- _vaultDetails[_vault].balance = _balance.sub(_amount) (contracts/v3/controllers/Controller.sol#361)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
	- _vaultDetails[_vault].balance = 0 (contracts/v3/controllers/Controller.sol#363)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
","address,address) (contracts/v3/controllers/Controller.sol",337-365
reentrancy-no-eth,Medium,"Reentrancy in Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431):
	External calls:
	- IERC20(_token).safeTransfer(address(_converter),_amount) (contracts/v3/controllers/Controller.sol#420)
	- _amount = _converter.convert(_token,_want,_amount,1) (contracts/v3/controllers/Controller.sol#422)
	- IERC20(_want).safeTransfer(_strategy,_amount) (contracts/v3/controllers/Controller.sol#423)
	- IERC20(_token).safeTransfer(_strategy,_amount) (contracts/v3/controllers/Controller.sol#425)
	State variables written after the call(s):
	- _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount) (contracts/v3/controllers/Controller.sol#427)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
","address,address,uint256) (contracts/v3/controllers/Controller.sol",405-431
reentrancy-no-eth,Medium,"Reentrancy in LegacyController.setVault(address) (contracts/v3/controllers/LegacyController.sol#53-65):
	External calls:
	- cachedVault.withdrawAll(address(token)) (contracts/v3/controllers/LegacyController.sol#61)
	- token.safeTransfer(metavault,token.balanceOf(address(this))) (contracts/v3/controllers/LegacyController.sol#62)
	State variables written after the call(s):
	- vault = IVault(_vault) (contracts/v3/controllers/LegacyController.sol#64)
	LegacyController.vault (contracts/v3/controllers/LegacyController.sol#27) can be used in cross function reentrancies:
	- LegacyController.balanceOf(address) (contracts/v3/controllers/LegacyController.sol#114-124)
	- LegacyController.legacyDeposit(address,uint256) (contracts/v3/controllers/LegacyController.sol#199-216)
	- LegacyController.onlyEnabledVault() (contracts/v3/controllers/LegacyController.sol#229-232)
	- LegacyController.setVault(address) (contracts/v3/controllers/LegacyController.sol#53-65)
	- LegacyController.vault (contracts/v3/controllers/LegacyController.sol#27)
	- LegacyController.withdraw(address,uint256) (contracts/v3/controllers/LegacyController.sol#147-177)
",address) (contracts/v3/controllers/LegacyController.sol,53-65
reentrancy-no-eth,Medium,"Reentrancy in Harvester.harvestNextStrategy(address,uint256,uint256) (contracts/v3/Harvester.sol#203-224):
	External calls:
	- harvest(controller,strategy,_estimatedWETH,_estimatedYAXIS) (contracts/v3/Harvester.sol#212)
		- _controller.harvestStrategy(_strategy,_estimatedWETH,_estimatedYAXIS) (contracts/v3/Harvester.sol#194)
	State variables written after the call(s):
	- strategies[_vault].addresses = _strategies (contracts/v3/Harvester.sol#220)
	Harvester.strategies (contracts/v3/Harvester.sol#38) can be used in cross function reentrancies:
	- Harvester.addStrategy(address,address,uint256) (contracts/v3/Harvester.sol#90-102)
	- Harvester.canHarvest(address) (contracts/v3/Harvester.sol#267-277)
	- Harvester.harvestNextStrategy(address,uint256,uint256) (contracts/v3/Harvester.sol#203-224)
	- Harvester.removeStrategy(address,address,uint256) (contracts/v3/Harvester.sol#110-136)
	- Harvester.strategies (contracts/v3/Harvester.sol#38)
	- Harvester.strategyAddresses(address) (contracts/v3/Harvester.sol#249-257)
	- strategies[_vault].lastCalled = block.timestamp (contracts/v3/Harvester.sol#223)
	Harvester.strategies (contracts/v3/Harvester.sol#38) can be used in cross function reentrancies:
	- Harvester.addStrategy(address,address,uint256) (contracts/v3/Harvester.sol#90-102)
	- Harvester.canHarvest(address) (contracts/v3/Harvester.sol#267-277)
	- Harvester.harvestNextStrategy(address,uint256,uint256) (contracts/v3/Harvester.sol#203-224)
	- Harvester.removeStrategy(address,address,uint256) (contracts/v3/Harvester.sol#110-136)
	- Harvester.strategies (contracts/v3/Harvester.sol#38)
	- Harvester.strategyAddresses(address) (contracts/v3/Harvester.sol#249-257)
","address,uint256,uint256) (contracts/v3/Harvester.sol",203-224
reentrancy-no-eth,Medium,"Reentrancy in MetaVault.claimInsurance() (contracts/legacy/MetaVault.sol#300-309):
	External calls:
	- token3CRV.safeTransfer(treasuryWallet,insurance) (contracts/legacy/MetaVault.sol#306)
	State variables written after the call(s):
	- insurance = 0 (contracts/legacy/MetaVault.sol#308)
	MetaVault.insurance (contracts/legacy/MetaVault.sol#43) can be used in cross function reentrancies:
	- MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494)
	- MetaVault.balance() (contracts/legacy/MetaVault.sol#128-132)
	- MetaVault.claimInsurance() (contracts/legacy/MetaVault.sol#300-309)
	- MetaVault.insurance (contracts/legacy/MetaVault.sol#43)
",) (contracts/legacy/MetaVault.sol,300-309
reentrancy-no-eth,Medium,"Reentrancy in Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273):
	External calls:
	- IStrategy(_strategy).withdraw(_diff) (contracts/v3/controllers/Controller.sol#258)
	State variables written after the call(s):
	- updateBalance(_vault,_strategy) (contracts/v3/controllers/Controller.sol#259)
		- _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#628)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
	- _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff) (contracts/v3/controllers/Controller.sol#261)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
","address,address,uint256,address) (contracts/v3/controllers/Controller.sol",242-273
reentrancy-no-eth,Medium,"Reentrancy in Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431):
	External calls:
	- IERC20(_token).safeTransfer(address(_converter),_amount) (contracts/v3/controllers/Controller.sol#420)
	- _amount = _converter.convert(_token,_want,_amount,1) (contracts/v3/controllers/Controller.sol#422)
	- IERC20(_want).safeTransfer(_strategy,_amount) (contracts/v3/controllers/Controller.sol#423)
	- IERC20(_token).safeTransfer(_strategy,_amount) (contracts/v3/controllers/Controller.sol#425)
	- IStrategy(_strategy).deposit() (contracts/v3/controllers/Controller.sol#429)
	State variables written after the call(s):
	- updateBalance(msg.sender,_strategy) (contracts/v3/controllers/Controller.sol#430)
		- _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#628)
	Controller._vaultDetails (contracts/v3/controllers/Controller.sol#39) can be used in cross function reentrancies:
	- Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123)
	- Controller.balanceOf() (contracts/v3/controllers/Controller.sol#483-490)
	- Controller.converter(address) (contracts/v3/controllers/Controller.sol#496-505)
	- Controller.earn(address,address,uint256) (contracts/v3/controllers/Controller.sol#405-431)
	- Controller.getBestStrategyWithdraw(address,uint256) (contracts/v3/controllers/Controller.sol#579-615)
	- Controller.getCap(address,address) (contracts/v3/controllers/Controller.sol#512-521)
	- Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393)
	- Controller.investEnabled() (contracts/v3/controllers/Controller.sol#527-537)
	- Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201)
	- Controller.reorderStrategies(address,address,address) (contracts/v3/controllers/Controller.sol#209-232)
	- Controller.setCap(address,address,uint256,address) (contracts/v3/controllers/Controller.sol#242-273)
	- Controller.setConverter(address,address) (contracts/v3/controllers/Controller.sol#280-290)
	- Controller.strategies() (contracts/v3/controllers/Controller.sol#557-564)
	- Controller.strategies(address) (contracts/v3/controllers/Controller.sol#543-551)
	- Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629)
	- Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472)
	- Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365)
","address,address,uint256) (contracts/v3/controllers/Controller.sol",405-431
uninitialized-local,Medium,"Harvester.removeStrategy(address,address,uint256).index (contracts/v3/Harvester.sol#120) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Manager.removeToken(address,address).index (contracts/v3/Manager.sol#473) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Harvester.removeStrategy(address,address,uint256).found (contracts/v3/Harvester.sol#121) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Manager.removeToken(address,address).found (contracts/v3/Manager.sol#474) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456) ignores return value by converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
","uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol",422-456
unused-return,Medium,"Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472) ignores return value by IConverter(_converter).convert(_want,_token,_amounts[i],1) (contracts/v3/controllers/Controller.sol#466)
","address,uint256) (contracts/v3/controllers/Controller.sol",441-472
unused-return,Medium,"YaxisVotePower.balanceOf(address) (contracts/governance/YaxisVotePower.sol#44-69) ignores return value by (_yaxReserves,None,None) = yaxisEthUniswapV2Pair.getReserves() (contracts/governance/YaxisVotePower.sol#53)
",address) (contracts/governance/YaxisVotePower.sol,44-69
unused-return,Medium,"LegacyController.withdraw(address,uint256) (contracts/v3/controllers/LegacyController.sol#147-177) ignores return value by converter.convert(_tokens[0],address(token),_balance,1) (contracts/v3/controllers/LegacyController.sol#173)
","address,uint256) (contracts/v3/controllers/LegacyController.sol",147-177
unused-return,Medium,"MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412) ignores return value by converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
","uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol",390-412
unused-return,Medium,"MetaVault.earnExtra(address) (contracts/legacy/MetaVault.sol#664-672) ignores return value by converter.convert(_token,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#671)
",address) (contracts/legacy/MetaVault.sol,664-672
unused-return,Medium,"LegacyController.legacyDeposit(address,uint256) (contracts/v3/controllers/LegacyController.sol#199-216) ignores return value by converter.convert(address(token),_toToken,_amount,_expected) (contracts/v3/controllers/LegacyController.sol#211)
","address,uint256) (contracts/v3/controllers/LegacyController.sol",199-216
unused-return,Medium,"LegacyController.legacyDeposit(address,uint256) (contracts/v3/controllers/LegacyController.sol#199-216) ignores return value by vault.deposit(_toToken,IERC20(_toToken).balanceOf(address(this))) (contracts/v3/controllers/LegacyController.sol#215)
","address,uint256) (contracts/v3/controllers/LegacyController.sol",199-216
write-after-write,Medium,"Controller.setCap(address,address,uint256,address)._balance (contracts/v3/controllers/Controller.sol#254) is written in both
	_balance = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#260)
	_balance = IERC20(_want).balanceOf(address(this)) (contracts/v3/controllers/Controller.sol#263)
",N/A,N/A
shadowing-local,Low,"MockzpaToken.constructor(string,string,address)._name (contracts/mock/MockzpaToken.sol#31) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
",N/A,N/A
shadowing-local,Low,"VaultToken.constructor(string,string)._name (contracts/v3/VaultToken.sol#16) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
",N/A,N/A
shadowing-local,Low,"MockIdleToken.constructor(string,string,address,address,address)._symbol (contracts/mock/MockIdleToken.sol#21) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
",N/A,N/A
shadowing-local,Low,"MockERC677.constructor(string,string)._symbol (contracts/token/mock/MockERC677.sol#11) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
",N/A,N/A
shadowing-local,Low,"Vault._normalizeDecimals(address,uint256)._decimals (contracts/v3/Vault.sol#378) shadows:
	- ERC20._decimals (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#44) (state variable)
",N/A,N/A
shadowing-local,Low,"MockDErc20.constructor(string,string,IERC20).symbol (contracts/mock/MockDErc20.sol#16) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,72-74
shadowing-local,Low,"MockERC20.constructor(string,string,uint8).symbol (contracts/mock/MockERC20.sol#36) shadows:
	- MockERC20.symbol() (contracts/mock/MockERC20.sol#49-51) (function)
",) (contracts/mock/MockERC20.sol,49-51
shadowing-local,Low,"MockIdleToken.constructor(string,string,address,address,address)._name (contracts/mock/MockIdleToken.sol#20) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
",N/A,N/A
shadowing-local,Low,"MockERC20.constructor(string,string,uint8).name (contracts/mock/MockERC20.sol#35) shadows:
	- MockERC20.name() (contracts/mock/MockERC20.sol#45-47) (function)
",) (contracts/mock/MockERC20.sol,45-47
shadowing-local,Low,"MockzpaToken.constructor(string,string,address)._symbol (contracts/mock/MockzpaToken.sol#32) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
",N/A,N/A
shadowing-local,Low,"MockYearnV2.constructor(string,string,IERC20).symbol (contracts/mock/MockYearnV2.sol#16) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,72-74
shadowing-local,Low,"Vault.constructor(string,string,address)._symbol (contracts/v3/Vault.sol#49) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
",N/A,N/A
shadowing-local,Low,"VaultToken.constructor(string,string)._symbol (contracts/v3/VaultToken.sol#17) shadows:
	- ERC20._symbol (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#43) (state variable)
",N/A,N/A
shadowing-local,Low,"MockERC677.constructor(string,string)._name (contracts/token/mock/MockERC677.sol#10) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
",N/A,N/A
shadowing-local,Low,"MockDErc20.constructor(string,string,IERC20).name (contracts/mock/MockDErc20.sol#16) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,64-66
shadowing-local,Low,"MockYearnV2.constructor(string,string,IERC20).name (contracts/mock/MockYearnV2.sol#16) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,64-66
shadowing-local,Low,"MockERC20.constructor(string,string,uint8).decimals (contracts/mock/MockERC20.sol#37) shadows:
	- MockERC20.decimals() (contracts/mock/MockERC20.sol#53-55) (function)
",) (contracts/mock/MockERC20.sol,53-55
shadowing-local,Low,"Vault.constructor(string,string,address)._name (contracts/v3/Vault.sol#48) shadows:
	- ERC20._name (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#42) (state variable)
",N/A,N/A
shadowing-local,Low,"MockERC20NonStandard.constructor(string,string,uint8).symbol (contracts/mock/MockERC20NonStandard.sol#36) shadows:
	- MockERC20NonStandard.symbol() (contracts/mock/MockERC20NonStandard.sol#49-51) (function)
",) (contracts/mock/MockERC20NonStandard.sol,49-51
shadowing-local,Low,"MockERC20NonStandard.constructor(string,string,uint8).name (contracts/mock/MockERC20NonStandard.sol#35) shadows:
	- MockERC20NonStandard.name() (contracts/mock/MockERC20NonStandard.sol#45-47) (function)
",) (contracts/mock/MockERC20NonStandard.sol,45-47
shadowing-local,Low,"MockERC20NonStandard.constructor(string,string,uint8).decimals (contracts/mock/MockERC20NonStandard.sol#37) shadows:
	- MockERC20NonStandard.decimals() (contracts/mock/MockERC20NonStandard.sol#53-55) (function)
",) (contracts/mock/MockERC20NonStandard.sol,53-55
events-access,Low,"IRewardDistributionRecipient.setRewardDistribution(address) (contracts/token/Rewards.sol#69-74) should emit an event for: 
	- rewardDistribution = _rewardDistribution (contracts/token/Rewards.sol#73) 
",address) (contracts/token/Rewards.sol,69-74
events-access,Low,"MockERC20.transferOwnership(address) (contracts/mock/MockERC20.sol#139-141) should emit an event for: 
	- _owner = newOwner (contracts/mock/MockERC20.sol#140) 
",address) (contracts/mock/MockERC20.sol,139-141
events-access,Low,"MockERC20NonStandard.transferOwnership(address) (contracts/mock/MockERC20NonStandard.sol#132-134) should emit an event for: 
	- _owner = newOwner (contracts/mock/MockERC20NonStandard.sol#133) 
",address) (contracts/mock/MockERC20NonStandard.sol,132-134
events-maths,Low,"Harvester.setSlippage(uint256) (contracts/v3/Harvester.sol#154-162) should emit an event for: 
	- slippage = _slippage (contracts/v3/Harvester.sol#161) 
",uint256) (contracts/v3/Harvester.sol,154-162
events-maths,Low,"Manager.setTreasuryFee(uint256) (contracts/v3/Manager.sol#368-377) should emit an event for: 
	- treasuryFee = _treasuryFee (contracts/v3/Manager.sol#376) 
",uint256) (contracts/v3/Manager.sol,368-377
events-maths,Low,"MetaVault.setYaxPerBlock(uint256) (contracts/legacy/MetaVault.sol#220-224) should emit an event for: 
	- yaxPerBlock = _yaxPerBlock (contracts/legacy/MetaVault.sol#223) 
",uint256) (contracts/legacy/MetaVault.sol,220-224
events-maths,Low,"Vault.setMin(uint256) (contracts/v3/Vault.sol#84-93) should emit an event for: 
	- min = _min (contracts/v3/Vault.sol#92) 
",uint256) (contracts/v3/Vault.sol,84-93
events-maths,Low,"MetaVault.setEarnLowerlimit(uint256) (contracts/legacy/MetaVault.sol#188-191) should emit an event for: 
	- earnLowerlimit = _earnLowerlimit (contracts/legacy/MetaVault.sol#190) 
",uint256) (contracts/legacy/MetaVault.sol,188-191
events-maths,Low,"MetaVault.setMin(uint256) (contracts/legacy/MetaVault.sol#138-141) should emit an event for: 
	- min = _min (contracts/legacy/MetaVault.sol#140) 
",uint256) (contracts/legacy/MetaVault.sol,138-141
missing-zero-check,Low,"MockERC20.transferOwnership(address).newOwner (contracts/mock/MockERC20.sol#139) lacks a zero-check on :
		- _owner = newOwner (contracts/mock/MockERC20.sol#140)
",N/A,N/A
missing-zero-check,Low,"MetaVault.setGovernance(address)._governance (contracts/legacy/MetaVault.sol#147) lacks a zero-check on :
		- governance = _governance (contracts/legacy/MetaVault.sol#149)
",N/A,N/A
missing-zero-check,Low,"MockIdleToken.constructor(string,string,address,address,address)._underlyingAsset (contracts/mock/MockIdleToken.sol#22) lacks a zero-check on :
		- token = _underlyingAsset (contracts/mock/MockIdleToken.sol#29)
",N/A,N/A
missing-zero-check,Low,"MerkleDistributor.constructor(address,bytes32).token_ (contracts/token/MerkleDistributor.sol#16) lacks a zero-check on :
		- token = token_ (contracts/token/MerkleDistributor.sol#17)
",N/A,N/A
missing-zero-check,Low,"MetaVault.setTreasuryWallet(address)._treasuryWallet (contracts/legacy/MetaVault.sol#291) lacks a zero-check on :
		- treasuryWallet = _treasuryWallet (contracts/legacy/MetaVault.sol#293)
",N/A,N/A
missing-zero-check,Low,"MockUniswapPair.constructor(address,address)._token0 (contracts/legacy/mock/MockUniswapPair.sol#15) lacks a zero-check on :
		- token0 = _token0 (contracts/legacy/mock/MockUniswapPair.sol#21)
",N/A,N/A
missing-zero-check,Low,"MockUniswapPair.constructor(address,address)._token1 (contracts/legacy/mock/MockUniswapPair.sol#16) lacks a zero-check on :
		- token1 = _token1 (contracts/legacy/mock/MockUniswapPair.sol#22)
",N/A,N/A
missing-zero-check,Low,"NativeStrategyCurve3Crv.constructor(string,address,address,address,address,address,address,Gauge,Mintr,IStableSwap3Pool,address,address,address)._dai (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#30) lacks a zero-check on :
		- dai = _dai (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#44)
",N/A,N/A
missing-zero-check,Low,"BaseStrategy.constructor(string,address,address,address,address,address)._want (contracts/v3/strategies/BaseStrategy.sol#57) lacks a zero-check on :
		- want = _want (contracts/v3/strategies/BaseStrategy.sol#62)
",N/A,N/A
missing-zero-check,Low,"NativeStrategyCurve3Crv.constructor(string,address,address,address,address,address,address,Gauge,Mintr,IStableSwap3Pool,address,address,address)._usdc (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#31) lacks a zero-check on :
		- usdc = _usdc (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#45)
",N/A,N/A
missing-zero-check,Low,"LegacyController.constructor(address,address)._metavault (contracts/v3/controllers/LegacyController.sol#39) lacks a zero-check on :
		- metavault = _metavault (contracts/v3/controllers/LegacyController.sol#44)
",N/A,N/A
missing-zero-check,Low,"Manager.setInsurancePool(address)._insurancePool (contracts/v3/Manager.sol#275) lacks a zero-check on :
		- insurancePool = _insurancePool (contracts/v3/Manager.sol#281)
",N/A,N/A
missing-zero-check,Low,"BaseStrategy.constructor(string,address,address,address,address,address)._weth (contracts/v3/strategies/BaseStrategy.sol#58) lacks a zero-check on :
		- weth = _weth (contracts/v3/strategies/BaseStrategy.sol#65)
",N/A,N/A
missing-zero-check,Low,"MetaVault.setController(address)._controller (contracts/legacy/MetaVault.sol#156) lacks a zero-check on :
		- controller = _controller (contracts/legacy/MetaVault.sol#158)
",N/A,N/A
missing-zero-check,Low,"BaseStrategy.constructor(string,address,address,address,address,address)._controller (contracts/v3/strategies/BaseStrategy.sol#55) lacks a zero-check on :
		- controller = _controller (contracts/v3/strategies/BaseStrategy.sol#63)
",N/A,N/A
missing-zero-check,Low,"Vault.setGauge(address)._gauge (contracts/v3/Vault.sol#70) lacks a zero-check on :
		- gauge = _gauge (contracts/v3/Vault.sol#76)
",N/A,N/A
missing-zero-check,Low,"MockzpaToken.constructor(string,string,address)._underlyingAsset (contracts/mock/MockzpaToken.sol#33) lacks a zero-check on :
		- underlyingAsset = _underlyingAsset (contracts/mock/MockzpaToken.sol#38)
",N/A,N/A
missing-zero-check,Low,"Manager.setStakingPool(address)._stakingPool (contracts/v3/Manager.sol#305) lacks a zero-check on :
		- stakingPool = _stakingPool (contracts/v3/Manager.sol#311)
",N/A,N/A
missing-zero-check,Low,"YaxisVoteProxy.setGovernance(address)._governance (contracts/governance/YaxisVoteProxy.sol#40) lacks a zero-check on :
		- governance = _governance (contracts/governance/YaxisVoteProxy.sol#42)
",N/A,N/A
missing-zero-check,Low,"NativeStrategyCurve3Crv.constructor(string,address,address,address,address,address,address,Gauge,Mintr,IStableSwap3Pool,address,address,address)._usdt (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#32) lacks a zero-check on :
		- usdt = _usdt (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#46)
",N/A,N/A
missing-zero-check,Low,"IRewardDistributionRecipient.setRewardDistribution(address)._rewardDistribution (contracts/token/Rewards.sol#69) lacks a zero-check on :
		- rewardDistribution = _rewardDistribution (contracts/token/Rewards.sol#73)
",N/A,N/A
missing-zero-check,Low,"Manager.setGovernance(address)._governance (contracts/v3/Manager.sol#229) lacks a zero-check on :
		- governance = _governance (contracts/v3/Manager.sol#235)
",N/A,N/A
missing-zero-check,Low,"NativeStrategyCurve3Crv.constructor(string,address,address,address,address,address,address,Gauge,Mintr,IStableSwap3Pool,address,address,address)._crv (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#28) lacks a zero-check on :
		- crv = _crv (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#43)
",N/A,N/A
missing-zero-check,Low,"MockERC20NonStandard.transferOwnership(address).newOwner (contracts/mock/MockERC20NonStandard.sol#132) lacks a zero-check on :
		- _owner = newOwner (contracts/mock/MockERC20NonStandard.sol#133)
",N/A,N/A
calls-loop,Low,"Vault.balanceOfThis() (contracts/v3/Vault.sol#315-325) has external calls inside a loop: _balance = _balance.add(_normalizeDecimals(_token,IERC20(_token).balanceOf(address(this)))) (contracts/v3/Vault.sol#323)
",) (contracts/v3/Vault.sol,315-325
calls-loop,Low,"StablesConverter.expected(address,address,uint256) (contracts/v3/converters/StablesConverter.sol#173-203) has external calls inside a loop: stableSwap3Pool.calc_token_amount(amounts,true) (contracts/v3/converters/StablesConverter.sol#188)
","address,address,uint256) (contracts/v3/converters/StablesConverter.sol",173-203
calls-loop,Low,"Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",114-121
calls-loop,Low,"Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472) has external calls inside a loop: IStrategy(_strategies[i]).withdraw(_amounts[i]) (contracts/v3/controllers/Controller.sol#459)
","address,uint256) (contracts/v3/controllers/Controller.sol",441-472
calls-loop,Low,"Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472) has external calls inside a loop: _want = IStrategy(_strategies[i]).want() (contracts/v3/controllers/Controller.sol#461)
","address,uint256) (contracts/v3/controllers/Controller.sol",441-472
calls-loop,Low,"Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203) has external calls inside a loop: _before = IERC20(_token).balanceOf(address(this)) (contracts/v3/Vault.sol#184)
","address,uint256) (contracts/v3/Vault.sol",170-203
calls-loop,Low,"Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203) has external calls inside a loop: _amount = IERC20(_token).balanceOf(address(this)).sub(_before) (contracts/v3/Vault.sol#186)
","address,uint256) (contracts/v3/Vault.sol",170-203
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: stableSwap3Pool.remove_liquidity_one_coin(_inputAmount,i_scope_0,_estimatedOutput) (contracts/v3/converters/StablesConverter.sol#142-146)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"Vault.balance() (contracts/v3/Vault.sol#303-310) has external calls inside a loop: balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf()) (contracts/v3/Vault.sol#309)
",) (contracts/v3/Vault.sol,303-310
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: _before_scope_1 = _token.balanceOf(address(this)) (contracts/v3/converters/StablesConverter.sol#141)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: _after = token3CRV.balanceOf(address(this)) (contracts/v3/converters/StablesConverter.sol#129)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"StablesConverter.expected(address,address,uint256) (contracts/v3/converters/StablesConverter.sol#173-203) has external calls inside a loop: stableSwap3Pool.calc_withdraw_one_coin(_inputAmount,i_scope_0) (contracts/v3/converters/StablesConverter.sol#196)
","address,address,uint256) (contracts/v3/converters/StablesConverter.sol",173-203
calls-loop,Low,"Vault._normalizeDecimals(address,uint256) (contracts/v3/Vault.sol#370-383) has external calls inside a loop: _decimals = uint256(ExtendedIERC20(_token).decimals()) (contracts/v3/Vault.sol#378)
","address,uint256) (contracts/v3/Vault.sol",370-383
calls-loop,Low,"Controller.withdraw(address,uint256) (contracts/v3/controllers/Controller.sol#441-472) has external calls inside a loop: IConverter(_converter).convert(_want,_token,_amounts[i],1) (contracts/v3/controllers/Controller.sol#466)
","address,uint256) (contracts/v3/controllers/Controller.sol",441-472
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: _after_scope_2 = _token.balanceOf(address(this)) (contracts/v3/converters/StablesConverter.sol#147)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: stableSwap3Pool.add_liquidity(amounts,_estimatedOutput) (contracts/v3/converters/StablesConverter.sol#128)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"StablesConverter.convert(address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol#111-165) has external calls inside a loop: _before = token3CRV.balanceOf(address(this)) (contracts/v3/converters/StablesConverter.sol#127)
","address,address,uint256,uint256) (contracts/v3/converters/StablesConverter.sol",111-165
calls-loop,Low,"MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456) has external calls inside a loop: converter.convert_rate(address(inputTokens[i]),address(token3CRV),_inputAmount) > 0 (contracts/legacy/MetaVault.sol#431)
","uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol",422-456
calls-loop,Low,"Controller.updateBalance(address,address) (contracts/v3/controllers/Controller.sol#622-629) has external calls inside a loop: _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#628)
","address,address) (contracts/v3/controllers/Controller.sol",622-629
calls-loop,Low,"Vault.checkToken(address) (contracts/v3/Vault.sol#389-392) has external calls inside a loop: require(bool,string)(manager.allowedTokens(_token) && manager.vaults(_token) == address(this),!_token) (contracts/v3/Vault.sol#390)
",address) (contracts/v3/Vault.sol,389-392
calls-loop,Low,"Vault.balanceOfThis() (contracts/v3/Vault.sol#315-325) has external calls inside a loop: _tokens = manager.getTokens(address(this)) (contracts/v3/Vault.sol#320)
",) (contracts/v3/Vault.sol,315-325
calls-loop,Low,"Vault.notHalted() (contracts/v3/Vault.sol#394-397) has external calls inside a loop: require(bool,string)(! manager.halted(),halted) (contracts/v3/Vault.sol#395)
",) (contracts/v3/Vault.sol,394-397
reentrancy-benign,Low,"Reentrancy in MockUniswapPair.addLiquidity(uint256,uint256,uint256) (contracts/legacy/mock/MockUniswapPair.sol#25-35):
	External calls:
	- IERC20(token0).safeTransferFrom(msg.sender,address(this),_amount0) (contracts/legacy/mock/MockUniswapPair.sol#32)
	- IERC20(token1).safeTransferFrom(msg.sender,address(this),_amount1) (contracts/legacy/mock/MockUniswapPair.sol#33)
	State variables written after the call(s):
	- _mint(msg.sender,_amountOut) (contracts/legacy/mock/MockUniswapPair.sol#34)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,_amountOut) (contracts/legacy/mock/MockUniswapPair.sol#34)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
","uint256,uint256,uint256) (contracts/legacy/mock/MockUniswapPair.sol",25-35
reentrancy-benign,Low,"Reentrancy in MockCurveGauge.withdraw(uint256) (contracts/mock/MockCurveGauge.sol#36-39):
	External calls:
	- want.safeTransfer(msg.sender,_amount) (contracts/mock/MockCurveGauge.sol#37)
	State variables written after the call(s):
	- amounts[msg.sender] = amounts[msg.sender].sub(_amount) (contracts/mock/MockCurveGauge.sol#38)
",uint256) (contracts/mock/MockCurveGauge.sol,36-39
reentrancy-benign,Low,"Reentrancy in MockIdleToken.mintIdleToken(uint256,bool,address) (contracts/mock/MockIdleToken.sol#34-38):
	External calls:
	- IERC20(token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockIdleToken.sol#36)
	State variables written after the call(s):
	- _mint(msg.sender,mintedTokens) (contracts/mock/MockIdleToken.sol#37)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,mintedTokens) (contracts/mock/MockIdleToken.sol#37)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
","uint256,bool,address) (contracts/mock/MockIdleToken.sol",34-38
reentrancy-benign,Low,"Reentrancy in MockDErc20.mint(address,uint256) (contracts/mock/MockDErc20.sol#28-32):
	External calls:
	- underlying.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockDErc20.sol#30)
	State variables written after the call(s):
	- _mint(_account,_toMint) (contracts/mock/MockDErc20.sol#31)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(_account,_toMint) (contracts/mock/MockDErc20.sol#31)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
","address,uint256) (contracts/mock/MockDErc20.sol",28-32
reentrancy-benign,Low,"Reentrancy in MockdYdXSoloMargin._deposit(Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol#71-87):
	External calls:
	- IERC20(tokens[args.market]).safeTransferFrom(args.from,address(this),args.amount.value) (contracts/mock/MockdYdXSoloMargin.sol#83)
	State variables written after the call(s):
	- balances[args.account.owner][args.market] = newBalance (contracts/mock/MockdYdXSoloMargin.sol#86)
",Actions.DepositArgs) (contracts/mock/MockdYdXSoloMargin.sol,71-87
reentrancy-benign,Low,"Reentrancy in Controller.withdrawAll(address,address) (contracts/v3/controllers/Controller.sol#337-365):
	External calls:
	- IStrategy(_strategy).withdrawAll() (contracts/v3/controllers/Controller.sol#347)
	State variables written after the call(s):
	- updateBalance(_vault,_strategy) (contracts/v3/controllers/Controller.sol#350)
		- _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf() (contracts/v3/controllers/Controller.sol#628)
","address,address) (contracts/v3/controllers/Controller.sol",337-365
reentrancy-benign,Low,"Reentrancy in Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393):
	External calls:
	- IStrategy(_strategy).harvest(_estimatedWETH,_estimatedYAXIS) (contracts/v3/controllers/Controller.sol#387)
	State variables written after the call(s):
	- _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before)) (contracts/v3/controllers/Controller.sol#390)
	- _vaultDetails[_vault].balances[_strategy] = _after (contracts/v3/controllers/Controller.sol#391)
","address,uint256,uint256) (contracts/v3/controllers/Controller.sol",375-393
reentrancy-benign,Low,"Reentrancy in MockPickleJar.deposit(uint256) (contracts/mock/MockPickleJar.sol#30-34):
	External calls:
	- t3crv.transferFrom(msg.sender,address(this),_amount) (contracts/mock/MockPickleJar.sol#31)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mock/MockPickleJar.sol#33)
		- _balance[dst] = add(_balance[dst],amt) (contracts/mock/MockERC20.sol#73)
	- _mint(msg.sender,shares) (contracts/mock/MockPickleJar.sol#33)
		- _totalSupply = add(_totalSupply,amt) (contracts/mock/MockERC20.sol#74)
",uint256) (contracts/mock/MockPickleJar.sol,30-34
reentrancy-benign,Low,"Reentrancy in MockzpaToken.deposit(uint256) (contracts/mock/MockzpaToken.sol#41-46):
	External calls:
	- IERC20(underlyingAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockzpaToken.sol#43)
	State variables written after the call(s):
	- _mint(msg.sender,_toMint) (contracts/mock/MockzpaToken.sol#44)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,_toMint) (contracts/mock/MockzpaToken.sol#44)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
	- userInfo[_msgSender()].depositTime = block.timestamp (contracts/mock/MockzpaToken.sol#45)
",uint256) (contracts/mock/MockzpaToken.sol,41-46
reentrancy-benign,Low,"Reentrancy in MockYearnV2.deposit(uint256) (contracts/mock/MockYearnV2.sol#33-47):
	External calls:
	- underlying.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockYearnV2.sol#36)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mock/MockYearnV2.sol#45)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,shares) (contracts/mock/MockYearnV2.sol#45)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
",uint256) (contracts/mock/MockYearnV2.sol,33-47
reentrancy-benign,Low,"Reentrancy in MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockGenericVault.sol#47)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
		- _balance[dst] = add(_balance[dst],amt) (contracts/mock/MockERC20.sol#73)
	- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
		- _totalSupply = add(_totalSupply,amt) (contracts/mock/MockERC20.sol#74)
",uint256) (contracts/mock/MockGenericVault.sol,44-57
reentrancy-benign,Low,"Reentrancy in MockCurveGauge.deposit(uint256) (contracts/mock/MockCurveGauge.sol#23-26):
	External calls:
	- want.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockCurveGauge.sol#24)
	State variables written after the call(s):
	- amounts[msg.sender] = amounts[msg.sender].add(_amount) (contracts/mock/MockCurveGauge.sol#25)
",uint256) (contracts/mock/MockCurveGauge.sol,23-26
reentrancy-benign,Low,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
","address,uint256,uint256) (contracts/legacy/MetaVault.sol",471-494
reentrancy-benign,Low,"Reentrancy in MockFlamIncomeVault.deposit(uint256) (contracts/mock/MockFlamIncome.sol#43-56):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockFlamIncome.sol#46)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mock/MockFlamIncome.sol#55)
		- _balance[dst] = add(_balance[dst],amt) (contracts/mock/MockERC20.sol#73)
	- _mint(msg.sender,shares) (contracts/mock/MockFlamIncome.sol#55)
		- _totalSupply = add(_totalSupply,amt) (contracts/mock/MockERC20.sol#74)
",uint256) (contracts/mock/MockFlamIncome.sol,43-56
reentrancy-benign,Low,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#255)
","uint256,address) (contracts/legacy/MetaVault.sol",591-633
reentrancy-benign,Low,"Reentrancy in Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203):
	External calls:
	- IERC20(_token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/v3/Vault.sol#185)
	State variables written after the call(s):
	- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
","address,uint256) (contracts/v3/Vault.sol",170-203
reentrancy-events,Low,"Reentrancy in MockYearnV2.deposit(uint256) (contracts/mock/MockYearnV2.sol#33-47):
	External calls:
	- underlying.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockYearnV2.sol#36)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,shares) (contracts/mock/MockYearnV2.sol#45)
",uint256) (contracts/mock/MockYearnV2.sol,33-47
reentrancy-events,Low,"Reentrancy in LegacyController.withdraw(address,uint256) (contracts/v3/controllers/LegacyController.sol#147-177):
	External calls:
	- token.safeTransfer(metavault,_amount) (contracts/v3/controllers/LegacyController.sol#158)
	Event emitted after the call(s):
	- Withdraw(_amount) (contracts/v3/controllers/LegacyController.sol#159)
","address,uint256) (contracts/v3/controllers/LegacyController.sol",147-177
reentrancy-events,Low,"Reentrancy in Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203):
	External calls:
	- IERC20(_token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/v3/Vault.sol#185)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/v3/Vault.sol#201)
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
","address,uint256) (contracts/v3/Vault.sol",170-203
reentrancy-events,Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
","uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol",390-412
reentrancy-events,Low,"Reentrancy in Controller.addStrategy(address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol#91-123):
	External calls:
	- IHarvester(manager.harvester()).addStrategy(_vault,_strategy,_timeout) (contracts/v3/controllers/Controller.sol#120)
	Event emitted after the call(s):
	- StrategyAdded(_vault,_strategy,_cap) (contracts/v3/controllers/Controller.sol#122)
","address,address,uint256,uint256) (contracts/v3/controllers/Controller.sol",91-123
reentrancy-events,Low,"Reentrancy in Rewards.withdraw(uint256) (contracts/token/Rewards.sol#201-205):
	External calls:
	- super.withdraw(amount) (contracts/token/Rewards.sol#203)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- stakingToken.safeTransfer(msg.sender,amount) (contracts/token/Rewards.sol#118)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- super.withdraw(amount) (contracts/token/Rewards.sol#203)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Withdrawn(msg.sender,amount) (contracts/token/Rewards.sol#204)
",uint256) (contracts/token/Rewards.sol,201-205
reentrancy-events,Low,"Reentrancy in MockIdleToken.mintIdleToken(uint256,bool,address) (contracts/mock/MockIdleToken.sol#34-38):
	External calls:
	- IERC20(token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockIdleToken.sol#36)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,mintedTokens) (contracts/mock/MockIdleToken.sol#37)
","uint256,bool,address) (contracts/mock/MockIdleToken.sol",34-38
reentrancy-events,Low,"Reentrancy in Vault.withdraw(uint256,address) (contracts/v3/Vault.sol#231-264):
	External calls:
	- _controller.withdraw(_output,_toWithdraw) (contracts/v3/Vault.sol#253)
	- IERC20(_output).safeTransfer(msg.sender,_amount) (contracts/v3/Vault.sol#262)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount) (contracts/v3/Vault.sol#263)
","uint256,address) (contracts/v3/Vault.sol",231-264
reentrancy-events,Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
","uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol",422-456
reentrancy-events,Low,"Reentrancy in MockUniswapPair.addLiquidity(uint256,uint256,uint256) (contracts/legacy/mock/MockUniswapPair.sol#25-35):
	External calls:
	- IERC20(token0).safeTransferFrom(msg.sender,address(this),_amount0) (contracts/legacy/mock/MockUniswapPair.sol#32)
	- IERC20(token1).safeTransferFrom(msg.sender,address(this),_amount1) (contracts/legacy/mock/MockUniswapPair.sol#33)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,_amountOut) (contracts/legacy/mock/MockUniswapPair.sol#34)
","uint256,uint256,uint256) (contracts/legacy/mock/MockUniswapPair.sol",25-35
reentrancy-events,Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
","uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol",390-412
reentrancy-events,Low,"Reentrancy in MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545):
	External calls:
	- safeYaxTransfer(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#542)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- safeYaxTransfer(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#542)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
",) (contracts/legacy/MetaVault.sol,537-545
reentrancy-events,Low,"Reentrancy in MockFlamIncomeVault.deposit(uint256) (contracts/mock/MockFlamIncome.sol#43-56):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockFlamIncome.sol#46)
	Event emitted after the call(s):
	- Transfer(address(0),dst,amt) (contracts/mock/MockERC20.sol#75)
		- _mint(msg.sender,shares) (contracts/mock/MockFlamIncome.sol#55)
",uint256) (contracts/mock/MockFlamIncome.sol,43-56
reentrancy-events,Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
","uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol",422-456
reentrancy-events,Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
","uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol",422-456
reentrancy-events,Low,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount) (contracts/legacy/MetaVault.sol#582)
",uint256) (contracts/legacy/MetaVault.sol,572-583
reentrancy-events,Low,"Reentrancy in Controller.removeStrategy(address,address,uint256) (contracts/v3/controllers/Controller.sol#165-201):
	External calls:
	- IStrategy(_strategy).withdrawAll() (contracts/v3/controllers/Controller.sol#197)
	- IHarvester(manager.harvester()).removeStrategy(_vault,_strategy,_timeout) (contracts/v3/controllers/Controller.sol#199)
	Event emitted after the call(s):
	- StrategyRemoved(_vault,_strategy) (contracts/v3/controllers/Controller.sol#200)
","address,address,uint256) (contracts/v3/controllers/Controller.sol",165-201
reentrancy-events,Low,"Reentrancy in MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554):
	External calls:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
		- IController(controller).withdraw(address(token3CRV),_toWithdraw) (contracts/legacy/MetaVault.sol#616)
		- token3CRV.safeTransfer(msg.sender,r) (contracts/legacy/MetaVault.sol#626)
		- token3CRV.safeTransfer(address(converter),r) (contracts/legacy/MetaVault.sol#629)
		- _outputAmount = converter.convert(address(token3CRV),_output,r) (contracts/legacy/MetaVault.sol#630)
		- IERC20(_output).safeTransfer(msg.sender,_outputAmount) (contracts/legacy/MetaVault.sol#631)
	External calls sending eth:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#256)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
	- Withdraw(msg.sender,_amount) (contracts/legacy/MetaVault.sol#582)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
",address) (contracts/legacy/MetaVault.sol,551-554
reentrancy-events,Low,"Reentrancy in MockzpaToken.deposit(uint256) (contracts/mock/MockzpaToken.sol#41-46):
	External calls:
	- IERC20(underlyingAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockzpaToken.sol#43)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,_toMint) (contracts/mock/MockzpaToken.sol#44)
",uint256) (contracts/mock/MockzpaToken.sol,41-46
reentrancy-events,Low,"Reentrancy in MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
",uint256) (contracts/legacy/MetaVault.sol,496-503
reentrancy-events,Low,"Reentrancy in MerkleDistributor.claim(uint256,address,uint256,bytes32[]) (contracts/token/MerkleDistributor.sol#35-47):
	External calls:
	- require(bool,string)(IERC20(token).transfer(account,amount),MerkleDistributor: Transfer failed.) (contracts/token/MerkleDistributor.sol#44)
	Event emitted after the call(s):
	- Claimed(index,account,amount) (contracts/token/MerkleDistributor.sol#46)
","uint256,address,uint256,bytes32[]) (contracts/token/MerkleDistributor.sol",35-47
reentrancy-events,Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
","uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol",390-412
reentrancy-events,Low,"Reentrancy in Harvester.harvest(IController,address,uint256,uint256) (contracts/v3/Harvester.sol#185-196):
	External calls:
	- _controller.harvestStrategy(_strategy,_estimatedWETH,_estimatedYAXIS) (contracts/v3/Harvester.sol#194)
	Event emitted after the call(s):
	- Harvest(address(_controller),_strategy) (contracts/v3/Harvester.sol#195)
","IController,address,uint256,uint256) (contracts/v3/Harvester.sol",185-196
reentrancy-events,Low,"Reentrancy in MetaVault.stakeShares(uint256) (contracts/legacy/MetaVault.sol#462-469):
	External calls:
	- IERC20(address(this)).transferFrom(msg.sender,address(this),_shares) (contracts/legacy/MetaVault.sol#464)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
",uint256) (contracts/legacy/MetaVault.sol,462-469
reentrancy-events,Low,"Reentrancy in MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockGenericVault.sol#47)
	Event emitted after the call(s):
	- Transfer(address(0),dst,amt) (contracts/mock/MockERC20.sol#75)
		- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
",uint256) (contracts/mock/MockGenericVault.sol,44-57
reentrancy-events,Low,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#256)
		- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
","uint256,address) (contracts/legacy/MetaVault.sol",591-633
reentrancy-events,Low,"Reentrancy in Rewards.getReward() (contracts/token/Rewards.sol#212-219):
	External calls:
	- rewardToken.safeTransfer(msg.sender,reward) (contracts/token/Rewards.sol#216)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,reward) (contracts/token/Rewards.sol#217)
",) (contracts/token/Rewards.sol,212-219
reentrancy-events,Low,"Reentrancy in Controller.harvestStrategy(address,uint256,uint256) (contracts/v3/controllers/Controller.sol#375-393):
	External calls:
	- IStrategy(_strategy).harvest(_estimatedWETH,_estimatedYAXIS) (contracts/v3/controllers/Controller.sol#387)
	Event emitted after the call(s):
	- Harvest(_strategy) (contracts/v3/controllers/Controller.sol#392)
","address,uint256,uint256) (contracts/v3/controllers/Controller.sol",375-393
reentrancy-events,Low,"Reentrancy in MockDErc20.mint(address,uint256) (contracts/mock/MockDErc20.sol#28-32):
	External calls:
	- underlying.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockDErc20.sol#30)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(_account,_toMint) (contracts/mock/MockDErc20.sol#31)
","address,uint256) (contracts/mock/MockDErc20.sol",28-32
reentrancy-events,Low,"Reentrancy in MockPickleJar.deposit(uint256) (contracts/mock/MockPickleJar.sol#30-34):
	External calls:
	- t3crv.transferFrom(msg.sender,address(this),_amount) (contracts/mock/MockPickleJar.sol#31)
	Event emitted after the call(s):
	- Transfer(address(0),dst,amt) (contracts/mock/MockERC20.sol#75)
		- _mint(msg.sender,shares) (contracts/mock/MockPickleJar.sol#33)
",uint256) (contracts/mock/MockPickleJar.sol,30-34
reentrancy-events,Low,"Reentrancy in LegacyController.withdraw(address,uint256) (contracts/v3/controllers/LegacyController.sol#147-177):
	External calls:
	- cachedVault.withdraw(_shares,_tokens[0]) (contracts/v3/controllers/LegacyController.sol#169)
	- IERC20(_tokens[0]).safeTransfer(address(converter),_balance) (contracts/v3/controllers/LegacyController.sol#171)
	- converter.convert(_tokens[0],address(token),_balance,1) (contracts/v3/controllers/LegacyController.sol#173)
	Event emitted after the call(s):
	- Withdraw(token.balanceOf(address(this))) (contracts/v3/controllers/LegacyController.sol#174)
","address,uint256) (contracts/v3/controllers/LegacyController.sol",147-177
reentrancy-events,Low,"Reentrancy in Rewards.exit() (contracts/token/Rewards.sol#207-210):
	External calls:
	- withdraw(balanceOf(msg.sender)) (contracts/token/Rewards.sol#208)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- stakingToken.safeTransfer(msg.sender,amount) (contracts/token/Rewards.sol#118)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- getReward() (contracts/token/Rewards.sol#209)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- rewardToken.safeTransfer(msg.sender,reward) (contracts/token/Rewards.sol#216)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- withdraw(balanceOf(msg.sender)) (contracts/token/Rewards.sol#208)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- getReward() (contracts/token/Rewards.sol#209)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,reward) (contracts/token/Rewards.sol#217)
		- getReward() (contracts/token/Rewards.sol#209)
",) (contracts/token/Rewards.sol,207-210
reentrancy-events,Low,"Reentrancy in Vault.earn(address,address) (contracts/v3/Vault.sol#141-159):
	External calls:
	- IERC20(_token).safeTransfer(address(_controller),_balance) (contracts/v3/Vault.sol#155)
	- _controller.earn(_strategy,_token,_balance) (contracts/v3/Vault.sol#156)
	Event emitted after the call(s):
	- Earn(_token,_balance) (contracts/v3/Vault.sol#157)
","address,address) (contracts/v3/Vault.sol",141-159
reentrancy-events,Low,"Reentrancy in Rewards.stake(uint256) (contracts/token/Rewards.sol#195-199):
	External calls:
	- super.stake(amount) (contracts/token/Rewards.sol#197)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- stakingToken.safeTransferFrom(msg.sender,address(this),amount) (contracts/token/Rewards.sol#105)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- super.stake(amount) (contracts/token/Rewards.sol#197)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Staked(msg.sender,amount) (contracts/token/Rewards.sol#198)
",uint256) (contracts/token/Rewards.sol,195-199
reentrancy-events,Low,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
","address,uint256,uint256) (contracts/legacy/MetaVault.sol",471-494
timestamp,Low,"Rewards.notifyRewardAmount(uint256) (contracts/token/Rewards.sol#221-237) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= periodFinish (contracts/token/Rewards.sol#227)
",uint256) (contracts/token/Rewards.sol,221-237
timestamp,Low,"Manager.acceptStrategist() (contracts/v3/Manager.sol#403-414) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK),PENDING_STRATEGIST_TIMELOCK) (contracts/v3/Manager.sol#409)
",) (contracts/v3/Manager.sol,403-414
timestamp,Low,"Rewards.getReward() (contracts/token/Rewards.sol#212-219) uses timestamp for comparisons
	Dangerous comparisons:
	- reward > 0 (contracts/token/Rewards.sol#214)
",) (contracts/token/Rewards.sol,212-219
timestamp,Low,"Harvester.canHarvest(address) (contracts/v3/Harvester.sol#267-277) uses timestamp for comparisons
	Dangerous comparisons:
	- (strategy.addresses.length > 0 && strategy.lastCalled <= block.timestamp.sub(strategy.timeout)) (contracts/v3/Harvester.sol#276)
",address) (contracts/v3/Harvester.sol,267-277
timestamp,Low,"MockzpaToken.redeem(uint256) (contracts/mock/MockzpaToken.sol#48-70) uses timestamp for comparisons
	Dangerous comparisons:
	- feeSubtraction > initialFee.sub(endFee) (contracts/mock/MockzpaToken.sol#59)
",uint256) (contracts/mock/MockzpaToken.sol,48-70
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",171-188
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-35
assembly,Informational,"ERC677Token.isContract(address) (contracts/vendor/LinkToken/ERC677Token.sol#39-47) uses assembly
	- INLINE ASM (contracts/vendor/LinkToken/ERC677Token.sol#45)
",address) (contracts/vendor/LinkToken/ERC677Token.sol,39-47
pragma,Informational,"6 different versions of Solidity are used:
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/GSN/Context.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- Version constraint >=0.6.2<0.8.0 is used by:
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- Version constraint 0.6.12 is used by:
		-0.6.12 (contracts/governance/YaxisVotePower.sol#2)
		-0.6.12 (contracts/governance/YaxisVoteProxy.sol#2)
		-0.6.12 (contracts/governance/interfaces/IRewards.sol#2)
		-0.6.12 (contracts/governance/interfaces/IUniswapV2Pair.sol#2)
		-0.6.12 (contracts/governance/interfaces/IVoteProxy.sol#2)
		-0.6.12 (contracts/governance/interfaces/IYaxisBar.sol#2)
		-0.6.12 (contracts/legacy/IController.sol#3)
		-0.6.12 (contracts/legacy/IConverter.sol#5)
		-0.6.12 (contracts/legacy/IMetaVault.sol#5)
		-0.6.12 (contracts/legacy/IVaultManager.sol#3)
		-0.6.12 (contracts/legacy/MetaVault.sol#4)
		-0.6.12 (contracts/legacy/MetaVaultNonConverter.sol#5)
		-0.6.12 (contracts/legacy/mock/MockUniswapPair.sol#2)
		-0.6.12 (contracts/legacy/mock/MockYaxisBar.sol#2)
		-0.6.12 (contracts/mock/MockDErc20.sol#3)
		-0.6.12 (contracts/mock/MockDRewards.sol#3)
		-0.6.12 (contracts/mock/MockERC20.sol#3)
		-0.6.12 (contracts/mock/MockIdleToken.sol#3)
		-0.6.12 (contracts/mock/MockPickleJar.sol#3)
		-0.6.12 (contracts/mock/MockPickleMasterChef.sol#3)
		-0.6.12 (contracts/mock/MockUniswapRouter.sol#3)
		-0.6.12 (contracts/mock/MockYearnV2.sol#3)
		-0.6.12 (contracts/mock/MockzpaToken.sol#3)
		-0.6.12 (contracts/token/MerkleDistributor.sol#3)
		-0.6.12 (contracts/token/Rewards.sol#48)
		-0.6.12 (contracts/token/Swap.sol#3)
		-0.6.12 (contracts/token/YaxisToken.sol#2)
		-0.6.12 (contracts/v3/Harvester.sol#3)
		-0.6.12 (contracts/v3/Manager.sol#5)
		-0.6.12 (contracts/v3/MinterWrapper.sol#4)
		-0.6.12 (contracts/v3/Vault.sol#3)
		-0.6.12 (contracts/v3/VaultHelper.sol#3)
		-0.6.12 (contracts/v3/VaultToken.sol#2)
		-0.6.12 (contracts/v3/controllers/Controller.sol#3)
		-0.6.12 (contracts/v3/controllers/LegacyController.sol#3)
		-0.6.12 (contracts/v3/converters/StablesConverter.sol#3)
		-0.6.12 (contracts/v3/interfaces/IController.sol#3)
		-0.6.12 (contracts/v3/interfaces/IConverter.sol#3)
		-0.6.12 (contracts/v3/interfaces/ICurve3Pool.sol#5)
		-0.6.12 (contracts/v3/interfaces/IHarvester.sol#3)
		-0.6.12 (contracts/v3/interfaces/ILegacyVault.sol#3)
		-0.6.12 (contracts/v3/interfaces/ILiquidityGaugeV2.sol#3)
		-0.6.12 (contracts/v3/interfaces/IManager.sol#3)
		-0.6.12 (contracts/v3/interfaces/IStableSwap3Pool.sol#5)
		-0.6.12 (contracts/v3/interfaces/IStrategy.sol#3)
		-0.6.12 (contracts/v3/interfaces/IVault.sol#3)
		-0.6.12 (contracts/v3/strategies/BaseStrategy.sol#3)
		-0.6.12 (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#3)
	- Version constraint ^0.6.2 is used by:
		-^0.6.2 (contracts/interfaces/Balancer.sol#2)
		-^0.6.2 (contracts/interfaces/Gauge.sol#2)
		-^0.6.2 (contracts/interfaces/GenericVault.sol#3)
		-^0.6.2 (contracts/interfaces/Idle.sol#2)
		-^0.6.2 (contracts/interfaces/PickleJar.sol#3)
		-^0.6.2 (contracts/interfaces/Stabilize.sol#2)
		-^0.6.2 (contracts/interfaces/dYdXSoloMargin.sol#2)
		-^0.6.2 (contracts/mock/MockCurveGauge.sol#3)
		-^0.6.2 (contracts/mock/MockCurveMinter.sol#3)
		-^0.6.2 (contracts/mock/MockFlamIncome.sol#3)
		-^0.6.2 (contracts/mock/MockGenericVault.sol#3)
		-^0.6.2 (contracts/mock/MockdYdXSoloMargin.sol#3)
		-^0.6.2 (contracts/v3/interfaces/ExtendedIERC20.sol#3)
		-^0.6.2 (contracts/v3/interfaces/ISwap.sol#2)
	- Version constraint ^0.6.12 is used by:
		-^0.6.12 (contracts/mock/MockStabilizePool.sol#2)
	- Version constraint ^0.6.0 is used by:
		-^0.6.0 (contracts/token/interfaces/IERC677.sol#2)
		-^0.6.0 (contracts/token/interfaces/IMerkleDistributor.sol#2)
		-^0.6.0 (contracts/token/interfaces/IsYAX.sol#2)
		-^0.6.0 (contracts/token/mock/MockERC677.sol#2)
		-^0.6.0 (contracts/v3/interfaces/ILegacyController.sol#3)
		-^0.6.0 (contracts/vendor/LinkToken/ERC677Token.sol#2)
		-^0.6.0 (contracts/vendor/LinkToken/token/ERC677.sol#2)
		-^0.6.0 (contracts/vendor/LinkToken/token/ERC677Receiver.sol#2)
		-^0.6.0 (contracts/vendor/LinkToken/token/LinkERC20.sol#2)
",N/A,N/A
pragma,Informational,"2 different versions of Solidity are used:
	- Version constraint ^0.6.2 is used by:
		-^0.6.2 (contracts/interfaces/Chainlink.sol#3)
	- Version constraint ^0.6.0 is used by:
		-^0.6.0 (contracts/mock/MockV3Aggregatgor.sol#2)
",N/A,N/A
costly-loop,Informational,"ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236) has costly operations inside a loop:
	- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
","address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",228-236
dead-code,Informational,"MockERC20._pull(address,uint256) (contracts/mock/MockERC20.sol#68-70) is never used and should be removed
","address,uint256) (contracts/mock/MockERC20.sol",68-70
dead-code,Informational,"MockERC20._push(address,uint256) (contracts/mock/MockERC20.sol#64-66) is never used and should be removed
","address,uint256) (contracts/mock/MockERC20.sol",64-66
dead-code,Informational,"MockERC20NonStandard._pull(address,uint256) (contracts/mock/MockERC20NonStandard.sol#68-70) is never used and should be removed
","address,uint256) (contracts/mock/MockERC20NonStandard.sol",68-70
dead-code,Informational,"MockERC20NonStandard._push(address,uint256) (contracts/mock/MockERC20NonStandard.sol#64-66) is never used and should be removed
","address,uint256) (contracts/mock/MockERC20NonStandard.sol",64-66
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/governance/interfaces/IMasterChef.sol#2)
",N/A,N/A
solc-version,Informational,"solc-0.6.12 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/governance/YaxisVotePower.sol#2)
	- 0.6.12 (contracts/governance/YaxisVoteProxy.sol#2)
	- 0.6.12 (contracts/governance/interfaces/IRewards.sol#2)
	- 0.6.12 (contracts/governance/interfaces/IUniswapV2Pair.sol#2)
	- 0.6.12 (contracts/governance/interfaces/IVoteProxy.sol#2)
	- 0.6.12 (contracts/governance/interfaces/IYaxisBar.sol#2)
	- 0.6.12 (contracts/legacy/IController.sol#3)
	- 0.6.12 (contracts/legacy/IConverter.sol#5)
	- 0.6.12 (contracts/legacy/IMetaVault.sol#5)
	- 0.6.12 (contracts/legacy/IVaultManager.sol#3)
	- 0.6.12 (contracts/legacy/MetaVault.sol#4)
	- 0.6.12 (contracts/legacy/MetaVaultNonConverter.sol#5)
	- 0.6.12 (contracts/legacy/mock/MockUniswapPair.sol#2)
	- 0.6.12 (contracts/legacy/mock/MockYaxisBar.sol#2)
	- 0.6.12 (contracts/mock/MockDErc20.sol#3)
	- 0.6.12 (contracts/mock/MockDRewards.sol#3)
	- 0.6.12 (contracts/mock/MockERC20.sol#3)
	- 0.6.12 (contracts/mock/MockIdleToken.sol#3)
	- 0.6.12 (contracts/mock/MockPickleJar.sol#3)
	- 0.6.12 (contracts/mock/MockPickleMasterChef.sol#3)
	- 0.6.12 (contracts/mock/MockUniswapRouter.sol#3)
	- 0.6.12 (contracts/mock/MockYearnV2.sol#3)
	- 0.6.12 (contracts/mock/MockzpaToken.sol#3)
	- 0.6.12 (contracts/token/MerkleDistributor.sol#3)
	- 0.6.12 (contracts/token/Rewards.sol#48)
	- 0.6.12 (contracts/token/Swap.sol#3)
	- 0.6.12 (contracts/token/YaxisToken.sol#2)
	- 0.6.12 (contracts/v3/Harvester.sol#3)
	- 0.6.12 (contracts/v3/Manager.sol#5)
	- 0.6.12 (contracts/v3/MinterWrapper.sol#4)
	- 0.6.12 (contracts/v3/Vault.sol#3)
	- 0.6.12 (contracts/v3/VaultHelper.sol#3)
	- 0.6.12 (contracts/v3/VaultToken.sol#2)
	- 0.6.12 (contracts/v3/controllers/Controller.sol#3)
	- 0.6.12 (contracts/v3/controllers/LegacyController.sol#3)
	- 0.6.12 (contracts/v3/converters/StablesConverter.sol#3)
	- 0.6.12 (contracts/v3/interfaces/IController.sol#3)
	- 0.6.12 (contracts/v3/interfaces/IConverter.sol#3)
	- 0.6.12 (contracts/v3/interfaces/ICurve3Pool.sol#5)
	- 0.6.12 (contracts/v3/interfaces/IHarvester.sol#3)
	- 0.6.12 (contracts/v3/interfaces/ILegacyVault.sol#3)
	- 0.6.12 (contracts/v3/interfaces/ILiquidityGaugeV2.sol#3)
	- 0.6.12 (contracts/v3/interfaces/IManager.sol#3)
	- 0.6.12 (contracts/v3/interfaces/IStableSwap3Pool.sol#5)
	- 0.6.12 (contracts/v3/interfaces/IStrategy.sol#3)
	- 0.6.12 (contracts/v3/interfaces/IVault.sol#3)
	- 0.6.12 (contracts/v3/strategies/BaseStrategy.sol#3)
	- 0.6.12 (contracts/v3/strategies/NativeStrategyCurve3Crv.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/GSN/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.2<0.8.0 is too complex.
It is used by:
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Balancer.sol#2)
	- ^0.6.2 (contracts/interfaces/Gauge.sol#2)
	- ^0.6.2 (contracts/interfaces/GenericVault.sol#3)
	- ^0.6.2 (contracts/interfaces/Idle.sol#2)
	- ^0.6.2 (contracts/interfaces/PickleJar.sol#3)
	- ^0.6.2 (contracts/interfaces/Stabilize.sol#2)
	- ^0.6.2 (contracts/interfaces/dYdXSoloMargin.sol#2)
	- ^0.6.2 (contracts/mock/MockCurveGauge.sol#3)
	- ^0.6.2 (contracts/mock/MockCurveMinter.sol#3)
	- ^0.6.2 (contracts/mock/MockFlamIncome.sol#3)
	- ^0.6.2 (contracts/mock/MockGenericVault.sol#3)
	- ^0.6.2 (contracts/mock/MockdYdXSoloMargin.sol#3)
	- ^0.6.2 (contracts/v3/interfaces/ExtendedIERC20.sol#3)
	- ^0.6.2 (contracts/v3/interfaces/ISwap.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.6.12 (contracts/mock/MockStabilizePool.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- ^0.6.0 (contracts/token/interfaces/IERC677.sol#2)
	- ^0.6.0 (contracts/token/interfaces/IMerkleDistributor.sol#2)
	- ^0.6.0 (contracts/token/interfaces/IsYAX.sol#2)
	- ^0.6.0 (contracts/token/mock/MockERC677.sol#2)
	- ^0.6.0 (contracts/v3/interfaces/ILegacyController.sol#3)
	- ^0.6.0 (contracts/vendor/LinkToken/ERC677Token.sol#2)
	- ^0.6.0 (contracts/vendor/LinkToken/token/ERC677.sol#2)
	- ^0.6.0 (contracts/vendor/LinkToken/token/ERC677Receiver.sol#2)
	- ^0.6.0 (contracts/vendor/LinkToken/token/LinkERC20.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Aave.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- ^0.6.0 (contracts/mock/MockV3Aggregatgor.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Chainlink.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Converter.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Curve.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/DForce.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/FlamIncome.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/MStable.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/OneSplitAudit.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/PickleMasterChef.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Uniswap.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/YearnV2.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/interfaces/Yfii.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/legacy/mock/MockYaxisChef.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/mock/MockERC20NonStandard.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/v3/interfaces/IStablesOracle.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.12 (contracts/v3/test/AlwaysAccess.sol#3)
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",163-169
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",139-145
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",53-59
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",114-121
missing-inheritance,Informational,"MockYaxisBar (contracts/legacy/mock/MockYaxisBar.sol#9-67) should inherit from IsYAX (contracts/token/interfaces/IsYAX.sol#4-6)
",contracts/legacy/mock/MockYaxisBar.sol,9-67
missing-inheritance,Informational,"MockYaxisBar (contracts/legacy/mock/MockYaxisBar.sol#9-67) should inherit from IYaxisBar (contracts/governance/interfaces/IYaxisBar.sol#6-8)
",contracts/legacy/mock/MockYaxisBar.sol,9-67
missing-inheritance,Informational,"YaxisVoteProxy (contracts/governance/YaxisVoteProxy.sol#8-57) should inherit from ExtendedIERC20 (contracts/v3/interfaces/ExtendedIERC20.sol#5-9)
",contracts/governance/YaxisVoteProxy.sol,8-57
missing-inheritance,Informational,"Rewards (contracts/token/Rewards.sol#122-238) should inherit from IRewards (contracts/governance/interfaces/IRewards.sol#4-8)
",contracts/token/Rewards.sol,122-238
missing-inheritance,Informational,"MockDRewards (contracts/mock/MockDRewards.sol#9-69) should inherit from IsYAX (contracts/token/interfaces/IsYAX.sol#4-6)
",contracts/mock/MockDRewards.sol,9-69
missing-inheritance,Informational,"YaxisVoteProxy (contracts/governance/YaxisVoteProxy.sol#8-57) should inherit from IVoteProxy (contracts/governance/interfaces/IVoteProxy.sol#4-8)
",contracts/governance/YaxisVoteProxy.sol,8-57
missing-inheritance,Informational,"Rewards (contracts/token/Rewards.sol#122-238) should inherit from IsYAX (contracts/token/interfaces/IsYAX.sol#4-6)
",contracts/token/Rewards.sol,122-238
missing-inheritance,Informational,"MockPickleJar (contracts/mock/MockPickleJar.sol#10-49) should inherit from PickleJar (contracts/interfaces/PickleJar.sol#5-14)
",contracts/mock/MockPickleJar.sol,10-49
missing-inheritance,Informational,"MockDRewards (contracts/mock/MockDRewards.sol#9-69) should inherit from IRewards (contracts/governance/interfaces/IRewards.sol#4-8)
",contracts/mock/MockDRewards.sol,9-69
naming-convention,Informational,"Parameter Vault.depositMultiple(address[],uint256[])._tokens (contracts/v3/Vault.sol#212) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve3Pool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/v3/interfaces/ICurve3Pool.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract IIdleTokenV3_1 (contracts/interfaces/Idle.sol#4-9) is not in CapWords
",contracts/interfaces/Idle.sol,4-9
naming-convention,Informational,"Modifier MockERC20._onlyOwner_() (contracts/mock/MockERC20.sol#17-20) is not in mixedCase
",) (contracts/mock/MockERC20.sol,17-20
naming-convention,Informational,"Parameter MetaVault.setController(address)._controller (contracts/legacy/MetaVault.sol#156) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.setSlippage(uint256)._slippage (contracts/v3/Harvester.sol#155) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.recoverUnsupportedToken(address,address)._token (contracts/v3/controllers/LegacyController.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.contractFallback(address,uint256,bytes)._value (contracts/vendor/LinkToken/ERC677Token.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.recoverUnsupported(IERC20,uint256,address)._amount (contracts/v3/converters/StablesConverter.sol#91) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve3Pool.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/v3/interfaces/ICurve3Pool.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.swap(address,address,uint256)._token0 (contracts/v3/Vault.sol#118) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/v3/interfaces/ICurve3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.transferAndCall(address,uint256,bytes)._data (contracts/vendor/LinkToken/ERC677Token.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MinterWrapper.setMinter(address)._minter (contracts/v3/MinterWrapper.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedVault(address,bool)._allowed (contracts/v3/Manager.sol#213) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setVaultManager(IVaultManager)._vaultManager (contracts/legacy/MetaVault.sol#177) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.withdraw(uint256)._amount (contracts/v3/strategies/BaseStrategy.sol#170) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYearnV2.withdraw(uint256)._amount (contracts/mock/MockYearnV2.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.addStrategy(address,address,uint256,uint256)._timeout (contracts/v3/controllers/Controller.sol#95) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setGovernance(address)._governance (contracts/legacy/MetaVault.sol#147) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedStrategy(address,bool)._strategy (contracts/v3/Manager.sol#177) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setInsurancePool(address)._insurancePool (contracts/v3/Manager.sol#275) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(address,address,uint256)._token (contracts/v3/controllers/Controller.sol#407) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.addToken(address,address)._vault (contracts/v3/Manager.sol#422) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MinterWrapper.mint(address,uint256)._amount (contracts/v3/MinterWrapper.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleJar.withdraw(uint256)._shares (contracts/mock/MockPickleJar.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YaxisVotePower.balanceOf(address)._voter (contracts/governance/YaxisVotePower.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IStableSwap3Pool.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/v3/interfaces/IStableSwap3Pool.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurveGauge.deposit(uint256)._amount (contracts/mock/MockCurveGauge.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.earn(address,address)._strategy (contracts/v3/Vault.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.available(address)._token (contracts/v3/Vault.sol#290) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.recoverToken(IERC20,uint256,address)._to (contracts/v3/Manager.sol#449) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.deposit(uint256,address,uint256,bool)._amount (contracts/legacy/MetaVault.sol#390) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.setHarvester(address,bool)._harvester (contracts/v3/Harvester.sol#144) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurveGauge.claimable_tokens(address)._account (contracts/mock/MockCurveGauge.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.depositAll(uint256[4],uint256,bool)._min_mint_amount (contracts/legacy/MetaVault.sol#422) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.withdraw(uint256,uint256)._pid (contracts/mock/MockStabilizePool.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.addStrategy(address,address,uint256)._timeout (contracts/v3/Harvester.sol#93) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.setGauge(address)._gauge (contracts/v3/Vault.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.exit(uint256,uint256)._pid (contracts/mock/MockStabilizePool.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.removeToken(address,address)._token (contracts/v3/Manager.sol#465) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.deposit(address,uint256)._token (contracts/v3/Vault.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.getTokens(address)._vault (contracts/v3/Manager.sol#534) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.earn(address,uint256)._amount (contracts/v3/controllers/LegacyController.sol#186) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdrawAll(address)._output (contracts/v3/Vault.sol#271) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedController(address,bool)._controller (contracts/v3/Manager.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.getBestStrategyWithdraw(address,uint256)._token (contracts/v3/controllers/Controller.sol#580) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.recoverToken(IERC20,uint256,address)._amount (contracts/v3/Manager.sol#448) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.stakeShares(uint256)._shares (contracts/legacy/MetaVault.sol#462) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.approveForSpender(IERC20,address,uint256)._spender (contracts/v3/strategies/BaseStrategy.sol#82) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setMaxStrategies(uint256)._maxStrategies (contracts/v3/controllers/Controller.sol#311) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.calc_token_amount(uint256[3],bool) (contracts/v3/interfaces/IStableSwap3Pool.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IConverter.calc_token_amount_withdraw(uint256,address) (contracts/legacy/IConverter.sol#26-29) is not in mixedCase
","uint256,address) (contracts/legacy/IConverter.sol",26-29
naming-convention,Informational,"Function MinterWrapper.available_supply() (contracts/v3/MinterWrapper.sol#94-100) is not in mixedCase
",) (contracts/v3/MinterWrapper.sol,94-100
naming-convention,Informational,"Parameter Controller.getBestStrategyWithdraw(address,uint256)._amount (contracts/v3/controllers/Controller.sol#581) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockERC677.mint(address,uint256)._amount (contracts/token/mock/MockERC677.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.addStrategy(address,address,uint256)._strategy (contracts/v3/Harvester.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.convert(address,address,uint256,uint256)._output (contracts/v3/converters/StablesConverter.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.withdrawVault(address,address,uint256)._toToken (contracts/v3/VaultHelper.sol#87) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.transferAndCall(address,uint256,bytes)._to (contracts/vendor/LinkToken/ERC677Token.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvest(IController,address,uint256,uint256)._strategy (contracts/v3/Harvester.sol#187) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MockCurveGauge.claimable_tokens(address) (contracts/mock/MockCurveGauge.sol#32-34) is not in mixedCase
",address) (contracts/mock/MockCurveGauge.sol,32-34
naming-convention,Informational,"Parameter IStableSwap3Pool.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/v3/interfaces/IStableSwap3Pool.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Swap.SYAX (contracts/token/Swap.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisBar.leave(uint256)._amount (contracts/legacy/mock/MockYaxisBar.sol#43) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setConverter(address,address)._converter (contracts/v3/controllers/Controller.sol#282) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setConverter(address,address)._vault (contracts/v3/controllers/Controller.sol#281) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.earnExtra(address)._token (contracts/legacy/MetaVault.sol#664) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.withdraw(uint256,address)._output (contracts/legacy/MetaVault.sol#591) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.withdrawFee(address,uint256)._token (contracts/v3/controllers/LegacyController.sol#132) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IConverter.calc_token_amount(uint256[3],bool) (contracts/legacy/IConverter.sol#22-25) is not in mixedCase
","uint256[3],bool) (contracts/legacy/IConverter.sol",22-25
naming-convention,Informational,"Variable Swap.YAX (contracts/token/Swap.sol#22) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(address,uint256)._amount (contracts/v3/controllers/Controller.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.remove_liquidity(uint256,uint256[3]) (contracts/v3/interfaces/ICurve3Pool.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.updateBalance(address,address)._vault (contracts/v3/controllers/Controller.sol#623) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.setMin(uint256)._min (contracts/v3/Vault.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setStrategist(address)._strategist (contracts/v3/Manager.sol#335) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.get_dy(int128,int128,uint256) (contracts/v3/interfaces/ICurve3Pool.sol#10) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.removeStrategy(address,address,uint256)._strategy (contracts/v3/Harvester.sol#112) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YaxisVoteProxy.setVoteProxy(IVoteProxy)._voteProxy (contracts/governance/YaxisVoteProxy.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.depositMultipleVault(address,address[],uint256[])._amounts (contracts/v3/VaultHelper.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.calc_withdraw_one_coin(uint256,int128) (contracts/v3/interfaces/IStableSwap3Pool.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setEarnLowerlimit(uint256)._earnLowerlimit (contracts/legacy/MetaVault.sol#188) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.swap(address,address,uint256)._expectedAmount (contracts/v3/Vault.sol#120) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setTreasuryWallet(address)._treasuryWallet (contracts/legacy/MetaVault.sol#291) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(address,uint256)._amount (contracts/v3/controllers/Controller.sol#443) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.poolBalance(uint256,address)._user (contracts/mock/MockStabilizePool.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.recoverToken(IERC20,uint256,address)._token (contracts/v3/Manager.sol#447) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/v3/interfaces/ICurve3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockFlamIncomeVault.deposit(uint256)._amount (contracts/mock/MockFlamIncome.sol#43) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.swap(address,address,uint256)._token1 (contracts/v3/Vault.sol#119) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setTreasuryFee(uint256)._treasuryFee (contracts/v3/Manager.sol#369) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdraw(uint256,address)._shares (contracts/v3/Vault.sol#232) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurveGauge.withdraw(uint256)._amount (contracts/mock/MockCurveGauge.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.approveForSpender(IERC20,address,uint256)._amount (contracts/v3/strategies/BaseStrategy.sol#83) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.reorderStrategies(address,address,address)._strategy1 (contracts/v3/controllers/Controller.sol#211) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVaultNonConverter.calc_token_amount(uint256[3],bool) (contracts/legacy/MetaVaultNonConverter.sol#98-103) is not in mixedCase
","uint256[3],bool) (contracts/legacy/MetaVaultNonConverter.sol",98-103
naming-convention,Informational,"Function ICurve3Pool.add_liquidity(uint256[3],uint256) (contracts/v3/interfaces/ICurve3Pool.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.withdrawFee(address,uint256)._amount (contracts/v3/controllers/LegacyController.sol#133) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvest(IController,address,uint256,uint256)._estimatedWETH (contracts/v3/Harvester.sol#188) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IMetaVault.calc_token_amount_withdraw(uint256,address) (contracts/legacy/IMetaVault.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setController(address,address)._vault (contracts/v3/Manager.sol#499) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.strategyAddresses(address)._vault (contracts/v3/Harvester.sol#250) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.depositAll(uint256[4],uint256,bool)._isStake (contracts/legacy/MetaVault.sol#422) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.governanceRecoverUnsupported(IERC20,uint256,address)._to (contracts/legacy/MetaVaultNonConverter.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.poolBalance(uint256,address)._pid (contracts/mock/MockStabilizePool.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.expected(address,address,uint256)._inputAmount (contracts/v3/converters/StablesConverter.sol#176) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/v3/interfaces/IStableSwap3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setController(address,address)._controller (contracts/v3/Manager.sol#500) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockDErc20.getTokenBalance(address)._account (contracts/mock/MockDErc20.sol#24) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.deposit(address,uint256)._amount (contracts/v3/Vault.sol#172) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockDErc20.mint(address,uint256)._amount (contracts/mock/MockDErc20.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.getCap(address,address)._vault (contracts/v3/controllers/Controller.sol#513) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.governanceRecoverUnsupported(IERC20,uint256,address)._amount (contracts/legacy/MetaVaultNonConverter.sol#124) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IRewardDistributionRecipient.setRewardDistribution(address)._rewardDistribution (contracts/token/Rewards.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.reorderStrategies(address,address,address)._strategy2 (contracts/v3/controllers/Controller.sol#212) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setEpochEndBlock(uint8,uint256)._index (contracts/legacy/MetaVault.sol#234) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvestNextStrategy(address,uint256,uint256)._vault (contracts/v3/Harvester.sol#204) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.depositMultipleVault(address,address[],uint256[])._vault (contracts/v3/VaultHelper.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisBar.enter(uint256)._amount (contracts/legacy/mock/MockYaxisBar.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.add_liquidity(uint256[3],uint256) (contracts/v3/interfaces/IStableSwap3Pool.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvestNextStrategy(address,uint256,uint256)._estimatedWETH (contracts/v3/Harvester.sol#205) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.legacyEarn(address,uint256)._token (contracts/v3/Harvester.sol#232) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVaultNonConverter.convert_rate(address,address,uint256) (contracts/legacy/MetaVaultNonConverter.sol#78-84) is not in mixedCase
","address,address,uint256) (contracts/legacy/MetaVaultNonConverter.sol",78-84
naming-convention,Informational,"Parameter Manager.setWithdrawalProtectionFee(uint256)._withdrawalProtectionFee (contracts/v3/Manager.sol#385) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable MockYaxisBar.YAX (contracts/legacy/mock/MockYaxisBar.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setInsuranceFee(uint256)._insuranceFee (contracts/v3/Manager.sol#260) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.approveForSpender(IERC20,address,uint256)._token (contracts/legacy/MetaVaultNonConverter.sol#50) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(address,uint256)._token (contracts/v3/controllers/Controller.sol#150) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setHarvester(address)._harvester (contracts/v3/Manager.sol#244) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.deposit(uint256,address,uint256,bool)._input (contracts/legacy/MetaVault.sol#390) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleMasterChef.emergencyWithdraw(uint256)._pid (contracts/mock/MockPickleMasterChef.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YaxisVoteProxy.setGovernance(address)._governance (contracts/governance/YaxisVoteProxy.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.depositVault(address,address,uint256)._vault (contracts/v3/VaultHelper.sol#29) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ILiquidityGaugeV2.set_approve_deposit(address,bool) (contracts/v3/interfaces/ILiquidityGaugeV2.sol#6) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.get_dy(int128,int128,uint256) (contracts/v3/interfaces/IStableSwap3Pool.sol#10) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.transferAndCall(address,uint256,bytes)._value (contracts/vendor/LinkToken/ERC677Token.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setCap(address,address,uint256,address)._strategy (contracts/v3/controllers/Controller.sol#244) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdraw(uint256,address)._output (contracts/v3/Vault.sol#233) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.calc_token_amount_withdraw(uint256,address)._shares (contracts/legacy/MetaVault.sol#361) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.legacyDeposit(address,uint256)._toToken (contracts/v3/controllers/LegacyController.sol#200) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedVault(address,bool)._vault (contracts/v3/Manager.sol#212) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IStableSwap3Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/v3/interfaces/IStableSwap3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedController(address,bool)._allowed (contracts/v3/Manager.sol#142) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setEpochEndBlock(uint8,uint256)._epochEndBlock (contracts/legacy/MetaVault.sol#234) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.depositVault(address,address,uint256)._amount (contracts/v3/VaultHelper.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockUniswapPair.addLiquidity(uint256,uint256,uint256)._amount0 (contracts/legacy/mock/MockUniswapPair.sol#26) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.exit(uint256,uint256)._amount (contracts/mock/MockStabilizePool.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.removeStrategy(address,address,uint256)._vault (contracts/v3/controllers/Controller.sol#166) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.legacyEarn(address,uint256)._expected (contracts/v3/Harvester.sol#233) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvest(IController,address,uint256,uint256)._estimatedYAXIS (contracts/v3/Harvester.sol#189) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setInsurancePoolFee(uint256)._insurancePoolFee (contracts/v3/Manager.sol#290) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockGenericVault.deposit(uint256)._amount (contracts/mock/MockGenericVault.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.deposit(uint256,uint256)._pid (contracts/mock/MockStabilizePool.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YaxisVoteProxy.balanceOf(address)._voter (contracts/governance/YaxisVoteProxy.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.setHarvester(address,bool)._status (contracts/v3/Harvester.sol#145) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockDErc20.redeem(address,uint256)._account (contracts/mock/MockDErc20.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Gauge.claimable_tokens(address) (contracts/interfaces/Gauge.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.getMultiplier(uint256,uint256)._to (contracts/legacy/MetaVault.sol#261) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setEpochRewardMultipler(uint8,uint256)._index (contracts/legacy/MetaVault.sol#249) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.calc_token_amount(uint256[3],bool) (contracts/v3/interfaces/ICurve3Pool.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.withdraw(address)._asset (contracts/v3/strategies/BaseStrategy.sol#152) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockzpaToken.deposit(uint256)._amount (contracts/mock/MockzpaToken.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleMasterChef.deposit(uint256,uint256)._amount (contracts/mock/MockPickleMasterChef.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.canHarvest(address)._vault (contracts/v3/Harvester.sol#268) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.expected(address,address,uint256)._input (contracts/v3/converters/StablesConverter.sol#174) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.depositAll(uint256[4],uint256,bool)._amounts (contracts/legacy/MetaVault.sol#422) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawAll(address,address)._strategy (contracts/v3/controllers/Controller.sol#338) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.earn(address,address)._token (contracts/v3/Vault.sol#142) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setStakingPool(address)._stakingPool (contracts/v3/Manager.sol#305) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setTotalDepositCap(uint256)._totalDepositCap (contracts/legacy/MetaVault.sol#199) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.removeStrategy(address,address,uint256)._timeout (contracts/v3/Harvester.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.recoverUnsupported(IERC20,uint256,address)._token (contracts/v3/converters/StablesConverter.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.getMultiplier(uint256,uint256)._from (contracts/legacy/MetaVault.sol#261) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.harvest(uint256,uint256)._estimatedYAXIS (contracts/v3/strategies/BaseStrategy.sol#127) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleJar.deposit(uint256)._amount (contracts/mock/MockPickleJar.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.earn(address,IVault,address)._token (contracts/v3/Harvester.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.rewardEarned(uint256,address)._user (contracts/mock/MockStabilizePool.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.earn(address,IVault,address)._vault (contracts/v3/Harvester.sol#170) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseStrategyGetStuck(address,address)._strategy (contracts/v3/controllers/Controller.sol#131) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.setInvestEnabled(bool)._investEnabled (contracts/v3/controllers/LegacyController.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setStakingPoolShareFee(uint256)._stakingPoolShareFee (contracts/v3/Manager.sol#320) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.updateBalance(address,address)._strategy (contracts/v3/controllers/Controller.sol#624) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVault.calc_token_amount_deposit(uint256[3]) (contracts/legacy/MetaVault.sol#352-354) is not in mixedCase
",uint256[3]) (contracts/legacy/MetaVault.sol,352-354
naming-convention,Informational,"Parameter LegacyController.withdraw(address,uint256)._amount (contracts/v3/controllers/LegacyController.sol#149) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.withdrawFee(uint256)._amount (contracts/legacy/MetaVault.sol#330) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MinterWrapper.future_epoch_time_write() (contracts/v3/MinterWrapper.sol#82-89) is not in mixedCase
",) (contracts/v3/MinterWrapper.sol,82-89
naming-convention,Informational,"Parameter MetaVault.safeYaxTransfer(address,uint256)._to (contracts/legacy/MetaVault.sol#655) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.contractFallback(address,uint256,bytes)._data (contracts/vendor/LinkToken/ERC677Token.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.remove_liquidity(uint256,uint256[3]) (contracts/v3/interfaces/IStableSwap3Pool.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.addStrategy(address,address,uint256,uint256)._strategy (contracts/v3/controllers/Controller.sol#93) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.deposit(uint256,address,uint256,bool)._isStake (contracts/legacy/MetaVault.sol#390) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IMetaVault.convert_rate(address,uint256) (contracts/legacy/IMetaVault.sol#17) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.harvest(uint256,uint256)._estimatedWETH (contracts/v3/strategies/BaseStrategy.sol#126) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockERC677.faucet(uint256)._amount (contracts/token/mock/MockERC677.sol#27) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IStableSwap3Pool.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/v3/interfaces/IStableSwap3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.withdraw(uint256,address)._shares (contracts/legacy/MetaVault.sol#591) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedStrategy(address,bool)._allowed (contracts/v3/Manager.sol#178) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYearnV2.deposit(uint256)._amount (contracts/mock/MockYearnV2.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedToken(address,bool)._allowed (contracts/v3/Manager.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockzpaToken.redeem(uint256)._amount (contracts/mock/MockzpaToken.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.withdraw(uint256,uint256)._amount (contracts/mock/MockStabilizePool.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedToken(address,bool)._token (contracts/v3/Manager.sol#195) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.approveForSpender(IERC20,address,uint256)._amount (contracts/legacy/MetaVaultNonConverter.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(address,uint256)._token (contracts/v3/controllers/Controller.sol#442) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve3Pool.exchange(int128,int128,uint256,uint256).min_dy (contracts/v3/interfaces/ICurve3Pool.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.skim(address)._strategy (contracts/v3/controllers/Controller.sol#321) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.harvestStrategy(address,uint256,uint256)._estimatedWETH (contracts/v3/controllers/Controller.sol#377) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.legacyDeposit(address,uint256)._expected (contracts/v3/controllers/LegacyController.sol#201) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setCap(address,address,uint256,address)._convert (contracts/v3/controllers/Controller.sol#246) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.harvestStrategy(address,uint256,uint256)._estimatedYAXIS (contracts/v3/controllers/Controller.sol#378) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseStrategyGetStuck(address,address)._token (contracts/v3/controllers/Controller.sol#132) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.convert(address,address,uint256,uint256)._estimatedOutput (contracts/v3/converters/StablesConverter.sol#115) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVault.calc_token_amount_withdraw(uint256,address) (contracts/legacy/MetaVault.sol#361-371) is not in mixedCase
","uint256,address) (contracts/legacy/MetaVault.sol",361-371
naming-convention,Informational,"Parameter MetaVault.withdrawAll(address)._output (contracts/legacy/MetaVault.sol#551) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.rewardEarned(uint256,address)._pid (contracts/mock/MockStabilizePool.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setCap(address,address,uint256,address)._cap (contracts/v3/controllers/Controller.sol#245) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.setConverter(address)._converter (contracts/v3/controllers/LegacyController.sol#72) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.removeStrategy(address,address,uint256)._vault (contracts/v3/Harvester.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.withdrawVault(address,address,uint256)._amount (contracts/v3/VaultHelper.sol#88) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.approveForSpender(IERC20,address,uint256)._amount (contracts/v3/converters/StablesConverter.sol#73) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IStableSwap3Pool.get_virtual_price() (contracts/v3/interfaces/IStableSwap3Pool.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.calc_token_amount_withdraw(uint256,address)._output (contracts/legacy/MetaVault.sol#361) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setConverter(IConverter)._converter (contracts/legacy/MetaVault.sol#167) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockGenericVault.withdraw(uint256)._shares (contracts/mock/MockGenericVault.sol#63) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.calc_withdraw_one_coin(uint256,int128) (contracts/v3/interfaces/ICurve3Pool.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.unstake(uint256)._amount (contracts/legacy/MetaVault.sol#572) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setEpochRewardMultipler(uint8,uint256)._epochRewardMultipler (contracts/legacy/MetaVault.sol#249) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.safeYaxTransfer(address,uint256)._amount (contracts/legacy/MetaVault.sol#655) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MinterWrapper.mint(address,uint256)._account (contracts/v3/MinterWrapper.sol#67) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve3Pool.get_virtual_price() (contracts/v3/interfaces/ICurve3Pool.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.pendingYax(address)._account (contracts/legacy/MetaVault.sol#509) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockUniswapPair.addLiquidity(uint256,uint256,uint256)._amount1 (contracts/legacy/mock/MockUniswapPair.sol#27) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.removeStrategy(address,address,uint256)._timeout (contracts/v3/controllers/Controller.sol#168) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setGovernance(address)._governance (contracts/v3/Manager.sol#229) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.setTotalDepositCap(uint256)._totalDepositCap (contracts/v3/Vault.sol#102) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVaultNonConverter.calc_token_amount_withdraw(uint256,address) (contracts/legacy/MetaVaultNonConverter.sol#108-113) is not in mixedCase
","uint256,address) (contracts/legacy/MetaVaultNonConverter.sol",108-113
naming-convention,Informational,"Parameter MetaVault.setAcceptContractDepositor(bool)._acceptContractDepositor (contracts/legacy/MetaVault.sol#210) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.addToken(address,address)._token (contracts/v3/Manager.sol#423) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.convert(address,address,uint256,uint256)._inputAmount (contracts/v3/converters/StablesConverter.sol#114) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setCap(address,address,uint256,address)._vault (contracts/v3/controllers/Controller.sol#243) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve3Pool.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/v3/interfaces/ICurve3Pool.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IMetaVault.deposit(uint256,address,uint256,bool)._min_mint_amount (contracts/legacy/IMetaVault.sol#18) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.depositMultiple(address[],uint256[])._amounts (contracts/v3/Vault.sol#213) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockIdleToken.mintIdleToken(uint256,bool,address)._amount (contracts/mock/MockIdleToken.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.contractFallback(address,uint256,bytes)._to (contracts/vendor/LinkToken/ERC677Token.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.recoverUnsupportedToken(address,address)._receiver (contracts/v3/controllers/LegacyController.sol#101) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.approveForSpender(IERC20,address,uint256)._spender (contracts/v3/converters/StablesConverter.sol#72) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setInvestEnabled(bool)._investEnabled (contracts/v3/controllers/Controller.sol#297) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(address,address,uint256)._amount (contracts/v3/controllers/Controller.sol#408) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvestNextStrategy(address,uint256,uint256)._estimatedYAXIS (contracts/v3/Harvester.sol#206) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.approveForSpender(IERC20,address,uint256)._spender (contracts/legacy/MetaVaultNonConverter.sol#51) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.addStrategy(address,address,uint256,uint256)._vault (contracts/v3/controllers/Controller.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.deposit(uint256,address,uint256,bool)._min_mint_amount (contracts/legacy/MetaVault.sol#390) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockDErc20.mint(address,uint256)._account (contracts/mock/MockDErc20.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.getEstimates(address)._strategy (contracts/v3/Harvester.sol#284) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.balanceOf(address)._token (contracts/v3/controllers/LegacyController.sol#115) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedConverter(address,bool)._allowed (contracts/v3/Manager.sol#160) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.depositMultipleVault(address,address[],uint256[])._tokens (contracts/v3/VaultHelper.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.convert_rate(address,uint256)._amount (contracts/legacy/MetaVault.sol#378) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurveGauge.balanceOf(address)._account (contracts/mock/MockCurveGauge.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVaultNonConverter.governanceRecoverUnsupported(IERC20,uint256,address)._token (contracts/legacy/MetaVaultNonConverter.sol#123) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(address,address,uint256)._strategy (contracts/v3/controllers/Controller.sol#406) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IMetaVault.calc_token_amount_deposit(uint256[3]) (contracts/legacy/IMetaVault.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.earn(address,IVault,address)._strategy (contracts/v3/Harvester.sol#169) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MinterWrapper.setRate(uint256)._rate (contracts/v3/MinterWrapper.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleMasterChef.deposit(uint256,uint256)._pid (contracts/mock/MockPickleMasterChef.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockUniswapPair.addLiquidity(uint256,uint256,uint256)._amountOut (contracts/legacy/mock/MockUniswapPair.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.approveForSpender(IERC20,address,uint256)._token (contracts/v3/converters/StablesConverter.sol#71) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.convert(address,address,uint256,uint256)._input (contracts/v3/converters/StablesConverter.sol#112) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Swap.YAXIS (contracts/token/Swap.sol#21) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LegacyController.setVault(address)._vault (contracts/v3/controllers/LegacyController.sol#54) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.harvestStrategy(address,uint256,uint256)._strategy (contracts/v3/controllers/Controller.sol#376) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.deposit(uint256,uint256)._amount (contracts/mock/MockStabilizePool.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.convert_rate(address,uint256)._input (contracts/legacy/MetaVault.sol#378) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setYaxPerBlock(uint256)._yaxPerBlock (contracts/legacy/MetaVault.sol#220) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.approveForSpender(IERC20,address,uint256)._token (contracts/v3/strategies/BaseStrategy.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StablesConverter.recoverUnsupported(IERC20,uint256,address)._to (contracts/v3/converters/StablesConverter.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStabilizePool.getReward(uint256)._pid (contracts/mock/MockStabilizePool.sol#51) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.addStrategy(address,address,uint256,uint256)._cap (contracts/v3/controllers/Controller.sol#94) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVaultNonConverter.convert_stables(uint256[3]) (contracts/legacy/MetaVaultNonConverter.sol#89-93) is not in mixedCase
",uint256[3]) (contracts/legacy/MetaVaultNonConverter.sol,89-93
naming-convention,Informational,"Parameter Controller.reorderStrategies(address,address,address)._vault (contracts/v3/controllers/Controller.sol#210) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YaxisVoteProxy.governanceRecoverUnsupported(IERC20,uint256,address)._token (contracts/governance/YaxisVoteProxy.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MetaVault.convert_rate(address,uint256) (contracts/legacy/MetaVault.sol#378-380) is not in mixedCase
","address,uint256) (contracts/legacy/MetaVault.sol",378-380
naming-convention,Informational,"Parameter VaultHelper.depositVault(address,address,uint256)._token (contracts/v3/VaultHelper.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter IStableSwap3Pool.exchange(int128,int128,uint256,uint256).min_dy (contracts/v3/interfaces/IStableSwap3Pool.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockFlamIncomeVault.withdraw(uint256)._shares (contracts/mock/MockFlamIncome.sol#62) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawAll(address,address)._convert (contracts/v3/controllers/Controller.sol#339) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter VaultHelper.withdrawVault(address,address,uint256)._vault (contracts/v3/VaultHelper.sol#86) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.setRouter(address)._router (contracts/v3/strategies/BaseStrategy.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IConverter.convert_rate(address,address,uint256) (contracts/legacy/IConverter.sol#14-18) is not in mixedCase
","address,address,uint256) (contracts/legacy/IConverter.sol",14-18
naming-convention,Informational,"Parameter Controller.strategies(address)._vault (contracts/v3/controllers/Controller.sol#544) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant MockzpaToken.divisionFactor (contracts/mock/MockzpaToken.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Parameter Controller.converter(address)._vault (contracts/v3/controllers/Controller.sol#497) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MetaVault.setMin(uint256)._min (contracts/legacy/MetaVault.sol#138) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleMasterChef.withdraw(uint256,uint256)._pid (contracts/mock/MockPickleMasterChef.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockDErc20.redeem(address,uint256)._amount (contracts/mock/MockDErc20.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setTreasury(address)._treasury (contracts/v3/Manager.sol#353) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.harvest(IController,address,uint256,uint256)._controller (contracts/v3/Harvester.sol#186) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.setAllowedConverter(address,bool)._converter (contracts/v3/Manager.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC677Token.isContract(address)._addr (contracts/vendor/LinkToken/ERC677Token.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockIdleToken.redeemIdleToken(uint256)._amount (contracts/mock/MockIdleToken.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdrawFee(uint256)._amount (contracts/v3/Vault.sol#360) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockERC677.mint(address,uint256)._to (contracts/token/mock/MockERC677.sol#18) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Harvester.addStrategy(address,address,uint256)._vault (contracts/v3/Harvester.sol#91) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IConverter.convert_stables(uint256[3]) (contracts/legacy/IConverter.sol#19-21) is not in mixedCase
",uint256[3]) (contracts/legacy/IConverter.sol,19-21
naming-convention,Informational,"Parameter StablesConverter.expected(address,address,uint256)._output (contracts/v3/converters/StablesConverter.sol#175) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockPickleMasterChef.withdraw(uint256,uint256)._amount (contracts/mock/MockPickleMasterChef.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Manager.removeToken(address,address)._vault (contracts/v3/Manager.sol#464) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.getCap(address,address)._strategy (contracts/v3/controllers/Controller.sol#514) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.removeStrategy(address,address,uint256)._strategy (contracts/v3/controllers/Controller.sol#167) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._timestamp (contracts/mock/MockV3Aggregatgor.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateAnswer(int256)._answer (contracts/mock/MockV3Aggregatgor.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._roundId (contracts/mock/MockV3Aggregatgor.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._startedAt (contracts/mock/MockV3Aggregatgor.sol#49) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.getRoundData(uint80)._roundId (contracts/mock/MockV3Aggregatgor.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._answer (contracts/mock/MockV3Aggregatgor.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.remove_liquidity_imbalance(uint256[4],uint256).max_burn_amount (contracts/interfaces/Curve.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.exchange(int128,int128,uint256,uint256)._min_to_amount (contracts/interfaces/Curve.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.exchange(int128,int128,uint256,uint256)._from_amount (contracts/interfaces/Curve.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.remove_liquidity_imbalance(uint256[4],uint256) (contracts/interfaces/Curve.sol#10-13) is not in mixedCase
","uint256[4],uint256) (contracts/interfaces/Curve.sol",10-13
naming-convention,Informational,"Function ICurveFi.remove_liquidity(uint256,uint256[4]) (contracts/interfaces/Curve.sol#14-17) is not in mixedCase
","uint256,uint256[4]) (contracts/interfaces/Curve.sol",14-17
naming-convention,Informational,"Function ICurveFi.add_liquidity(uint256[4],uint256) (contracts/interfaces/Curve.sol#6-9) is not in mixedCase
","uint256[4],uint256) (contracts/interfaces/Curve.sol",6-9
naming-convention,Informational,"Parameter ICurveFi.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/interfaces/Curve.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.get_virtual_price() (contracts/interfaces/Curve.sol#5) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract dRewards (contracts/interfaces/DForce.sol#4-10) is not in CapWords
",contracts/interfaces/DForce.sol,4-10
naming-convention,Informational,"Contract dERC20 (contracts/interfaces/DForce.sol#12-17) is not in CapWords
",contracts/interfaces/DForce.sol,12-17
naming-convention,Informational,"Contract mSavings (contracts/interfaces/MStable.sol#9-14) is not in CapWords
",contracts/interfaces/MStable.sol,9-14
naming-convention,Informational,"Parameter MockYaxisChef.addBalance(address,uint256,uint256)._user (contracts/legacy/mock/MockYaxisChef.sol#9) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisChef.userInfo(uint256,address)._user (contracts/legacy/mock/MockYaxisChef.sol#21) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisChef.addBalance(address,uint256,uint256)._amount (contracts/legacy/mock/MockYaxisChef.sol#10) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisChef.pendingYaxis(uint256,address)._user (contracts/legacy/mock/MockYaxisChef.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockYaxisChef.addBalance(address,uint256,uint256)._pendingAmount (contracts/legacy/mock/MockYaxisChef.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Modifier MockERC20NonStandard._onlyOwner_() (contracts/mock/MockERC20NonStandard.sol#17-20) is not in mixedCase
",) (contracts/mock/MockERC20NonStandard.sol,17-20
naming-convention,Informational,"Parameter AlwaysAccess.setAuthorized(address,bool)._address (contracts/v3/test/AlwaysAccess.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AlwaysAccess.setAuthorized(address,bool)._authorized (contracts/v3/test/AlwaysAccess.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AlwaysAccess.allowedControllers(address)._address (contracts/v3/test/AlwaysAccess.sol#22) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AlwaysAccess.allowedStrategies(address)._address (contracts/v3/test/AlwaysAccess.sol#26) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AlwaysAccess.allowedVaults(address)._address (contracts/v3/test/AlwaysAccess.sol#18) is not in mixedCase
",N/A,N/A
redundant-statements,Informational,"Redundant expression ""this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)"" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
",node_modules/@openzeppelin/contracts/utils/Context.sol,15-24
too-many-digits,Informational,"MockPickleJar.getRatio() (contracts/mock/MockPickleJar.sol#46-48) uses literals with too many digits:
	- 1010000000000000000 (contracts/mock/MockPickleJar.sol#47)
",) (contracts/mock/MockPickleJar.sol,46-48
too-many-digits,Informational,"MetaVault.slitherConstructorVariables() (contracts/legacy/MetaVault.sol#25-673) uses literals with too many digits:
	- totalDepositCap = 10000000000000000000000000 (contracts/legacy/MetaVault.sol#39)
",) (contracts/legacy/MetaVault.sol,25-673
too-many-digits,Informational,"MockzpaToken.slitherConstructorConstantVariables() (contracts/mock/MockzpaToken.sol#11-75) uses literals with too many digits:
	- divisionFactor = 100000 (contracts/mock/MockzpaToken.sol#16)
",) (contracts/mock/MockzpaToken.sol,11-75
too-many-digits,Informational,"MockPickleJar.deposit(uint256) (contracts/mock/MockPickleJar.sol#30-34) uses literals with too many digits:
	- shares = _amount * 1000000000000000000 / getRatio() (contracts/mock/MockPickleJar.sol#32)
",uint256) (contracts/mock/MockPickleJar.sol,30-34
too-many-digits,Informational,"Vault.constructor(string,string,address) (contracts/v3/Vault.sol#47-58) uses literals with too many digits:
	- totalDepositCap = 10000000000000000000000000 (contracts/v3/Vault.sol#57)
","string,string,address) (contracts/v3/Vault.sol",47-58
too-many-digits,Informational,"MockPickleJar.withdraw(uint256) (contracts/mock/MockPickleJar.sol#40-44) uses literals with too many digits:
	- r = _shares * getRatio() / 1000000000000000000 (contracts/mock/MockPickleJar.sol#41)
",uint256) (contracts/mock/MockPickleJar.sol,40-44
constable-states,Optimization,"MockPickleJar.lpToken (contracts/mock/MockPickleJar.sol#12) should be constant 
",N/A,N/A
constable-states,Optimization,"MockzpaToken.endFee (contracts/mock/MockzpaToken.sol#20) should be constant 
",N/A,N/A
constable-states,Optimization,"MockGenericVault.min (contracts/mock/MockGenericVault.sol#21) should be constant 
",N/A,N/A
constable-states,Optimization,"MockFlamIncomeVault.min (contracts/mock/MockFlamIncome.sol#20) should be constant 
",N/A,N/A
constable-states,Optimization,"MockzpaToken.feeDuration (contracts/mock/MockzpaToken.sol#21) should be constant 
",N/A,N/A
constable-states,Optimization,"MockzpaToken.initialFee (contracts/mock/MockzpaToken.sol#19) should be constant 
",N/A,N/A
immutable-states,Optimization,"MockIdleToken.token (contracts/mock/MockIdleToken.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockPickleMasterChef.pickleToken (contracts/mock/MockPickleMasterChef.sol#8) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MetaVault.tokenYAX (contracts/legacy/MetaVault.sol#33) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockUniswapRouter.univ2LpToken (contracts/mock/MockUniswapRouter.sol#42) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockCurveGauge.want (contracts/mock/MockCurveGauge.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockzpaToken.underlyingAsset (contracts/mock/MockzpaToken.sol#18) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockIdleToken.govToken (contracts/mock/MockIdleToken.sol#17) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStabilizePool.rewardRate (contracts/mock/MockStabilizePool.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStabilizePool.rewardToken (contracts/mock/MockStabilizePool.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockPickleJar.t3crv (contracts/mock/MockPickleJar.sol#11) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockIdleToken.rewardToken (contracts/mock/MockIdleToken.sol#16) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockDErc20.underlying (contracts/mock/MockDErc20.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockDRewards.lpToken (contracts/mock/MockDRewards.sol#13) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockERC20._decimals (contracts/mock/MockERC20.sol#8) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MetaVault.token3CRV (contracts/legacy/MetaVault.sol#32) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockPickleMasterChef.lpToken (contracts/mock/MockPickleMasterChef.sol#9) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockGenericVault.token (contracts/mock/MockGenericVault.sol#19) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockYearnV2.underlying (contracts/mock/MockYearnV2.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockDRewards.rewardRate (contracts/mock/MockDRewards.sol#19) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockCurveMinter.crv (contracts/mock/MockCurveMinter.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockFlamIncomeVault.token (contracts/mock/MockFlamIncome.sol#18) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStabilizePool.lpToken (contracts/mock/MockStabilizePool.sol#13) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockDRewards.rewardToken (contracts/mock/MockDRewards.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockV3Aggregator.decimals (contracts/mock/MockV3Aggregatgor.sol#17) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockERC20NonStandard._decimals (contracts/mock/MockERC20NonStandard.sol#8) should be immutable 
",N/A,N/A
