Severity,Description,Line
High,"Reentrancy in MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.amount = user.amount.add(_shares) (contracts/legacy/MetaVault.sol#500)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
	- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#501)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",496-503
High,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (contracts/legacy/MetaVault.sol#578)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",572-583
High,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#254)
	ERC20._balances (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#36) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#208-217)
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#103-105)
",591-633
High,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
	ERC20._totalSupply (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#40) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#96-98)
",471-494
High,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#581)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",572-583
High,"Reentrancy in MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554):
	External calls:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
		- IController(controller).withdraw(address(token3CRV),_toWithdraw) (contracts/legacy/MetaVault.sol#616)
		- token3CRV.safeTransfer(msg.sender,r) (contracts/legacy/MetaVault.sol#626)
		- token3CRV.safeTransfer(address(converter),r) (contracts/legacy/MetaVault.sol#629)
		- _outputAmount = converter.convert(address(token3CRV),_output,r) (contracts/legacy/MetaVault.sol#630)
		- IERC20(_output).safeTransfer(msg.sender,_outputAmount) (contracts/legacy/MetaVault.sol#631)
	External calls sending eth:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#254)
	ERC20._balances (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#36) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257)
	- ERC20._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#228-236)
	- ERC20._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#208-217)
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#103-105)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- accYaxPerShare = accYaxPerShare.add(_multiplier.mul(yaxPerBlock).mul(1e12).div(lpSupply)) (contracts/legacy/MetaVault.sol#533)
	MetaVault.accYaxPerShare (contracts/legacy/MetaVault.sol#56) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.accYaxPerShare (contracts/legacy/MetaVault.sol#56)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- lastRewardBlock = block.number (contracts/legacy/MetaVault.sol#529)
		- lastRewardBlock = block.number (contracts/legacy/MetaVault.sol#534)
	MetaVault.lastRewardBlock (contracts/legacy/MetaVault.sol#55) can be used in cross function reentrancies:
	- MetaVault.constructor(IERC20,IERC20,IERC20,IERC20,IERC20,uint256,uint256) (contracts/legacy/MetaVault.sol#96-112)
	- MetaVault.lastRewardBlock (contracts/legacy/MetaVault.sol#55)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- user.accEarned = user.accEarned.add(_pendingYax) (contracts/legacy/MetaVault.sol#541)
		- user.amount = user.amount.sub(_amount) (contracts/legacy/MetaVault.sol#578)
		- user.yaxRewardDebt = user.amount.mul(accYaxPerShare).div(1e12) (contracts/legacy/MetaVault.sol#581)
	MetaVault.userInfo (contracts/legacy/MetaVault.sol#60) can be used in cross function reentrancies:
	- MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545)
	- MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503)
	- MetaVault.pendingYax(address) (contracts/legacy/MetaVault.sol#509-518)
	- MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583)
	- MetaVault.userInfo (contracts/legacy/MetaVault.sol#60)
	- MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633)
	- MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554)
",551-554
High,"MetaVault.stakeShares(uint256) (contracts/legacy/MetaVault.sol#462-469) ignores return value by IERC20(address(this)).transferFrom(msg.sender,address(this),_shares) (contracts/legacy/MetaVault.sol#464)
",462-469
High,"MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583) ignores return value by IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
",572-583
Medium,"MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633) performs a multiplication on the result of a division:
	- r = (balance().mul(_shares)).div(totalSupply()) (contracts/legacy/MetaVault.sol#598)
	- _withdrawalProtection = r.mul(_withdrawalProtectionFee).div(10000) (contracts/legacy/MetaVault.sol#606)
",591-633
Medium,"Vault.withdraw(uint256,address) (contracts/v3/Vault.sol#231-264) performs a multiplication on the result of a division:
	- _amount = (balance().mul(_shares)).div(totalSupply()) (contracts/v3/Vault.sol#239)
	- _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX) (contracts/v3/Vault.sol#244)
",231-264
Medium,"MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/legacy/MetaVault.sol#483)
",471-494
Medium,"MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mock/MockGenericVault.sol#51)
",44-57
Medium,"MetaVault.updateReward() (contracts/legacy/MetaVault.sol#523-535) uses a dangerous strict equality:
	- lpSupply == 0 (contracts/legacy/MetaVault.sol#528)
",523-535
Medium,"Reentrancy in MetaVault.claimInsurance() (contracts/legacy/MetaVault.sol#300-309):
	External calls:
	- token3CRV.safeTransfer(treasuryWallet,insurance) (contracts/legacy/MetaVault.sol#306)
	State variables written after the call(s):
	- insurance = 0 (contracts/legacy/MetaVault.sol#308)
	MetaVault.insurance (contracts/legacy/MetaVault.sol#43) can be used in cross function reentrancies:
	- MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494)
	- MetaVault.balance() (contracts/legacy/MetaVault.sol#128-132)
	- MetaVault.claimInsurance() (contracts/legacy/MetaVault.sol#300-309)
	- MetaVault.insurance (contracts/legacy/MetaVault.sol#43)
",300-309
Medium,"MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456) ignores return value by converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
",422-456
Medium,"MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412) ignores return value by converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
",390-412
Medium,"MetaVault.earnExtra(address) (contracts/legacy/MetaVault.sol#664-672) ignores return value by converter.convert(_token,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#671)
",664-672
Low,"MetaVault.setYaxPerBlock(uint256) (contracts/legacy/MetaVault.sol#220-224) should emit an event for: 
	- yaxPerBlock = _yaxPerBlock (contracts/legacy/MetaVault.sol#223) 
",220-224
Low,"Vault.setMin(uint256) (contracts/v3/Vault.sol#84-93) should emit an event for: 
	- min = _min (contracts/v3/Vault.sol#92) 
",84-93
Low,"MetaVault.setEarnLowerlimit(uint256) (contracts/legacy/MetaVault.sol#188-191) should emit an event for: 
	- earnLowerlimit = _earnLowerlimit (contracts/legacy/MetaVault.sol#190) 
",188-191
Low,"MetaVault.setMin(uint256) (contracts/legacy/MetaVault.sol#138-141) should emit an event for: 
	- min = _min (contracts/legacy/MetaVault.sol#140) 
",138-141
Low,"Vault.balanceOfThis() (contracts/v3/Vault.sol#315-325) has external calls inside a loop: _balance = _balance.add(_normalizeDecimals(_token,IERC20(_token).balanceOf(address(this)))) (contracts/v3/Vault.sol#323)
",315-325
Low,"Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203) has external calls inside a loop: _before = IERC20(_token).balanceOf(address(this)) (contracts/v3/Vault.sol#184)
",170-203
Low,"Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203) has external calls inside a loop: _amount = IERC20(_token).balanceOf(address(this)).sub(_before) (contracts/v3/Vault.sol#186)
",170-203
Low,"Vault.balance() (contracts/v3/Vault.sol#303-310) has external calls inside a loop: balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf()) (contracts/v3/Vault.sol#309)
",303-310
Low,"Vault._normalizeDecimals(address,uint256) (contracts/v3/Vault.sol#370-383) has external calls inside a loop: _decimals = uint256(ExtendedIERC20(_token).decimals()) (contracts/v3/Vault.sol#378)
",370-383
Low,"MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456) has external calls inside a loop: converter.convert_rate(address(inputTokens[i]),address(token3CRV),_inputAmount) > 0 (contracts/legacy/MetaVault.sol#431)
",422-456
Low,"Vault.checkToken(address) (contracts/v3/Vault.sol#389-392) has external calls inside a loop: require(bool,string)(manager.allowedTokens(_token) && manager.vaults(_token) == address(this),!_token) (contracts/v3/Vault.sol#390)
",389-392
Low,"Vault.balanceOfThis() (contracts/v3/Vault.sol#315-325) has external calls inside a loop: _tokens = manager.getTokens(address(this)) (contracts/v3/Vault.sol#320)
",315-325
Low,"Vault.notHalted() (contracts/v3/Vault.sol#394-397) has external calls inside a loop: require(bool,string)(! manager.halted(),halted) (contracts/v3/Vault.sol#395)
",394-397
Low,"Reentrancy in MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockGenericVault.sol#47)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
		- _balance[dst] = add(_balance[dst],amt) (contracts/mock/MockERC20.sol#73)
	- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
		- _totalSupply = add(_totalSupply,amt) (contracts/mock/MockERC20.sol#74)
",44-57
Low,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
",471-494
Low,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#255)
",591-633
Low,"Reentrancy in Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203):
	External calls:
	- IERC20(_token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/v3/Vault.sol#185)
	State variables written after the call(s):
	- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
",170-203
Low,"Reentrancy in Vault.deposit(address,uint256) (contracts/v3/Vault.sol#170-203):
	External calls:
	- IERC20(_token).safeTransferFrom(msg.sender,address(this),_amount) (contracts/v3/Vault.sol#185)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/v3/Vault.sol#201)
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,_shares) (contracts/v3/Vault.sol#199)
",170-203
Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
",390-412
Low,"Reentrancy in Vault.withdraw(uint256,address) (contracts/v3/Vault.sol#231-264):
	External calls:
	- _controller.withdraw(_output,_toWithdraw) (contracts/v3/Vault.sol#253)
	- IERC20(_output).safeTransfer(msg.sender,_amount) (contracts/v3/Vault.sol#262)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount) (contracts/v3/Vault.sol#263)
",231-264
Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _deposit(msg.sender,_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#450)
",422-456
Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _deposit(msg.sender,_pool,_amount) (contracts/legacy/MetaVault.sol#406)
",390-412
Low,"Reentrancy in MetaVault._getReward() (contracts/legacy/MetaVault.sol#537-545):
	External calls:
	- safeYaxTransfer(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#542)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- safeYaxTransfer(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#542)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
",537-545
Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
",422-456
Low,"Reentrancy in MetaVault.depositAll(uint256[4],uint256,bool) (contracts/legacy/MetaVault.sol#422-456):
	External calls:
	- inputTokens[i].safeTransferFrom(msg.sender,address(this),_inputAmount) (contracts/legacy/MetaVault.sol#430)
	- inputTokens[i].safeTransferFrom(msg.sender,address(converter),_inputAmount) (contracts/legacy/MetaVault.sol#432)
	- converter.convert_stables(_stablesAmounts) (contracts/legacy/MetaVault.sol#442)
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_totalDepositAmount) (contracts/legacy/MetaVault.sol#452)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#453)
",422-456
Low,"Reentrancy in MetaVault.unstake(uint256) (contracts/legacy/MetaVault.sol#572-583):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#574)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount) (contracts/legacy/MetaVault.sol#582)
",572-583
Low,"Reentrancy in MetaVault.withdrawAll(address) (contracts/legacy/MetaVault.sol#551-554):
	External calls:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
		- IController(controller).withdraw(address(token3CRV),_toWithdraw) (contracts/legacy/MetaVault.sol#616)
		- token3CRV.safeTransfer(msg.sender,r) (contracts/legacy/MetaVault.sol#626)
		- token3CRV.safeTransfer(address(converter),r) (contracts/legacy/MetaVault.sol#629)
		- _outputAmount = converter.convert(address(token3CRV),_output,r) (contracts/legacy/MetaVault.sol#630)
		- IERC20(_output).safeTransfer(msg.sender,_outputAmount) (contracts/legacy/MetaVault.sol#631)
	External calls sending eth:
	- unstake(userInfo[msg.sender].amount) (contracts/legacy/MetaVault.sol#552)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#256)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
	- Withdraw(msg.sender,_amount) (contracts/legacy/MetaVault.sol#582)
		- withdraw(balanceOf(msg.sender),_output) (contracts/legacy/MetaVault.sol#553)
",551-554
Low,"Reentrancy in MetaVault._stakeShares(uint256) (contracts/legacy/MetaVault.sol#496-503):
	External calls:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _getReward() (contracts/legacy/MetaVault.sol#499)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
",496-503
Low,"Reentrancy in MetaVault.deposit(uint256,address,uint256,bool) (contracts/legacy/MetaVault.sol#390-412):
	External calls:
	- token3CRV.safeTransferFrom(msg.sender,address(this),_amount) (contracts/legacy/MetaVault.sol#395)
	- IERC20(_input).safeTransferFrom(msg.sender,address(converter),_amount) (contracts/legacy/MetaVault.sol#397)
	- converter.convert(_input,address(token3CRV),_amount) (contracts/legacy/MetaVault.sol#398)
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _shares = _deposit(address(this),_pool,_amount) (contracts/legacy/MetaVault.sol#408)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#409)
",390-412
Low,"Reentrancy in MetaVault.stakeShares(uint256) (contracts/legacy/MetaVault.sol#462-469):
	External calls:
	- IERC20(address(this)).transferFrom(msg.sender,address(this),_shares) (contracts/legacy/MetaVault.sol#464)
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Deposit(msg.sender,_shares) (contracts/legacy/MetaVault.sol#502)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
	- RewardPaid(msg.sender,_pendingYax) (contracts/legacy/MetaVault.sol#543)
		- _stakeShares(_shares) (contracts/legacy/MetaVault.sol#468)
",462-469
Low,"Reentrancy in MockGenericVault.deposit(uint256) (contracts/mock/MockGenericVault.sol#44-57):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockGenericVault.sol#47)
	Event emitted after the call(s):
	- Transfer(address(0),dst,amt) (contracts/mock/MockERC20.sol#75)
		- _mint(msg.sender,shares) (contracts/mock/MockGenericVault.sol#56)
",44-57
Low,"Reentrancy in MetaVault.withdraw(uint256,address) (contracts/legacy/MetaVault.sol#591-633):
	External calls:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- tokenYAX.safeTransfer(_to,_tokenBal) (contracts/legacy/MetaVault.sol#657)
		- tokenYAX.safeTransfer(_to,_amount) (contracts/legacy/MetaVault.sol#657)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- IERC20(address(this)).transfer(msg.sender,_amount) (contracts/legacy/MetaVault.sol#579)
	External calls sending eth:
	- unstake(_need) (contracts/legacy/MetaVault.sol#596)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(account,address(0),amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#256)
		- _burn(msg.sender,_shares) (contracts/legacy/MetaVault.sol#599)
",591-633
Low,"Reentrancy in Vault.earn(address,address) (contracts/v3/Vault.sol#141-159):
	External calls:
	- IERC20(_token).safeTransfer(address(_controller),_balance) (contracts/v3/Vault.sol#155)
	- _controller.earn(_strategy,_token,_balance) (contracts/v3/Vault.sol#156)
	Event emitted after the call(s):
	- Earn(_token,_balance) (contracts/v3/Vault.sol#157)
",141-159
Low,"Reentrancy in MetaVault._deposit(address,uint256,uint256) (contracts/legacy/MetaVault.sol#471-494):
	External calls:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- token3CRV.safeTransfer(controller,_bal) (contracts/legacy/MetaVault.sol#342)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _contrl.earn(address(token3CRV),_bal) (contracts/legacy/MetaVault.sol#343)
	External calls sending eth:
	- earn() (contracts/legacy/MetaVault.sol#490)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(_mintTo,_shares) (contracts/legacy/MetaVault.sol#492)
",471-494
Informational,"Function MetaVault.calc_token_amount_deposit(uint256[3]) (contracts/legacy/MetaVault.sol#352-354) is not in mixedCase
",352-354
Informational,"Function MetaVault.calc_token_amount_withdraw(uint256,address) (contracts/legacy/MetaVault.sol#361-371) is not in mixedCase
",361-371
Informational,"Function MetaVault.convert_rate(address,uint256) (contracts/legacy/MetaVault.sol#378-380) is not in mixedCase
",378-380
Informational,"MetaVault.slitherConstructorVariables() (contracts/legacy/MetaVault.sol#25-673) uses literals with too many digits:
	- totalDepositCap = 10000000000000000000000000 (contracts/legacy/MetaVault.sol#39)
",25-673
Informational,"Vault.constructor(string,string,address) (contracts/v3/Vault.sol#47-58) uses literals with too many digits:
	- totalDepositCap = 10000000000000000000000000 (contracts/v3/Vault.sol#57)
",47-58
