Check,Severity,Description,Filename,Line
incorrect-return,High,"TransparentUpgradeableProxy.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#116-119) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol",116-119
incorrect-return,High,"TransparentUpgradeableProxy.admin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#70-72) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,70-72
incorrect-return,High,"TransparentUpgradeableProxy.upgradeTo(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#105-107) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,105-107
incorrect-return,High,"TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) calls Proxy._fallback() (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#54-57) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,53-59
incorrect-return,High,"TransparentUpgradeableProxy.changeAdmin(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#94-98) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,94-98
incorrect-return,High,"TransparentUpgradeableProxy.implementation() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#83-85) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,83-85
unchecked-transfer,High,"Sett.withdraw(uint256) (contracts/mocks/Sett.sol#21-24) ignores return value by token.transfer(msg.sender,_shares) (contracts/mocks/Sett.sol#23)
",uint256) (contracts/mocks/Sett.sol,21-24
unchecked-transfer,High,"Sett.withdrawAll() (contracts/mocks/Sett.sol#26-30) ignores return value by token.transfer(msg.sender,_shares) (contracts/mocks/Sett.sol#29)
",) (contracts/mocks/Sett.sol,26-30
unchecked-transfer,High,"Sett.deposit(uint256) (contracts/mocks/Sett.sol#16-19) ignores return value by token.transferFrom(msg.sender,address(this),_amount) (contracts/mocks/Sett.sol#17)
",uint256) (contracts/mocks/Sett.sol,16-19
unused-return,Medium,"ZapCall.mint(IERC20,IZap) (contracts/test/ZapCall.sol#11-15) ignores return value by zap.mint(wbtc,bal,0,1,0) (contracts/test/ZapCall.sol#14)
","IERC20,IZap) (contracts/test/ZapCall.sol",11-15
unused-return,Medium,"Zap.curveLPToIbbtc(uint256,uint256) (contracts/Zap.sol#208-212) ignores return value by settPeak.calcMint(poolId,_sett) (contracts/Zap.sol#211)
","uint256,uint256) (contracts/Zap.sol",208-212
unused-return,Medium,"TransparentUpgradeableProxy.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#116-119) ignores return value by Address.functionDelegateCall(newImplementation,data) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#118)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol",116-119
unused-return,Medium,"UpgradeableProxy.constructor(address,bytes) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#24-30) ignores return value by Address.functionDelegateCall(_logic,_data) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#28)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol",24-30
unused-return,Medium,"Zap.redeem(IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol#216-238) ignores return value by byvWbtcPeak.redeem(amount) (contracts/Zap.sol#231)
","IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol",216-238
unused-return,Medium,"Core.whitelistPeak(address) (contracts/Core.sol#150-169) ignores return value by IPeak(peak).portfolioValue() (contracts/Core.sol#165)
",address) (contracts/Core.sol,150-169
unused-return,Medium,"Rebalance.cycleWithWbtc(uint256,uint256,uint256) (contracts/Rebalance.sol#39-44) ignores return value by wbtc.approve(address(zap),amount) (contracts/Rebalance.sol#41)
","uint256,uint256,uint256) (contracts/Rebalance.sol",39-44
unused-return,Medium,"Zap.redeem(IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol#216-238) ignores return value by IbyvWbtc(address(pool.sett)).withdraw() (contracts/Zap.sol#232)
","IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol",216-238
unused-return,Medium,"Zap.redeem(IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol#216-238) ignores return value by settPeak.redeem(poolId,amount) (contracts/Zap.sol#227)
","IERC20,uint256,uint256,int128,uint256) (contracts/Zap.sol",216-238
events-access,Low,"bBTC.switchCore(address) (contracts/bBTC.sol#34-37) should emit an event for: 
	- core = _core (contracts/bBTC.sol#36) 
",address) (contracts/bBTC.sol,34-37
events-maths,Low,"Core.setConfig(uint256,uint256,address) (contracts/Core.sol#194-212) should emit an event for: 
	- mintFee = _mintFee (contracts/Core.sol#209) 
	- redeemFee = _redeemFee (contracts/Core.sol#210) 
","uint256,uint256,address) (contracts/Core.sol",194-212
events-maths,Low,"SaddlePeak.modifyWhitelistedCurvePools(SaddlePeak.CurvePool[]) (contracts/test/SaddlePeak.sol#139-156) should emit an event for: 
	- numPools = _pools.length (contracts/test/SaddlePeak.sol#145) 
",SaddlePeak.CurvePool[]) (contracts/test/SaddlePeak.sol,139-156
events-maths,Low,"BadgerSettPeak.modifyWhitelistedCurvePools(BadgerSettPeak.CurvePool[]) (contracts/peaks/BadgerSettPeak.sol#182-206) should emit an event for: 
	- numPools = _pools.length (contracts/peaks/BadgerSettPeak.sol#205) 
",BadgerSettPeak.CurvePool[]) (contracts/peaks/BadgerSettPeak.sol,182-206
incorrect-modifier,Low,"Modifier TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) does not always execute _; or revert
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,53-59
calls-loop,Low,"BadgerSettPeak._settToBtc(BadgerSettPeak.CurvePool,uint256) (contracts/peaks/BadgerSettPeak.sol#166-175) has external calls inside a loop: amount.mul(pool.sett.getPricePerFullShare()).mul(pool.swap.get_virtual_price()).div(1e36) (contracts/peaks/BadgerSettPeak.sol#171-174)
","BadgerSettPeak.CurvePool,uint256) (contracts/peaks/BadgerSettPeak.sol",166-175
calls-loop,Low,"BadgerSettPeak.portfolioValue() (contracts/peaks/BadgerSettPeak.sol#123-141) has external calls inside a loop: assets = assets.add(_settToBtc(pool,pool.sett.balanceOf(address(this)))) (contracts/peaks/BadgerSettPeak.sol#134-139)
",) (contracts/peaks/BadgerSettPeak.sol,123-141
calls-loop,Low,"SaddlePeak._settToBtc(SaddlePeak.CurvePool,uint256) (contracts/test/SaddlePeak.sol#124-132) has external calls inside a loop: amount.mul(pool.swap.getVirtualPrice()).div(1e18) (contracts/test/SaddlePeak.sol#129-131)
","SaddlePeak.CurvePool,uint256) (contracts/test/SaddlePeak.sol",124-132
calls-loop,Low,"SaddlePeak.portfolioValue() (contracts/test/SaddlePeak.sol#92-110) has external calls inside a loop: assets = assets.add(_settToBtc(pool,pool.lpToken.balanceOf(address(this)))) (contracts/test/SaddlePeak.sol#102-108)
",) (contracts/test/SaddlePeak.sol,92-110
calls-loop,Low,"Core.totalSystemAssets() (contracts/Core.sol#131-142) has external calls inside a loop: totalAssets = totalAssets.add(IPeak(_peakAddresses[i]).portfolioValue()) (contracts/Core.sol#138-140)
",) (contracts/Core.sol,131-142
reentrancy-benign,Low,"Reentrancy in Sett.deposit(uint256) (contracts/mocks/Sett.sol#16-19):
	External calls:
	- token.transferFrom(msg.sender,address(this),_amount) (contracts/mocks/Sett.sol#17)
	State variables written after the call(s):
	- _mint(msg.sender,_amount) (contracts/mocks/Sett.sol#18)
		- _balances[account] = _balances[account].add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#234)
	- _mint(msg.sender,_amount) (contracts/mocks/Sett.sol#18)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#233)
",uint256) (contracts/mocks/Sett.sol,16-19
reentrancy-events,Low,"Reentrancy in SaddlePeak.mint(uint256,uint256,bytes32[]) (contracts/test/SaddlePeak.sol#50-62):
	External calls:
	- outAmount = core.mint(_settToBtc(pool,inAmount),msg.sender,merkleProof) (contracts/test/SaddlePeak.sol#58)
	- pool.lpToken.safeTransferFrom(msg.sender,address(this),inAmount) (contracts/test/SaddlePeak.sol#60)
	Event emitted after the call(s):
	- Mint(msg.sender,outAmount) (contracts/test/SaddlePeak.sol#61)
","uint256,uint256,bytes32[]) (contracts/test/SaddlePeak.sol",50-62
reentrancy-events,Low,"Reentrancy in BadgerSettPeak.redeem(uint256,uint256) (contracts/peaks/BadgerSettPeak.sol#74-87):
	External calls:
	- outAmount = _btcToSett(pool,core.redeem(inAmount,msg.sender)) (contracts/peaks/BadgerSettPeak.sol#83)
	- pool.sett.safeTransfer(msg.sender,outAmount) (contracts/peaks/BadgerSettPeak.sol#85)
	Event emitted after the call(s):
	- Redeem(msg.sender,inAmount,outAmount) (contracts/peaks/BadgerSettPeak.sol#86)
","uint256,uint256) (contracts/peaks/BadgerSettPeak.sol",74-87
reentrancy-events,Low,"Reentrancy in Sett.deposit(uint256) (contracts/mocks/Sett.sol#16-19):
	External calls:
	- token.transferFrom(msg.sender,address(this),_amount) (contracts/mocks/Sett.sol#17)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#235)
		- _mint(msg.sender,_amount) (contracts/mocks/Sett.sol#18)
",uint256) (contracts/mocks/Sett.sol,16-19
reentrancy-events,Low,"Reentrancy in BadgerYearnWbtcPeak.redeem(uint256) (contracts/peaks/BadgerYearnWbtcPeak.sol#64-75):
	External calls:
	- outAmount = _btcTobyvWBTC(core.redeem(inAmount,msg.sender)) (contracts/peaks/BadgerYearnWbtcPeak.sol#72)
	- byvWBTC.safeTransfer(msg.sender,outAmount) (contracts/peaks/BadgerYearnWbtcPeak.sol#73)
	Event emitted after the call(s):
	- Redeem(msg.sender,inAmount,outAmount) (contracts/peaks/BadgerYearnWbtcPeak.sol#74)
",uint256) (contracts/peaks/BadgerYearnWbtcPeak.sol,64-75
reentrancy-events,Low,"Reentrancy in SaddlePeak.redeem(uint256,uint256) (contracts/test/SaddlePeak.sol#72-84):
	External calls:
	- outAmount = _btcToSett(pool,core.redeem(inAmount,msg.sender)) (contracts/test/SaddlePeak.sol#80)
	- pool.lpToken.safeTransfer(msg.sender,outAmount) (contracts/test/SaddlePeak.sol#82)
	Event emitted after the call(s):
	- Redeem(msg.sender,inAmount) (contracts/test/SaddlePeak.sol#83)
","uint256,uint256) (contracts/test/SaddlePeak.sol",72-84
reentrancy-events,Low,"Reentrancy in BadgerSettPeak.mint(uint256,uint256,bytes32[]) (contracts/peaks/BadgerSettPeak.sol#51-64):
	External calls:
	- outAmount = core.mint(_settToBtc(pool,inAmount),msg.sender,merkleProof) (contracts/peaks/BadgerSettPeak.sol#60)
	- pool.sett.safeTransferFrom(msg.sender,address(this),inAmount) (contracts/peaks/BadgerSettPeak.sol#62)
	Event emitted after the call(s):
	- Mint(msg.sender,outAmount,inAmount) (contracts/peaks/BadgerSettPeak.sol#63)
","uint256,uint256,bytes32[]) (contracts/peaks/BadgerSettPeak.sol",51-64
reentrancy-events,Low,"Reentrancy in Core.collectFee() (contracts/Core.sol#122-129):
	External calls:
	- bBTC.mint(feeSink,_fee) (contracts/Core.sol#127)
	Event emitted after the call(s):
	- FeeCollected(_fee) (contracts/Core.sol#128)
",) (contracts/Core.sol,122-129
reentrancy-events,Low,"Reentrancy in BadgerYearnWbtcPeak.mint(uint256,bytes32[]) (contracts/peaks/BadgerYearnWbtcPeak.sol#44-55):
	External calls:
	- outAmount = core.mint(_byvWbtcToBtc(inAmount),msg.sender,merkleProof) (contracts/peaks/BadgerYearnWbtcPeak.sol#52)
	- byvWBTC.safeTransferFrom(msg.sender,address(this),inAmount) (contracts/peaks/BadgerYearnWbtcPeak.sol#53)
	Event emitted after the call(s):
	- Mint(msg.sender,outAmount,inAmount) (contracts/peaks/BadgerYearnWbtcPeak.sol#54)
","uint256,bytes32[]) (contracts/peaks/BadgerYearnWbtcPeak.sol",44-55
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",171-188
assembly,Informational,"Proxy._delegate(address) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#21-41) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#23-40)
",address) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol,21-41
assembly,Informational,"UpgradableProxy.setImplementation(address) (contracts/common/proxy/UpgradableProxy.sol#31-36) uses assembly
	- INLINE ASM (contracts/common/proxy/UpgradableProxy.sol#33-35)
",address) (contracts/common/proxy/UpgradableProxy.sol,31-36
assembly,Informational,"console._sendLogPayloadImplementation(bytes) (node_modules/hardhat/console.sol#8-23) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#11-22)
",bytes) (node_modules/hardhat/console.sol,8-23
assembly,Informational,"UpgradableProxy.isContract(address) (contracts/common/proxy/UpgradableProxy.sol#38-47) uses assembly
	- INLINE ASM (contracts/common/proxy/UpgradableProxy.sol#43-45)
",address) (contracts/common/proxy/UpgradableProxy.sol,38-47
assembly,Informational,"UpgradableProxy.implementation() (contracts/common/proxy/UpgradableProxy.sol#17-22) uses assembly
	- INLINE ASM (contracts/common/proxy/UpgradableProxy.sol#19-21)
",) (contracts/common/proxy/UpgradableProxy.sol,17-22
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-35
assembly,Informational,"console._castToPure(function(bytes)) (node_modules/hardhat/console.sol#25-31) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#28-30)
",function(bytes)) (node_modules/hardhat/console.sol,25-31
assembly,Informational,"Proxy.delegatedFwd(address,bytes) (contracts/common/proxy/Proxy.sol#8-34) uses assembly
	- INLINE ASM (contracts/common/proxy/Proxy.sol#10-33)
","address,bytes) (contracts/common/proxy/Proxy.sol",8-34
assembly,Informational,"TransparentUpgradeableProxy._admin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#124-130) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#127-129)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,124-130
assembly,Informational,"UpgradeableProxy._implementation() (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#47-53) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#50-52)
",) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol,47-53
assembly,Informational,"UpgradeableProxy._setImplementation(address) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#68-77) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#74-76)
",address) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol,68-77
assembly,Informational,"TransparentUpgradeableProxy._setAdmin(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#135-142) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#139-141)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,135-142
assembly,Informational,"GovernableProxy.owner() (contracts/common/proxy/GovernableProxy.sol#22-27) uses assembly
	- INLINE ASM (contracts/common/proxy/GovernableProxy.sol#24-26)
",) (contracts/common/proxy/GovernableProxy.sol,22-27
assembly,Informational,"GovernableProxy._transferOwnership(address) (contracts/common/proxy/GovernableProxy.sol#36-43) uses assembly
	- INLINE ASM (contracts/common/proxy/GovernableProxy.sol#40-42)
",address) (contracts/common/proxy/GovernableProxy.sol,36-43
pragma,Informational,"6 different versions of Solidity are used:
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#3)
	- Version constraint >=0.4.24<0.8.0 is used by:
		->=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Initializable.sol#4)
	- Version constraint >=0.6.2<0.8.0 is used by:
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- Version constraint 0.6.11 is used by:
		-0.6.11 (contracts/Core.sol#3)
		-0.6.11 (contracts/Rebalance.sol#3)
		-0.6.11 (contracts/Zap.sol#3)
		-0.6.11 (contracts/bBTC.sol#3)
		-0.6.11 (contracts/common/AccessControlDefended.sol#3)
		-0.6.11 (contracts/common/proxy/GovernableProxy.sol#3)
		-0.6.11 (contracts/common/proxy/IERCProxy.sol#3)
		-0.6.11 (contracts/common/proxy/Proxy.sol#3)
		-0.6.11 (contracts/common/proxy/UpgradableProxy.sol#3)
		-0.6.11 (contracts/interfaces/ICore.sol#3)
		-0.6.11 (contracts/interfaces/IPeak.sol#3)
		-0.6.11 (contracts/interfaces/ISett.sol#3)
		-0.6.11 (contracts/interfaces/ISwap.sol#3)
		-0.6.11 (contracts/interfaces/IbBTC.sol#3)
		-0.6.11 (contracts/interfaces/IbyvWbtc.sol#3)
		-0.6.11 (contracts/mocks/CurveLPToken.sol#3)
		-0.6.11 (contracts/mocks/Sett.sol#3)
		-0.6.11 (contracts/mocks/Swap.sol#3)
		-0.6.11 (contracts/mocks/byvWbtc.sol#3)
		-0.6.11 (contracts/peaks/BadgerSettPeak.sol#3)
		-0.6.11 (contracts/peaks/BadgerYearnWbtcPeak.sol#3)
		-0.6.11 (contracts/test/SaddlePeak.sol#3)
		-0.6.11 (contracts/test/ZapCall.sol#3)
	- Version constraint >=0.6.0<0.7.0 is used by:
		->=0.6.0<0.7.0 (contracts/common/GuestList.sol#2)
	- Version constraint >=0.4.22<0.9.0 is used by:
		->=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
costly-loop,Informational,"BadgerSettPeak.modifyWhitelistedCurvePools(BadgerSettPeak.CurvePool[]) (contracts/peaks/BadgerSettPeak.sol#182-206) has costly operations inside a loop:
	- delete pools[i_scope_0] (contracts/peaks/BadgerSettPeak.sol#202)
",BadgerSettPeak.CurvePool[]) (contracts/peaks/BadgerSettPeak.sol,182-206
solc-version,Informational,"Version constraint 0.6.11 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.11 (contracts/Core.sol#3)
	- 0.6.11 (contracts/Rebalance.sol#3)
	- 0.6.11 (contracts/Zap.sol#3)
	- 0.6.11 (contracts/bBTC.sol#3)
	- 0.6.11 (contracts/common/AccessControlDefended.sol#3)
	- 0.6.11 (contracts/common/proxy/GovernableProxy.sol#3)
	- 0.6.11 (contracts/common/proxy/IERCProxy.sol#3)
	- 0.6.11 (contracts/common/proxy/Proxy.sol#3)
	- 0.6.11 (contracts/common/proxy/UpgradableProxy.sol#3)
	- 0.6.11 (contracts/interfaces/ICore.sol#3)
	- 0.6.11 (contracts/interfaces/IPeak.sol#3)
	- 0.6.11 (contracts/interfaces/ISett.sol#3)
	- 0.6.11 (contracts/interfaces/ISwap.sol#3)
	- 0.6.11 (contracts/interfaces/IbBTC.sol#3)
	- 0.6.11 (contracts/interfaces/IbyvWbtc.sol#3)
	- 0.6.11 (contracts/mocks/CurveLPToken.sol#3)
	- 0.6.11 (contracts/mocks/Sett.sol#3)
	- 0.6.11 (contracts/mocks/Swap.sol#3)
	- 0.6.11 (contracts/mocks/byvWbtc.sol#3)
	- 0.6.11 (contracts/peaks/BadgerSettPeak.sol#3)
	- 0.6.11 (contracts/peaks/BadgerYearnWbtcPeak.sol#3)
	- 0.6.11 (contracts/test/SaddlePeak.sol#3)
	- 0.6.11 (contracts/test/ZapCall.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.2<0.8.0 is too complex.
It is used by:
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.24<0.8.0 is too complex.
It is used by:
	- >=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Initializable.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- >=0.6.0<0.7.0 (contracts/common/GuestList.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/MerkleProof.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/Math.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#3)
",N/A,N/A
solc-version,Informational,"solc-0.6.11 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",163-169
low-level-calls,Informational,"Low level call in ProxyAdmin.getProxyAdmin(TransparentUpgradeableProxy) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#36-42):
	- (success,returndata) = address(proxy).staticcall(0xf851a440) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#39)
",TransparentUpgradeableProxy) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol,36-42
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",139-145
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",53-59
low-level-calls,Informational,"Low level call in ProxyAdmin.getProxyImplementation(TransparentUpgradeableProxy) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#21-27):
	- (success,returndata) = address(proxy).staticcall(0x5c60da1b) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol#24)
",TransparentUpgradeableProxy) (node_modules/@openzeppelin/contracts/proxy/ProxyAdmin.sol,21-27
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",114-121
missing-inheritance,Informational,"SaddlePeak (contracts/test/SaddlePeak.sol#16-157) should inherit from IBadgerSettPeak (contracts/interfaces/IPeak.sol#9-27)
",contracts/test/SaddlePeak.sol,16-157
missing-inheritance,Informational,"Zap (contracts/Zap.sol#21-346) should inherit from IZap (contracts/test/ZapCall.sol#18-20)
",contracts/Zap.sol,21-346
missing-inheritance,Informational,"GuestList (contracts/common/GuestList.sol#25-152) should inherit from BadgerGuestListAPI (contracts/Core.sol#219-221)
",contracts/common/GuestList.sol,25-152
naming-convention,Informational,"Parameter ISwap.exchange(int128,int128,uint256,uint256).min_dy (contracts/interfaces/ISwap.sol#7) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter GuestList.authorized(address,uint256,bytes32[])._guest (contracts/common/GuestList.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.calc_token_amount(uint256[3],bool) (contracts/Zap.sol#353) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter GuestList.setGuests(address[],bool[])._guests (contracts/common/GuestList.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter GuestList.authorized(address,uint256,bytes32[])._merkleProof (contracts/common/GuestList.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function renDeposit.add_liquidity(uint256[2],uint256) (contracts/interfaces/ISwap.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Swap.get_virtual_price() (contracts/mocks/Swap.sol#8-10) is not in mixedCase
",) (contracts/mocks/Swap.sol,8-10
naming-convention,Informational,"Parameter Proxy.delegatedFwd(address,bytes)._dst (contracts/common/proxy/Proxy.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter bBTC.switchCore(address)._core (contracts/bBTC.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.add_liquidity(uint256[3],uint256) (contracts/Zap.sol#352) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.calc_token_amount(uint256[2],bool) (contracts/Zap.sol#350) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter renDeposit.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/interfaces/ISwap.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Core.setConfig(uint256,uint256,address)._redeemFee (contracts/Core.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/Zap.sol#349) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UpgradableProxy.updateImplementation(address)._newProxyTo (contracts/common/proxy/UpgradableProxy.sol#24) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Zap.setGovernance(address)._governance (contracts/Zap.sol#322) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UpgradableProxy.setImplementation(address)._newProxyTo (contracts/common/proxy/UpgradableProxy.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract sbtcDeposit (contracts/interfaces/ISwap.sol#18-20) is not in CapWords
",contracts/interfaces/ISwap.sol,18-20
naming-convention,Informational,"Function ICurveFi.calc_withdraw_one_coin(uint256,int128) (contracts/Zap.sol#359) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Swap.exchange(int128,int128,uint256,uint256).min_dy (contracts/mocks/Swap.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract console (node_modules/hardhat/console.sol#4-1552) is not in CapWords
",node_modules/hardhat/console.sol,4-1552
naming-convention,Informational,"Parameter Zap.init(address)._governance (contracts/Zap.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Sett.deposit(uint256)._amount (contracts/mocks/Sett.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/Zap.sol#352) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter tbtcDeposit.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/interfaces/ISwap.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function tbtcDeposit.add_liquidity(uint256[4],uint256) (contracts/interfaces/ISwap.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Core.setGuestList(address)._guestList (contracts/Core.sol#214) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Core.__gap (contracts/Core.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SaddlePeak.modifyWhitelistedCurvePools(SaddlePeak.CurvePool[])._pools (contracts/test/SaddlePeak.sol#140) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UpgradableProxy.isContract(address)._target (contracts/common/proxy/UpgradableProxy.sol#38) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256) (contracts/Zap.sol#358) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Core.setConfig(uint256,uint256,address)._mintFee (contracts/Core.sol#195) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ISwap.get_virtual_price() (contracts/interfaces/ISwap.sol#6) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256).min_amount (contracts/Zap.sol#358) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter sbtcDeposit.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/interfaces/ISwap.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.add_liquidity(uint256[4],uint256) (contracts/Zap.sol#355) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract tbtcDeposit (contracts/interfaces/ISwap.sol#22-24) is not in CapWords
",contracts/interfaces/ISwap.sol,22-24
naming-convention,Informational,"Parameter ICurveFi.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/Zap.sol#355) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable AccessControlDefended.__gap (contracts/common/AccessControlDefended.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract byvWbtc (contracts/mocks/byvWbtc.sol#8-25) is not in CapWords
",contracts/mocks/byvWbtc.sol,8-25
naming-convention,Informational,"Parameter ICurveFi.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/Zap.sol#359) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function sbtcDeposit.add_liquidity(uint256[3],uint256) (contracts/interfaces/ISwap.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Zap.curveLPToIbbtc(uint256,uint256)._lp (contracts/Zap.sol#208) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.add_liquidity(uint256[2],uint256) (contracts/Zap.sol#349) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter GuestList.setGuests(address[],bool[])._invited (contracts/common/GuestList.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Core.setConfig(uint256,uint256,address)._feeSink (contracts/Core.sol#197) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurveFi.calc_token_amount(uint256[4],bool) (contracts/Zap.sol#356) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Sett.withdraw(uint256)._shares (contracts/mocks/Sett.sol#21) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Proxy.delegatedFwd(address,bytes)._calldata (contracts/common/proxy/Proxy.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BadgerSettPeak.modifyWhitelistedCurvePools(BadgerSettPeak.CurvePool[])._pools (contracts/peaks/BadgerSettPeak.sol#183) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter GuestList.authorized(address,uint256,bytes32[])._amount (contracts/common/GuestList.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurveFi.remove_liquidity_one_coin(uint256,int128,uint256)._token_amount (contracts/Zap.sol#358) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract renDeposit (contracts/interfaces/ISwap.sol#14-16) is not in CapWords
",contracts/interfaces/ISwap.sol,14-16
naming-convention,Informational,"Contract bBTC (contracts/bBTC.sol#10-42) is not in CapWords
",contracts/bBTC.sol,10-42
redundant-statements,Informational,"Redundant expression ""this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)"" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
",node_modules/@openzeppelin/contracts/utils/Context.sol,15-24
unused-state,Informational,"Core.__gap (contracts/Core.sol#34) is never used in Core (contracts/Core.sol#14-217)
",contracts/Core.sol,14-217
immutable-states,Optimization,"Sett.token (contracts/mocks/Sett.sol#10) should be immutable 
",N/A,N/A
