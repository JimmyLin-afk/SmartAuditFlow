Check,Severity,Description,Filename,Line
weak-prng,High,"NFTXVaultUpgradeable.getPseudoRand(uint256) (contracts/solidity/NFTXVaultUpgradeable.sol#418-427) uses a weak PRNG: ""uint256(keccak256(bytes)(abi.encodePacked(blockhash(uint256)(block.number - 1),randNonce))) % modulus (contracts/solidity/NFTXVaultUpgradeable.sol#420-426)"" 
",uint256) (contracts/solidity/NFTXVaultUpgradeable.sol,418-427
encode-packed-collision,High,"StakingTokenProvider.nameForStakingToken(address) (contracts/solidity/StakingTokenProvider.sol#50-57) calls abi.encodePacked() with multiple dynamic arguments:
	- string(abi.encodePacked(_pairedPrefix,symbol)) (contracts/solidity/StakingTokenProvider.sol#56)
",address) (contracts/solidity/StakingTokenProvider.sol,50-57
unchecked-transfer,High,"NFTXFeeDistributor.rescueTokens(uint256) (contracts/solidity/NFTXFeeDistributor.sol#141-144) ignores return value by IERC20Upgradeable(_address).transfer(msg.sender,balance) (contracts/solidity/NFTXFeeDistributor.sol#143)
",uint256) (contracts/solidity/NFTXFeeDistributor.sol,141-144
unchecked-transfer,High,"NFTXLPStaking.receiveRewards(uint256,uint256) (contracts/solidity/NFTXLPStaking.sol#94-111) ignores return value by IERC20Upgradeable(pool.rewardToken).transferFrom(msg.sender,address(rewardDistToken),amount) (contracts/solidity/NFTXLPStaking.sol#107)
","uint256,uint256) (contracts/solidity/NFTXLPStaking.sol",94-111
unchecked-transfer,High,"NFTXFeeDistributor.rescue(address) (contracts/solidity/NFTXFeeDistributor.sol#43-46) ignores return value by IERC20Upgradeable(token).transfer(msg.sender,balance) (contracts/solidity/NFTXFeeDistributor.sol#45)
",address) (contracts/solidity/NFTXFeeDistributor.sol,43-46
unchecked-transfer,High,"NFTXLPStaking._withdraw(NFTXLPStaking.StakingPool,uint256,address) (contracts/solidity/NFTXLPStaking.sol#186-189) ignores return value by IERC20Upgradeable(pool.stakingToken).transfer(account,amount) (contracts/solidity/NFTXLPStaking.sol#188)
","NFTXLPStaking.StakingPool,uint256,address) (contracts/solidity/NFTXLPStaking.sol",186-189
reentrancy-no-eth,Medium,"Reentrancy in NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167):
	External calls:
	- vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#161)
	State variables written after the call(s):
	- mintRequests[addresses[i]][tokenId] = 0 (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#156)
	NFTXMintRequestEligibility.mintRequests (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#35) can be used in cross function reentrancies:
	- NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167)
	- NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186)
	- NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216)
	- NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137)
","uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",139-167
reentrancy-no-eth,Medium,"Reentrancy in NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216):
	External calls:
	- _assetAddress = vault.assetAddress() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#192)
	- IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#201-207)
	- IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#209-213)
	State variables written after the call(s):
	- mintRequests[msg.sender][tokenId] = 0 (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#198)
	NFTXMintRequestEligibility.mintRequests (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#35) can be used in cross function reentrancies:
	- NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167)
	- NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186)
	- NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216)
	- NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137)
",uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol,188-216
reentrancy-no-eth,Medium,"Reentrancy in NFTXVaultUpgradeable.withdrawNFTsTo(uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#364-402):
	External calls:
	- IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId,1,) (contracts/solidity/NFTXVaultUpgradeable.sol#380-386)
	- IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#393-397)
	State variables written after the call(s):
	- quantity1155[tokenId] = quantity1155[tokenId].sub(1) (contracts/solidity/NFTXVaultUpgradeable.sol#388)
	NFTXVaultUpgradeable.quantity1155 (contracts/solidity/NFTXVaultUpgradeable.sol#62) can be used in cross function reentrancies:
	- NFTXVaultUpgradeable.receiveNFTs(uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol#327-362)
	- NFTXVaultUpgradeable.withdrawNFTsTo(uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#364-402)
	- tokenId = getRandomTokenIdFromFund() (contracts/solidity/NFTXVaultUpgradeable.sol#374-376)
		- randNonce += 1 (contracts/solidity/NFTXVaultUpgradeable.sol#419)
	NFTXVaultUpgradeable.randNonce (contracts/solidity/NFTXVaultUpgradeable.sol#44) can be used in cross function reentrancies:
	- NFTXVaultUpgradeable.getPseudoRand(uint256) (contracts/solidity/NFTXVaultUpgradeable.sol#418-427)
","uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",364-402
reentrancy-no-eth,Medium,"Reentrancy in NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186):
	External calls:
	- vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#184)
	State variables written after the call(s):
	- approvedMints[addresses[i]][tokenId] = false (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#178)
	NFTXMintRequestEligibility.approvedMints (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#34) can be used in cross function reentrancies:
	- NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167)
	- NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186)
	- NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216)
	- mintRequests[addresses[i]][tokenId] = 0 (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#179)
	NFTXMintRequestEligibility.mintRequests (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#35) can be used in cross function reentrancies:
	- NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167)
	- NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186)
	- NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216)
	- NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137)
","uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",169-186
reentrancy-no-eth,Medium,"Reentrancy in NFTXVaultUpgradeable.swapTo(uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#267-289):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#279)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	- _distributeFees(fee) (contracts/solidity/NFTXVaultUpgradeable.sol#285)
		- INFTXFeeDistributor(feeReceiver).distribute(vaultId) (contracts/solidity/NFTXVaultUpgradeable.sol#409)
	- ids = withdrawNFTsTo(count,specificIds,to) (contracts/solidity/NFTXVaultUpgradeable.sol#286)
		- IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId,1,) (contracts/solidity/NFTXVaultUpgradeable.sol#380-386)
		- IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#393-397)
	State variables written after the call(s):
	- ids = withdrawNFTsTo(count,specificIds,to) (contracts/solidity/NFTXVaultUpgradeable.sol#286)
		- quantity1155[tokenId] = quantity1155[tokenId].sub(1) (contracts/solidity/NFTXVaultUpgradeable.sol#388)
	NFTXVaultUpgradeable.quantity1155 (contracts/solidity/NFTXVaultUpgradeable.sol#62) can be used in cross function reentrancies:
	- NFTXVaultUpgradeable.receiveNFTs(uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol#327-362)
	- NFTXVaultUpgradeable.withdrawNFTsTo(uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#364-402)
","uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",267-289
reentrancy-no-eth,Medium,"Reentrancy in NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137):
	External calls:
	- _assetAddress = vault.assetAddress() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#111)
	- IERC1155Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#121-127)
	- IERC721Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#129-133)
	State variables written after the call(s):
	- mintRequests[msg.sender][tokenId] = amount (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#119)
	NFTXMintRequestEligibility.mintRequests (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#35) can be used in cross function reentrancies:
	- NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167)
	- NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186)
	- NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216)
	- NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137)
","uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",106-137
reentrancy-no-eth,Medium,"Reentrancy in ERC20FlashMintUpgradeable.flashLoan(IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#64-80):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,fee,data) == RETURN_VALUE,ERC20FlashMint: invalid return value) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#74)
	State variables written after the call(s):
	- _burn(address(receiver),amount + fee) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#78)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (contracts/solidity/token/ERC20Upgradeable.sol#329-332)
	ERC20Upgradeable._balances (contracts/solidity/token/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (contracts/solidity/token/ERC20Upgradeable.sol#324-335)
	- ERC20Upgradeable._mint(address,uint256) (contracts/solidity/token/ERC20Upgradeable.sol#303-311)
	- ERC20Upgradeable._transfer(address,address,uint256) (contracts/solidity/token/ERC20Upgradeable.sol#277-292)
	- ERC20Upgradeable.balanceOf(address) (contracts/solidity/token/ERC20Upgradeable.sol#119-127)
	- _burn(address(receiver),amount + fee) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#78)
		- _totalSupply = _totalSupply.sub(amount) (contracts/solidity/token/ERC20Upgradeable.sol#333)
	ERC20Upgradeable._totalSupply (contracts/solidity/token/ERC20Upgradeable.sol#45) can be used in cross function reentrancies:
	- ERC20Upgradeable._burn(address,uint256) (contracts/solidity/token/ERC20Upgradeable.sol#324-335)
	- ERC20Upgradeable._mint(address,uint256) (contracts/solidity/token/ERC20Upgradeable.sol#303-311)
	- ERC20Upgradeable.totalSupply() (contracts/solidity/token/ERC20Upgradeable.sol#112-114)
","IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol",64-80
uninitialized-local,Medium,"NFTXRangeEligibility._checkIfEligible(uint256).isElig (contracts/solidity/eligibility/NFTXRangeEligibility.sol#102) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"ERC721._transfer(address,address,uint256) (contracts/solidity/testing/ERC721.sol#484-506) ignores return value by _tokenOwners.set(tokenId,to) (contracts/solidity/testing/ERC721.sol#503)
","address,address,uint256) (contracts/solidity/testing/ERC721.sol",484-506
unused-return,Medium,"NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186) ignores return value by vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#184)
","uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",169-186
unused-return,Medium,"NFTXVaultUpgradeable.receiveNFTs(uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol#327-362) ignores return value by holdings.add(tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#358)
","uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol",327-362
unused-return,Medium,"ERC721._transfer(address,address,uint256) (contracts/solidity/testing/ERC721.sol#484-506) ignores return value by _holderTokens[from].remove(tokenId) (contracts/solidity/testing/ERC721.sol#500)
","address,address,uint256) (contracts/solidity/testing/ERC721.sol",484-506
unused-return,Medium,"NFTXVaultUpgradeable.receiveNFTs(uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol#327-362) ignores return value by holdings.add(tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#347)
","uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol",327-362
unused-return,Medium,"BeaconProxy._setBeacon(address,bytes) (contracts/solidity/proxy/BeaconProxy.sol#68-87) ignores return value by Address.functionDelegateCall(_implementation(),data,BeaconProxy: function call failed) (contracts/solidity/proxy/BeaconProxy.sol#85)
","address,bytes) (contracts/solidity/proxy/BeaconProxy.sol",68-87
unused-return,Medium,"NFTXFeeDistributor._sendForReceiver(INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol#153-172) ignores return value by IERC20Upgradeable(_vault).approve(_receiver.receiver,amountToSend) (contracts/solidity/NFTXFeeDistributor.sol#159)
","INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol",153-172
unused-return,Medium,"ERC721._burn(uint256) (contracts/solidity/testing/ERC721.sol#453-471) ignores return value by _tokenOwners.remove(tokenId) (contracts/solidity/testing/ERC721.sol#468)
",uint256) (contracts/solidity/testing/ERC721.sol,453-471
unused-return,Medium,"ERC721._mint(address,uint256) (contracts/solidity/testing/ERC721.sol#430-441) ignores return value by _holderTokens[to].add(tokenId) (contracts/solidity/testing/ERC721.sol#436)
","address,uint256) (contracts/solidity/testing/ERC721.sol",430-441
unused-return,Medium,"ERC721.tokenByIndex(uint256) (contracts/solidity/testing/ERC721.sol#206-214) ignores return value by (tokenId,None) = _tokenOwners.at(index) (contracts/solidity/testing/ERC721.sol#212)
",uint256) (contracts/solidity/testing/ERC721.sol,206-214
unused-return,Medium,"ERC721._mint(address,uint256) (contracts/solidity/testing/ERC721.sol#430-441) ignores return value by _tokenOwners.set(tokenId,to) (contracts/solidity/testing/ERC721.sol#438)
","address,uint256) (contracts/solidity/testing/ERC721.sol",430-441
unused-return,Medium,"NFTXVaultUpgradeable.withdrawNFTsTo(uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#364-402) ignores return value by holdings.remove(tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#398)
","uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",364-402
unused-return,Medium,"NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167) ignores return value by vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#161)
","uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",139-167
unused-return,Medium,"ERC721._burn(uint256) (contracts/solidity/testing/ERC721.sol#453-471) ignores return value by _holderTokens[owner].remove(tokenId) (contracts/solidity/testing/ERC721.sol#466)
",uint256) (contracts/solidity/testing/ERC721.sol,453-471
unused-return,Medium,"NFTXVaultUpgradeable.withdrawNFTsTo(uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#364-402) ignores return value by holdings.remove(tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#390)
","uint256,uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",364-402
unused-return,Medium,"ERC721._transfer(address,address,uint256) (contracts/solidity/testing/ERC721.sol#484-506) ignores return value by _holderTokens[to].add(tokenId) (contracts/solidity/testing/ERC721.sol#501)
","address,address,uint256) (contracts/solidity/testing/ERC721.sol",484-506
shadowing-local,Low,"NFTXUniqueEligibility.__NFTXEligibility_init(address,address,bool,bool,uint256[])._owner (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#60) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"RewardDistributionTokenUpgradeable.withdrawableRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#166) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXRangeEligibility.__NFTXEligibility_init_bytes(bytes)._owner (contracts/solidity/eligibility/NFTXRangeEligibility.sol#51) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXFeeDistributor.pauseFeeDistribution(bool).pause (contracts/solidity/NFTXFeeDistributor.sol#137) shadows:
	- PausableUpgradeable.pause(uint256) (contracts/solidity/util/PausableUpgradeable.sol#37-41) (function)
",uint256) (contracts/solidity/util/PausableUpgradeable.sol,37-41
shadowing-local,Low,"NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._name (contracts/solidity/NFTXVaultUpgradeable.sol#101) shadows:
	- ERC20Upgradeable._name (contracts/solidity/token/ERC20Upgradeable.sol#47) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXMintRequestEligibility.__NFTXEligibility_init(address,address,bool,uint256[])._owner (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#71) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string)._symbol (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46) shadows:
	- ERC20Upgradeable._symbol (contracts/solidity/token/ERC20Upgradeable.sol#48) (state variable)
",N/A,N/A
shadowing-local,Low,"RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string)._name (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46) shadows:
	- ERC20Upgradeable._name (contracts/solidity/token/ERC20Upgradeable.sol#47) (state variable)
",N/A,N/A
shadowing-local,Low,"ERC721.constructor(string,string).symbol (contracts/solidity/testing/ERC721.sol#99) shadows:
	- ERC721.symbol() (contracts/solidity/testing/ERC721.sol#142-144) (function)
	- IERC721Metadata.symbol() (contracts/solidity/testing/IERC721Metadata.sol#21) (function)
",) (contracts/solidity/testing/ERC721.sol,142-144
shadowing-local,Low,"RewardDistributionTokenUpgradeable.withdrawnRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#173) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXUniqueEligibility.__NFTXEligibility_init_bytes(bytes)._owner (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#54) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXRangeEligibility.__NFTXEligibility_init(address,bool,uint256,uint256)._owner (contracts/solidity/eligibility/NFTXRangeEligibility.sol#57) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"NFTXMintRequestEligibility.__NFTXEligibility_init_bytes(bytes)._owner (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#65) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"ERC721.constructor(string,string).name (contracts/solidity/testing/ERC721.sol#99) shadows:
	- ERC721.name() (contracts/solidity/testing/ERC721.sol#135-137) (function)
	- IERC721Metadata.name() (contracts/solidity/testing/IERC721Metadata.sol#16) (function)
",) (contracts/solidity/testing/ERC721.sol,135-137
shadowing-local,Low,"NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._symbol (contracts/solidity/NFTXVaultUpgradeable.sol#102) shadows:
	- ERC20Upgradeable._symbol (contracts/solidity/token/ERC20Upgradeable.sol#48) (state variable)
",N/A,N/A
shadowing-local,Low,"RewardDistributionTokenUpgradeable.dividendOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#159) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
shadowing-local,Low,"RewardDistributionTokenUpgradeable.accumulativeRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#183) shadows:
	- OwnableUpgradeable._owner (contracts/solidity/util/OwnableUpgradeable.sol#21) (state variable)
",N/A,N/A
events-maths,Low,"NFTXFeeDistributor.setDefaultTreasuryAlloc(uint256) (contracts/solidity/NFTXFeeDistributor.sol#117-119) should emit an event for: 
	- defaultTreasuryAlloc = _allocPoint (contracts/solidity/NFTXFeeDistributor.sol#118) 
",uint256) (contracts/solidity/NFTXFeeDistributor.sol,117-119
missing-zero-check,Low,"NFTXDeferEligibility.__NFTXEligibility_init(address,uint256)._deferAddress (contracts/solidity/eligibility/NFTXDeferEligibility.sol#41) lacks a zero-check on :
		- deferAddress = _deferAddress (contracts/solidity/eligibility/NFTXDeferEligibility.sol#44)
",N/A,N/A
missing-zero-check,Low,"NFTXFeeDistributor.__FeeDistributor__init__(address,address)._lpStaking (contracts/solidity/NFTXFeeDistributor.sol#35) lacks a zero-check on :
		- lpStaking = _lpStaking (contracts/solidity/NFTXFeeDistributor.sol#37)
",N/A,N/A
missing-zero-check,Low,"NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address)._prevContract (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33) lacks a zero-check on :
		- prevContract = _prevContract (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#37)
",N/A,N/A
missing-zero-check,Low,"NFTXVaultUpgradeable.setManager(address)._manager (contracts/solidity/NFTXVaultUpgradeable.sol#194) lacks a zero-check on :
		- manager = _manager (contracts/solidity/NFTXVaultUpgradeable.sol#196)
",N/A,N/A
missing-zero-check,Low,"NFTXUniqueEligibility.__NFTXEligibility_init(address,address,bool,bool,uint256[])._vault (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#61) lacks a zero-check on :
		- vault = _vault (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#68)
",N/A,N/A
missing-zero-check,Low,"NFTXFeeDistributor.__FeeDistributor__init__(address,address)._treasury (contracts/solidity/NFTXFeeDistributor.sol#35) lacks a zero-check on :
		- treasury = _treasury (contracts/solidity/NFTXFeeDistributor.sol#38)
",N/A,N/A
missing-zero-check,Low,"NFTXFeeDistributor.setTreasuryAddress(address)._treasury (contracts/solidity/NFTXFeeDistributor.sol#113) lacks a zero-check on :
		- treasury = _treasury (contracts/solidity/NFTXFeeDistributor.sol#114)
",N/A,N/A
missing-zero-check,Low,"NFTXFeeDistributor.setLPStakingAddress(address)._lpStaking (contracts/solidity/NFTXFeeDistributor.sol#125) lacks a zero-check on :
		- lpStaking = _lpStaking (contracts/solidity/NFTXFeeDistributor.sol#126)
",N/A,N/A
missing-zero-check,Low,"NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._assetAddress (contracts/solidity/NFTXVaultUpgradeable.sol#103) lacks a zero-check on :
		- assetAddress = _assetAddress (contracts/solidity/NFTXVaultUpgradeable.sol#111)
",N/A,N/A
missing-zero-check,Low,"NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address)._feeReceiver (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33) lacks a zero-check on :
		- feeReceiver = _feeReceiver (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#38)
",N/A,N/A
missing-zero-check,Low,"MockVault.constructor(address,bool)._assetAddress (contracts/solidity/testing/MockVault.sol#9) lacks a zero-check on :
		- assetAddress = _assetAddress (contracts/solidity/testing/MockVault.sol#10)
",N/A,N/A
missing-zero-check,Low,"StakingTokenProvider.__StakingTokenProvider_init(address,address,string)._uniLikeExchange (contracts/solidity/StakingTokenProvider.sol#23) lacks a zero-check on :
		- uniLikeExchange = _uniLikeExchange (contracts/solidity/StakingTokenProvider.sol#25)
",N/A,N/A
missing-zero-check,Low,"NFTXFeeDistributor.setNFTXVaultFactory(address)._factory (contracts/solidity/NFTXFeeDistributor.sol#129) lacks a zero-check on :
		- nftxVaultFactory = _factory (contracts/solidity/NFTXFeeDistributor.sol#130)
",N/A,N/A
missing-zero-check,Low,"StakingTokenProvider.setDefaultPairedToken(address,string)._newDefaultPaired (contracts/solidity/StakingTokenProvider.sol#36) lacks a zero-check on :
		- defaultPairedToken = _newDefaultPaired (contracts/solidity/StakingTokenProvider.sol#38)
",N/A,N/A
missing-zero-check,Low,"StakingTokenProvider.__StakingTokenProvider_init(address,address,string)._defaultPairedtoken (contracts/solidity/StakingTokenProvider.sol#23) lacks a zero-check on :
		- defaultPairedToken = _defaultPairedtoken (contracts/solidity/StakingTokenProvider.sol#26)
",N/A,N/A
missing-zero-check,Low,"NFTXListEligibility.__NFTXEligibility_init(address,bool,uint256[])._vault (contracts/solidity/eligibility/NFTXListEligibility.sol#36) lacks a zero-check on :
		- vault = _vault (contracts/solidity/eligibility/NFTXListEligibility.sol#41)
",N/A,N/A
calls-loop,Low,"NFTXDeferEligibility._checkIfEligible(uint256) (contracts/solidity/eligibility/NFTXDeferEligibility.sol#49-53) has external calls inside a loop: IPrevNftxContract(deferAddress).isEligible(deferVaultId,_tokenId) (contracts/solidity/eligibility/NFTXDeferEligibility.sol#52)
",uint256) (contracts/solidity/eligibility/NFTXDeferEligibility.sol,49-53
calls-loop,Low,"NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137) has external calls inside a loop: IERC721Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#129-133)
","uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",106-137
calls-loop,Low,"NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167) has external calls inside a loop: vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#161)
","uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",139-167
calls-loop,Low,"NFTXLPStaking.updatePoolForVault(uint256) (contracts/solidity/NFTXLPStaking.sol#81-92) has external calls inside a loop: _stakingToken = stakingTokenProvider.stakingTokenForVaultToken(pool.rewardToken) (contracts/solidity/NFTXLPStaking.sol#84)
",uint256) (contracts/solidity/NFTXLPStaking.sol,81-92
calls-loop,Low,"NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216) has external calls inside a loop: IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#201-207)
",uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol,188-216
calls-loop,Low,"NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137) has external calls inside a loop: IERC1155Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#121-127)
","uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",106-137
calls-loop,Low,"NFTXFeeDistributor._sendForReceiver(INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol#153-172) has external calls inside a loop: balance = IERC20Upgradeable(_vault).balanceOf(address(this)) - 1000 (contracts/solidity/NFTXFeeDistributor.sol#156)
","INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol",153-172
calls-loop,Low,"NFTXFeeDistributor._sendForReceiver(INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol#153-172) has external calls inside a loop: IERC20Upgradeable(_vault).approve(_receiver.receiver,amountToSend) (contracts/solidity/NFTXFeeDistributor.sol#159)
","INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol",153-172
calls-loop,Low,"NFTXLPStaking._deployDividendToken(NFTXLPStaking.StakingPool) (contracts/solidity/NFTXLPStaking.sol#174-180) has external calls inside a loop: name = stakingTokenProvider.nameForStakingToken(pool.rewardToken) (contracts/solidity/NFTXLPStaking.sol#177)
",NFTXLPStaking.StakingPool) (contracts/solidity/NFTXLPStaking.sol,174-180
calls-loop,Low,"Address.functionCallWithValue(address,bytes,uint256,string) (contracts/solidity/util/Address.sol#114-121) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (contracts/solidity/util/Address.sol#119)
","address,bytes,uint256,string) (contracts/solidity/util/Address.sol",114-121
calls-loop,Low,"NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216) has external calls inside a loop: IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#209-213)
",uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol,188-216
calls-loop,Low,"NFTXMintRequestEligibility.claimUnminted(uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#169-186) has external calls inside a loop: vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#184)
","uint256[],address[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",169-186
calls-loop,Low,"NFTXFeeDistributor._sendForReceiver(INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol#153-172) has external calls inside a loop: (success,returnData) = address(_receiver.receiver).call(payload) (contracts/solidity/NFTXFeeDistributor.sol#163)
","INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol",153-172
calls-loop,Low,"NFTXLPStaking._deployDividendToken(NFTXLPStaking.StakingPool) (contracts/solidity/NFTXLPStaking.sol#174-180) has external calls inside a loop: RewardDistributionTokenUpgradeable(rewardDistToken).__RewardDistributionToken_init(IERC20Upgradeable(pool.rewardToken),name,name) (contracts/solidity/NFTXLPStaking.sol#178)
",NFTXLPStaking.StakingPool) (contracts/solidity/NFTXLPStaking.sol,174-180
reentrancy-benign,Low,"Reentrancy in NFTXVaultUpgradeable.receiveNFTs(uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol#327-362):
	External calls:
	- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
	State variables written after the call(s):
	- quantity1155[tokenId] = quantity1155[tokenId].add(amount) (contracts/solidity/NFTXVaultUpgradeable.sol#349)
","uint256[],uint256[]) (contracts/solidity/NFTXVaultUpgradeable.sol",327-362
reentrancy-benign,Low,"Reentrancy in NFTXVaultUpgradeable.swapTo(uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#267-289):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#279)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	State variables written after the call(s):
	- _burnFrom(msg.sender,fee) (contracts/solidity/NFTXVaultUpgradeable.sol#284)
		- _allowances[owner][spender] = amount (contracts/solidity/token/ERC20Upgradeable.sol#357)
	- _burnFrom(msg.sender,fee) (contracts/solidity/NFTXVaultUpgradeable.sol#284)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (contracts/solidity/token/ERC20Upgradeable.sol#329-332)
	- _burnFrom(msg.sender,fee) (contracts/solidity/NFTXVaultUpgradeable.sol#284)
		- _totalSupply = _totalSupply.sub(amount) (contracts/solidity/token/ERC20Upgradeable.sol#333)
","uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",267-289
reentrancy-benign,Low,"Reentrancy in NFTXVaultUpgradeable.mintTo(uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#207-223):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#215)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	State variables written after the call(s):
	- _mint(to,base.mul(count).sub(fee)) (contracts/solidity/NFTXVaultUpgradeable.sol#218)
		- _balances[account] = _balances[account].add(amount) (contracts/solidity/token/ERC20Upgradeable.sol#309)
	- _mint(to,base.mul(count).sub(fee)) (contracts/solidity/NFTXVaultUpgradeable.sol#218)
		- _totalSupply = _totalSupply.add(amount) (contracts/solidity/token/ERC20Upgradeable.sol#308)
","uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",207-223
reentrancy-benign,Low,"Reentrancy in NFTXMintRequestEligibility.reclaimRequestedMint(uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#188-216):
	External calls:
	- _assetAddress = vault.assetAddress() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#192)
	- IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#201-207)
	- IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),msg.sender,tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#209-213)
	State variables written after the call(s):
	- approvedMints[msg.sender][tokenId] = false (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#199)
",uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol,188-216
reentrancy-benign,Low,"Reentrancy in ERC20FlashMintUpgradeable.flashLoan(IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#64-80):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,fee,data) == RETURN_VALUE,ERC20FlashMint: invalid return value) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#74)
	State variables written after the call(s):
	- _approve(address(receiver),address(this),currentAllowance - amount - fee) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#77)
		- _allowances[owner][spender] = amount (contracts/solidity/token/ERC20Upgradeable.sol#357)
","IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol",64-80
reentrancy-benign,Low,"Reentrancy in NFTXVaultFactoryUpgradeable.createVault(string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#41-60):
	External calls:
	- vaultAddr = deployVault(name,symbol,_assetAddress,is1155,allowAllItems) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#51)
		- newBeaconProxy = address(new BeaconProxy(address(this),)) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#75)
		- NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(name,symbol,_assetAddress,is1155,allowAllItems) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#76)
		- NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#78)
		- NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner()) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#80)
	State variables written after the call(s):
	- allVaults.push(vaultAddr) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#55)
	- numVaults += 1 (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#56)
	- vault[_vaultId] = vaultAddr (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#53)
	- vaultsForAsset[_assetAddress].push(vaultAddr) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#54)
","string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol",41-60
reentrancy-benign,Low,"Reentrancy in NFTXLPStaking.__NFTXLPStaking__init(address) (contracts/solidity/NFTXLPStaking.sol#35-40):
	External calls:
	- rewardDistTokenImpl.__RewardDistributionToken_init(IERC20Upgradeable(address(0)),,) (contracts/solidity/NFTXLPStaking.sol#38)
	State variables written after the call(s):
	- stakingTokenProvider = StakingTokenProvider(_stakingTokenProvider) (contracts/solidity/NFTXLPStaking.sol#39)
",address) (contracts/solidity/NFTXLPStaking.sol,35-40
reentrancy-benign,Low,"Reentrancy in NFTXMintRequestEligibility.approveMintRequests(uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#139-167):
	External calls:
	- vault.mintTo(_tokenIds,_amounts,addresses[i]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#161)
	State variables written after the call(s):
	- approvedMints[addresses[i]][tokenId] = false (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#155)
	- approvedMints[addresses[i]][tokenId] = true (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#163)
","uint256[],address[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",139-167
reentrancy-benign,Low,"Reentrancy in NFTXVaultUpgradeable.deployEligibilityStorage(uint256,bytes) (contracts/solidity/NFTXVaultUpgradeable.sol#163-177):
	External calls:
	- _eligibility = eligManager.deployEligibility(moduleIndex,initData) (contracts/solidity/NFTXVaultUpgradeable.sol#171-174)
	State variables written after the call(s):
	- setEligibilityStorage(_eligibility) (contracts/solidity/NFTXVaultUpgradeable.sol#175)
		- allowAllItems = false (contracts/solidity/NFTXVaultUpgradeable.sol#189)
	- setEligibilityStorage(_eligibility) (contracts/solidity/NFTXVaultUpgradeable.sol#175)
		- eligibilityStorage = INFTXEligibility(_newEligibility) (contracts/solidity/NFTXVaultUpgradeable.sol#187)
","uint256,bytes) (contracts/solidity/NFTXVaultUpgradeable.sol",163-177
reentrancy-events,Low,"Reentrancy in NFTXVaultUpgradeable.deployEligibilityStorage(uint256,bytes) (contracts/solidity/NFTXVaultUpgradeable.sol#163-177):
	External calls:
	- _eligibility = eligManager.deployEligibility(moduleIndex,initData) (contracts/solidity/NFTXVaultUpgradeable.sol#171-174)
	Event emitted after the call(s):
	- EligibilityDeployed(address(_newEligibility)) (contracts/solidity/NFTXVaultUpgradeable.sol#190)
		- setEligibilityStorage(_eligibility) (contracts/solidity/NFTXVaultUpgradeable.sol#175)
","uint256,bytes) (contracts/solidity/NFTXVaultUpgradeable.sol",163-177
reentrancy-events,Low,"Reentrancy in NFTXMintRequestEligibility.requestMint(uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#106-137):
	External calls:
	- _assetAddress = vault.assetAddress() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#111)
	- IERC1155Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId,amount,) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#121-127)
	- IERC721Upgradeable(_assetAddress).safeTransferFrom(msg.sender,address(this),tokenId) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#129-133)
	Event emitted after the call(s):
	- Request(msg.sender,tokenIds,amounts) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#136)
","uint256[],uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",106-137
reentrancy-events,Low,"Reentrancy in NFTXVaultUpgradeable.swapTo(uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#267-289):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#279)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	- _distributeFees(fee) (contracts/solidity/NFTXVaultUpgradeable.sol#285)
		- INFTXFeeDistributor(feeReceiver).distribute(vaultId) (contracts/solidity/NFTXVaultUpgradeable.sol#409)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (contracts/solidity/token/ERC20Upgradeable.sol#310)
		- _distributeFees(fee) (contracts/solidity/NFTXVaultUpgradeable.sol#285)
","uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",267-289
reentrancy-events,Low,"Reentrancy in NFTXLPStaking.updatePoolForVault(uint256) (contracts/solidity/NFTXLPStaking.sol#81-92):
	External calls:
	- newRewardDistToken = _deployDividendToken(newPool) (contracts/solidity/NFTXLPStaking.sol#90)
		- RewardDistributionTokenUpgradeable(rewardDistToken).__RewardDistributionToken_init(IERC20Upgradeable(pool.rewardToken),name,name) (contracts/solidity/NFTXLPStaking.sol#178)
	Event emitted after the call(s):
	- PoolUpdated(vaultId,newRewardDistToken) (contracts/solidity/NFTXLPStaking.sol#91)
",uint256) (contracts/solidity/NFTXLPStaking.sol,81-92
reentrancy-events,Low,"Reentrancy in NFTXMintRequestEligibility.__NFTXEligibility_init(address,address,bool,uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#70-90):
	External calls:
	- is1155 = INFTXVault(vaultAddress).is1155() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#83)
	- _assetAddress = INFTXVault(vaultAddress).assetAddress() (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#84)
	- IERC1155Upgradeable(_assetAddress).setApprovalForAll(address(vault),true) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#85-88)
	Event emitted after the call(s):
	- NFTXEligibilityInit(_owner,tokenIds) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#89)
","address,address,bool,uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",70-90
reentrancy-events,Low,"Reentrancy in NFTXVaultFactoryUpgradeable.createVault(string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#41-60):
	External calls:
	- vaultAddr = deployVault(name,symbol,_assetAddress,is1155,allowAllItems) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#51)
		- newBeaconProxy = address(new BeaconProxy(address(this),)) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#75)
		- NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(name,symbol,_assetAddress,is1155,allowAllItems) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#76)
		- NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#78)
		- NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner()) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#80)
	- INFTXFeeDistributor(feeReceiver).initializeVaultReceivers(_vaultId) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#57)
	Event emitted after the call(s):
	- NewVault(_vaultId,vaultAddr,_assetAddress) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#58)
","string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol",41-60
reentrancy-events,Low,"Reentrancy in NFTXLPStaking.receiveRewards(uint256,uint256) (contracts/solidity/NFTXLPStaking.sol#94-111):
	External calls:
	- IERC20Upgradeable(pool.rewardToken).transferFrom(msg.sender,address(rewardDistToken),amount) (contracts/solidity/NFTXLPStaking.sol#107)
	- rewardDistToken.distributeRewards(amount) (contracts/solidity/NFTXLPStaking.sol#108)
	Event emitted after the call(s):
	- FeesReceived(vaultId,amount) (contracts/solidity/NFTXLPStaking.sol#109)
","uint256,uint256) (contracts/solidity/NFTXLPStaking.sol",94-111
reentrancy-events,Low,"Reentrancy in ERC20FlashMintUpgradeable.flashLoan(IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#64-80):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,fee,data) == RETURN_VALUE,ERC20FlashMint: invalid return value) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#74)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (contracts/solidity/token/ERC20Upgradeable.sol#358)
		- _approve(address(receiver),address(this),currentAllowance - amount - fee) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#77)
	- Transfer(account,address(0),amount) (contracts/solidity/token/ERC20Upgradeable.sol#334)
		- _burn(address(receiver),amount + fee) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#78)
","IERC3156FlashBorrowerUpgradeable,address,uint256,bytes) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol",64-80
reentrancy-events,Low,"Reentrancy in NFTXVaultUpgradeable.swapTo(uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#267-289):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#279)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (contracts/solidity/token/ERC20Upgradeable.sol#358)
		- _burnFrom(msg.sender,fee) (contracts/solidity/NFTXVaultUpgradeable.sol#284)
	- Transfer(account,address(0),amount) (contracts/solidity/token/ERC20Upgradeable.sol#334)
		- _burnFrom(msg.sender,fee) (contracts/solidity/NFTXVaultUpgradeable.sol#284)
","uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",267-289
reentrancy-events,Low,"Reentrancy in NFTXVaultUpgradeable.swapTo(uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol#267-289):
	External calls:
	- count = receiveNFTs(tokenIds,amounts) (contracts/solidity/NFTXVaultUpgradeable.sol#279)
		- IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender,address(this),tokenIds,amounts,) (contracts/solidity/NFTXVaultUpgradeable.sol#334-340)
		- erc721.safeTransferFrom(msg.sender,address(this),tokenId_scope_1) (contracts/solidity/NFTXVaultUpgradeable.sol#357)
	- _distributeFees(fee) (contracts/solidity/NFTXVaultUpgradeable.sol#285)
		- INFTXFeeDistributor(feeReceiver).distribute(vaultId) (contracts/solidity/NFTXVaultUpgradeable.sol#409)
	- ids = withdrawNFTsTo(count,specificIds,to) (contracts/solidity/NFTXVaultUpgradeable.sol#286)
		- IERC1155Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId,1,) (contracts/solidity/NFTXVaultUpgradeable.sol#380-386)
		- IERC721Upgradeable(_assetAddress).safeTransferFrom(address(this),to,tokenId) (contracts/solidity/NFTXVaultUpgradeable.sol#393-397)
	Event emitted after the call(s):
	- Swapped(tokenIds,amounts,specificIds,to) (contracts/solidity/NFTXVaultUpgradeable.sol#287)
","uint256[],uint256[],uint256[],address) (contracts/solidity/NFTXVaultUpgradeable.sol",267-289
reentrancy-events,Low,"Reentrancy in NFTXLPStaking.addPoolForVault(uint256) (contracts/solidity/NFTXLPStaking.sol#63-71):
	External calls:
	- newRewardDistToken = _deployDividendToken(pool) (contracts/solidity/NFTXLPStaking.sol#69)
		- RewardDistributionTokenUpgradeable(rewardDistToken).__RewardDistributionToken_init(IERC20Upgradeable(pool.rewardToken),name,name) (contracts/solidity/NFTXLPStaking.sol#178)
	Event emitted after the call(s):
	- PoolCreated(vaultId,newRewardDistToken) (contracts/solidity/NFTXLPStaking.sol#70)
",uint256) (contracts/solidity/NFTXLPStaking.sol,63-71
assembly,Informational,"ClonesUpgradeable.cloneDeterministic(address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol#43-53) uses assembly
	- INLINE ASM (contracts/solidity/proxy/ClonesUpgradeable.sol#45-51)
","address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol",43-53
assembly,Informational,"Address._functionCallWithValue(address,bytes,uint256,string) (contracts/solidity/testing/Address.sol#152-180) uses assembly
	- INLINE ASM (contracts/solidity/testing/Address.sol#172-175)
","address,bytes,uint256,string) (contracts/solidity/testing/Address.sol",152-180
assembly,Informational,"console._sendLogPayloadImplementation(bytes) (node_modules/hardhat/console.sol#8-23) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#11-22)
",bytes) (node_modules/hardhat/console.sol,8-23
assembly,Informational,"ClonesUpgradeable.predictDeterministicAddress(address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol#58-70) uses assembly
	- INLINE ASM (contracts/solidity/proxy/ClonesUpgradeable.sol#60-69)
","address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol",58-70
assembly,Informational,"console._castToPure(function(bytes)) (node_modules/hardhat/console.sol#25-31) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#28-30)
",function(bytes)) (node_modules/hardhat/console.sol,25-31
assembly,Informational,"ClonesUpgradeable.clone(address) (contracts/solidity/proxy/ClonesUpgradeable.sol#24-34) uses assembly
	- INLINE ASM (contracts/solidity/proxy/ClonesUpgradeable.sol#26-32)
",address) (contracts/solidity/proxy/ClonesUpgradeable.sol,24-34
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (contracts/solidity/util/Address.sol#171-188) uses assembly
	- INLINE ASM (contracts/solidity/util/Address.sol#180-183)
","bool,bytes,string) (contracts/solidity/util/Address.sol",171-188
assembly,Informational,"BeaconProxy._beacon() (contracts/solidity/proxy/BeaconProxy.sol#43-49) uses assembly
	- INLINE ASM (contracts/solidity/proxy/BeaconProxy.sol#46-48)
",) (contracts/solidity/proxy/BeaconProxy.sol,43-49
assembly,Informational,"Address.isContract(address) (contracts/solidity/testing/Address.sol#26-37) uses assembly
	- INLINE ASM (contracts/solidity/testing/Address.sol#33-35)
",address) (contracts/solidity/testing/Address.sol,26-37
assembly,Informational,"Create2.deploy(uint256,bytes32,bytes) (contracts/solidity/util/Create2.sol#29-39) uses assembly
	- INLINE ASM (contracts/solidity/util/Create2.sol#34-36)
","uint256,bytes32,bytes) (contracts/solidity/util/Create2.sol",29-39
assembly,Informational,"Address.isContract(address) (contracts/solidity/util/Address.sol#26-35) uses assembly
	- INLINE ASM (contracts/solidity/util/Address.sol#33)
",address) (contracts/solidity/util/Address.sol,26-35
assembly,Informational,"Initializable.isConstructor() (contracts/solidity/proxy/Initializable.sol#51-63) uses assembly
	- INLINE ASM (contracts/solidity/proxy/Initializable.sol#59-61)
",) (contracts/solidity/proxy/Initializable.sol,51-63
assembly,Informational,"BeaconProxy._setBeacon(address,bytes) (contracts/solidity/proxy/BeaconProxy.sol#68-87) uses assembly
	- INLINE ASM (contracts/solidity/proxy/BeaconProxy.sol#80-82)
","address,bytes) (contracts/solidity/proxy/BeaconProxy.sol",68-87
assembly,Informational,"Proxy._delegate(address) (contracts/solidity/proxy/Proxy.sol#21-41) uses assembly
	- INLINE ASM (contracts/solidity/proxy/Proxy.sol#23-40)
",address) (contracts/solidity/proxy/Proxy.sol,21-41
pragma,Informational,"8 different versions of Solidity are used:
	- Version constraint 0.6.8 is used by:
		-0.6.8 (contracts/solidity/NFTXEligiblityManager.sol#1)
		-0.6.8 (contracts/solidity/NFTXLPStaking.sol#3)
		-0.6.8 (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#3)
		-0.6.8 (contracts/solidity/NFTXVaultUpgradeable.sol#3)
		-0.6.8 (contracts/solidity/StakingTokenProvider.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXDeferEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXDenyEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXListEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXRangeEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#3)
		-0.6.8 (contracts/solidity/eligibility/UniqueEligibility.sol#1)
		-0.6.8 (contracts/solidity/interface/IERC3156Upgradeable.sol#3)
		-0.6.8 (contracts/solidity/interface/INFTXEligibility.sol#1)
		-0.6.8 (contracts/solidity/interface/INFTXEligibilityManager.sol#1)
		-0.6.8 (contracts/solidity/interface/INFTXLPStaking.sol#3)
		-0.6.8 (contracts/solidity/interface/INFTXVault.sol#3)
		-0.6.8 (contracts/solidity/interface/INFTXVaultFactory.sol#3)
		-0.6.8 (contracts/solidity/interface/IPrevNftxContract.sol#3)
		-0.6.8 (contracts/solidity/interface/IRewardDistributionToken.sol#3)
		-0.6.8 (contracts/solidity/interface/IVaultTokenUpgradeable.sol#3)
		-0.6.8 (contracts/solidity/proxy/BeaconProxy.sol#3)
		-0.6.8 (contracts/solidity/proxy/IBeacon.sol#3)
		-0.6.8 (contracts/solidity/proxy/Proxy.sol#3)
		-0.6.8 (contracts/solidity/proxy/UpgradeableBeacon.sol#3)
		-0.6.8 (contracts/solidity/testing/Address.sol#3)
		-0.6.8 (contracts/solidity/testing/Context.sol#3)
		-0.6.8 (contracts/solidity/testing/EnumerableSet.sol#3)
		-0.6.8 (contracts/solidity/testing/MockStakingProvider.sol#3)
		-0.6.8 (contracts/solidity/testing/MockVault.sol#1)
		-0.6.8 (contracts/solidity/testing/SafeMath.sol#3)
		-0.6.8 (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#3)
		-0.6.8 (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#2)
		-0.6.8 (contracts/solidity/util/Address.sol#3)
		-0.6.8 (contracts/solidity/util/Create2.sol#3)
		-0.6.8 (contracts/solidity/util/PausableUpgradeable.sol#3)
		-0.6.8 (contracts/solidity/util/SafeMathInt.sol#3)
	- Version constraint ^0.6.8 is used by:
		-^0.6.8 (contracts/solidity/NFTXFeeDistributor.sol#3)
		-^0.6.8 (contracts/solidity/interface/INFTXFeeDistributor.sol#3)
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (contracts/solidity/interface/IERC165Upgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/proxy/ClonesUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/testing/ERC1155.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/testing/ERC1155Receiver.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/testing/IERC1155Receiver.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/token/ERC20BurnableUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/token/ERC20Upgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/token/IERC1155ReceiverUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/token/IERC20Upgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/token/IERC721ReceiverUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/ContextUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/EnumerableMapUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/EnumerableSetUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/OwnableUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/SafeERC20Upgradeable.sol#3)
		->=0.6.0<0.8.0 (contracts/solidity/util/SafeMathUpgradeable.sol#3)
	- Version constraint ^0.6.0 is used by:
		-^0.6.0 (contracts/solidity/proxy/ITransparentUpgradeableProxy.sol#3)
		-^0.6.0 (contracts/solidity/testing/ERC165.sol#3)
		-^0.6.0 (contracts/solidity/testing/ERC721.sol#3)
		-^0.6.0 (contracts/solidity/testing/EnumerableMap.sol#3)
		-^0.6.0 (contracts/solidity/testing/IERC165.sol#3)
		-^0.6.0 (contracts/solidity/testing/IERC721Receiver.sol#3)
		-^0.6.0 (contracts/solidity/testing/Strings.sol#3)
		-^0.6.0 (contracts/solidity/token/ERC1155HolderUpgradeable.sol#3)
		-^0.6.0 (contracts/solidity/token/ERC721HolderUpgradeable.sol#3)
	- Version constraint >=0.4.24<0.7.0 is used by:
		->=0.4.24<0.7.0 (contracts/solidity/proxy/Initializable.sol#3)
	- Version constraint >=0.6.2<0.8.0 is used by:
		->=0.6.2<0.8.0 (contracts/solidity/testing/IERC1155.sol#3)
		->=0.6.2<0.8.0 (contracts/solidity/testing/IERC1155MetadataURI.sol#3)
		->=0.6.2<0.8.0 (contracts/solidity/token/IERC1155Upgradeable.sol#3)
		->=0.6.2<0.8.0 (contracts/solidity/token/IERC721Upgradeable.sol#3)
	- Version constraint ^0.6.2 is used by:
		-^0.6.2 (contracts/solidity/testing/IERC721.sol#3)
		-^0.6.2 (contracts/solidity/testing/IERC721Enumerable.sol#3)
		-^0.6.2 (contracts/solidity/testing/IERC721Metadata.sol#3)
	- Version constraint >=0.4.22<0.9.0 is used by:
		->=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
dead-code,Informational,"ContextUpgradeable._msgData() (contracts/solidity/util/ContextUpgradeable.sol#27-30) is never used and should be removed
",) (contracts/solidity/util/ContextUpgradeable.sol,27-30
dead-code,Informational,"ERC1155._burn(address,uint256,uint256) (contracts/solidity/testing/ERC1155.sol#298-311) is never used and should be removed
","address,uint256,uint256) (contracts/solidity/testing/ERC1155.sol",298-311
dead-code,Informational,"NFTXUniqueEligibility._checkIfEligible(uint256) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#116-124) is never used and should be removed
",uint256) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol,116-124
dead-code,Informational,"ERC721._burn(uint256) (contracts/solidity/testing/ERC721.sol#453-471) is never used and should be removed
",uint256) (contracts/solidity/testing/ERC721.sol,453-471
dead-code,Informational,"ERC721._setTokenURI(uint256,string) (contracts/solidity/testing/ERC721.sol#515-524) is never used and should be removed
","uint256,string) (contracts/solidity/testing/ERC721.sol",515-524
dead-code,Informational,"ERC721._setBaseURI(string) (contracts/solidity/testing/ERC721.sol#531-533) is never used and should be removed
",string) (contracts/solidity/testing/ERC721.sol,531-533
dead-code,Informational,"ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#39-41) is never used and should be removed
",) (contracts/solidity/util/ReentrancyGuardUpgradeable.sol,39-41
dead-code,Informational,"ERC20BurnableUpgradeable.__ERC20Burnable_init() (contracts/solidity/token/ERC20BurnableUpgradeable.sol#15-18) is never used and should be removed
",) (contracts/solidity/token/ERC20BurnableUpgradeable.sol,15-18
dead-code,Informational,"Context._msgData() (contracts/solidity/testing/Context.sol#20-23) is never used and should be removed
",) (contracts/solidity/testing/Context.sol,20-23
dead-code,Informational,"ERC1155._burnBatch(address,uint256[],uint256[]) (contracts/solidity/testing/ERC1155.sol#320-336) is never used and should be removed
","address,uint256[],uint256[]) (contracts/solidity/testing/ERC1155.sol",320-336
dead-code,Informational,"ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#43-45) is never used and should be removed
",) (contracts/solidity/util/ReentrancyGuardUpgradeable.sol,43-45
dead-code,Informational,"ERC721._safeMint(address,uint256) (contracts/solidity/testing/ERC721.sol#393-395) is never used and should be removed
","address,uint256) (contracts/solidity/testing/ERC721.sol",393-395
dead-code,Informational,"ContextUpgradeable.__Context_init() (contracts/solidity/util/ContextUpgradeable.sol#17-19) is never used and should be removed
",) (contracts/solidity/util/ContextUpgradeable.sol,17-19
solc-version,Informational,"Version constraint >=0.4.24<0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor_0.4.x
	- IncorrectEventSignatureInLibraries_0.4.x
	- ABIEncoderV2PackedStorage_0.4.x
	- ExpExponentCleanup
	- EventStructWrongData.
It is used by:
	- >=0.4.24<0.7.0 (contracts/solidity/proxy/Initializable.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.8 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.6.8 (contracts/solidity/NFTXFeeDistributor.sol#3)
	- ^0.6.8 (contracts/solidity/interface/INFTXFeeDistributor.sol#3)
",N/A,N/A
solc-version,Informational,"solc-0.6.8 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- ^0.6.0 (contracts/solidity/proxy/ITransparentUpgradeableProxy.sol#3)
	- ^0.6.0 (contracts/solidity/testing/ERC165.sol#3)
	- ^0.6.0 (contracts/solidity/testing/ERC721.sol#3)
	- ^0.6.0 (contracts/solidity/testing/EnumerableMap.sol#3)
	- ^0.6.0 (contracts/solidity/testing/IERC165.sol#3)
	- ^0.6.0 (contracts/solidity/testing/IERC721Receiver.sol#3)
	- ^0.6.0 (contracts/solidity/testing/Strings.sol#3)
	- ^0.6.0 (contracts/solidity/token/ERC1155HolderUpgradeable.sol#3)
	- ^0.6.0 (contracts/solidity/token/ERC721HolderUpgradeable.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (contracts/solidity/interface/IERC165Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/proxy/ClonesUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/testing/ERC1155.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/testing/ERC1155Receiver.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/testing/IERC1155Receiver.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/token/ERC20BurnableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/token/ERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/token/IERC1155ReceiverUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/token/IERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/token/IERC721ReceiverUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/ContextUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/EnumerableMapUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/EnumerableSetUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/OwnableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/SafeERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (contracts/solidity/util/SafeMathUpgradeable.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.6.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow.
It is used by:
	- ^0.6.2 (contracts/solidity/testing/IERC721.sol#3)
	- ^0.6.2 (contracts/solidity/testing/IERC721Enumerable.sol#3)
	- ^0.6.2 (contracts/solidity/testing/IERC721Metadata.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.2<0.8.0 is too complex.
It is used by:
	- >=0.6.2<0.8.0 (contracts/solidity/testing/IERC1155.sol#3)
	- >=0.6.2<0.8.0 (contracts/solidity/testing/IERC1155MetadataURI.sol#3)
	- >=0.6.2<0.8.0 (contracts/solidity/token/IERC1155Upgradeable.sol#3)
	- >=0.6.2<0.8.0 (contracts/solidity/token/IERC721Upgradeable.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint 0.6.8 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- 0.6.8 (contracts/solidity/NFTXEligiblityManager.sol#1)
	- 0.6.8 (contracts/solidity/NFTXLPStaking.sol#3)
	- 0.6.8 (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#3)
	- 0.6.8 (contracts/solidity/NFTXVaultUpgradeable.sol#3)
	- 0.6.8 (contracts/solidity/StakingTokenProvider.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXDeferEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXDenyEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXListEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXRangeEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#3)
	- 0.6.8 (contracts/solidity/eligibility/UniqueEligibility.sol#1)
	- 0.6.8 (contracts/solidity/interface/IERC3156Upgradeable.sol#3)
	- 0.6.8 (contracts/solidity/interface/INFTXEligibility.sol#1)
	- 0.6.8 (contracts/solidity/interface/INFTXEligibilityManager.sol#1)
	- 0.6.8 (contracts/solidity/interface/INFTXLPStaking.sol#3)
	- 0.6.8 (contracts/solidity/interface/INFTXVault.sol#3)
	- 0.6.8 (contracts/solidity/interface/INFTXVaultFactory.sol#3)
	- 0.6.8 (contracts/solidity/interface/IPrevNftxContract.sol#3)
	- 0.6.8 (contracts/solidity/interface/IRewardDistributionToken.sol#3)
	- 0.6.8 (contracts/solidity/interface/IVaultTokenUpgradeable.sol#3)
	- 0.6.8 (contracts/solidity/proxy/BeaconProxy.sol#3)
	- 0.6.8 (contracts/solidity/proxy/IBeacon.sol#3)
	- 0.6.8 (contracts/solidity/proxy/Proxy.sol#3)
	- 0.6.8 (contracts/solidity/proxy/UpgradeableBeacon.sol#3)
	- 0.6.8 (contracts/solidity/testing/Address.sol#3)
	- 0.6.8 (contracts/solidity/testing/Context.sol#3)
	- 0.6.8 (contracts/solidity/testing/EnumerableSet.sol#3)
	- 0.6.8 (contracts/solidity/testing/MockStakingProvider.sol#3)
	- 0.6.8 (contracts/solidity/testing/MockVault.sol#1)
	- 0.6.8 (contracts/solidity/testing/SafeMath.sol#3)
	- 0.6.8 (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#3)
	- 0.6.8 (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#2)
	- 0.6.8 (contracts/solidity/util/Address.sol#3)
	- 0.6.8 (contracts/solidity/util/Create2.sol#3)
	- 0.6.8 (contracts/solidity/util/PausableUpgradeable.sol#3)
	- 0.6.8 (contracts/solidity/util/SafeMathInt.sol#3)
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (contracts/solidity/testing/Address.sol#55-67):
	- (success,None) = recipient.call{value: amount}() (contracts/solidity/testing/Address.sol#62)
","address,uint256) (contracts/solidity/testing/Address.sol",55-67
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (contracts/solidity/util/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (contracts/solidity/util/Address.sol#57)
","address,uint256) (contracts/solidity/util/Address.sol",53-59
low-level-calls,Informational,"Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (contracts/solidity/testing/Address.sol#152-180):
	- (success,returndata) = target.call{value: weiValue}(data) (contracts/solidity/testing/Address.sol#161-163)
","address,bytes,uint256,string) (contracts/solidity/testing/Address.sol",152-180
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (contracts/solidity/util/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (contracts/solidity/util/Address.sol#167)
","address,bytes,string) (contracts/solidity/util/Address.sol",163-169
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (contracts/solidity/util/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (contracts/solidity/util/Address.sol#119)
","address,bytes,uint256,string) (contracts/solidity/util/Address.sol",114-121
low-level-calls,Informational,"Low level call in NFTXFeeDistributor._sendForReceiver(INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol#153-172):
	- (success,returnData) = address(_receiver.receiver).call(payload) (contracts/solidity/NFTXFeeDistributor.sol#163)
","INFTXFeeDistributor.FeeReceiver,uint256,address,uint256,uint256) (contracts/solidity/NFTXFeeDistributor.sol",153-172
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (contracts/solidity/util/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (contracts/solidity/util/Address.sol#143)
","address,bytes,string) (contracts/solidity/util/Address.sol",139-145
missing-inheritance,Informational,"RewardDistributionTokenUpgradeable (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#18-241) should inherit from IRewardDistributionToken (contracts/solidity/interface/IRewardDistributionToken.sol#5-8)
",contracts/solidity/token/RewardDistributionTokenUpgradeable.sol,18-241
missing-inheritance,Informational,"RewardDistributionTokenUpgradeable (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#18-241) should inherit from IVaultTokenUpgradeable (contracts/solidity/interface/IVaultTokenUpgradeable.sol#7-11)
",contracts/solidity/token/RewardDistributionTokenUpgradeable.sol,18-241
naming-convention,Informational,"Parameter NFTXMintRequestEligibility.setEligibilityPreferences(bool)._allowTrustedApprovals (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAlloc(uint256,uint256,uint256)._vaultId (contracts/solidity/NFTXFeeDistributor.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setManager(address)._manager (contracts/solidity/NFTXVaultUpgradeable.sol#194) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string)._symbol (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.initializeVaultReceivers(uint256)._vaultId (contracts/solidity/NFTXFeeDistributor.sol#83) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.rescueTokens(uint256)._address (contracts/solidity/NFTXFeeDistributor.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant NFTXVaultUpgradeable.base (contracts/solidity/NFTXVaultUpgradeable.sol#36) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Variable NFTXVaultUpgradeable.___gap (contracts/solidity/NFTXVaultUpgradeable.sol#438) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.setDefaultPairedToken(address,string)._newDefaultPaired (contracts/solidity/StakingTokenProvider.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.setDefaultLPAlloc(uint256)._allocPoint (contracts/solidity/NFTXFeeDistributor.sol#133) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAddress(uint256,uint256,address,bool)._isContract (contracts/solidity/NFTXFeeDistributor.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.addReceiver(uint256,uint256,address,bool)._receiver (contracts/solidity/NFTXFeeDistributor.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.__FeeDistributor__init__(address,address)._treasury (contracts/solidity/NFTXFeeDistributor.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAddress(uint256,uint256,address,bool)._address (contracts/solidity/NFTXFeeDistributor.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string) (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46-51) is not in mixedCase
","IERC20Upgradeable,string,string) (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol",46-51
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.deployVault(string,string,address,bool,bool)._assetAddress (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#71) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXRangeEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXRangeEligibility.sol#44-54) is not in mixedCase
",bytes) (contracts/solidity/eligibility/NFTXRangeEligibility.sol,44-54
naming-convention,Informational,"Parameter NFTXFeeDistributor.addReceiver(uint256,uint256,address,bool)._isContract (contracts/solidity/NFTXFeeDistributor.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStakingProvider.setChanged(bool)._changed (contracts/solidity/testing/MockStakingProvider.sol#22) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXListEligibility.__NFTXEligibility_init(address,bool,uint256[]) (contracts/solidity/eligibility/NFTXListEligibility.sol#35-44) is not in mixedCase
","address,bool,uint256[]) (contracts/solidity/eligibility/NFTXListEligibility.sol",35-44
naming-convention,Informational,"Parameter NFTXLPStaking.emergencyExitAndClaim(address,address)._stakingToken (contracts/solidity/NFTXLPStaking.sol#129) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAddress(uint256,uint256,address,bool)._receiverIdx (contracts/solidity/NFTXFeeDistributor.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStakingProvider.nameForStakingToken(address)._vaultToken (contracts/solidity/testing/MockStakingProvider.sol#26) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function UpgradeableBeacon.__UpgradeableBeacon__init(address) (contracts/solidity/proxy/UpgradeableBeacon.sol#27-29) is not in mixedCase
",address) (contracts/solidity/proxy/UpgradeableBeacon.sol,27-29
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address)._feeReceiver (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.__StakingTokenProvider_init(address,address,string)._defaultPairedtoken (contracts/solidity/StakingTokenProvider.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.dividendOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXMintRequestEligibility.__NFTXEligibility_init_bytes(bytes)._configData (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#58) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.setPairedTokenForVaultToken(address,address,string)._vaultToken (contracts/solidity/StakingTokenProvider.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.nameForStakingToken(address)._vaultToken (contracts/solidity/StakingTokenProvider.sol#50) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXListEligibility.__NFTXEligibility_init(address,bool,uint256[])._vault (contracts/solidity/eligibility/NFTXListEligibility.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ContextUpgradeable.__gap (contracts/solidity/util/ContextUpgradeable.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.setTreasuryAddress(address)._treasury (contracts/solidity/NFTXFeeDistributor.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXLPStaking.emergencyExit(address,address)._rewardToken (contracts/solidity/NFTXLPStaking.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXListEligibility.__NFTXEligibility_init_bytes(bytes)._configData (contracts/solidity/eligibility/NFTXListEligibility.sol#29) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.accumulativeRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#183) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#43-45) is not in mixedCase
",) (contracts/solidity/util/ReentrancyGuardUpgradeable.sol,43-45
naming-convention,Informational,"Parameter StakingTokenProvider.__StakingTokenProvider_init(address,address,string)._uniLikeExchange (contracts/solidity/StakingTokenProvider.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function INFTXVault.__NFTXVault_init(string,string,address,bool,bool) (contracts/solidity/interface/INFTXVault.sol#36-42) is not in mixedCase
","string,string,address,bool,bool) (contracts/solidity/interface/INFTXVault.sol",36-42
naming-convention,Informational,"Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (contracts/solidity/testing/ERC721.sol#309) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address)._prevContract (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXUniqueEligibility.setUniqueEligibilities(uint256[],bool)._isEligible (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#93) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAddress(uint256,uint256,address,bool)._vaultId (contracts/solidity/NFTXFeeDistributor.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function INFTXVaultFactory.__NFTXVaultFactory_init(address,address,address) (contracts/solidity/interface/INFTXVaultFactory.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXDeferEligibility.__NFTXEligibility_init(address,uint256) (contracts/solidity/eligibility/NFTXDeferEligibility.sol#40-47) is not in mixedCase
","address,uint256) (contracts/solidity/eligibility/NFTXDeferEligibility.sol",40-47
naming-convention,Informational,"Parameter NFTXFeeDistributor.addReceiver(uint256,uint256,address,bool)._vaultId (contracts/solidity/NFTXFeeDistributor.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.removeReceiver(uint256,uint256)._vaultId (contracts/solidity/NFTXFeeDistributor.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXUniqueEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#47-57) is not in mixedCase
",bytes) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol,47-57
naming-convention,Informational,"Function NFTXRangeEligibility.__NFTXEligibility_init(address,bool,uint256,uint256) (contracts/solidity/eligibility/NFTXRangeEligibility.sol#56-72) is not in mixedCase
","address,bool,uint256,uint256) (contracts/solidity/eligibility/NFTXRangeEligibility.sol",56-72
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string)._target (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXDeferEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXDeferEligibility.sol#32-37) is not in mixedCase
",bytes) (contracts/solidity/eligibility/NFTXDeferEligibility.sol,32-37
naming-convention,Informational,"Parameter NFTXLPStaking.__NFTXLPStaking__init(address)._stakingTokenProvider (contracts/solidity/NFTXLPStaking.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXEligibility.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init() (contracts/solidity/util/OwnableUpgradeable.sol#28-31) is not in mixedCase
",) (contracts/solidity/util/OwnableUpgradeable.sol,28-31
naming-convention,Informational,"Parameter NFTXFeeDistributor.setSpecificTreasuryAlloc(uint256,uint256)._allocPoint (contracts/solidity/NFTXFeeDistributor.sol#121) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract console (node_modules/hardhat/console.sol#4-1552) is not in CapWords
",node_modules/hardhat/console.sol,4-1552
naming-convention,Informational,"Parameter NFTXRangeEligibility.setEligibilityPreferences(uint256,uint256)._rangeEnd (contracts/solidity/eligibility/NFTXRangeEligibility.sol#74) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.setNFTXVaultFactory(address)._factory (contracts/solidity/NFTXFeeDistributor.sol#129) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable OwnableUpgradeable.__gap (contracts/solidity/util/OwnableUpgradeable.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXFeeDistributor.__FeeDistributor__init__(address,address) (contracts/solidity/NFTXFeeDistributor.sol#35-41) is not in mixedCase
","address,address) (contracts/solidity/NFTXFeeDistributor.sol",35-41
naming-convention,Informational,"Function ERC20BurnableUpgradeable.__ERC20Burnable_init() (contracts/solidity/token/ERC20BurnableUpgradeable.sol#15-18) is not in mixedCase
",) (contracts/solidity/token/ERC20BurnableUpgradeable.sol,15-18
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.setFeeReceiver(address)._feeReceiver (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#62) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20FlashMintUpgradeable.__ERC20FlashMint_init_unchained() (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#22-23) is not in mixedCase
",) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol,22-23
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._is1155 (contracts/solidity/NFTXVaultUpgradeable.sol#104) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (contracts/solidity/token/ERC20Upgradeable.sol#68-75) is not in mixedCase
","string,string) (contracts/solidity/token/ERC20Upgradeable.sol",68-75
naming-convention,Informational,"Parameter NFTXFeeDistributor.setLPStakingAddress(address)._lpStaking (contracts/solidity/NFTXFeeDistributor.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.addReceiver(uint256,uint256,address,bool)._allocPoint (contracts/solidity/NFTXFeeDistributor.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init(string,string) (contracts/solidity/token/ERC20Upgradeable.sol#60-66) is not in mixedCase
","string,string) (contracts/solidity/token/ERC20Upgradeable.sol",60-66
naming-convention,Informational,"Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#39-41) is not in mixedCase
",) (contracts/solidity/util/ReentrancyGuardUpgradeable.sol,39-41
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.withdrawableRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#166) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.pairForVaultToken(address,address)._vaultToken (contracts/solidity/StakingTokenProvider.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._assetAddress (contracts/solidity/NFTXVaultUpgradeable.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init_unchained() (contracts/solidity/util/ContextUpgradeable.sol#21-22) is not in mixedCase
",) (contracts/solidity/util/ContextUpgradeable.sol,21-22
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setEligibilityStorage(address)._newEligibility (contracts/solidity/NFTXVaultUpgradeable.sol#181) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.setPairedTokenForVaultToken(address,address,string)._newPairedToken (contracts/solidity/StakingTokenProvider.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXEligibilityManager.__NFTXEligibilityManager_init() (contracts/solidity/NFTXEligiblityManager.sol#17-19) is not in mixedCase
",) (contracts/solidity/NFTXEligiblityManager.sol,17-19
naming-convention,Informational,"Parameter NFTXFeeDistributor.removeReceiver(uint256,uint256)._receiverIdx (contracts/solidity/NFTXFeeDistributor.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.setDefaultPairedToken(address,string)._newDefaultPrefix (contracts/solidity/StakingTokenProvider.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20FlashMintUpgradeable.__ERC20FlashMint_init() (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#17-20) is not in mixedCase
",) (contracts/solidity/token/ERC20FlashMintUpgradeable.sol,17-20
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setFees(uint256,uint256,uint256,uint256)._swapFee (contracts/solidity/NFTXVaultUpgradeable.sol#146) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._symbol (contracts/solidity/NFTXVaultUpgradeable.sol#102) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20Upgradeable.__gap (contracts/solidity/token/ERC20Upgradeable.sol#390) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setVaultFeatures(bool,bool,bool,bool)._enableMint (contracts/solidity/NFTXVaultUpgradeable.sol#124) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXLPStaking.emergencyExitAndClaim(address,address)._rewardToken (contracts/solidity/NFTXLPStaking.sol#129) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ReentrancyGuardUpgradeable.__gap (contracts/solidity/util/ReentrancyGuardUpgradeable.sol#67) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.__NFTXEligibility_init(address,bool,uint256,uint256)._owner (contracts/solidity/eligibility/NFTXRangeEligibility.sol#57) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20BurnableUpgradeable.__gap (contracts/solidity/token/ERC20BurnableUpgradeable.sol#51) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function StakingTokenProvider.__StakingTokenProvider_init(address,address,string) (contracts/solidity/StakingTokenProvider.sol#23-28) is not in mixedCase
","address,address,string) (contracts/solidity/StakingTokenProvider.sol",23-28
naming-convention,Informational,"Function INFTXLPStaking.__NFTXLPStaking__init(address) (contracts/solidity/interface/INFTXLPStaking.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.setDefaultTreasuryAlloc(uint256)._allocPoint (contracts/solidity/NFTXFeeDistributor.sol#117) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.createVault(string,string,address,bool,bool)._assetAddress (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setVaultFeatures(bool,bool,bool,bool)._enableRedeem (contracts/solidity/NFTXVaultUpgradeable.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXMintRequestEligibility.__NFTXEligibility_init(address,address,bool,uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#70-90) is not in mixedCase
","address,address,bool,uint256[]) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",70-90
naming-convention,Informational,"Parameter NFTXDeferEligibility.__NFTXEligibility_init(address,uint256)._deferVaultId (contracts/solidity/eligibility/NFTXDeferEligibility.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXUniqueEligibility.__NFTXEligibility_init(address,address,bool,bool,uint256[]) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#59-83) is not in mixedCase
","address,address,bool,bool,uint256[]) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol",59-83
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setFees(uint256,uint256,uint256,uint256)._directRedeemFee (contracts/solidity/NFTXVaultUpgradeable.sol#145) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string)._name (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.__NFTXEligibility_init(address,bool,uint256,uint256)._rangeStart (contracts/solidity/eligibility/NFTXRangeEligibility.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXUniqueEligibility.__NFTXEligibility_init_bytes(bytes)._configData (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Initializable.______gap (contracts/solidity/proxy/Initializable.sol#66) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXMintRequestEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#58-68) is not in mixedCase
",bytes) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol,58-68
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setFees(uint256,uint256,uint256,uint256)._redeemFee (contracts/solidity/NFTXVaultUpgradeable.sol#144) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant RewardDistributionTokenUpgradeable.magnitude (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#28) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Parameter NFTXUniqueEligibility.__NFTXEligibility_init(address,address,bool,bool,uint256[])._owner (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable RewardDistributionTokenUpgradeable.__gap (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#239) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAlloc(uint256,uint256,uint256)._receiverIdx (contracts/solidity/NFTXFeeDistributor.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXListEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXListEligibility.sol#28-33) is not in mixedCase
",bytes) (contracts/solidity/eligibility/NFTXListEligibility.sol,28-33
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init_unchained() (contracts/solidity/util/OwnableUpgradeable.sol#33-37) is not in mixedCase
",) (contracts/solidity/util/OwnableUpgradeable.sol,33-37
naming-convention,Informational,"Function INFTXFeeDistributor.__FeeDistributor__init__(address,address) (contracts/solidity/interface/INFTXFeeDistributor.sol#22) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXMintRequestEligibility.setUniqueEligibilities(uint256[],bool)._isEligible (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#218) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.changeReceiverAlloc(uint256,uint256,uint256)._allocPoint (contracts/solidity/NFTXFeeDistributor.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function INFTXEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/interface/INFTXEligibility.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXLPStaking.__NFTXLPStaking__init(address) (contracts/solidity/NFTXLPStaking.sol#35-40) is not in mixedCase
",address) (contracts/solidity/NFTXLPStaking.sol,35-40
naming-convention,Informational,"Parameter StakingTokenProvider.__StakingTokenProvider_init(address,address,string)._defaultPrefix (contracts/solidity/StakingTokenProvider.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockStakingProvider.stakingTokenForVaultToken(address)._vaultToken (contracts/solidity/testing/MockStakingProvider.sol#18) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20FlashMintUpgradeable.__gap (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXUniqueEligibility.setEligibilityPreferences(bool)._reverseEligOnRedeem (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXDeferEligibility.__NFTXEligibility_init(address,uint256)._deferAddress (contracts/solidity/eligibility/NFTXDeferEligibility.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.__NFTXEligibility_init_bytes(bytes)._configData (contracts/solidity/eligibility/NFTXRangeEligibility.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable NFTXVaultUpgradeable._bool_gap (contracts/solidity/NFTXVaultUpgradeable.sol#57) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setVaultFeatures(bool,bool,bool,bool)._enableDirectRedeem (contracts/solidity/NFTXVaultUpgradeable.sol#126) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address)._vaultImpl (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setVaultFeatures(bool,bool,bool,bool)._enableSwap (contracts/solidity/NFTXVaultUpgradeable.sol#127) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.pairForVaultToken(address,address)._pairedToken (contracts/solidity/StakingTokenProvider.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.setEligibilityPreferences(uint256,uint256)._rangeStart (contracts/solidity/eligibility/NFTXRangeEligibility.sol#74) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._name (contracts/solidity/NFTXVaultUpgradeable.sol#101) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function PausableUpgradeable.__Pausable_init() (contracts/solidity/util/PausableUpgradeable.sol#10-12) is not in mixedCase
",) (contracts/solidity/util/PausableUpgradeable.sol,10-12
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.setFees(uint256,uint256,uint256,uint256)._mintFee (contracts/solidity/NFTXVaultUpgradeable.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistributionTokenUpgradeable.withdrawnRewardOf(address)._owner (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#173) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init() (contracts/solidity/util/ContextUpgradeable.sol#17-19) is not in mixedCase
",) (contracts/solidity/util/ContextUpgradeable.sol,17-19
naming-convention,Informational,"Function ERC20BurnableUpgradeable.__ERC20Burnable_init_unchained() (contracts/solidity/token/ERC20BurnableUpgradeable.sol#20-21) is not in mixedCase
",) (contracts/solidity/token/ERC20BurnableUpgradeable.sol,20-21
naming-convention,Informational,"Parameter NFTXMintRequestEligibility.__NFTXEligibility_init(address,address,bool,uint256[])._owner (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#71) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXVaultFactoryUpgradeable.__NFTXVaultFactory_init(address,address,address) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#33-39) is not in mixedCase
","address,address,address) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol",33-39
naming-convention,Informational,"Parameter StakingTokenProvider.setPairedTokenForVaultToken(address,address,string)._newPrefix (contracts/solidity/StakingTokenProvider.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXLPStaking.emergencyExit(address,address)._stakingToken (contracts/solidity/NFTXLPStaking.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StakingTokenProvider.stakingTokenForVaultToken(address)._vaultToken (contracts/solidity/StakingTokenProvider.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool) (contracts/solidity/NFTXVaultUpgradeable.sol#100-117) is not in mixedCase
","string,string,address,bool,bool) (contracts/solidity/NFTXVaultUpgradeable.sol",100-117
naming-convention,Informational,"Parameter NFTXUniqueEligibility.__NFTXEligibility_init(address,address,bool,bool,uint256[])._vault (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool)._allowAllItems (contracts/solidity/NFTXVaultUpgradeable.sol#105) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXMintRequestEligibility.__NFTXEligibility_init(address,address,bool,uint256[])._reverseEligOnRedeem (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#73) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXFeeDistributor.__FeeDistributor__init__(address,address)._lpStaking (contracts/solidity/NFTXFeeDistributor.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.setUniqueEligibilities(uint256[],bool)._isEligible (contracts/solidity/eligibility/NFTXRangeEligibility.sol#86) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PausableUpgradeable.setIsGuardian(address,bool)._isGuardian (contracts/solidity/util/PausableUpgradeable.sol#43) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTXRangeEligibility.__NFTXEligibility_init(address,bool,uint256,uint256)._rangeEnd (contracts/solidity/eligibility/NFTXRangeEligibility.sol#60) is not in mixedCase
",N/A,N/A
redundant-statements,Informational,"Redundant expression ""amount (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#46)"" inERC20FlashMintUpgradeable (contracts/solidity/token/ERC20FlashMintUpgradeable.sol#16-83)
",contracts/solidity/token/ERC20FlashMintUpgradeable.sol,16-83
redundant-statements,Informational,"Redundant expression ""this (contracts/solidity/testing/Context.sol#21)"" inContext (contracts/solidity/testing/Context.sol#15-24)
",contracts/solidity/testing/Context.sol,15-24
redundant-statements,Informational,"Redundant expression ""this (contracts/solidity/util/ContextUpgradeable.sol#28)"" inContextUpgradeable (contracts/solidity/util/ContextUpgradeable.sol#16-32)
",contracts/solidity/util/ContextUpgradeable.sol,16-32
too-many-digits,Informational,"ClonesUpgradeable.cloneDeterministic(address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#49)
","address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol",43-53
too-many-digits,Informational,"ClonesUpgradeable.predictDeterministicAddress(address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#62)
","address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol",58-70
too-many-digits,Informational,"ClonesUpgradeable.clone(address) (contracts/solidity/proxy/ClonesUpgradeable.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#28)
",address) (contracts/solidity/proxy/ClonesUpgradeable.sol,24-34
too-many-digits,Informational,"ClonesUpgradeable.predictDeterministicAddress(address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#64)
","address,bytes32,address) (contracts/solidity/proxy/ClonesUpgradeable.sol",58-70
too-many-digits,Informational,"ClonesUpgradeable.cloneDeterministic(address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#47)
","address,bytes32) (contracts/solidity/proxy/ClonesUpgradeable.sol",43-53
too-many-digits,Informational,"ClonesUpgradeable.clone(address) (contracts/solidity/proxy/ClonesUpgradeable.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/solidity/proxy/ClonesUpgradeable.sol#30)
",address) (contracts/solidity/proxy/ClonesUpgradeable.sol,24-34
unimplemented-functions,Informational,"ERC1155Receiver (contracts/solidity/testing/ERC1155Receiver.sol#11-18) does not implement functions:
	- IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (contracts/solidity/testing/IERC1155Receiver.sol#45-51)
	- IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes) (contracts/solidity/testing/IERC1155Receiver.sol#24-30)
",contracts/solidity/testing/ERC1155Receiver.sol,11-18
unused-state,Informational,"NFTXVaultUpgradeable.___gap (contracts/solidity/NFTXVaultUpgradeable.sol#438) is never used in NFTXVaultUpgradeable (contracts/solidity/NFTXVaultUpgradeable.sol#25-439)
",contracts/solidity/NFTXVaultUpgradeable.sol,25-439
unused-state,Informational,"NFTXVaultUpgradeable._bool_gap (contracts/solidity/NFTXVaultUpgradeable.sol#57) is never used in NFTXVaultUpgradeable (contracts/solidity/NFTXVaultUpgradeable.sol#25-439)
",contracts/solidity/NFTXVaultUpgradeable.sol,25-439
unused-state,Informational,"RewardDistributionTokenUpgradeable.__gap (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#239) is never used in RewardDistributionTokenUpgradeable (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#18-241)
",contracts/solidity/token/RewardDistributionTokenUpgradeable.sol,18-241
constable-states,Optimization,"NFTXMintRequestEligibility.manager (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#28) should be constant 
",N/A,N/A
constable-states,Optimization,"NFTXVaultFactoryUpgradeable.eligibilityManager (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#24) should be constant 
",N/A,N/A
constable-states,Optimization,"NFTXEligibilityManager.nftxVaultFactory (contracts/solidity/NFTXEligiblityManager.sol#10) should be constant 
",N/A,N/A
constable-states,Optimization,"NFTXVaultUpgradeable.description (contracts/solidity/NFTXVaultUpgradeable.sol#59) should be constant 
",N/A,N/A
immutable-states,Optimization,"MockVault.is1155 (contracts/solidity/testing/MockVault.sol#7) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockVault.assetAddress (contracts/solidity/testing/MockVault.sol#6) should be immutable 
",N/A,N/A
external-function,Optimization,"mintTo(uint256[],uint256[],address) should be declared external:
	- MockVault.mintTo(uint256[],uint256[],address) (contracts/solidity/testing/MockVault.sol#14-20)
Moreover, the following function parameters should change its data location:
tokenIds location should be calldata
amounts location should be calldata
","uint256[],uint256[],address) should be declared external:
	- MockVault.mintTo(uint256[],uint256[],address) (contracts/solidity/testing/MockVault.sol",14-20
external-function,Optimization,"__StakingTokenProvider_init(address,address,string) should be declared external:
	- StakingTokenProvider.__StakingTokenProvider_init(address,address,string) (contracts/solidity/StakingTokenProvider.sol#23-28)
Moreover, the following function parameters should change its data location:
_defaultPrefix location should be calldata
","address,address,string) should be declared external:
	- StakingTokenProvider.__StakingTokenProvider_init(address,address,string) (contracts/solidity/StakingTokenProvider.sol",23-28
external-function,Optimization,"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) should be declared external:
	- ERC1155HolderUpgradeable.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (contracts/solidity/token/ERC1155HolderUpgradeable.sol#19-27)
Moreover, the following function parameters should change its data location:
 location should be calldata
 location should be calldata
 location should be calldata
","address,address,uint256[],uint256[],bytes) should be declared external:
	- ERC1155HolderUpgradeable.onERC1155BatchReceived(address,address,uint256[],uint256[],bytes) (contracts/solidity/token/ERC1155HolderUpgradeable.sol",19-27
external-function,Optimization,"__NFTXVault_init(string,string,address,bool,bool) should be declared external:
	- NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool) (contracts/solidity/NFTXVaultUpgradeable.sol#100-117)
Moreover, the following function parameters should change its data location:
_name location should be calldata
_symbol location should be calldata
","string,string,address,bool,bool) should be declared external:
	- NFTXVaultUpgradeable.__NFTXVault_init(string,string,address,bool,bool) (contracts/solidity/NFTXVaultUpgradeable.sol",100-117
external-function,Optimization,"publicMintBatch(address,uint256[],uint256[]) should be declared external:
	- ERC1155.publicMintBatch(address,uint256[],uint256[]) (contracts/solidity/testing/ERC1155.sol#286-288)
Moreover, the following function parameters should change its data location:
tokenIds location should be calldata
amounts location should be calldata
","address,uint256[],uint256[]) should be declared external:
	- ERC1155.publicMintBatch(address,uint256[],uint256[]) (contracts/solidity/testing/ERC1155.sol",286-288
external-function,Optimization,"onERC1155Received(address,address,uint256,uint256,bytes) should be declared external:
	- ERC1155HolderUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes) (contracts/solidity/token/ERC1155HolderUpgradeable.sol#9-17)
Moreover, the following function parameters should change its data location:
 location should be calldata
","address,address,uint256,uint256,bytes) should be declared external:
	- ERC1155HolderUpgradeable.onERC1155Received(address,address,uint256,uint256,bytes) (contracts/solidity/token/ERC1155HolderUpgradeable.sol",9-17
external-function,Optimization,"setUniqueEligibilities(uint256[],bool) should be declared external:
	- NFTXMintRequestEligibility.setUniqueEligibilities(uint256[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#218-226)
Moreover, the following function parameters should change its data location:
tokenIds location should be calldata
","uint256[],bool) should be declared external:
	- NFTXMintRequestEligibility.setUniqueEligibilities(uint256[],bool) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol",218-226
external-function,Optimization,"setUniqueEligibilities(uint256[],bool) should be declared external:
	- NFTXUniqueEligibility.setUniqueEligibilities(uint256[],bool) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#93-99)
Moreover, the following function parameters should change its data location:
tokenIds location should be calldata
","uint256[],bool) should be declared external:
	- NFTXUniqueEligibility.setUniqueEligibilities(uint256[],bool) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol",93-99
external-function,Optimization,"onERC721Received(address,address,uint256,bytes) should be declared external:
	- ERC721HolderUpgradeable.onERC721Received(address,address,uint256,bytes) (contracts/solidity/token/ERC721HolderUpgradeable.sol#19-26)
Moreover, the following function parameters should change its data location:
 location should be calldata
","address,address,uint256,bytes) should be declared external:
	- ERC721HolderUpgradeable.onERC721Received(address,address,uint256,bytes) (contracts/solidity/token/ERC721HolderUpgradeable.sol",19-26
external-function,Optimization,"__RewardDistributionToken_init(IERC20Upgradeable,string,string) should be declared external:
	- RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string) (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol#46-51)
Moreover, the following function parameters should change its data location:
_name location should be calldata
_symbol location should be calldata
","IERC20Upgradeable,string,string) should be declared external:
	- RewardDistributionTokenUpgradeable.__RewardDistributionToken_init(IERC20Upgradeable,string,string) (contracts/solidity/token/RewardDistributionTokenUpgradeable.sol",46-51
external-function,Optimization,"createVault(string,string,address,bool,bool) should be declared external:
	- NFTXVaultFactoryUpgradeable.createVault(string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol#41-60)
Moreover, the following function parameters should change its data location:
name location should be calldata
symbol location should be calldata
","string,string,address,bool,bool) should be declared external:
	- NFTXVaultFactoryUpgradeable.createVault(string,string,address,bool,bool) (contracts/solidity/NFTXVaultFactoryUpgradeable.sol",41-60
external-function,Optimization,"__NFTXEligibility_init_bytes(bytes) should be declared external:
	- NFTXDeferEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXDeferEligibility.sol#32-37)
Moreover, the following function parameters should change its data location:
configData location should be calldata
	- NFTXEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXEligibility.sol#13)
	- NFTXListEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXListEligibility.sol#28-33)
	- NFTXMintRequestEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXMintRequestEligibility.sol#58-68)
	- NFTXRangeEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXRangeEligibility.sol#44-54)
	- NFTXUniqueEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXUniqueEligibility.sol#47-57)
","bytes) should be declared external:
	- NFTXDeferEligibility.__NFTXEligibility_init_bytes(bytes) (contracts/solidity/eligibility/NFTXDeferEligibility.sol",32-37
external-function,Optimization,"balanceOfBatch(address[],uint256[]) should be declared external:
	- ERC1155.balanceOfBatch(address[],uint256[]) (contracts/solidity/testing/ERC1155.sol#98-117)
Moreover, the following function parameters should change its data location:
accounts location should be calldata
ids location should be calldata
","address[],uint256[]) should be declared external:
	- ERC1155.balanceOfBatch(address[],uint256[]) (contracts/solidity/testing/ERC1155.sol",98-117
external-function,Optimization,"safeTransferFrom(address,address,uint256,uint256,bytes) should be declared external:
	- ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes) (contracts/solidity/testing/ERC1155.sol#139-166)
Moreover, the following function parameters should change its data location:
data location should be calldata
","address,address,uint256,uint256,bytes) should be declared external:
	- ERC1155.safeTransferFrom(address,address,uint256,uint256,bytes) (contracts/solidity/testing/ERC1155.sol",139-166
external-function,Optimization,"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) should be declared external:
	- ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) (contracts/solidity/testing/ERC1155.sol#171-207)
Moreover, the following function parameters should change its data location:
ids location should be calldata
amounts location should be calldata
data location should be calldata
","address,address,uint256[],uint256[],bytes) should be declared external:
	- ERC1155.safeBatchTransferFrom(address,address,uint256[],uint256[],bytes) (contracts/solidity/testing/ERC1155.sol",171-207
