Severity,Description,Line
High,"Reentrancy in DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268):
	External calls:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#263)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#266)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
",259-268
High,"Reentrancy in DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- totalGlobalShares += globalSharesToAdd (contracts/DelegatedStaking.sol#204)
	DelegatedStaking.totalGlobalShares (contracts/DelegatedStaking.sol#18) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking._updateGlobalExchangeRate() (contracts/DelegatedStaking.sol#119-131)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getMetadata() (contracts/DelegatedStaking.sol#472-475)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.globalShares += globalSharesToAdd (contracts/DelegatedStaking.sol#205)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.totalShares += newDelegatorSharesN (contracts/DelegatedStaking.sol#209)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.delegated += amount (contracts/DelegatedStaking.sol#211)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
",172-214
High,"Reentrancy in DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315):
	External calls:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- totalGlobalShares -= globalSharesRemove (contracts/DelegatedStaking.sol#311)
	DelegatedStaking.totalGlobalShares (contracts/DelegatedStaking.sol#18) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking._updateGlobalExchangeRate() (contracts/DelegatedStaking.sol#119-131)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getMetadata() (contracts/DelegatedStaking.sol#472-475)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.globalShares -= globalSharesRemove (contracts/DelegatedStaking.sol#312)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
",271-315
High,"Reentrancy in DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#421)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#424)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
",416-426
High,"Reentrancy in DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413):
	External calls:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#408)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#411)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
",402-413
Medium,"DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470) performs a multiplication on the result of a division:
	- newGlobalExchangeRate = uint128((uint256(allocatedTokensPerEpoch) * divider / totalGlobalShares) * (currentEpoch - lastUpdateEpoch)) + globalExchangeRate (contracts/DelegatedStaking.sol#448)
",443-470
Medium,"DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214) uses a dangerous strict equality:
	- endEpoch == 0 (contracts/DelegatedStaking.sol#178)
",172-214
Medium,"DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315) uses a dangerous strict equality:
	- commissionLeftOver == 0 (contracts/DelegatedStaking.sol#287)
",271-315
Low,"Reentrancy in DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315):
	External calls:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RewardRedeemed(validatorId,beneficiary,amount) (contracts/DelegatedStaking.sol#314)
",271-315
Low,"Reentrancy in DelegatedStaking.takeOutRewardTokens(uint128) (contracts/DelegatedStaking.sol#101-116):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#114)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#114)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- AllocatedTokensTaken(amount) (contracts/DelegatedStaking.sol#115)
",101-116
Low,"Reentrancy in DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- UnstakeRedeemed(validatorId,msg.sender,amount) (contracts/DelegatedStaking.sol#425)
",416-426
Low,"Reentrancy in DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413):
	External calls:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- TransferredUnstake(oldValidatorId,newValidatorId,msg.sender,amount,unstakingId) (contracts/DelegatedStaking.sol#412)
",402-413
Low,"Reentrancy in DelegatedStaking.depositRewardTokens(uint128) (contracts/DelegatedStaking.sol#87-98):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#96)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#96)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RewardTokensDeposited(amount) (contracts/DelegatedStaking.sol#97)
",87-98
Low,"Reentrancy in DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268):
	External calls:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RecoveredUnstake(validatorId,msg.sender,amount,unstakingId) (contracts/DelegatedStaking.sol#267)
",259-268
Low,"Reentrancy in DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- Staked(validatorId,msg.sender,amount) (contracts/DelegatedStaking.sol#213)
",172-214
