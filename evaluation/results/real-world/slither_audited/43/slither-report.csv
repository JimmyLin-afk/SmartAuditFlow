Check,Severity,Description,Filename,Line
reentrancy-eth,High,"Reentrancy in DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268):
	External calls:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#263)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#266)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
","uint128,uint128,uint128) (contracts/DelegatedStaking.sol",259-268
reentrancy-eth,High,"Reentrancy in DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- totalGlobalShares += globalSharesToAdd (contracts/DelegatedStaking.sol#204)
	DelegatedStaking.totalGlobalShares (contracts/DelegatedStaking.sol#18) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking._updateGlobalExchangeRate() (contracts/DelegatedStaking.sol#119-131)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getMetadata() (contracts/DelegatedStaking.sol#472-475)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.globalShares += globalSharesToAdd (contracts/DelegatedStaking.sol#205)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.totalShares += newDelegatorSharesN (contracts/DelegatedStaking.sol#209)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.delegated += amount (contracts/DelegatedStaking.sol#211)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
","uint128,uint128,bool) (contracts/DelegatedStaking.sol",172-214
reentrancy-eth,High,"Reentrancy in DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315):
	External calls:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- totalGlobalShares -= globalSharesRemove (contracts/DelegatedStaking.sol#311)
	DelegatedStaking.totalGlobalShares (contracts/DelegatedStaking.sol#18) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking._updateGlobalExchangeRate() (contracts/DelegatedStaking.sol#119-131)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getMetadata() (contracts/DelegatedStaking.sol#472-475)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- v.globalShares -= globalSharesRemove (contracts/DelegatedStaking.sol#312)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
","uint128,address,uint128) (contracts/DelegatedStaking.sol",271-315
reentrancy-eth,High,"Reentrancy in DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#421)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#424)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
","uint128,uint128,uint128) (contracts/DelegatedStaking.sol",416-426
reentrancy-eth,High,"Reentrancy in DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413):
	External calls:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	State variables written after the call(s):
	- us.amount -= amount (contracts/DelegatedStaking.sol#408)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
	- us.coolDownEnd = 0 (contracts/DelegatedStaking.sol#411)
	DelegatedStaking.validators (contracts/DelegatedStaking.sol#22) can be used in cross function reentrancies:
	- DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315)
	- DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214)
	- DelegatedStaking.addValidator(address,address,uint128) (contracts/DelegatedStaking.sol#329-337)
	- DelegatedStaking.disableValidator(uint128) (contracts/DelegatedStaking.sol#341-350)
	- DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470)
	- DelegatedStaking.getValidatorsDetails() (contracts/DelegatedStaking.sol#430-439)
	- DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268)
	- DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413)
	- DelegatedStaking.setValidatorCommissionRate(uint128,uint128) (contracts/DelegatedStaking.sol#386-392)
	- DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426)
	- DelegatedStaking.unstake(uint128,uint128) (contracts/DelegatedStaking.sol#217-256)
","uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol",402-413
divide-before-multiply,Medium,"DelegatedStaking.getDelegatorDetails(address) (contracts/DelegatedStaking.sol#443-470) performs a multiplication on the result of a division:
	- newGlobalExchangeRate = uint128((uint256(allocatedTokensPerEpoch) * divider / totalGlobalShares) * (currentEpoch - lastUpdateEpoch)) + globalExchangeRate (contracts/DelegatedStaking.sol#448)
",address) (contracts/DelegatedStaking.sol,443-470
incorrect-equality,Medium,"DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214) uses a dangerous strict equality:
	- endEpoch == 0 (contracts/DelegatedStaking.sol#178)
","uint128,uint128,bool) (contracts/DelegatedStaking.sol",172-214
incorrect-equality,Medium,"DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315) uses a dangerous strict equality:
	- commissionLeftOver == 0 (contracts/DelegatedStaking.sol#287)
","uint128,address,uint128) (contracts/DelegatedStaking.sol",271-315
reentrancy-events,Low,"Reentrancy in DelegatedStaking._redeemRewards(uint128,address,uint128) (contracts/DelegatedStaking.sol#271-315):
	External calls:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(beneficiary,amount) (contracts/DelegatedStaking.sol#304)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RewardRedeemed(validatorId,beneficiary,amount) (contracts/DelegatedStaking.sol#314)
","uint128,address,uint128) (contracts/DelegatedStaking.sol",271-315
reentrancy-events,Low,"Reentrancy in DelegatedStaking.takeOutRewardTokens(uint128) (contracts/DelegatedStaking.sol#101-116):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#114)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#114)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- AllocatedTokensTaken(amount) (contracts/DelegatedStaking.sol#115)
",uint128) (contracts/DelegatedStaking.sol,101-116
reentrancy-events,Low,"Reentrancy in DelegatedStaking.transferUnstakedOut(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#416-426):
	External calls:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- CQT.safeTransfer(to,amount) (contracts/DelegatedStaking.sol#83)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferFromContract(msg.sender,amount) (contracts/DelegatedStaking.sol#420)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- UnstakeRedeemed(validatorId,msg.sender,amount) (contracts/DelegatedStaking.sol#425)
","uint128,uint128,uint128) (contracts/DelegatedStaking.sol",416-426
reentrancy-events,Low,"Reentrancy in DelegatedStaking.redelegateUnstaked(uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol#402-413):
	External calls:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(newValidatorId,amount,false) (contracts/DelegatedStaking.sol#407)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- TransferredUnstake(oldValidatorId,newValidatorId,msg.sender,amount,unstakingId) (contracts/DelegatedStaking.sol#412)
","uint128,uint128,uint128,uint128) (contracts/DelegatedStaking.sol",402-413
reentrancy-events,Low,"Reentrancy in DelegatedStaking.depositRewardTokens(uint128) (contracts/DelegatedStaking.sol#87-98):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#96)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#96)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RewardTokensDeposited(amount) (contracts/DelegatedStaking.sol#97)
",uint128) (contracts/DelegatedStaking.sol,87-98
reentrancy-events,Low,"Reentrancy in DelegatedStaking.recoverUnstaking(uint128,uint128,uint128) (contracts/DelegatedStaking.sol#259-268):
	External calls:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _stake(validatorId,amount,false) (contracts/DelegatedStaking.sol#262)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- RecoveredUnstake(validatorId,msg.sender,amount,unstakingId) (contracts/DelegatedStaking.sol#267)
","uint128,uint128,uint128) (contracts/DelegatedStaking.sol",259-268
reentrancy-events,Low,"Reentrancy in DelegatedStaking._stake(uint128,uint128,bool) (contracts/DelegatedStaking.sol#172-214):
	External calls:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- CQT.safeTransferFrom(from,address(this),amount) (contracts/DelegatedStaking.sol#78)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#122)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	External calls sending eth:
	- _transferToContract(msg.sender,amount) (contracts/DelegatedStaking.sol#199)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
	Event emitted after the call(s):
	- Staked(validatorId,msg.sender,amount) (contracts/DelegatedStaking.sol#213)
","uint128,uint128,bool) (contracts/DelegatedStaking.sol",172-214
assembly,Informational,"AddressUpgradeable._revert(bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#236-239)
","bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",231-243
pragma,Informational,"3 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
		-^0.8.0 (contracts/DelegatedStaking.sol#2)
	- Version constraint ^0.8.2 is used by:
		-^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
	- ^0.8.0 (contracts/DelegatedStaking.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
",N/A,N/A
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#185)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",180-187
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",128-137
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#160)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",155-162
low-level-calls,Informational,"Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#64-69):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#67)
","address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",64-69
low-level-calls,Informational,"Low level call in SafeERC20Upgradeable._callOptionalReturnBool(IERC20Upgradeable,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#134-142):
	- (success,returndata) = address(token).call(data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#139)
","IERC20Upgradeable,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",134-142
naming-convention,Informational,"Function IERC20PermitUpgradeable.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant DelegatedStaking.divider (contracts/DelegatedStaking.sol#10) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#29-31) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,29-31
naming-convention,Informational,"Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#94) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,21-22
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#33-35) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,33-35
naming-convention,Informational,"Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#18-19) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,18-19
