Check,Severity,Description,Filename,Line
unchecked-transfer,High,"Visor.timeLockERC20(address,address,uint256,uint256) (contracts/visor/Visor.sol#583-612) ignores return value by IERC20(token).transferFrom(msg.sender,address(this),amount) (contracts/visor/Visor.sol#610)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",583-612
incorrect-equality,Medium,"Hypervisor.calculateReward(uint256,uint256,uint256,uint256,IHypervisor.RewardScaling) (contracts/hypervisor/Hypervisor.sol#650-698) uses a dangerous strict equality:
	- stakeDuration >= rewardScaling.time || rewardScaling.floor == rewardScaling.ceiling (contracts/hypervisor/Hypervisor.sol#677)
","uint256,uint256,uint256,uint256,IHypervisor.RewardScaling) (contracts/hypervisor/Hypervisor.sol",650-698
incorrect-equality,Medium,"Hypervisor.calculateUnlockedRewards(IHypervisor.RewardSchedule[],uint256,uint256,uint256) (contracts/hypervisor/Hypervisor.sol#540-583) uses a dangerous strict equality:
	- rewardSchedules.length == 0 (contracts/hypervisor/Hypervisor.sol#547)
","IHypervisor.RewardSchedule[],uint256,uint256,uint256) (contracts/hypervisor/Hypervisor.sol",540-583
incorrect-equality,Medium,"Hypervisor.getFutureTotalStakeUnits(uint256) (contracts/hypervisor/Hypervisor.sol#378-393) uses a dangerous strict equality:
	- timestamp == _hypervisor.lastUpdate (contracts/hypervisor/Hypervisor.sol#385)
",uint256) (contracts/hypervisor/Hypervisor.sol,378-393
incorrect-equality,Medium,"Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032) uses a dangerous strict equality:
	- out.newStakesCount == 0 (contracts/hypervisor/Hypervisor.sol#973)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
reentrancy-no-eth,Medium,"Reentrancy in Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032):
	External calls:
	- IUniversalVault(vault).unlock(_hypervisor.stakingToken,amount,permission) (contracts/hypervisor/Hypervisor.sol#990)
	State variables written after the call(s):
	- _hypervisor.rewardSharesOutstanding = _hypervisor.rewardSharesOutstanding.sub(sharesToBurn) (contracts/hypervisor/Hypervisor.sol#1003)
	Hypervisor._hypervisor (contracts/hypervisor/Hypervisor.sol#237) can be used in cross function reentrancies:
	- Hypervisor._updateTotalStakeUnits() (contracts/hypervisor/Hypervisor.sol#1074-1079)
	- Hypervisor.constructor(address,address,address,address,address,IHypervisor.RewardScaling,uint256) (contracts/hypervisor/Hypervisor.sol#255-291)
	- Hypervisor.fund(uint256,uint256) (contracts/hypervisor/Hypervisor.sol#713-748)
	- Hypervisor.getCurrentStakeReward(address,uint256) (contracts/hypervisor/Hypervisor.sol#446-466)
	- Hypervisor.getCurrentVaultReward(address) (contracts/hypervisor/Hypervisor.sol#406-422)
	- Hypervisor.getFutureStakeReward(address,uint256,uint256) (contracts/hypervisor/Hypervisor.sol#468-486)
	- Hypervisor.getFutureTotalStakeUnits(uint256) (contracts/hypervisor/Hypervisor.sol#378-393)
	- Hypervisor.getFutureUnlockedRewards(uint256) (contracts/hypervisor/Hypervisor.sol#354-371)
	- Hypervisor.getFutureVaultReward(address,uint256) (contracts/hypervisor/Hypervisor.sol#424-444)
	- Hypervisor.getHypervisorData() (contracts/hypervisor/Hypervisor.sol#345-347)
	- Hypervisor.isValidAddress(address) (contracts/hypervisor/Hypervisor.sol#332-341)
	- Hypervisor.rageQuit() (contracts/hypervisor/Hypervisor.sol#1049-1070)
	- Hypervisor.rescueTokensFromRewardPool(address,address,uint256) (contracts/hypervisor/Hypervisor.sol#825-841)
	- Hypervisor.stake(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#861-901)
	- Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
unused-return,Medium,"ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[from].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#396)
","address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",387-402
unused-return,Medium,"ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _tokenOwners.remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#371)
",uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,356-374
unused-return,Medium,"ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#399)
","address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",387-402
unused-return,Medium,"ERC721.tokenByIndex(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#180-183) ignores return value by (tokenId,None) = _tokenOwners.at(index) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#181)
",uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,180-183
unused-return,Medium,"ERC721._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#387-402) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#397)
","address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",387-402
unused-return,Medium,"ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _tokenOwners.set(tokenId,to) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#341)
","address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",333-344
unused-return,Medium,"ERC721._burn(uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#356-374) ignores return value by _holderTokens[owner].remove(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#369)
",uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,356-374
unused-return,Medium,"ERC721._mint(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#333-344) ignores return value by _holderTokens[to].add(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#339)
","address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",333-344
shadowing-local,Low,"VisorFactory.createSelected2(bytes32,bytes32).name (contracts/visor/VisorFactory.sol#78) shadows:
	- ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#121-123) (function)
	- IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,121-123
shadowing-local,Low,"VisorFactory.createSelected(bytes32).name (contracts/visor/VisorFactory.sol#60) shadows:
	- ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#121-123) (function)
	- IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,121-123
shadowing-local,Low,"VisorFactory.addTemplate(bytes32,address).name (contracts/visor/VisorFactory.sol#27) shadows:
	- ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#121-123) (function)
	- IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,121-123
shadowing-local,Low,"VisorFactory.setActive(bytes32).name (contracts/visor/VisorFactory.sol#38) shadows:
	- ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#121-123) (function)
	- IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol,121-123
shadowing-local,Low,"PowerSwitch.constructor(address).owner (contracts/hypervisor/PowerSwitch.sol#47) shadows:
	- Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#35-37) (function)
",) (node_modules/@openzeppelin/contracts/access/Ownable.sol,35-37
calls-loop,Low,"Visor.checkBalances() (contracts/visor/Visor.sol#212-223) has external calls inside a loop: IERC20(_lockData.token).balanceOf(address(this)) < _lockData.balance (contracts/visor/Visor.sol#219)
",) (contracts/visor/Visor.sol,212-223
calls-loop,Low,"Mainframe.unstakeMulti(Mainframe.UnstakeRequest[]) (contracts/Mainframe.sol#111-120) has external calls inside a loop: IHypervisor(request.hypervisor).unstakeAndClaim(request.vault,request.amount,request.permission) (contracts/Mainframe.sol#114-118)
",Mainframe.UnstakeRequest[]) (contracts/Mainframe.sol,111-120
calls-loop,Low,"Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032) has external calls inside a loop: bonusAmount = IERC20(bonusToken).balanceOf(_hypervisor.rewardPool).mul(out.reward).div(remainingRewards) (contracts/hypervisor/Hypervisor.sol#1013-1016)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
calls-loop,Low,"RewardPool.rescueERC20(address[],address) (contracts/hypervisor/RewardPool.sol#60-83) has external calls inside a loop: balance = IERC20(token).balanceOf(address(this)) (contracts/hypervisor/RewardPool.sol#79)
","address[],address) (contracts/hypervisor/RewardPool.sol",60-83
calls-loop,Low,"Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032) has external calls inside a loop: IRewardPool(_hypervisor.rewardPool).sendERC20(bonusToken,recipient,bonusAmount) (contracts/hypervisor/Hypervisor.sol#1019)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
calls-loop,Low,"Mainframe.stakeMulti(Mainframe.StakeRequest[]) (contracts/Mainframe.sol#97-102) has external calls inside a loop: IHypervisor(request.hypervisor).stake(request.vault,request.amount,request.permission) (contracts/Mainframe.sol#100)
",Mainframe.StakeRequest[]) (contracts/Mainframe.sol,97-102
calls-loop,Low,"Hypervisor.isValidVault(address) (contracts/hypervisor/Hypervisor.sol#321-330) has external calls inside a loop: IInstanceRegistry(_vaultFactorySet.at(index)).isInstance(target) (contracts/hypervisor/Hypervisor.sol#324)
",address) (contracts/hypervisor/Hypervisor.sol,321-330
reentrancy-benign,Low,"Reentrancy in VisorFactory.createSelected2(bytes32,bytes32) (contracts/visor/VisorFactory.sol#78-95):
	External calls:
	- vault = ProxyFactory._create2(templates[name],abi.encodeWithSelector(IUniversalVault.initialize.selector),salt) (contracts/visor/VisorFactory.sol#80-84)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#87)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#87)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- userIndex[msg.sender].push(vault) (contracts/visor/VisorFactory.sol#88)
","bytes32,bytes32) (contracts/visor/VisorFactory.sol",78-95
reentrancy-benign,Low,"Reentrancy in Visor.rageQuit(address,address) (contracts/visor/Visor.sol#364-398):
	External calls:
	- IRageQuit(delegate).rageQuit{gas: RAGEQUIT_GAS}() (contracts/visor/Visor.sol#382-389)
	State variables written after the call(s):
	- delete _locks[lockID] (contracts/visor/Visor.sol#394)
","address,address) (contracts/visor/Visor.sol",364-398
reentrancy-benign,Low,"Reentrancy in VisorFactory.create2(bytes32) (contracts/visor/VisorFactory.sol#123-140):
	External calls:
	- vault = ProxyFactory._create2(templates[activeTemplate],abi.encodeWithSelector(IUniversalVault.initialize.selector),salt) (contracts/visor/VisorFactory.sol#125-129)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#132)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#132)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- userIndex[msg.sender].push(vault) (contracts/visor/VisorFactory.sol#133)
",bytes32) (contracts/visor/VisorFactory.sol,123-140
reentrancy-benign,Low,"Reentrancy in VisorFactory.createSelected(bytes32) (contracts/visor/VisorFactory.sol#60-76):
	External calls:
	- vault = ProxyFactory._create(templates[name],abi.encodeWithSelector(IUniversalVault.initialize.selector)) (contracts/visor/VisorFactory.sol#62-65)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#68)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#68)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- userIndex[msg.sender].push(vault) (contracts/visor/VisorFactory.sol#69)
",bytes32) (contracts/visor/VisorFactory.sol,60-76
reentrancy-benign,Low,"Reentrancy in VisorFactory.create() (contracts/visor/VisorFactory.sol#105-121):
	External calls:
	- vault = ProxyFactory._create(templates[activeTemplate],abi.encodeWithSelector(IUniversalVault.initialize.selector)) (contracts/visor/VisorFactory.sol#107-110)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#113)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#113)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	State variables written after the call(s):
	- userIndex[msg.sender].push(vault) (contracts/visor/VisorFactory.sol#114)
",) (contracts/visor/VisorFactory.sol,105-121
reentrancy-events,Low,"Reentrancy in VisorFactory.create2(bytes32) (contracts/visor/VisorFactory.sol#123-140):
	External calls:
	- vault = ProxyFactory._create2(templates[activeTemplate],abi.encodeWithSelector(IUniversalVault.initialize.selector),salt) (contracts/visor/VisorFactory.sol#125-129)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#132)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#132)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InstanceAdded(vault) (contracts/visor/VisorFactory.sol#136)
	- Transfer(address(0),to,tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#343)
		- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#132)
",bytes32) (contracts/visor/VisorFactory.sol,123-140
reentrancy-events,Low,"Reentrancy in VisorFactory.create() (contracts/visor/VisorFactory.sol#105-121):
	External calls:
	- vault = ProxyFactory._create(templates[activeTemplate],abi.encodeWithSelector(IUniversalVault.initialize.selector)) (contracts/visor/VisorFactory.sol#107-110)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#113)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#113)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InstanceAdded(vault) (contracts/visor/VisorFactory.sol#117)
	- Transfer(address(0),to,tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#343)
		- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#113)
",) (contracts/visor/VisorFactory.sol,105-121
reentrancy-events,Low,"Reentrancy in Visor.timeLockERC20(address,address,uint256,uint256) (contracts/visor/Visor.sol#583-612):
	External calls:
	- IERC20(token).transferFrom(msg.sender,address(this),amount) (contracts/visor/Visor.sol#610)
	Event emitted after the call(s):
	- TimeLockERC20(recipient,token,amount,expires) (contracts/visor/Visor.sol#611)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",583-612
reentrancy-events,Low,"Reentrancy in Visor.timeUnlockERC721(address,address,uint256,uint256) (contracts/visor/Visor.sol#561-576):
	External calls:
	- IERC721(nftContract).safeTransferFrom(address(this),recipient,tokenId) (contracts/visor/Visor.sol#574)
	Event emitted after the call(s):
	- TimeUnlockERC721(recipient,nftContract,tokenId,expires) (contracts/visor/Visor.sol#575)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",561-576
reentrancy-events,Low,"Reentrancy in Hypervisor.fund(uint256,uint256) (contracts/hypervisor/Hypervisor.sol#713-748):
	External calls:
	- TransferHelper.safeTransferFrom(_hypervisor.rewardToken,msg.sender,_hypervisor.rewardPool,amount) (contracts/hypervisor/Hypervisor.sol#739-744)
	Event emitted after the call(s):
	- HypervisorFunded(amount,duration) (contracts/hypervisor/Hypervisor.sol#747)
","uint256,uint256) (contracts/hypervisor/Hypervisor.sol",713-748
reentrancy-events,Low,"Reentrancy in Hypervisor.stake(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#861-901):
	External calls:
	- IUniversalVault(vault).lock(_hypervisor.stakingToken,amount,permission) (contracts/hypervisor/Hypervisor.sol#897)
	Event emitted after the call(s):
	- Staked(vault,amount) (contracts/hypervisor/Hypervisor.sol#900)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",861-901
reentrancy-events,Low,"Reentrancy in VisorFactory.createSelected(bytes32) (contracts/visor/VisorFactory.sol#60-76):
	External calls:
	- vault = ProxyFactory._create(templates[name],abi.encodeWithSelector(IUniversalVault.initialize.selector)) (contracts/visor/VisorFactory.sol#62-65)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#68)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#68)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InstanceAdded(vault) (contracts/visor/VisorFactory.sol#72)
	- Transfer(address(0),to,tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#343)
		- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#68)
",bytes32) (contracts/visor/VisorFactory.sol,60-76
reentrancy-events,Low,"Reentrancy in Visor.timeLockERC721(address,address,uint256,uint256) (contracts/visor/Visor.sol#529-554):
	External calls:
	- IERC721(nftContract).safeTransferFrom(msg.sender,address(this),tokenId) (contracts/visor/Visor.sol#552)
	Event emitted after the call(s):
	- TimeLockERC20(recipient,nftContract,tokenId,expires) (contracts/visor/Visor.sol#553)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",529-554
reentrancy-events,Low,"Reentrancy in Visor.rageQuit(address,address) (contracts/visor/Visor.sol#364-398):
	External calls:
	- IRageQuit(delegate).rageQuit{gas: RAGEQUIT_GAS}() (contracts/visor/Visor.sol#382-389)
	Event emitted after the call(s):
	- RageQuit(delegate,token,notified,error) (contracts/visor/Visor.sol#397)
","address,address) (contracts/visor/Visor.sol",364-398
reentrancy-events,Low,"Reentrancy in VisorFactory.createSelected2(bytes32,bytes32) (contracts/visor/VisorFactory.sol#78-95):
	External calls:
	- vault = ProxyFactory._create2(templates[name],abi.encodeWithSelector(IUniversalVault.initialize.selector),salt) (contracts/visor/VisorFactory.sol#80-84)
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#87)
		- returndata = to.functionCall(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data),ERC721: transfer to non ERC721Receiver implementer) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#441-447)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	External calls sending eth:
	- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#87)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
	Event emitted after the call(s):
	- InstanceAdded(vault) (contracts/visor/VisorFactory.sol#91)
	- Transfer(address(0),to,tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#343)
		- ERC721._safeMint(msg.sender,uint256(vault)) (contracts/visor/VisorFactory.sol#87)
","bytes32,bytes32) (contracts/visor/VisorFactory.sol",78-95
reentrancy-events,Low,"Reentrancy in Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032):
	External calls:
	- IUniversalVault(vault).unlock(_hypervisor.stakingToken,amount,permission) (contracts/hypervisor/Hypervisor.sol#990)
	- IRewardPool(_hypervisor.rewardPool).sendERC20(bonusToken,recipient,bonusAmount) (contracts/hypervisor/Hypervisor.sol#1019)
	Event emitted after the call(s):
	- RewardClaimed(vault,recipient,bonusToken,bonusAmount) (contracts/hypervisor/Hypervisor.sol#1022)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
reentrancy-events,Low,"Reentrancy in Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032):
	External calls:
	- IUniversalVault(vault).unlock(_hypervisor.stakingToken,amount,permission) (contracts/hypervisor/Hypervisor.sol#990)
	- IRewardPool(_hypervisor.rewardPool).sendERC20(bonusToken,recipient,bonusAmount) (contracts/hypervisor/Hypervisor.sol#1019)
	- IRewardPool(_hypervisor.rewardPool).sendERC20(_hypervisor.rewardToken,recipient,out.reward) (contracts/hypervisor/Hypervisor.sol#1027)
	Event emitted after the call(s):
	- RewardClaimed(vault,recipient,_hypervisor.rewardToken,out.reward) (contracts/hypervisor/Hypervisor.sol#1030)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
reentrancy-events,Low,"Reentrancy in Visor.timeUnlockERC20(address,address,uint256,uint256) (contracts/visor/Visor.sol#619-639):
	External calls:
	- TransferHelper.safeTransfer(token,recipient,amount) (contracts/visor/Visor.sol#637)
	Event emitted after the call(s):
	- TimeUnlockERC20(recipient,token,amount,expires) (contracts/visor/Visor.sol#638)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",619-639
reentrancy-events,Low,"Reentrancy in Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032):
	External calls:
	- IUniversalVault(vault).unlock(_hypervisor.stakingToken,amount,permission) (contracts/hypervisor/Hypervisor.sol#990)
	Event emitted after the call(s):
	- Unstaked(vault,amount) (contracts/hypervisor/Hypervisor.sol#993)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
timestamp,Low,"Hypervisor.calculateUnlockedRewards(IHypervisor.RewardSchedule[],uint256,uint256,uint256) (contracts/hypervisor/Hypervisor.sol#540-583) uses timestamp for comparisons
	Dangerous comparisons:
	- rewardSchedules.length == 0 (contracts/hypervisor/Hypervisor.sol#547)
	- index < rewardSchedules.length (contracts/hypervisor/Hypervisor.sol#553)
	- timestamp.sub(schedule.start) < schedule.duration (contracts/hypervisor/Hypervisor.sol#563)
","IHypervisor.RewardSchedule[],uint256,uint256,uint256) (contracts/hypervisor/Hypervisor.sol",540-583
timestamp,Low,"Visor.timeLockERC721(address,address,uint256,uint256) (contracts/visor/Visor.sol#529-554) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expires > block.timestamp,Expires must be in future) (contracts/visor/Visor.sol#531-534)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",529-554
timestamp,Low,"Hypervisor.rescueTokensFromRewardPool(address,address,uint256) (contracts/hypervisor/Hypervisor.sol#825-841) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(token != _hypervisor.rewardToken,Hypervisor: invalid address) (contracts/hypervisor/Hypervisor.sol#834)
","address,address,uint256) (contracts/hypervisor/Hypervisor.sol",825-841
timestamp,Low,"Hypervisor.isValidAddress(address) (contracts/hypervisor/Hypervisor.sol#332-341) uses timestamp for comparisons
	Dangerous comparisons:
	- target != address(this) && target != address(0) && target != _hypervisor.stakingToken && target != _hypervisor.rewardToken && target != _hypervisor.rewardPool && ! _bonusTokenSet.contains(target) (contracts/hypervisor/Hypervisor.sol#334-340)
",address) (contracts/hypervisor/Hypervisor.sol,332-341
timestamp,Low,"Visor.timeLockERC20(address,address,uint256,uint256) (contracts/visor/Visor.sol#583-612) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expires > block.timestamp,Expires must be in future) (contracts/visor/Visor.sol#590-593)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",583-612
timestamp,Low,"Hypervisor.getFutureTotalStakeUnits(uint256) (contracts/hypervisor/Hypervisor.sol#378-393) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp == _hypervisor.lastUpdate (contracts/hypervisor/Hypervisor.sol#385)
",uint256) (contracts/hypervisor/Hypervisor.sol,378-393
timestamp,Low,"Hypervisor.unstakeAndClaim(address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol#923-1032) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(_hypervisor.totalStake >= amount) (contracts/hypervisor/Hypervisor.sol#944)
	- out.newStakesCount == 0 (contracts/hypervisor/Hypervisor.sol#973)
	- vaultData.stakes.length > out.newStakesCount (contracts/hypervisor/Hypervisor.sol#979)
	- out.reward > 0 (contracts/hypervisor/Hypervisor.sol#996)
","address,uint256,bytes) (contracts/hypervisor/Hypervisor.sol",923-1032
timestamp,Low,"Visor.timeUnlockERC721(address,address,uint256,uint256) (contracts/visor/Visor.sol#561-576) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timelockERC721s[key].expires <= block.timestamp,Not expired yet) (contracts/visor/Visor.sol#564-567)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",561-576
timestamp,Low,"Hypervisor.calculateReward(uint256,uint256,uint256,uint256,IHypervisor.RewardScaling) (contracts/hypervisor/Hypervisor.sol#650-698) uses timestamp for comparisons
	Dangerous comparisons:
	- totalStakeUnits != 0 (contracts/hypervisor/Hypervisor.sol#663)
	- stakeDuration >= rewardScaling.time || rewardScaling.floor == rewardScaling.ceiling (contracts/hypervisor/Hypervisor.sol#677)
","uint256,uint256,uint256,uint256,IHypervisor.RewardScaling) (contracts/hypervisor/Hypervisor.sol",650-698
timestamp,Low,"Visor.timeUnlockERC20(address,address,uint256,uint256) (contracts/visor/Visor.sol#619-639) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timelockERC20s[key].expires <= block.timestamp,Not expired yet) (contracts/visor/Visor.sol#627-630)
","address,address,uint256,uint256) (contracts/visor/Visor.sol",619-639
timestamp,Low,"Visor.transferERC721(address,address,uint256) (contracts/visor/Visor.sol#495-516) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(timelockERC721s[timelockERC721Keys[nftContract][i]].expires <= block.timestamp,NFT locked and not expired) (contracts/visor/Visor.sol#506-509)
","address,address,uint256) (contracts/visor/Visor.sol",495-516
assembly,Informational,"ECDSA.recover(bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#26-47) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#40-44)
","bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol",26-47
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",171-188
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-35
assembly,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-34) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#26-32)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-34
assembly,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#43-53) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#45-51)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",43-53
assembly,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#58-70) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#60-69)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",58-70
assembly,Informational,"EIP712._getChainId() (contracts/visor/EIP712.sol#89-95) uses assembly
	- INLINE ASM (contracts/visor/EIP712.sol#92-94)
",) (contracts/visor/EIP712.sol,89-95
pragma,Informational,"6 different versions of Solidity are used:
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Clones.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3)
		->=0.6.0<0.8.0 (contracts/visor/EIP712.sol#3)
	- Version constraint >=0.4.24<0.8.0 is used by:
		->=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Initializable.sol#4)
	- Version constraint >=0.6.2<0.8.0 is used by:
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3)
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3)
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3)
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- Version constraint >=0.6.0 is used by:
		->=0.6.0 (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#3)
	- Version constraint 0.7.6 is used by:
		-0.7.6 (contracts/Mainframe.sol#2)
		-0.7.6 (contracts/factory/IFactory.sol#2)
		-0.7.6 (contracts/factory/InstanceRegistry.sol#2)
		-0.7.6 (contracts/factory/ProxyFactory.sol#2)
		-0.7.6 (contracts/hypervisor/Hypervisor.sol#2)
		-0.7.6 (contracts/hypervisor/PowerSwitch.sol#2)
		-0.7.6 (contracts/hypervisor/PowerSwitchFactory.sol#2)
		-0.7.6 (contracts/hypervisor/Powered.sol#2)
		-0.7.6 (contracts/hypervisor/RewardPool.sol#2)
		-0.7.6 (contracts/hypervisor/RewardPoolFactory.sol#2)
		-0.7.6 (contracts/interfaces/IUniversalVault.sol#2)
		-0.7.6 (contracts/interfaces/IVisorService.sol#2)
		-0.7.6 (contracts/mock/IERC20Detailed.sol#2)
		-0.7.6 (contracts/mock/MockERC20.sol#2)
		-0.7.6 (contracts/mock/MockNFT.sol#2)
		-0.7.6 (contracts/mock/MockVisorService.sol#2)
		-0.7.6 (contracts/visor/ERC1271.sol#2)
		-0.7.6 (contracts/visor/OwnableERC721.sol#2)
		-0.7.6 (contracts/visor/Visor.sol#2)
		-0.7.6 (contracts/visor/VisorFactory.sol#2)
	- Version constraint ^0.7.0 is used by:
		-^0.7.0 (contracts/RewardsToken.sol#2)
		-^0.7.0 (contracts/StakingToken.sol#2)
",N/A,N/A
dead-code,Informational,"Powered._onlyOffline() (contracts/hypervisor/Powered.sol#81-83) is never used and should be removed
",) (contracts/hypervisor/Powered.sol,81-83
dead-code,Informational,"Hypervisor._truncateStakesArray(IHypervisor.StakeData[],uint256) (contracts/hypervisor/Hypervisor.sol#1086-1096) is never used and should be removed
","IHypervisor.StakeData[],uint256) (contracts/hypervisor/Hypervisor.sol",1086-1096
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/interfaces/IERC721Receiver.sol#4)
",N/A,N/A
solc-version,Informational,"solc-0.7.6 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/ERC165.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/introspection/IERC165.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Clones.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721Holder.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableMap.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/EnumerableSet.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3)
	- >=0.6.0<0.8.0 (contracts/visor/EIP712.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- >=0.6.0 (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/Mainframe.sol#2)
	- 0.7.6 (contracts/factory/IFactory.sol#2)
	- 0.7.6 (contracts/factory/InstanceRegistry.sol#2)
	- 0.7.6 (contracts/factory/ProxyFactory.sol#2)
	- 0.7.6 (contracts/hypervisor/Hypervisor.sol#2)
	- 0.7.6 (contracts/hypervisor/PowerSwitch.sol#2)
	- 0.7.6 (contracts/hypervisor/PowerSwitchFactory.sol#2)
	- 0.7.6 (contracts/hypervisor/Powered.sol#2)
	- 0.7.6 (contracts/hypervisor/RewardPool.sol#2)
	- 0.7.6 (contracts/hypervisor/RewardPoolFactory.sol#2)
	- 0.7.6 (contracts/interfaces/IUniversalVault.sol#2)
	- 0.7.6 (contracts/interfaces/IVisorService.sol#2)
	- 0.7.6 (contracts/mock/IERC20Detailed.sol#2)
	- 0.7.6 (contracts/mock/MockERC20.sol#2)
	- 0.7.6 (contracts/mock/MockNFT.sol#2)
	- 0.7.6 (contracts/mock/MockVisorService.sol#2)
	- 0.7.6 (contracts/visor/ERC1271.sol#2)
	- 0.7.6 (contracts/visor/OwnableERC721.sol#2)
	- 0.7.6 (contracts/visor/Visor.sol#2)
	- 0.7.6 (contracts/visor/VisorFactory.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.2<0.8.0 is too complex.
It is used by:
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.7.0 (contracts/RewardsToken.sol#2)
	- ^0.7.0 (contracts/StakingToken.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.24<0.8.0 is too complex.
It is used by:
	- >=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Initializable.sol#4)
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",163-169
low-level-calls,Informational,"Low level call in TransferHelper.safeTransfer(address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#20-31):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#26)
","address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol",20-31
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",139-145
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#33-45):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value)) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#40)
","address,address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol",33-45
low-level-calls,Informational,"Low level call in ProxyFactory._create(address,bytes) (contracts/factory/ProxyFactory.sol#9-21):
	- (success,err) = proxy.call(data) (contracts/factory/ProxyFactory.sol#15)
","address,bytes) (contracts/factory/ProxyFactory.sol",9-21
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",53-59
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferETH(address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#47-50):
	- (success,None) = to.call{value: value}(new bytes(0)) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#48)
","address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol",47-50
low-level-calls,Informational,"Low level call in TransferHelper.safeApprove(address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#7-18):
	- (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value)) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol#13)
","address,address,uint256) (node_modules/@uniswap/lib/contracts/libraries/TransferHelper.sol",7-18
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",114-121
low-level-calls,Informational,"Low level call in SignatureChecker.isValidSignature(address,bytes32,bytes) (contracts/visor/ERC1271.sol#15-28):
	- (success,returndata) = signer.staticcall(abi.encodeWithSelector(selector,hash,signature)) (contracts/visor/ERC1271.sol#22-23)
","address,bytes32,bytes) (contracts/visor/ERC1271.sol",15-28
low-level-calls,Informational,"Low level call in ProxyFactory._create2(address,bytes,bytes32) (contracts/factory/ProxyFactory.sol#23-39):
	- (success,err) = proxy.call(data) (contracts/factory/ProxyFactory.sol#33)
","address,bytes,bytes32) (contracts/factory/ProxyFactory.sol",23-39
naming-convention,Informational,"Parameter Visor.setURI(string)._uri (contracts/visor/Visor.sol#400) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function EIP712._EIP712NameHash() (contracts/visor/EIP712.sol#103-105) is not in mixedCase
",) (contracts/visor/EIP712.sol,103-105
naming-convention,Informational,"Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#245) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/drafts/IERC20Permit.sol#50) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._HASHED_NAME (contracts/visor/EIP712.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function EIP712._EIP712VersionHash() (contracts/visor/EIP712.sol#113-115) is not in mixedCase
",) (contracts/visor/EIP712.sol,113-115
naming-convention,Informational,"Variable EIP712._HASHED_VERSION (contracts/visor/EIP712.sol#29) is not in mixedCase
",N/A,N/A
redundant-statements,Informational,"Redundant expression ""this (contracts/visor/EIP712.sol#90)"" inEIP712 (contracts/visor/EIP712.sol#26-116)
",contracts/visor/EIP712.sol,26-116
redundant-statements,Informational,"Redundant expression ""this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)"" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
",node_modules/@openzeppelin/contracts/utils/Context.sol,15-24
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#64)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",58-70
too-many-digits,Informational,"Hypervisor.slitherConstructorConstantVariables() (contracts/hypervisor/Hypervisor.sol#217-1097) uses literals with too many digits:
	- BASE_SHARES_PER_WEI = 1000000 (contracts/hypervisor/Hypervisor.sol#232)
",) (contracts/hypervisor/Hypervisor.sol,217-1097
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#62)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",58-70
too-many-digits,Informational,"RewardToken.slitherConstructorConstantVariables() (contracts/RewardsToken.sol#6-13) uses literals with too many digits:
	- INITIAL_SUPPLY = 1000000000 (contracts/RewardsToken.sol#7)
",) (contracts/RewardsToken.sol,6-13
too-many-digits,Informational,"StakingToken.slitherConstructorConstantVariables() (contracts/StakingToken.sol#6-13) uses literals with too many digits:
	- INITIAL_SUPPLY = 1000000000 (contracts/StakingToken.sol#7)
",) (contracts/StakingToken.sol,6-13
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#47)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",43-53
too-many-digits,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#30)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-34
too-many-digits,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#28)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-34
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#49)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",43-53
too-many-digits,Informational,"Visor.slitherConstructorConstantVariables() (contracts/visor/Visor.sol#27-641) uses literals with too many digits:
	- RAGEQUIT_GAS = 500000 (contracts/visor/Visor.sol#50)
",) (contracts/visor/Visor.sol,27-641
immutable-states,Optimization,"Hypervisor.stakeLimit (contracts/hypervisor/Hypervisor.sol#233) should be immutable 
",N/A,N/A
