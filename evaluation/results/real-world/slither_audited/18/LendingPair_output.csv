Severity,Description,Line
High,"Reentrancy in LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#157)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	External calls sending eth:
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	State variables written after the call(s):
	- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",156-169
Medium,"LendingPair._convertTokenValues(address,address,uint256) (contracts/LendingPair.sol#519-529) performs a multiplication on the result of a division:
	- priceFrom = controller.tokenPrice(_fromToken) * 1e18 / 10 ** IERC20(_fromToken).decimals() (contracts/LendingPair.sol#525)
	- _inputAmount * priceFrom / priceTo (contracts/LendingPair.sol#528)
",519-529
Medium,"LendingPair._borrow(address,uint256) (contracts/LendingPair.sol#426-436) uses a dangerous strict equality:
	- require(bool,string)(lpToken[address(_token)].balanceOf(msg.sender) == 0,LendingPair: cannot borrow supplied token) (contracts/LendingPair.sol#428)
",426-436
Medium,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _burnSupply(supplyToken,_account,supplyBurn) (contracts/LendingPair.sol#279)
		- lpToken[_token].burn(_account,_amount) (contracts/LendingPair.sol#372)
	- _mintSupply(supplyToken,feeRecipient(),systemFee) (contracts/LendingPair.sol#280)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _burnDebt(_repayToken,_account,_repayAmount) (contracts/LendingPair.sol#281)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _burnDebt(_repayToken,_account,_repayAmount) (contracts/LendingPair.sol#281)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",246-289
Medium,"Reentrancy in LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#149)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",147-154
Medium,"Reentrancy in LendingPair.accrueAccount(address) (contracts/LendingPair.sol#187-195):
	External calls:
	- _distributeReward(_account) (contracts/LendingPair.sol#188)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#190)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
		- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",187-195
Medium,"Reentrancy in LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397):
	External calls:
	- _accrueAccountSupply(tokenA,lpBalanceA,_account) (contracts/LendingPair.sol#390)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountSupply(tokenB,lpBalanceB,_account) (contracts/LendingPair.sol#391)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
",386-397
Medium,"Reentrancy in LendingPair.borrow(address,uint256) (contracts/LendingPair.sol#139-145):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#141)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",139-145
Medium,"Reentrancy in LendingPair.repay(address,address,uint256) (contracts/LendingPair.sol#171-177):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#173)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",171-177
Medium,"Reentrancy in LendingPair.withdrawBorrowETH(uint256) (contracts/LendingPair.sol#106-112):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#107)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",106-112
Medium,"Reentrancy in LendingPair.withdrawBorrow(address,uint256) (contracts/LendingPair.sol#98-104):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#100)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",98-104
Medium,"Reentrancy in LendingPair.depositRepayETH(address) (contracts/LendingPair.sol#83-88):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#84)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",83-88
Medium,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
		- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",246-289
Medium,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
",339-353
Medium,"Reentrancy in LendingPair.depositRepay(address,address,uint256) (contracts/LendingPair.sol#75-81):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#77)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",75-81
Low,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
",339-353
Low,"Reentrancy in LendingPair.initialize(address,address,IERC20,IERC20) (contracts/LendingPair.sol#57-73):
	External calls:
	- lpToken[tokenA] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#71)
		- newLPToken.initialize() (contracts/LendingPair.sol#464)
	- lpToken[tokenB] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#72)
		- newLPToken.initialize() (contracts/LendingPair.sol#464)
	State variables written after the call(s):
	- lpToken[tokenB] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#72)
",57-73
Low,"Reentrancy in LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397):
	External calls:
	- _accrueAccountSupply(tokenA,lpBalanceA,_account) (contracts/LendingPair.sol#390)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountSupply(tokenB,lpBalanceB,_account) (contracts/LendingPair.sol#391)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountDebt(tokenA,_account) (contracts/LendingPair.sol#392)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	- _accrueAccountDebt(tokenB,_account) (contracts/LendingPair.sol#393)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	- _accrueAccountDebt(tokenA,_account) (contracts/LendingPair.sol#392)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	- _accrueAccountDebt(tokenB,_account) (contracts/LendingPair.sol#393)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
",386-397
Low,"Reentrancy in LendingPair.accrueAccount(address) (contracts/LendingPair.sol#187-195):
	External calls:
	- _distributeReward(_account) (contracts/LendingPair.sol#188)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- accrue() (contracts/LendingPair.sol#189)
		- cumulativeInterestRate[_token] += newInterest (contracts/LendingPair.sol#459)
	- accrue() (contracts/LendingPair.sol#189)
		- lastBlockAccrued = block.number (contracts/LendingPair.sol#183)
",187-195
Low,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
",339-353
Low,"Reentrancy in LendingPair.withdraw(address,uint256) (contracts/LendingPair.sol#114-120):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#116)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(_token,_amount) (contracts/LendingPair.sol#118)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(_token,_amount) (contracts/LendingPair.sol#118)
",114-120
Low,"Reentrancy in LendingPair.repay(address,address,uint256) (contracts/LendingPair.sol#171-177):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#173)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
",171-177
Low,"Reentrancy in LendingPair.depositRepayETH(address) (contracts/LendingPair.sol#83-88):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#84)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
",83-88
Low,"Reentrancy in LendingPair.deposit(address,address,uint256) (contracts/LendingPair.sol#90-96):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#92)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _deposit(_account,_token,_amount) (contracts/LendingPair.sol#94)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _deposit(_account,_token,_amount) (contracts/LendingPair.sol#94)
",90-96
Low,"Reentrancy in LendingPair.depositRepay(address,address,uint256) (contracts/LendingPair.sol#75-81):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#77)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
",75-81
Low,"Reentrancy in LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454):
	External calls:
	- _mintSupply(_token,_account,_amount) (contracts/LendingPair.sol#450)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
",443-454
Low,"Reentrancy in LendingPair.withdrawAll(address) (contracts/LendingPair.sol#122-129):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#124)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(_token,amount) (contracts/LendingPair.sol#127)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(_token,amount) (contracts/LendingPair.sol#127)
",122-129
Low,"Reentrancy in LendingPair.withdrawBorrow(address,uint256) (contracts/LendingPair.sol#98-104):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#100)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
",98-104
Low,"Reentrancy in LendingPair.borrow(address,uint256) (contracts/LendingPair.sol#139-145):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#141)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
",139-145
Low,"Reentrancy in LendingPair.withdrawAllETH() (contracts/LendingPair.sol#131-137):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#132)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(address(WETH),amount) (contracts/LendingPair.sol#135)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(address(WETH),amount) (contracts/LendingPair.sol#135)
",131-137
Low,"Reentrancy in LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#157)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	External calls sending eth:
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
",156-169
Low,"Reentrancy in LendingPair._withdraw(address,uint256) (contracts/LendingPair.sol#417-424):
	External calls:
	- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
",417-424
Low,"Reentrancy in LendingPair.withdrawBorrowETH(uint256) (contracts/LendingPair.sol#106-112):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#107)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
",106-112
Low,"Reentrancy in LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#149)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
",147-154
Low,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _burnSupply(supplyToken,_account,supplyBurn) (contracts/LendingPair.sol#279)
		- lpToken[_token].burn(_account,_amount) (contracts/LendingPair.sol#372)
	- _mintSupply(supplyToken,feeRecipient(),systemFee) (contracts/LendingPair.sol#280)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _safeTransferFrom(_repayToken,msg.sender,_repayAmount) (contracts/LendingPair.sol#285)
		- success = IERC20(_token).transferFrom(_sender,address(this),_amount) (contracts/TransferHelper.sol#20)
	- _safeTransfer(IERC20(supplyToken),msg.sender,supplyOutput) (contracts/LendingPair.sol#286)
		- success = _token.transfer(_recipient,_amount) (contracts/LendingPair.sol#470)
	Event emitted after the call(s):
	- Liquidation(_account,_repayToken,supplyToken,_repayAmount,supplyOutput) (contracts/LendingPair.sol#288)
",246-289
