Check,Severity,Description,Filename,Line
reentrancy-eth,High,"Reentrancy in LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#157)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	External calls sending eth:
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	State variables written after the call(s):
	- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",address) (contracts/LendingPair.sol,156-169
unchecked-transfer,High,"RewardDistribution.migrateRewards(address,uint256) (contracts/RewardDistribution.sol#181-183) ignores return value by rewardToken.transfer(_recipient,_amount) (contracts/RewardDistribution.sol#182)
","address,uint256) (contracts/RewardDistribution.sol",181-183
unchecked-transfer,High,"RewardDistribution._transferReward(address,uint256) (contracts/RewardDistribution.sol#185-194) ignores return value by rewardToken.transfer(_to,_amount) (contracts/RewardDistribution.sol#191)
","address,uint256) (contracts/RewardDistribution.sol",185-194
unchecked-transfer,High,"RewardDistribution._transferReward(address,uint256) (contracts/RewardDistribution.sol#185-194) ignores return value by rewardToken.transfer(_to,rewardTokenBal) (contracts/RewardDistribution.sol#189)
","address,uint256) (contracts/RewardDistribution.sol",185-194
divide-before-multiply,Medium,"InterestRateModel.borrowRatePerBlock(ILendingPair,address) (contracts/InterestRateModel.sol#27-43) performs a multiplication on the result of a division:
	- rate = LOW_RATE * utilization / 100e18 (contracts/InterestRateModel.sol#36)
	- utilization = 100e18 * (debt - (supply * TARGET_UTILIZATION / 100e18)) / (supply * (100e18 - TARGET_UTILIZATION) / 100e18) (contracts/InterestRateModel.sol#39)
","ILendingPair,address) (contracts/InterestRateModel.sol",27-43
divide-before-multiply,Medium,"InterestRateModel.borrowRatePerBlock(ILendingPair,address) (contracts/InterestRateModel.sol#27-43) performs a multiplication on the result of a division:
	- utilization = 100e18 * (debt - (supply * TARGET_UTILIZATION / 100e18)) / (supply * (100e18 - TARGET_UTILIZATION) / 100e18) (contracts/InterestRateModel.sol#39)
	- LOW_RATE + (HIGH_RATE - LOW_RATE) * utilization / 100e18 (contracts/InterestRateModel.sol#41)
","ILendingPair,address) (contracts/InterestRateModel.sol",27-43
divide-before-multiply,Medium,"LendingPair._convertTokenValues(address,address,uint256) (contracts/LendingPair.sol#519-529) performs a multiplication on the result of a division:
	- priceFrom = controller.tokenPrice(_fromToken) * 1e18 / 10 ** IERC20(_fromToken).decimals() (contracts/LendingPair.sol#525)
	- _inputAmount * priceFrom / priceTo (contracts/LendingPair.sol#528)
","address,address,uint256) (contracts/LendingPair.sol",519-529
incorrect-equality,Medium,"RewardDistribution._pendingRewardPerToken(RewardDistribution.Pool) (contracts/RewardDistribution.sol#230-239) uses a dangerous strict equality:
	- _pool.lastRewardBlock == 0 || totalStaked == 0 (contracts/RewardDistribution.sol#233)
",RewardDistribution.Pool) (contracts/RewardDistribution.sol,230-239
incorrect-equality,Medium,"LendingPair._borrow(address,uint256) (contracts/LendingPair.sol#426-436) uses a dangerous strict equality:
	- require(bool,string)(lpToken[address(_token)].balanceOf(msg.sender) == 0,LendingPair: cannot borrow supplied token) (contracts/LendingPair.sol#428)
","address,uint256) (contracts/LendingPair.sol",426-436
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _burnSupply(supplyToken,_account,supplyBurn) (contracts/LendingPair.sol#279)
		- lpToken[_token].burn(_account,_amount) (contracts/LendingPair.sol#372)
	- _mintSupply(supplyToken,feeRecipient(),systemFee) (contracts/LendingPair.sol#280)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _burnDebt(_repayToken,_account,_repayAmount) (contracts/LendingPair.sol#281)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _burnDebt(_repayToken,_account,_repayAmount) (contracts/LendingPair.sol#281)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,address,uint256,uint256) (contracts/LendingPair.sol",246-289
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#149)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,address) (contracts/LendingPair.sol",147-154
reentrancy-no-eth,Medium,"Reentrancy in RewardDistribution.distributeReward(address,address) (contracts/RewardDistribution.sol#70-75):
	External calls:
	- _distributeReward(_account,pair,_token,true) (contracts/RewardDistribution.sol#73)
		- rewardToken.transfer(_to,rewardTokenBal) (contracts/RewardDistribution.sol#189)
		- rewardToken.transfer(_to,_amount) (contracts/RewardDistribution.sol#191)
	- _distributeReward(_account,pair,_token,false) (contracts/RewardDistribution.sol#74)
		- rewardToken.transfer(_to,rewardTokenBal) (contracts/RewardDistribution.sol#189)
		- rewardToken.transfer(_to,_amount) (contracts/RewardDistribution.sol#191)
	State variables written after the call(s):
	- _distributeReward(_account,pair,_token,false) (contracts/RewardDistribution.sol#74)
		- pool.accRewardsPerToken += _pendingRewardPerToken(pool) (contracts/RewardDistribution.sol#139)
		- pool.lastRewardBlock = block.number (contracts/RewardDistribution.sol#140)
	RewardDistribution.pools (contracts/RewardDistribution.sol#38) can be used in cross function reentrancies:
	- RewardDistribution._getPool(address,address,bool) (contracts/RewardDistribution.sol#241-243)
	- RewardDistribution._pendingAccountReward(uint256,address) (contracts/RewardDistribution.sol#222-228)
	- RewardDistribution.accruePool(uint256) (contracts/RewardDistribution.sol#137-141)
	- RewardDistribution.addPool(address,address,bool,uint256) (contracts/RewardDistribution.sol#78-112)
	- RewardDistribution.poolLength() (contracts/RewardDistribution.sol#176-178)
	- RewardDistribution.pools (contracts/RewardDistribution.sol#38)
	- RewardDistribution.setReward(address,address,bool,uint256) (contracts/RewardDistribution.sol#115-129)
	- _distributeReward(_account,pair,_token,false) (contracts/RewardDistribution.sol#74)
		- rewardSnapshot[pid][_account] = pool.accRewardsPerToken (contracts/RewardDistribution.sol#206)
	RewardDistribution.rewardSnapshot (contracts/RewardDistribution.sol#45) can be used in cross function reentrancies:
	- RewardDistribution._distributeReward(address,address,address,bool) (contracts/RewardDistribution.sol#196-208)
	- RewardDistribution._pendingAccountReward(uint256,address) (contracts/RewardDistribution.sol#222-228)
	- RewardDistribution.rewardSnapshot (contracts/RewardDistribution.sol#45)
","address,address) (contracts/RewardDistribution.sol",70-75
reentrancy-no-eth,Medium,"Reentrancy in RewardDistribution._distributeReward(address,address,address,bool) (contracts/RewardDistribution.sol#196-208):
	External calls:
	- _transferReward(_account,_pendingAccountReward(pid,_account)) (contracts/RewardDistribution.sol#203)
		- rewardToken.transfer(_to,rewardTokenBal) (contracts/RewardDistribution.sol#189)
		- rewardToken.transfer(_to,_amount) (contracts/RewardDistribution.sol#191)
	State variables written after the call(s):
	- rewardSnapshot[pid][_account] = pool.accRewardsPerToken (contracts/RewardDistribution.sol#206)
	RewardDistribution.rewardSnapshot (contracts/RewardDistribution.sol#45) can be used in cross function reentrancies:
	- RewardDistribution._distributeReward(address,address,address,bool) (contracts/RewardDistribution.sol#196-208)
	- RewardDistribution._pendingAccountReward(uint256,address) (contracts/RewardDistribution.sol#222-228)
	- RewardDistribution.rewardSnapshot (contracts/RewardDistribution.sol#45)
","address,address,address,bool) (contracts/RewardDistribution.sol",196-208
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.accrueAccount(address) (contracts/LendingPair.sol#187-195):
	External calls:
	- _distributeReward(_account) (contracts/LendingPair.sol#188)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#190)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
		- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#193)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",address) (contracts/LendingPair.sol,187-195
reentrancy-no-eth,Medium,"Reentrancy in LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397):
	External calls:
	- _accrueAccountSupply(tokenA,lpBalanceA,_account) (contracts/LendingPair.sol#390)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountSupply(tokenB,lpBalanceB,_account) (contracts/LendingPair.sol#391)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
",address) (contracts/LendingPair.sol,386-397
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.borrow(address,uint256) (contracts/LendingPair.sol#139-145):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#141)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,uint256) (contracts/LendingPair.sol",139-145
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.repay(address,address,uint256) (contracts/LendingPair.sol#171-177):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#173)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,address,uint256) (contracts/LendingPair.sol",171-177
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.withdrawBorrowETH(uint256) (contracts/LendingPair.sol#106-112):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#107)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",uint256) (contracts/LendingPair.sol,106-112
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.withdrawBorrow(address,uint256) (contracts/LendingPair.sol#98-104):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#100)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,uint256) (contracts/LendingPair.sol",98-104
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.depositRepayETH(address) (contracts/LendingPair.sol#83-88):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#84)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
",address) (contracts/LendingPair.sol,83-88
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- accountInterestSnapshot[tokenA][_account] = cumulativeInterestRate[tokenA] (contracts/LendingPair.sol#395)
		- accountInterestSnapshot[tokenB][_account] = cumulativeInterestRate[tokenB] (contracts/LendingPair.sol#396)
	LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32) can be used in cross function reentrancies:
	- LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397)
	- LendingPair._newInterest(uint256,address,address) (contracts/LendingPair.sol#574-576)
	- LendingPair.accountInterestSnapshot (contracts/LendingPair.sol#32)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,address,uint256,uint256) (contracts/LendingPair.sol",246-289
reentrancy-no-eth,Medium,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
","address,uint256) (contracts/LendingPair.sol",339-353
reentrancy-no-eth,Medium,"Reentrancy in LendingPair.depositRepay(address,address,uint256) (contracts/LendingPair.sol#75-81):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#77)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- debtOf[_token][_account] -= _amount (contracts/LendingPair.sol#382)
	LendingPair.debtOf (contracts/LendingPair.sol#31) can be used in cross function reentrancies:
	- LendingPair._accrueAccountDebt(address,address) (contracts/LendingPair.sol#410-415)
	- LendingPair._borrowBalance(address,address,address) (contracts/LendingPair.sol#491-498)
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454)
	- LendingPair._depositRepay(address,address,uint256) (contracts/LendingPair.sol#323-337)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair._pendingBorrowInterest(address,address) (contracts/LendingPair.sol#487-489)
	- LendingPair.accountHealth(address) (contracts/LendingPair.sol#197-207)
	- LendingPair.debtOf (contracts/LendingPair.sol#31)
	- LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289)
	- LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154)
	- LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- totalDebt[_token] -= _amount (contracts/LendingPair.sol#383)
	LendingPair.totalDebt (contracts/LendingPair.sol#34) can be used in cross function reentrancies:
	- LendingPair._burnDebt(address,address,uint256) (contracts/LendingPair.sol#381-384)
	- LendingPair._checkBorrowLimits(address,address) (contracts/LendingPair.sol#553-564)
	- LendingPair._mintDebt(address,address,uint256) (contracts/LendingPair.sol#376-379)
	- LendingPair.totalDebt (contracts/LendingPair.sol#34)
","address,address,uint256) (contracts/LendingPair.sol",75-81
reentrancy-no-eth,Medium,"Reentrancy in LPTokenMaster._transfer(address,address,uint256) (contracts/LPTokenMaster.sol#69-89):
	External calls:
	- pair.accrueAccount(_sender) (contracts/LPTokenMaster.sol#75)
	- pair.accrueAccount(_recipient) (contracts/LPTokenMaster.sol#76)
	State variables written after the call(s):
	- balanceOf[_sender] -= _amount (contracts/LPTokenMaster.sol#78)
	LPTokenMaster.balanceOf (contracts/LPTokenMaster.sol#17) can be used in cross function reentrancies:
	- LPTokenMaster._burn(address,uint256) (contracts/LPTokenMaster.sol#99-105)
	- LPTokenMaster._mint(address,uint256) (contracts/LPTokenMaster.sol#91-97)
	- LPTokenMaster._transfer(address,address,uint256) (contracts/LPTokenMaster.sol#69-89)
	- LPTokenMaster.balanceOf (contracts/LPTokenMaster.sol#17)
	- balanceOf[_recipient] += _amount (contracts/LPTokenMaster.sol#79)
	LPTokenMaster.balanceOf (contracts/LPTokenMaster.sol#17) can be used in cross function reentrancies:
	- LPTokenMaster._burn(address,uint256) (contracts/LPTokenMaster.sol#99-105)
	- LPTokenMaster._mint(address,uint256) (contracts/LPTokenMaster.sol#91-97)
	- LPTokenMaster._transfer(address,address,uint256) (contracts/LPTokenMaster.sol#69-89)
	- LPTokenMaster.balanceOf (contracts/LPTokenMaster.sol#17)
","address,address,uint256) (contracts/LPTokenMaster.sol",69-89
unused-return,Medium,"UniswapV3Oracle.isPoolValid(address,address,uint24) (contracts/UniswapV3Oracle.sol#97-103) ignores return value by (None,None,None,None,observationSlots,None,None) = IUniswapV3Pool(poolAddress).slot0() (contracts/UniswapV3Oracle.sol#101)
","address,address,uint24) (contracts/UniswapV3Oracle.sol",97-103
events-maths,Low,"UniswapV3Oracle.setMinObservations(uint256) (contracts/UniswapV3Oracle.sol#73-75) should emit an event for: 
	- minObservations = _value (contracts/UniswapV3Oracle.sol#74) 
",uint256) (contracts/UniswapV3Oracle.sol,73-75
events-maths,Low,"UniswapV3Oracle.setTwapPeriod(uint32) (contracts/UniswapV3Oracle.sol#69-71) should emit an event for: 
	- twapPeriod = _value (contracts/UniswapV3Oracle.sol#70) 
",uint32) (contracts/UniswapV3Oracle.sol,69-71
missing-zero-check,Low,"Controller.setFeeRecipient(address)._value (contracts/Controller.sol#63) lacks a zero-check on :
		- feeRecipient = _value (contracts/Controller.sol#65)
",N/A,N/A
reentrancy-benign,Low,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	State variables written after the call(s):
	- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
","address,uint256) (contracts/LendingPair.sol",339-353
reentrancy-benign,Low,"Reentrancy in LendingPair.initialize(address,address,IERC20,IERC20) (contracts/LendingPair.sol#57-73):
	External calls:
	- lpToken[tokenA] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#71)
		- newLPToken.initialize() (contracts/LendingPair.sol#464)
	- lpToken[tokenB] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#72)
		- newLPToken.initialize() (contracts/LendingPair.sol#464)
	State variables written after the call(s):
	- lpToken[tokenB] = _createLpToken(_lpTokenMaster) (contracts/LendingPair.sol#72)
","address,address,IERC20,IERC20) (contracts/LendingPair.sol",57-73
reentrancy-benign,Low,"Reentrancy in LendingPair._accrueAccountInterest(address) (contracts/LendingPair.sol#386-397):
	External calls:
	- _accrueAccountSupply(tokenA,lpBalanceA,_account) (contracts/LendingPair.sol#390)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountSupply(tokenB,lpBalanceB,_account) (contracts/LendingPair.sol#391)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	State variables written after the call(s):
	- _accrueAccountDebt(tokenA,_account) (contracts/LendingPair.sol#392)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	- _accrueAccountDebt(tokenB,_account) (contracts/LendingPair.sol#393)
		- debtOf[_token][_account] += _amount (contracts/LendingPair.sol#377)
	- _accrueAccountDebt(tokenA,_account) (contracts/LendingPair.sol#392)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
	- _accrueAccountDebt(tokenB,_account) (contracts/LendingPair.sol#393)
		- totalDebt[_token] += _amount (contracts/LendingPair.sol#378)
",address) (contracts/LendingPair.sol,386-397
reentrancy-benign,Low,"Reentrancy in LPTokenMaster.transferFrom(address,address,uint256) (contracts/LPTokenMaster.sol#42-46):
	External calls:
	- _transfer(_sender,_recipient,_amount) (contracts/LPTokenMaster.sol#43)
		- pair.accrueAccount(_sender) (contracts/LPTokenMaster.sol#75)
		- pair.accrueAccount(_recipient) (contracts/LPTokenMaster.sol#76)
	State variables written after the call(s):
	- _approve(_sender,msg.sender,allowance[_sender][msg.sender] - _amount) (contracts/LPTokenMaster.sol#44)
		- allowance[_owner][_spender] = _amount (contracts/LPTokenMaster.sol#111)
","address,address,uint256) (contracts/LPTokenMaster.sol",42-46
reentrancy-benign,Low,"Reentrancy in LendingPair.accrueAccount(address) (contracts/LendingPair.sol#187-195):
	External calls:
	- _distributeReward(_account) (contracts/LendingPair.sol#188)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	State variables written after the call(s):
	- accrue() (contracts/LendingPair.sol#189)
		- cumulativeInterestRate[_token] += newInterest (contracts/LendingPair.sol#459)
	- accrue() (contracts/LendingPair.sol#189)
		- lastBlockAccrued = block.number (contracts/LendingPair.sol#183)
",address) (contracts/LendingPair.sol,187-195
reentrancy-events,Low,"Reentrancy in LPTokenMaster.transferFrom(address,address,uint256) (contracts/LPTokenMaster.sol#42-46):
	External calls:
	- _transfer(_sender,_recipient,_amount) (contracts/LPTokenMaster.sol#43)
		- pair.accrueAccount(_sender) (contracts/LPTokenMaster.sol#75)
		- pair.accrueAccount(_recipient) (contracts/LPTokenMaster.sol#76)
	Event emitted after the call(s):
	- Approval(_owner,_spender,_amount) (contracts/LPTokenMaster.sol#112)
		- _approve(_sender,msg.sender,allowance[_sender][msg.sender] - _amount) (contracts/LPTokenMaster.sol#44)
","address,address,uint256) (contracts/LPTokenMaster.sol",42-46
reentrancy-events,Low,"Reentrancy in LendingPair._withdrawBorrow(address,uint256) (contracts/LendingPair.sol#339-353):
	External calls:
	- _withdraw(_token,withdrawAmount) (contracts/LendingPair.sol#345)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _borrow(_token,borrowAmount) (contracts/LendingPair.sol#351)
","address,uint256) (contracts/LendingPair.sol",339-353
reentrancy-events,Low,"Reentrancy in LendingPair.withdraw(address,uint256) (contracts/LendingPair.sol#114-120):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#116)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(_token,_amount) (contracts/LendingPair.sol#118)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(_token,_amount) (contracts/LendingPair.sol#118)
","address,uint256) (contracts/LendingPair.sol",114-120
reentrancy-events,Low,"Reentrancy in LendingPair.repay(address,address,uint256) (contracts/LendingPair.sol#171-177):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#173)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,_token,_amount) (contracts/LendingPair.sol#175)
","address,address,uint256) (contracts/LendingPair.sol",171-177
reentrancy-events,Low,"Reentrancy in LendingPair.depositRepayETH(address) (contracts/LendingPair.sol#83-88):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#84)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _depositRepay(_account,address(WETH),msg.value) (contracts/LendingPair.sol#86)
",address) (contracts/LendingPair.sol,83-88
reentrancy-events,Low,"Reentrancy in LendingPair.deposit(address,address,uint256) (contracts/LendingPair.sol#90-96):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#92)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _deposit(_account,_token,_amount) (contracts/LendingPair.sol#94)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _deposit(_account,_token,_amount) (contracts/LendingPair.sol#94)
","address,address,uint256) (contracts/LendingPair.sol",90-96
reentrancy-events,Low,"Reentrancy in LendingPair.depositRepay(address,address,uint256) (contracts/LendingPair.sol#75-81):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#77)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
		- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _depositRepay(_account,_token,_amount) (contracts/LendingPair.sol#79)
","address,address,uint256) (contracts/LendingPair.sol",75-81
reentrancy-events,Low,"Reentrancy in LendingPair._deposit(address,address,uint256) (contracts/LendingPair.sol#443-454):
	External calls:
	- _mintSupply(_token,_account,_amount) (contracts/LendingPair.sol#450)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	Event emitted after the call(s):
	- Deposit(_account,_token,_amount) (contracts/LendingPair.sol#453)
","address,address,uint256) (contracts/LendingPair.sol",443-454
reentrancy-events,Low,"Reentrancy in LendingPair.withdrawAll(address) (contracts/LendingPair.sol#122-129):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#124)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(_token,amount) (contracts/LendingPair.sol#127)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(_token,amount) (contracts/LendingPair.sol#127)
",address) (contracts/LendingPair.sol,122-129
reentrancy-events,Low,"Reentrancy in LendingPair.withdrawBorrow(address,uint256) (contracts/LendingPair.sol#98-104):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#100)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdrawBorrow(_token,_amount) (contracts/LendingPair.sol#102)
","address,uint256) (contracts/LendingPair.sol",98-104
reentrancy-events,Low,"Reentrancy in LendingPair.borrow(address,uint256) (contracts/LendingPair.sol#139-145):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#141)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _borrow(_token,_amount) (contracts/LendingPair.sol#143)
","address,uint256) (contracts/LendingPair.sol",139-145
reentrancy-events,Low,"Reentrancy in LendingPair.withdrawAllETH() (contracts/LendingPair.sol#131-137):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#132)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdraw(address(WETH),amount) (contracts/LendingPair.sol#135)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdraw(address(WETH),amount) (contracts/LendingPair.sol#135)
",) (contracts/LendingPair.sol,131-137
reentrancy-events,Low,"Reentrancy in LendingPair.repayAllETH(address) (contracts/LendingPair.sol#156-169):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#157)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	External calls sending eth:
	- _depositWeth() (contracts/LendingPair.sol#162)
		- WETH.deposit{value: msg.value}() (contracts/TransferHelper.sol#34)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,address(WETH),amount) (contracts/LendingPair.sol#163)
",address) (contracts/LendingPair.sol,156-169
reentrancy-events,Low,"Reentrancy in LendingPair._withdraw(address,uint256) (contracts/LendingPair.sol#417-424):
	External calls:
	- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
","address,uint256) (contracts/LendingPair.sol",417-424
reentrancy-events,Low,"Reentrancy in LPTokenMaster._transfer(address,address,uint256) (contracts/LPTokenMaster.sol#69-89):
	External calls:
	- pair.accrueAccount(_sender) (contracts/LPTokenMaster.sol#75)
	- pair.accrueAccount(_recipient) (contracts/LPTokenMaster.sol#76)
	Event emitted after the call(s):
	- Transfer(_sender,_recipient,_amount) (contracts/LPTokenMaster.sol#88)
","address,address,uint256) (contracts/LPTokenMaster.sol",69-89
reentrancy-events,Low,"Reentrancy in LendingPair.withdrawBorrowETH(uint256) (contracts/LendingPair.sol#106-112):
	External calls:
	- accrueAccount(msg.sender) (contracts/LendingPair.sol#107)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
		- lpToken[address(_token)].burn(msg.sender,_amount) (contracts/LendingPair.sol#419)
	Event emitted after the call(s):
	- Borrow(_token,_amount) (contracts/LendingPair.sol#435)
		- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
	- Withdraw(_token,_amount) (contracts/LendingPair.sol#423)
		- _withdrawBorrow(address(WETH),_amount) (contracts/LendingPair.sol#109)
",uint256) (contracts/LendingPair.sol,106-112
reentrancy-events,Low,"Reentrancy in LendingPair.repayAll(address,address) (contracts/LendingPair.sol#147-154):
	External calls:
	- accrueAccount(_account) (contracts/LendingPair.sol#149)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
		- rewardDistribution.distributeReward(_account,tokenA) (contracts/LendingPair.sol#359)
		- rewardDistribution.distributeReward(_account,tokenB) (contracts/LendingPair.sol#360)
	Event emitted after the call(s):
	- Repay(_account,_token,_amount) (contracts/LendingPair.sol#440)
		- _repay(_account,_token,amount) (contracts/LendingPair.sol#152)
","address,address) (contracts/LendingPair.sol",147-154
reentrancy-events,Low,"Reentrancy in LendingPair.liquidateAccount(address,address,uint256,uint256) (contracts/LendingPair.sol#246-289):
	External calls:
	- _accrueAccountInterest(_account) (contracts/LendingPair.sol#260)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _accrueAccountInterest(feeRecipient()) (contracts/LendingPair.sol#261)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _burnSupply(supplyToken,_account,supplyBurn) (contracts/LendingPair.sol#279)
		- lpToken[_token].burn(_account,_amount) (contracts/LendingPair.sol#372)
	- _mintSupply(supplyToken,feeRecipient(),systemFee) (contracts/LendingPair.sol#280)
		- lpToken[_token].mint(_account,_amount) (contracts/LendingPair.sol#366)
	- _safeTransferFrom(_repayToken,msg.sender,_repayAmount) (contracts/LendingPair.sol#285)
		- success = IERC20(_token).transferFrom(_sender,address(this),_amount) (contracts/TransferHelper.sol#20)
	- _safeTransfer(IERC20(supplyToken),msg.sender,supplyOutput) (contracts/LendingPair.sol#286)
		- success = _token.transfer(_recipient,_amount) (contracts/LendingPair.sol#470)
	Event emitted after the call(s):
	- Liquidation(_account,_repayToken,supplyToken,_repayAmount,supplyOutput) (contracts/LendingPair.sol#288)
","address,address,uint256,uint256) (contracts/LendingPair.sol",246-289
assembly,Informational,"Clones.clone(address) (contracts/external/Clones.sol#24-34) uses assembly
	- INLINE ASM (contracts/external/Clones.sol#26-32)
",address) (contracts/external/Clones.sol,24-34
assembly,Informational,"Address.isContract(address) (contracts/external/Address.sol#26-35) uses assembly
	- INLINE ASM (contracts/external/Address.sol#33)
",address) (contracts/external/Address.sol,26-35
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (contracts/external/Address.sol#171-188) uses assembly
	- INLINE ASM (contracts/external/Address.sol#180-183)
","bool,bytes,string) (contracts/external/Address.sol",171-188
assembly,Informational,"Clones.cloneDeterministic(address,bytes32) (contracts/external/Clones.sol#43-53) uses assembly
	- INLINE ASM (contracts/external/Clones.sol#45-51)
","address,bytes32) (contracts/external/Clones.sol",43-53
assembly,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (contracts/external/Clones.sol#58-70) uses assembly
	- INLINE ASM (contracts/external/Clones.sol#60-69)
","address,bytes32,address) (contracts/external/Clones.sol",58-70
boolean-equal,Informational,"LPTokenMaster.initialize() (contracts/LPTokenMaster.sol#26-30) compares to a boolean constant:
	-require(bool,string)(initialized != true,LPToken: already intialized) (contracts/LPTokenMaster.sol#27)
",) (contracts/LPTokenMaster.sol,26-30
boolean-equal,Informational,"RewardDistribution.addPool(address,address,bool,uint256) (contracts/RewardDistribution.sol#78-112) compares to a boolean constant:
	-require(bool,string)(pidByPairToken[_pair][_token][_isSupply].added == false,RewardDistribution: already added) (contracts/RewardDistribution.sol#85-88)
","address,address,bool,uint256) (contracts/RewardDistribution.sol",78-112
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/Controller.sol#3)
	- ^0.8.0 (contracts/InterestRateModel.sol#6)
	- ^0.8.0 (contracts/LPTokenMaster.sol#6)
	- ^0.8.0 (contracts/LendingPair.sol#6)
	- ^0.8.0 (contracts/RewardDistribution.sol#3)
	- ^0.8.0 (contracts/TransferHelper.sol#6)
	- ^0.8.0 (contracts/UniswapV3Oracle.sol#3)
	- ^0.8.0 (contracts/external/Address.sol#3)
	- ^0.8.0 (contracts/external/Clones.sol#3)
	- ^0.8.0 (contracts/external/ERC20.sol#3)
	- ^0.8.0 (contracts/external/Math.sol#3)
	- ^0.8.0 (contracts/external/Ownable.sol#3)
	- ^0.8.0 (contracts/interfaces/IController.sol#3)
	- ^0.8.0 (contracts/interfaces/IERC20.sol#3)
	- ^0.8.0 (contracts/interfaces/IFeeConverter.sol#3)
	- ^0.8.0 (contracts/interfaces/IFeeRecipient.sol#3)
	- ^0.8.0 (contracts/interfaces/IInterestRateModel.sol#3)
	- ^0.8.0 (contracts/interfaces/ILPTokenMaster.sol#3)
	- ^0.8.0 (contracts/interfaces/ILendingPair.sol#3)
	- ^0.8.0 (contracts/interfaces/ILinkOracle.sol#3)
	- ^0.8.0 (contracts/interfaces/IPairFactory.sol#3)
	- ^0.8.0 (contracts/interfaces/IPriceOracle.sol#3)
	- ^0.8.0 (contracts/interfaces/IRewardDistribution.sol#3)
	- ^0.8.0 (contracts/interfaces/IUniswapPair.sol#3)
	- ^0.8.0 (contracts/interfaces/IUniswapPriceConverter.sol#3)
	- ^0.8.0 (contracts/interfaces/IUniswapRouter.sol#3)
	- ^0.8.0 (contracts/interfaces/IUniswapV3Factory.sol#3)
	- ^0.8.0 (contracts/interfaces/IUniswapV3Pool.sol#3)
	- ^0.8.0 (contracts/interfaces/IWETH.sol#3)
",N/A,N/A
low-level-calls,Informational,"Low level call in TransferHelper._wethWithdrawTo(address,uint256) (contracts/TransferHelper.sol#25-30):
	- (success,None) = _to.call{value: _amount}(new bytes(0)) (contracts/TransferHelper.sol#28)
","address,uint256) (contracts/TransferHelper.sol",25-30
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (contracts/external/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (contracts/external/Address.sol#143)
","address,bytes,string) (contracts/external/Address.sol",139-145
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (contracts/external/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (contracts/external/Address.sol#119)
","address,bytes,uint256,string) (contracts/external/Address.sol",114-121
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (contracts/external/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (contracts/external/Address.sol#167)
","address,bytes,string) (contracts/external/Address.sol",163-169
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (contracts/external/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (contracts/external/Address.sol#57)
","address,uint256) (contracts/external/Address.sol",53-59
missing-inheritance,Informational,"Controller (contracts/Controller.sol#11-171) should inherit from IPriceOracle (contracts/interfaces/IPriceOracle.sol#5-8)
",contracts/Controller.sol,11-171
missing-inheritance,Informational,"InterestRateModel (contracts/InterestRateModel.sol#13-58) should inherit from IInterestRateModel (contracts/interfaces/IInterestRateModel.sol#7-12)
",contracts/InterestRateModel.sol,13-58
missing-inheritance,Informational,"UniswapV3Oracle (contracts/UniswapV3Oracle.sol#12-112) should inherit from IPriceOracle (contracts/interfaces/IPriceOracle.sol#5-8)
",contracts/UniswapV3Oracle.sol,12-112
missing-inheritance,Informational,"RewardDistribution (contracts/RewardDistribution.sol#17-295) should inherit from IRewardDistribution (contracts/interfaces/IRewardDistribution.sol#5-7)
",contracts/RewardDistribution.sol,17-295
naming-convention,Informational,"Parameter RewardDistribution.pendingTokenReward(address,address,address)._account (contracts/RewardDistribution.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.approve(address,uint256)._amount (contracts/LPTokenMaster.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.tokenPrice(address)._token (contracts/Controller.sol#160) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.transfer(address,uint256)._recipient (contracts/LPTokenMaster.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.deposit(address,address,uint256)._token (contracts/LendingPair.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repay(address,address,uint256)._token (contracts/LendingPair.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingSupplyReward(address,address,address)._token (contracts/RewardDistribution.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdraw(address,uint256)._token (contracts/LendingPair.sol#114) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.convertTokenValues(address,address,uint256)._fromToken (contracts/LendingPair.sol#312) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.transferFrom(address,address,uint256)._sender (contracts/LPTokenMaster.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.migrateRewards(address,uint256)._amount (contracts/RewardDistribution.sol#181) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.distributeReward(address,address)._account (contracts/RewardDistribution.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.depositRepayETH(address)._account (contracts/LendingPair.sol#83) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrowBalance(address,address,address)._returnToken (contracts/LendingPair.sol#213) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.initialize(address,address,IERC20,IERC20)._tokenA (contracts/LendingPair.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdrawBorrow(address,uint256)._token (contracts/LendingPair.sol#98) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.approve(address,uint256)._spender (contracts/external/ERC20.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.initialize(address,address,IERC20,IERC20)._lpTokenMaster (contracts/LendingPair.sol#58) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repayAll(address,address)._account (contracts/LendingPair.sol#147) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.addPool(address,address,uint24)._pairToken (contracts/UniswapV3Oracle.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.depositRepay(address,address,uint256)._account (contracts/LendingPair.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrow(address,uint256)._amount (contracts/LendingPair.sol#139) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.utilizationRate(ILendingPair,address)._pair (contracts/InterestRateModel.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.liqFeesTotal(address)._token (contracts/Controller.sol#156) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.borrowBlockReward(address,address)._token (contracts/RewardDistribution.sol#172) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.supplyRatePerBlock(ILendingPair,address)._token (contracts/InterestRateModel.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setColFactor(address,uint256)._value (contracts/Controller.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.deposit(address,address,uint256)._account (contracts/LendingPair.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.supplyBlockReward(address,address)._token (contracts/RewardDistribution.sol#168) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.supplyRatePerBlock(ILendingPair,address)._pair (contracts/InterestRateModel.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.tokenPrice(address)._token (contracts/UniswapV3Oracle.sol#77) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.accruePool(uint256)._pid (contracts/RewardDistribution.sol#137) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.selfBurn(uint256)._amount (contracts/LPTokenMaster.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.supplyRatePerBlock(address)._token (contracts/LendingPair.sol#234) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.tokenSupported(address)._token (contracts/UniswapV3Oracle.sol#105) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.depositRepay(address,address,uint256)._token (contracts/LendingPair.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.checkAccountHealth(address)._account (contracts/LendingPair.sol#306) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingSupplyReward(address,address,address)._pair (contracts/RewardDistribution.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.transferFrom(address,address,uint256)._recipient (contracts/external/ERC20.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingBorrowReward(address,address,address)._token (contracts/RewardDistribution.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrow(address,uint256)._token (contracts/LendingPair.sol#139) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setLiqParamsToken(address,uint256,uint256)._liqFeeSystem (contracts/Controller.sol#71) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.pendingBorrowInterest(address,address)._token (contracts/LendingPair.sol#297) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.setReward(address,address,bool,uint256)._pair (contracts/RewardDistribution.sol#116) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.addPool(address,address,bool,uint256)._isSupply (contracts/RewardDistribution.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.supplyBlockReward(address,address)._pair (contracts/RewardDistribution.sol#168) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.deposit(address,address,uint256)._amount (contracts/LendingPair.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setLiqParamsDefault(uint256,uint256)._liqFeeSystem (contracts/Controller.sol#84) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingBorrowReward(address,address,address)._account (contracts/RewardDistribution.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.initialize(address,address,IERC20,IERC20)._controller (contracts/LendingPair.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.addPool(address,address,bool,uint256)._points (contracts/RewardDistribution.sol#82) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.initialize(address,address,IERC20,IERC20)._tokenB (contracts/LendingPair.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.setUniPriceConverter(IUniswapPriceConverter)._value (contracts/UniswapV3Oracle.sol#65) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.tokenSupported(address)._token (contracts/Controller.sol#164) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.depositRepay(address,address,uint256)._amount (contracts/LendingPair.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.transferFrom(address,address,uint256)._amount (contracts/LPTokenMaster.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.isPoolValid(address,address,uint24)._token (contracts/UniswapV3Oracle.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IController.LIQ_MIN_HEALTH() (contracts/interfaces/IController.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.migrateRewards(address,uint256)._recipient (contracts/RewardDistribution.sol#181) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdrawBorrowETH(uint256)._amount (contracts/LendingPair.sol#106) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setDepositLimit(address,address,uint256)._pair (contracts/Controller.sol#123) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.pendingSupplyInterest(address,address)._account (contracts/LendingPair.sol#291) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.removePool(address)._token (contracts/UniswapV3Oracle.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setBorrowLimit(address,address,uint256)._token (contracts/Controller.sol#130) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.transferFrom(address,address,uint256)._sender (contracts/external/ERC20.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.burn(address,uint256)._account (contracts/LPTokenMaster.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.mint(address,uint256)._account (contracts/LPTokenMaster.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.liqFeeCaller(address)._token (contracts/Controller.sol#152) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.burn(address,uint256)._amount (contracts/external/ERC20.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.accountHealth(address)._account (contracts/LendingPair.sol#197) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.supplyBalance(address,address,address)._suppliedToken (contracts/LendingPair.sol#224) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.transferFrom(address,address,uint256)._recipient (contracts/LPTokenMaster.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setLiqParamsDefault(uint256,uint256)._liqFeeCaller (contracts/Controller.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdrawBorrow(address,uint256)._amount (contracts/LendingPair.sol#98) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrowRatePerBlock(address)._token (contracts/LendingPair.sol#239) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setFeeRecipient(address)._value (contracts/Controller.sol#63) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingAccountReward(address,address)._account (contracts/RewardDistribution.sol#163) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.borrowRatePerBlock(ILendingPair,address)._token (contracts/InterestRateModel.sol#27) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.pendingBorrowInterest(address,address)._account (contracts/LendingPair.sol#297) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.transfer(address,uint256)._amount (contracts/LPTokenMaster.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.convertTokenValues(address,address,uint256)._toToken (contracts/LendingPair.sol#313) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setPriceOracle(address)._value (contracts/Controller.sol#101) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repayAll(address,address)._token (contracts/LendingPair.sol#147) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingSupplyReward(address,address,address)._account (contracts/RewardDistribution.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdraw(address,uint256)._amount (contracts/LendingPair.sol#114) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.liquidateAccount(address,address,uint256,uint256)._repayToken (contracts/LendingPair.sol#248) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.approve(address,uint256)._spender (contracts/LPTokenMaster.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.approve(address,uint256)._amount (contracts/external/ERC20.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.convertTokenValues(address,address,uint256)._inputAmount (contracts/LendingPair.sol#314) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingBorrowReward(address,address,address)._pair (contracts/RewardDistribution.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrowBalance(address,address,address)._borrowedToken (contracts/LendingPair.sol#212) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setLiqParamsToken(address,uint256,uint256)._liqFeeCaller (contracts/Controller.sol#72) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.liquidateAccount(address,address,uint256,uint256)._repayAmount (contracts/LendingPair.sol#249) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.setReward(address,address,bool,uint256)._points (contracts/RewardDistribution.sol#119) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setInterestRateModel(address)._value (contracts/Controller.sol#95) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.transferFrom(address,address,uint256)._amount (contracts/external/ERC20.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.supplyBalance(address,address,address)._account (contracts/LendingPair.sol#223) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setBorrowLimit(address,address,uint256)._value (contracts/Controller.sol#130) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.transfer(address,uint256)._recipient (contracts/external/ERC20.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.accrueAccount(address)._account (contracts/LendingPair.sol#187) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.borrowBalance(address,address,address)._account (contracts/LendingPair.sol#211) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setBorrowLimit(address,address,uint256)._pair (contracts/Controller.sol#130) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingTokenReward(address,address,address)._token (contracts/RewardDistribution.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.transfer(address,uint256)._amount (contracts/external/ERC20.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setDepositLimit(address,address,uint256)._value (contracts/Controller.sol#123) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.withdrawAll(address)._token (contracts/LendingPair.sol#122) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setDepositLimit(address,address,uint256)._token (contracts/Controller.sol#123) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.setMinObservations(uint256)._value (contracts/UniswapV3Oracle.sol#73) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.mint(address,uint256)._account (contracts/external/ERC20.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.addPool(address,address,uint24)._token (contracts/UniswapV3Oracle.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.setReward(address,address,bool,uint256)._token (contracts/RewardDistribution.sol#117) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingTokenReward(address,address,address)._pair (contracts/RewardDistribution.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.liquidateAccount(address,address,uint256,uint256)._minSupplyOutput (contracts/LendingPair.sol#250) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.isPoolValid(address,address,uint24)._poolFee (contracts/UniswapV3Oracle.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setColFactor(address,uint256)._token (contracts/Controller.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setLiqParamsToken(address,uint256,uint256)._token (contracts/Controller.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.addPool(address,address,bool,uint256)._pair (contracts/RewardDistribution.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.supplyBalance(address,address,address)._returnToken (contracts/LendingPair.sol#225) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.pendingAccountReward(address,address)._pair (contracts/RewardDistribution.sol#163) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.liqFeeSystem(address)._token (contracts/Controller.sol#148) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setRewardDistribution(address)._value (contracts/Controller.sol#107) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repayAllETH(address)._account (contracts/LendingPair.sol#156) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repay(address,address,uint256)._account (contracts/LendingPair.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.addPool(address,address,bool,uint256)._token (contracts/RewardDistribution.sol#80) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.distributeReward(address,address)._token (contracts/RewardDistribution.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.utilizationRate(ILendingPair,address)._token (contracts/InterestRateModel.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.burn(address,uint256)._amount (contracts/LPTokenMaster.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setMinBorrowUSD(uint256)._value (contracts/Controller.sol#137) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.setReward(address,address,bool,uint256)._isSupply (contracts/RewardDistribution.sol#118) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.mint(address,uint256)._amount (contracts/external/ERC20.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter InterestRateModel.borrowRatePerBlock(ILendingPair,address)._pair (contracts/InterestRateModel.sol#27) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC20.burn(address,uint256)._account (contracts/external/ERC20.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.repay(address,address,uint256)._amount (contracts/LendingPair.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.isPoolValid(address,address,uint24)._pairToken (contracts/UniswapV3Oracle.sol#97) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.liquidateAccount(address,address,uint256,uint256)._account (contracts/LendingPair.sol#247) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LendingPair.pendingSupplyInterest(address,address)._token (contracts/LendingPair.sol#291) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPTokenMaster.mint(address,uint256)._amount (contracts/LPTokenMaster.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.borrowBlockReward(address,address)._pair (contracts/RewardDistribution.sol#172) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setDepositsEnabled(bool)._value (contracts/Controller.sol#113) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.addPool(address,address,uint24)._poolFee (contracts/UniswapV3Oracle.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter RewardDistribution.setTotalRewardPerBlock(uint256)._value (contracts/RewardDistribution.sol#132) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setBorrowingEnabled(bool)._value (contracts/Controller.sol#118) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter UniswapV3Oracle.setTwapPeriod(uint32)._value (contracts/UniswapV3Oracle.sol#69) is not in mixedCase
",N/A,N/A
too-many-digits,Informational,"Clones.clone(address) (contracts/external/Clones.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/external/Clones.sol#28)
",address) (contracts/external/Clones.sol,24-34
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (contracts/external/Clones.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) (contracts/external/Clones.sol#64)
","address,bytes32,address) (contracts/external/Clones.sol",58-70
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (contracts/external/Clones.sol#58-70) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/external/Clones.sol#62)
","address,bytes32,address) (contracts/external/Clones.sol",58-70
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (contracts/external/Clones.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/external/Clones.sol#49)
","address,bytes32) (contracts/external/Clones.sol",43-53
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (contracts/external/Clones.sol#43-53) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (contracts/external/Clones.sol#47)
","address,bytes32) (contracts/external/Clones.sol",43-53
too-many-digits,Informational,"Clones.clone(address) (contracts/external/Clones.sol#24-34) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (contracts/external/Clones.sol#30)
",address) (contracts/external/Clones.sol,24-34
immutable-states,Optimization,"RewardDistribution.factory (contracts/RewardDistribution.sol#35) should be immutable 
",N/A,N/A
immutable-states,Optimization,"RewardDistribution.controller (contracts/RewardDistribution.sol#36) should be immutable 
",N/A,N/A
immutable-states,Optimization,"ERC20.decimals (contracts/external/ERC20.sol#17) should be immutable 
",N/A,N/A
immutable-states,Optimization,"RewardDistribution.rewardToken (contracts/RewardDistribution.sol#37) should be immutable 
",N/A,N/A
