Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"Auction.settleAuction(uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol#72-116) uses arbitrary from in transferFrom: IERC20(outputTokens[i_scope_0]).safeTransferFrom(address(basket),msg.sender,outputWeights[i_scope_0]) (contracts/Auction.sol#91)
","uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol",72-116
reentrancy-eth,High,"Reentrancy in Basket.burn(uint256) (contracts/Basket.sol#100-110):
	External calls:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#106)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransfer(to,tokenAmount) (contracts/Basket.sol#252)
	External calls sending eth:
	- pushUnderlying(amount,msg.sender) (contracts/Basket.sol#106)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- _burn(msg.sender,amount) (contracts/Basket.sol#107)
		- _balances[account] = accountBalance - amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#290)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#40) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#227-245)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#106-108)
	- _burn(msg.sender,amount) (contracts/Basket.sol#107)
		- _totalSupply -= amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#292)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#44) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#99-101)
",uint256) (contracts/Basket.sol,100-110
reentrancy-eth,High,"Reentrancy in Basket.mintTo(uint256,address) (contracts/Basket.sol#87-98):
	External calls:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#93)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeTransferFrom(from,address(this),tokenAmount) (contracts/Basket.sol#260)
	External calls sending eth:
	- pullUnderlying(amount,msg.sender) (contracts/Basket.sol#93)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- _mint(to,amount) (contracts/Basket.sol#95)
		- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#264)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#40) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#227-245)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#106-108)
	- _mint(to,amount) (contracts/Basket.sol#95)
		- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#44) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#99-101)
","uint256,address) (contracts/Basket.sol",87-98
reentrancy-eth,High,"Reentrancy in Basket.initialize(IFactory.Proposal,IAuction) (contracts/Basket.sol#41-57):
	External calls:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#52)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- IERC20(tokens[i]).safeApprove(spender,0) (contracts/Basket.sol#244)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeApprove(spender,type()(uint256).max) (contracts/Basket.sol#245)
	External calls sending eth:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#52)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- initialized = true (contracts/Basket.sol#56)
	Basket.initialized (contracts/Basket.sol#39) can be used in cross function reentrancies:
	- Basket.initialize(IFactory.Proposal,IAuction) (contracts/Basket.sol#41-57)
	- Basket.initialized (contracts/Basket.sol#39)
","IFactory.Proposal,IAuction) (contracts/Basket.sol",41-57
divide-before-multiply,Medium,"Basket.handleFees() (contracts/Basket.sol#124-143) performs a multiplication on the result of a division:
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#132)
	- _mint(Ownable(address(factory)).owner(),fee * factory.ownerSplit() / BASE) (contracts/Basket.sol#135)
",) (contracts/Basket.sol,124-143
divide-before-multiply,Medium,"Basket.handleFees() (contracts/Basket.sol#124-143) performs a multiplication on the result of a division:
	- feePct = timeDiff * licenseFee / ONE_YEAR (contracts/Basket.sol#131)
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#132)
",) (contracts/Basket.sol,124-143
divide-before-multiply,Medium,"Basket.handleFees() (contracts/Basket.sol#124-143) performs a multiplication on the result of a division:
	- fee = startSupply * feePct / (BASE - feePct) (contracts/Basket.sol#132)
	- _mint(publisher,fee * (BASE - factory.ownerSplit()) / BASE) (contracts/Basket.sol#134)
",) (contracts/Basket.sol,124-143
incorrect-equality,Medium,"Basket.handleFees() (contracts/Basket.sol#124-143) uses a dangerous strict equality:
	- lastFee == 0 (contracts/Basket.sol#125)
",) (contracts/Basket.sol,124-143
incorrect-equality,Medium,"Basket.changeLicenseFee(uint256) (contracts/Basket.sol#167-182) uses a dangerous strict equality:
	- pendingLicenseFee.licenseFee != 0 && pendingLicenseFee.licenseFee == newLicenseFee (contracts/Basket.sol#169)
",uint256) (contracts/Basket.sol,167-182
reentrancy-no-eth,Medium,"Reentrancy in Auction.bondForRebalance() (contracts/Auction.sol#57-70):
	External calls:
	- basketToken.safeTransferFrom(msg.sender,address(this),bondAmount) (contracts/Auction.sol#65)
	State variables written after the call(s):
	- hasBonded = true (contracts/Auction.sol#66)
	Auction.hasBonded (contracts/Auction.sol#18) can be used in cross function reentrancies:
	- Auction.bondBurn() (contracts/Auction.sol#118-131)
	- Auction.bondForRebalance() (contracts/Auction.sol#57-70)
	- Auction.hasBonded (contracts/Auction.sol#18)
",) (contracts/Auction.sol,57-70
reentrancy-no-eth,Medium,"Reentrancy in Auction.settleAuction(uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol#72-116):
	External calls:
	- IERC20(inputTokens[i]).safeTransferFrom(msg.sender,address(basket),inputWeights[i]) (contracts/Auction.sol#87)
	- IERC20(outputTokens[i_scope_0]).safeTransferFrom(address(basket),msg.sender,outputWeights[i_scope_0]) (contracts/Auction.sol#91)
	- basket.setNewWeights() (contracts/Auction.sol#107)
	- basket.updateIBRatio(newRatio) (contracts/Auction.sol#108)
	State variables written after the call(s):
	- auctionOngoing = false (contracts/Auction.sol#109)
	Auction.auctionOngoing (contracts/Auction.sol#16) can be used in cross function reentrancies:
	- Auction.auctionOngoing (contracts/Auction.sol#16)
	- Auction.bondBurn() (contracts/Auction.sol#118-131)
	- Auction.bondForRebalance() (contracts/Auction.sol#57-70)
	- Auction.killAuction() (contracts/Auction.sol#44-46)
	- Auction.startAuction() (contracts/Auction.sol#35-42)
	- hasBonded = false (contracts/Auction.sol#110)
	Auction.hasBonded (contracts/Auction.sol#18) can be used in cross function reentrancies:
	- Auction.bondBurn() (contracts/Auction.sol#118-131)
	- Auction.bondForRebalance() (contracts/Auction.sol#57-70)
	- Auction.hasBonded (contracts/Auction.sol#18)
","uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol",72-116
reentrancy-no-eth,Medium,"Reentrancy in Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212):
	External calls:
	- auction.killAuction() (contracts/Basket.sol#198)
	State variables written after the call(s):
	- pendingWeights.tokens = _tokens (contracts/Basket.sol#200)
	Basket.pendingWeights (contracts/Basket.sol#32) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#225-232)
	- Basket.getPendingWeights() (contracts/Basket.sol#59-61)
	- Basket.pendingWeights (contracts/Basket.sol#32)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212)
	- Basket.setNewWeights() (contracts/Basket.sol#214-222)
	- pendingWeights.weights = _weights (contracts/Basket.sol#201)
	Basket.pendingWeights (contracts/Basket.sol#32) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#225-232)
	- Basket.getPendingWeights() (contracts/Basket.sol#59-61)
	- Basket.pendingWeights (contracts/Basket.sol#32)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212)
	- Basket.setNewWeights() (contracts/Basket.sol#214-222)
	- pendingWeights.block = block.number (contracts/Basket.sol#202)
	Basket.pendingWeights (contracts/Basket.sol#32) can be used in cross function reentrancies:
	- Basket.deleteNewIndex() (contracts/Basket.sol#225-232)
	- Basket.getPendingWeights() (contracts/Basket.sol#59-61)
	- Basket.pendingWeights (contracts/Basket.sol#32)
	- Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212)
	- Basket.setNewWeights() (contracts/Basket.sol#214-222)
","address[],uint256[]) (contracts/Basket.sol",186-212
reentrancy-no-eth,Medium,"Reentrancy in Auction.bondBurn() (contracts/Auction.sol#118-131):
	External calls:
	- basket.auctionBurn(bondAmount) (contracts/Auction.sol#123)
	State variables written after the call(s):
	- auctionOngoing = false (contracts/Auction.sol#125)
	Auction.auctionOngoing (contracts/Auction.sol#16) can be used in cross function reentrancies:
	- Auction.auctionOngoing (contracts/Auction.sol#16)
	- Auction.bondBurn() (contracts/Auction.sol#118-131)
	- Auction.bondForRebalance() (contracts/Auction.sol#57-70)
	- Auction.killAuction() (contracts/Auction.sol#44-46)
	- Auction.startAuction() (contracts/Auction.sol#35-42)
	- hasBonded = false (contracts/Auction.sol#124)
	Auction.hasBonded (contracts/Auction.sol#18) can be used in cross function reentrancies:
	- Auction.bondBurn() (contracts/Auction.sol#118-131)
	- Auction.bondForRebalance() (contracts/Auction.sol#57-70)
	- Auction.hasBonded (contracts/Auction.sol#18)
",) (contracts/Auction.sol,118-131
reentrancy-no-eth,Medium,"Reentrancy in Auction.withdrawBounty(uint256[]) (contracts/Auction.sol#147-158):
	External calls:
	- IERC20(bounty.token).safeTransfer(msg.sender,bounty.amount) (contracts/Auction.sol#153)
	State variables written after the call(s):
	- bounty.active = false (contracts/Auction.sol#154)
	Auction._bounties (contracts/Auction.sol#26) can be used in cross function reentrancies:
	- Auction.addBounty(IERC20,uint256) (contracts/Auction.sol#133-145)
",uint256[]) (contracts/Auction.sol,147-158
unused-return,Medium,"Auction.settleAuction(uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol#72-116) ignores return value by basket.updateIBRatio(newRatio) (contracts/Auction.sol#108)
","uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol",72-116
shadowing-local,Low,"TestToken.constructor(string,string).name (contracts/test/TestToken.sol#6) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#61-63) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,61-63
shadowing-local,Low,"Factory.proposeBasketLicense(uint256,string,string,address[],uint256[]).proposal (contracts/Factory.sol#77-85) shadows:
	- Factory.proposal(uint256) (contracts/Factory.sol#35-37) (function)
	- IFactory.proposal(uint256) (contracts/interfaces/IFactory.sol#24) (function)
","uint256,string,string,address[],uint256[]).proposal (contracts/Factory.sol",77-85
shadowing-local,Low,"TestToken.constructor(string,string).symbol (contracts/test/TestToken.sol#6) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#69-71) (function)
	- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#21) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,69-71
events-maths,Low,"Factory.setMinLicenseFee(uint256) (contracts/Factory.sol#39-41) should emit an event for: 
	- minLicenseFee = newMinLicenseFee (contracts/Factory.sol#40) 
",uint256) (contracts/Factory.sol,39-41
calls-loop,Low,"Auction.settleAuction(uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol#72-116) has external calls inside a loop: require(bool)(IERC20(pendingTokens[i_scope_1]).balanceOf(address(basket)) >= tokensNeeded) (contracts/Auction.sol#104)
","uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol",72-116
calls-loop,Low,"Auction.settleAuction(uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol#72-116) has external calls inside a loop: tokensNeeded = basketAsERC20.totalSupply() * pendingWeights[i_scope_1] * newRatio / BASE / BASE (contracts/Auction.sol#103)
","uint256[],address[],uint256[],address[],uint256[]) (contracts/Auction.sol",72-116
reentrancy-benign,Low,"Reentrancy in Auction.bondBurn() (contracts/Auction.sol#118-131):
	External calls:
	- basket.auctionBurn(bondAmount) (contracts/Auction.sol#123)
	- basket.deleteNewIndex() (contracts/Auction.sol#126)
	State variables written after the call(s):
	- auctionBonder = address(0) (contracts/Auction.sol#130)
",) (contracts/Auction.sol,118-131
reentrancy-benign,Low,"Reentrancy in Auction.bondForRebalance() (contracts/Auction.sol#57-70):
	External calls:
	- basketToken.safeTransferFrom(msg.sender,address(this),bondAmount) (contracts/Auction.sol#65)
	State variables written after the call(s):
	- auctionBonder = msg.sender (contracts/Auction.sol#67)
",) (contracts/Auction.sol,57-70
reentrancy-benign,Low,"Reentrancy in Auction.addBounty(IERC20,uint256) (contracts/Auction.sol#133-145):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),amount) (contracts/Auction.sol#135)
	State variables written after the call(s):
	- _bounties.push(Bounty({token:address(token),amount:amount,active:true})) (contracts/Auction.sol#136-140)
","IERC20,uint256) (contracts/Auction.sol",133-145
reentrancy-benign,Low,"Reentrancy in Basket.initialize(IFactory.Proposal,IAuction) (contracts/Basket.sol#41-57):
	External calls:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#52)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- IERC20(tokens[i]).safeApprove(spender,0) (contracts/Basket.sol#244)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeApprove(spender,type()(uint256).max) (contracts/Basket.sol#245)
	External calls sending eth:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#52)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- __ERC20_init(proposal.tokenName,proposal.tokenSymbol) (contracts/Basket.sol#54)
		- _name = name_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#60)
	- __ERC20_init(proposal.tokenName,proposal.tokenSymbol) (contracts/Basket.sol#54)
		- _symbol = symbol_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#61)
","IFactory.Proposal,IAuction) (contracts/Basket.sol",41-57
reentrancy-events,Low,"Reentrancy in Basket.setNewWeights() (contracts/Basket.sol#214-222):
	External calls:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#219)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- IERC20(tokens[i]).safeApprove(spender,0) (contracts/Basket.sol#244)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
		- IERC20(tokens[i]).safeApprove(spender,type()(uint256).max) (contracts/Basket.sol#245)
	External calls sending eth:
	- approveUnderlying(address(auction)) (contracts/Basket.sol#219)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	Event emitted after the call(s):
	- WeightsSet() (contracts/Basket.sol#221)
",) (contracts/Basket.sol,214-222
reentrancy-events,Low,"Reentrancy in Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212):
	External calls:
	- auction.startAuction() (contracts/Basket.sol#192)
	Event emitted after the call(s):
	- PublishedNewIndex(publisher) (contracts/Basket.sol#194)
","address[],uint256[]) (contracts/Basket.sol",186-212
reentrancy-events,Low,"Reentrancy in Auction.addBounty(IERC20,uint256) (contracts/Auction.sol#133-145):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),amount) (contracts/Auction.sol#135)
	Event emitted after the call(s):
	- BountyAdded(token,amount,id) (contracts/Auction.sol#143)
","IERC20,uint256) (contracts/Auction.sol",133-145
reentrancy-events,Low,"Reentrancy in Auction.bondBurn() (contracts/Auction.sol#118-131):
	External calls:
	- basket.auctionBurn(bondAmount) (contracts/Auction.sol#123)
	- basket.deleteNewIndex() (contracts/Auction.sol#126)
	Event emitted after the call(s):
	- BondBurned(msg.sender,auctionBonder,bondAmount) (contracts/Auction.sol#128)
",) (contracts/Auction.sol,118-131
reentrancy-events,Low,"Reentrancy in Auction.bondForRebalance() (contracts/Auction.sol#57-70):
	External calls:
	- basketToken.safeTransferFrom(msg.sender,address(this),bondAmount) (contracts/Auction.sol#65)
	Event emitted after the call(s):
	- Bonded(msg.sender,bondAmount) (contracts/Auction.sol#69)
",) (contracts/Auction.sol,57-70
reentrancy-events,Low,"Reentrancy in Factory.createBasket(uint256) (contracts/Factory.sol#93-116):
	External calls:
	- newAuction.initialize(address(newBasket),address(this)) (contracts/Factory.sol#102)
	- newBasket.initialize(bProposal,newAuction) (contracts/Factory.sol#103)
	- token.safeTransferFrom(msg.sender,address(this),bProposal.weights[i]) (contracts/Factory.sol#107)
	- token.safeApprove(address(newBasket),bProposal.weights[i]) (contracts/Factory.sol#108)
	- newBasket.mintTo(BASE,msg.sender) (contracts/Factory.sol#111)
	Event emitted after the call(s):
	- BasketCreated(address(newBasket)) (contracts/Factory.sol#113)
",uint256) (contracts/Factory.sol,93-116
timestamp,Low,"Basket.handleFees() (contracts/Basket.sol#124-143) uses timestamp for comparisons
	Dangerous comparisons:
	- lastFee == 0 (contracts/Basket.sol#125)
",) (contracts/Basket.sol,124-143
timestamp,Low,"Basket.pullUnderlying(uint256,address) (contracts/Basket.sol#256-262) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(tokenAmount > 0) (contracts/Basket.sol#259)
","uint256,address) (contracts/Basket.sol",256-262
assembly,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#56-71) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#61-70)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",56-71
assembly,Informational,"console._sendLogPayloadImplementation(bytes) (node_modules/hardhat/console.sol#8-23) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#11-22)
",bytes) (node_modules/hardhat/console.sol,8-23
assembly,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-33) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#25-31)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-33
assembly,Informational,"AddressUpgradeable._revert(bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#236-239)
","bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",231-243
assembly,Informational,"console._castToPure(function(bytes)) (node_modules/hardhat/console.sol#25-31) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#28-30)
",function(bytes)) (node_modules/hardhat/console.sol,25-31
assembly,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#42-51) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Clones.sol#43-49)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",42-51
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-36) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#32-34)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-36
assembly,Informational,"Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#195-215) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#207-210)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",195-215
boolean-equal,Informational,"Basket.burn(uint256) (contracts/Basket.sol#100-110) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#101)
",uint256) (contracts/Basket.sol,100-110
boolean-equal,Informational,"Auction.startAuction() (contracts/Auction.sol#35-42) compares to a boolean constant:
	-require(bool,string)(auctionOngoing == false,ongoing auction) (contracts/Auction.sol#36)
",) (contracts/Auction.sol,35-42
boolean-equal,Informational,"Basket.mintTo(uint256,address) (contracts/Basket.sol#87-98) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#88)
","uint256,address) (contracts/Basket.sol",87-98
boolean-equal,Informational,"Basket.publishNewIndex(address[],uint256[]) (contracts/Basket.sol#186-212) compares to a boolean constant:
	-auction.auctionOngoing() == false (contracts/Basket.sol#191)
","address[],uint256[]) (contracts/Basket.sol",186-212
boolean-equal,Informational,"Basket.deleteNewIndex() (contracts/Basket.sol#225-232) compares to a boolean constant:
	-require(bool)(auction.auctionOngoing() == false) (contracts/Basket.sol#227)
",) (contracts/Basket.sol,225-232
pragma,Informational,"5 different versions of Solidity are used:
	- Version constraint ^0.8.2 is used by:
		-^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/proxy/Clones.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
	- Version constraint =0.8.7 is used by:
		-=0.8.7 (contracts/Auction.sol#1)
		-=0.8.7 (contracts/Basket.sol#1)
		-=0.8.7 (contracts/Factory.sol#1)
		-=0.8.7 (contracts/interfaces/IAuction.sol#1)
		-=0.8.7 (contracts/interfaces/IBasket.sol#1)
		-=0.8.7 (contracts/interfaces/IFactory.sol#1)
		-=0.8.7 (contracts/test/TestToken.sol#1)
	- Version constraint >=0.4.22<0.9.0 is used by:
		->=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/proxy/Clones.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint =0.8.7 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- =0.8.7 (contracts/Auction.sol#1)
	- =0.8.7 (contracts/Basket.sol#1)
	- =0.8.7 (contracts/Factory.sol#1)
	- =0.8.7 (contracts/interfaces/IAuction.sol#1)
	- =0.8.7 (contracts/interfaces/IBasket.sol#1)
	- =0.8.7 (contracts/interfaces/IFactory.sol#1)
	- =0.8.7 (contracts/test/TestToken.sol#1)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
",N/A,N/A
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#185)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",180-187
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#54-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",54-59
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#151-160):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#158)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",151-160
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",128-137
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#160)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",155-162
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#122-133):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",122-133
low-level-calls,Informational,"Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#64-69):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#67)
","address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",64-69
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#178-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",178-187
naming-convention,Informational,"Parameter Basket.validateWeights(address[],uint256[])._tokens (contracts/Basket.sol#63) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract console (node_modules/hardhat/console.sol#4-1552) is not in CapWords
",node_modules/hardhat/console.sol,4-1552
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#59-62) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",59-62
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#55-57) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",55-57
naming-convention,Informational,"Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,21-22
naming-convention,Informational,"Variable ERC20Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#376) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Basket.publishNewIndex(address[],uint256[])._tokens (contracts/Basket.sol#186) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Basket.validateWeights(address[],uint256[])._weights (contracts/Basket.sol#63) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Basket.publishNewIndex(address[],uint256[])._weights (contracts/Basket.sol#186) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#18-19) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,18-19
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#56-71) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#65)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",56-71
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#42-51) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#45)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",42-51
too-many-digits,Informational,"Clones.cloneDeterministic(address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#42-51) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_cloneDeterministic_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#47)
","address,bytes32) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",42-51
too-many-digits,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-33) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#27)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-33
too-many-digits,Informational,"Clones.clone(address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#24-33) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_clone_asm_0 + 0x28,0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#29)
",address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol,24-33
too-many-digits,Informational,"Clones.predictDeterministicAddress(address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#56-71) uses literals with too many digits:
	- mstore(uint256,uint256)(ptr_predictDeterministicAddress_asm_0,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000) (node_modules/@openzeppelin/contracts/proxy/Clones.sol#63)
","address,bytes32,address) (node_modules/@openzeppelin/contracts/proxy/Clones.sol",56-71
immutable-states,Optimization,"Factory.auctionImpl (contracts/Factory.sol#26) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Factory.basketImpl (contracts/Factory.sol#27) should be immutable 
",N/A,N/A
