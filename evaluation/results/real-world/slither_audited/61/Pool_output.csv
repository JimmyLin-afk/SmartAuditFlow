Severity,Description,Line
High,"Reentrancy in Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168):
	External calls:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _initialized = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#41)
	Initializable._initialized (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#25) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _initializing = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#40)
		- _initializing = false (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#47)
	Initializable._initializing (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#30) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
	- poolConstants.borrower = _borrower (contracts/Pool/Pool.sol#156)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.borrowRate = _borrowRate (contracts/Pool/Pool.sol#157)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals (contracts/Pool/Pool.sol#158)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.repaymentInterval = _repaymentInterval (contracts/Pool/Pool.sol#159)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.lenderVerifier = _lenderVerifier (contracts/Pool/Pool.sol#160)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod) (contracts/Pool/Pool.sol#162)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration) (contracts/Pool/Pool.sol#163)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",133-168
High,"Reentrancy in Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484):
	External calls:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",432-484
High,"Reentrancy in Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484):
	External calls:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",432-484
High,"Reentrancy in Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#298)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#296)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",275-305
High,"Reentrancy in Pool.withdrawLiquidity() (contracts/Pool/Pool.sol#607-648):
	External calls:
	- _withdrawRepayment(msg.sender) (contracts/Pool/Pool.sol#639)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _withdrawRepayment(msg.sender) (contracts/Pool/Pool.sol#639)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#260)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#37) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#214-223)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#109-111)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
		- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
		- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
		- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
		- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",607-648
High,"Reentrancy in Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio (contracts/Pool/Pool.sol#300)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- delete lenders[_lender].marginCallEndTime (contracts/Pool/Pool.sol#301)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",275-305
High,"Reentrancy in Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424):
	External calls:
	- _deposit(_fromSavingsAccount,false,_borrowToken,_amount,_strategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#413-421)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _deposit(_fromSavingsAccount,false,_borrowToken,_amount,_strategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#413-421)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#239)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
",390-424
High,"Reentrancy in Pool.liquidateForLender(address,bool,bool,bool) (contracts/Pool/Pool.sol#864-890):
	External calls:
	- _canLenderBeLiquidated(_lender) (contracts/Pool/Pool.sol#870)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	- _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare,poolConstants.collateralAsset) (contracts/Pool/Pool.sol#876)
	- _liquidateForLender(_fromSavingsAccount,_lender,_lenderCollateralTokens) (contracts/Pool/Pool.sol#878)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _amountReceived = _withdraw(_toSavingsAccount,_recieveLiquidityShare,poolConstants.collateralAsset,_poolSavingsStrategy,_lenderCollateralTokens) (contracts/Pool/Pool.sol#880-886)
		- SavingsAccountUtil.depositFromSavingsAccount(_savingsAccount,address(this),msg.sender,_amountInTokens,_asset,_poolSavingsStrategy,_recieveLiquidityShare,_toSavingsAccount) (contracts/Pool/Pool.sol#784-794)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _liquidateForLender(_fromSavingsAccount,_lender,_lenderCollateralTokens) (contracts/Pool/Pool.sol#878)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#260)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#37) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#214-223)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#109-111)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
		- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
		- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
		- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
		- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- delete lenders[_lender] (contracts/Pool/Pool.sol#888)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",864-890
Medium,"Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909) performs a multiplication on the result of a division:
	- _totalCollateralTokens.mul(_ratioOfPrices).div(10 ** _decimals).mul(uint256(10 ** 30).sub(_fraction)).div(10 ** 30) (contracts/Pool/Pool.sol#908)
",899-909
Medium,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) performs a multiplication on the result of a division:
	- penalty = _cancelPenaltyMultiple.mul(poolConstants.borrowRate).div(10 ** 30).mul(_collateralLiquidityShare).div(10 ** 30).mul(_penaltyTime).div(31536000) (contracts/Pool/Pool.sol#523-529)
",501-531
Medium,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) uses a dangerous strict equality:
	- _amountToWithdraw == 0 (contracts/Pool/Pool.sol#968)
",965-974
Medium,"Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305) uses a dangerous strict equality:
	- require(bool,string)(balanceOf(msg.sender) == 0,ACMC2) (contracts/Pool/Pool.sol#281)
",275-305
Medium,"Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424) uses a dangerous strict equality:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime,L3) (contracts/Pool/Pool.sol#401)
",390-424
Medium,"Pool.depositCollateral(uint256,bool) (contracts/Pool/Pool.sol#175-179) uses a dangerous strict equality:
	- require(bool,string)(balanceOf(msg.sender) == 0,DC2) (contracts/Pool/Pool.sol#177)
",175-179
Medium,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) uses a dangerous strict equality:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION,CP1) (contracts/Pool/Pool.sol#503)
",501-531
Medium,"Pool._canLenderBeLiquidated(address) (contracts/Pool/Pool.sol#801-809) uses a dangerous strict equality:
	- require(bool,string)((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline),CLBL1) (contracts/Pool/Pool.sol#802)
",801-809
Medium,"Reentrancy in Pool.liquidateForLender(address,bool,bool,bool) (contracts/Pool/Pool.sol#864-890):
	External calls:
	- _canLenderBeLiquidated(_lender) (contracts/Pool/Pool.sol#870)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	State variables written after the call(s):
	- (_lenderCollateralLPShare,_lenderBalance) = _updateLenderSharesDuringLiquidation(_lender) (contracts/Pool/Pool.sol#873)
		- poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares) (contracts/Pool/Pool.sol#826)
		- poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares) (contracts/Pool/Pool.sol#827)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",864-890
Medium,"Reentrancy in Pool.liquidatePool(bool,bool,bool) (contracts/Pool/Pool.sol#735-765):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare,_collateralAsset) (contracts/Pool/Pool.sol#752)
	State variables written after the call(s):
	- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#759)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
	- delete poolVariables.baseLiquidityShares (contracts/Pool/Pool.sol#760)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",735-765
Medium,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- poolVariables.loanStatus = LoanStatus.TERMINATED (contracts/Pool/Pool.sol#583)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",580-586
Medium,"Reentrancy in Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
	State variables written after the call(s):
	- poolVariables.baseLiquidityShares = _penalty (contracts/Pool/Pool.sol#365)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
	- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#366)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",355-381
Medium,"Reentrancy in Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666):
	External calls:
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	State variables written after the call(s):
	- lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration()) (contracts/Pool/Pool.sol#663)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",656-666
Medium,"Reentrancy in Pool.closeLoan() (contracts/Pool/Pool.sol#591-601):
	External calls:
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#596)
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- poolVariables.baseLiquidityShares = _penalty (contracts/Pool/Pool.sol#365)
		- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#366)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",591-601
Medium,"Reentrancy in Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens,_collateralAsset) (contracts/Pool/Pool.sol#558)
	State variables written after the call(s):
	- poolVariables.penaltyLiquidityAmount = _liquidationTokens (contracts/Pool/Pool.sol#565)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",550-574
Medium,"Reentrancy in Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348):
	External calls:
	- _currentCollateralRatio = getCurrentCollateralRatio() (contracts/Pool/Pool.sol#323)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	- IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(_noOfRepaymentIntervals,_repaymentInterval,poolConstants.borrowRate,poolConstants.loanStartTime,poolConstants.borrowAsset) (contracts/Pool/Pool.sol#328-334)
	- IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval) (contracts/Pool/Pool.sol#335)
	State variables written after the call(s):
	- delete poolConstants.loanWithdrawalDeadline (contracts/Pool/Pool.sol#340)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",310-348
Medium,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) ignores return value by SavingsAccountUtil.transferTokens(_borrowAsset,_feeAdjustedWithdrawalAmount,address(this),msg.sender) (contracts/Pool/Pool.sol#345)
",310-348
Medium,"Pool.withdrawLiquidity() (contracts/Pool/Pool.sol#607-648) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_toTransfer,address(this),msg.sender) (contracts/Pool/Pool.sol#645)
",607-648
Medium,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
",965-974
Medium,"Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_liquidationTokens,msg.sender,address(this)) (contracts/Pool/Pool.sol#566)
",550-574
Medium,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) ignores return value by SavingsAccountUtil.transferTokens(_borrowAsset,_protocolFee,address(this),_collector) (contracts/Pool/Pool.sol#344)
",310-348
Low,"Reentrancy in Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,_depositor,address(this)) (contracts/Pool/Pool.sol#212-220)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,_depositor,address(this)) (contracts/Pool/Pool.sol#212-220)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#221)
",207-223
Low,"Reentrancy in Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168):
	External calls:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _decimals = 18 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#64)
	- _setupDecimals(_decimals) (contracts/Pool/Pool.sol#166)
		- _decimals = decimals_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#294)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _name = name_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#62)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _symbol = symbol_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#63)
",133-168
Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#582)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",580-586
Low,"Reentrancy in Pool.closeLoan() (contracts/Pool/Pool.sol#591-601):
	External calls:
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#596)
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#598)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",591-601
Low,"Reentrancy in Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542):
	External calls:
	- _withdrawAllCollateral(poolConstants.borrower,_penalty) (contracts/Pool/Pool.sol#539)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#540)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",537-542
Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#584)
	Event emitted after the call(s):
	- PoolTerminated() (contracts/Pool/Pool.sol#585)
",580-586
Low,"Reentrancy in Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666):
	External calls:
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	Event emitted after the call(s):
	- MarginCalled(msg.sender) (contracts/Pool/Pool.sol#665)
",656-666
Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- Paused(_msgSender()) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#82)
		- _pause() (contracts/Pool/Pool.sol#582)
",580-586
Low,"Reentrancy in Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542):
	External calls:
	- _withdrawAllCollateral(poolConstants.borrower,_penalty) (contracts/Pool/Pool.sol#539)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- Paused(_msgSender()) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#82)
		- _pause() (contracts/Pool/Pool.sol#540)
	- PoolCancelled() (contracts/Pool/Pool.sol#541)
",537-542
Low,"Reentrancy in Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
	- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- CollateralWithdrawn(_receiver,_sharesReceived) (contracts/Pool/Pool.sol#380)
",355-381
Low,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) uses timestamp for comparisons
	Dangerous comparisons:
	- _amountToWithdraw == 0 (contracts/Pool/Pool.sol#968)
",965-974
Low,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION,CP1) (contracts/Pool/Pool.sol#503)
	- _loanStartTime < block.timestamp && totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10 ** 30) (contracts/Pool/Pool.sol#508-509)
	- _loanWithdrawalDeadline > block.timestamp (contracts/Pool/Pool.sol#516)
	- require(bool,string)(msg.sender == poolConstants.borrower,CP2) (contracts/Pool/Pool.sol#517)
",501-531
Low,"Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,RMC1) (contracts/Pool/Pool.sol#657)
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
",656-666
Low,"Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.CANCELLED,LCP1) (contracts/Pool/Pool.sol#551)
	- require(bool,string)(poolVariables.penaltyLiquidityAmount == 0,LCP2) (contracts/Pool/Pool.sol#552)
",550-574
Low,"Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2)) (contracts/Pool/Pool.sol#985)
",981-989
Low,"Pool.depositCollateral(uint256,bool) (contracts/Pool/Pool.sol#175-179) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(balanceOf(msg.sender) == 0,DC2) (contracts/Pool/Pool.sol#177)
",175-179
Low,"Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381) uses timestamp for comparisons
	Dangerous comparisons:
	- poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty (contracts/Pool/Pool.sol#359)
	- _collateralShares != 0 (contracts/Pool/Pool.sol#369)
",355-381
Low,"Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > _loanStartTime (contracts/Pool/Pool.sol#488)
	- block.timestamp > _loanWithdrawalDeadline (contracts/Pool/Pool.sol#490)
",486-496
Low,"Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_to != poolConstants.borrower,TT2) (contracts/Pool/Pool.sol#440)
	- _amount != _fromBalance (contracts/Pool/Pool.sol#478)
",432-484
Low,"Pool.closeLoan() (contracts/Pool/Pool.sol#591-601) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,CL1) (contracts/Pool/Pool.sol#592)
",591-601
Low,"Pool._canLenderBeLiquidated(address) (contracts/Pool/Pool.sol#801-809) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline),CLBL1) (contracts/Pool/Pool.sol#802)
	- require(bool,string)(_marginCallEndTime < block.timestamp,CLBL3) (contracts/Pool/Pool.sol#805)
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender),CLBL4) (contracts/Pool/Pool.sol#807)
	- require(bool,string)(balanceOf(_lender) != 0,CLBL5) (contracts/Pool/Pool.sol#808)
",801-809
Low,"Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30),ID1) (contracts/Pool/Pool.sol#197)
",187-199
Low,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION && poolConstants.loanStartTime < block.timestamp && block.timestamp < poolConstants.loanWithdrawalDeadline,WBA1) (contracts/Pool/Pool.sol#313-318)
	- require(bool,string)(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10 ** 30),WBA2) (contracts/Pool/Pool.sol#320)
	- require(bool,string)(_currentCollateralRatio >= poolConstants.idealCollateralRatio,WBA3) (contracts/Pool/Pool.sol#324)
",310-348
Low,"Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,ACMC1) (contracts/Pool/Pool.sol#280)
	- require(bool,string)(balanceOf(msg.sender) == 0,ACMC2) (contracts/Pool/Pool.sol#281)
	- require(bool,string)(getMarginCallEndTime(_lender) >= block.timestamp,ACMC3) (contracts/Pool/Pool.sol#282)
	- getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio (contracts/Pool/Pool.sol#300)
",275-305
Low,"Pool.interestToPay() (contracts/Pool/Pool.sol#672-685) uses timestamp for comparisons
	Dangerous comparisons:
	- _loanDurationTillNow <= _loanDurationCovered (contracts/Pool/Pool.sol#679)
",672-685
Low,"Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime,L3) (contracts/Pool/Pool.sol#401)
	- _amount.add(_lentAmount) > _borrowAmountNeeded (contracts/Pool/Pool.sol#404)
",390-424
