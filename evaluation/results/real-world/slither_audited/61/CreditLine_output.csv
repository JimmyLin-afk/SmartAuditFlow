Severity,Description,Line
High,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) sends eth to arbitrary user
	Dangerous calls:
	- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
",763-788
High,"Reentrancy in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	External calls:
	- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/CreditLine/CreditLine.sol#1000)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _totalCollateralTokens = calculateTotalCollateralTokens(_id) (contracts/CreditLine/CreditLine.sol#1008)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
	- IERC20(_borrowAsset).safeTransferFrom(msg.sender,_lender,_borrowTokens) (contracts/CreditLine/CreditLine.sol#1022)
	- _transferCollateral(_id,_collateralAsset,_totalCollateralTokens,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#1026)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
		- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
		- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	External calls sending eth:
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
	State variables written after the call(s):
	- _transferCollateral(_id,_collateralAsset,_totalCollateralTokens,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#1026)
		- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
",996-1029
High,"Reentrancy in CreditLine.repay(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#798-836):
	External calls:
	- _repay(_id,_amount,_fromSavingsAccount,_principalPaid) (contracts/CreditLine/CreditLine.sol#831)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
		- IERC20(_borrowAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/CreditLine/CreditLine.sol#778)
		- IERC20(_borrowAsset).approve(_defaultStrategy,_amount) (contracts/CreditLine/CreditLine.sol#779)
		- _savingsAccount.deposit(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#780)
		- _savingsAccount.increaseAllowanceToCreditLine(_principalPaid,_borrowAsset,_lender) (contracts/CreditLine/CreditLine.sol#786)
		- _tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#747)
		- _savingsAccount.transferFrom(_tokensToTransfer,_asset,_strategyList[_index],msg.sender,_lender) (contracts/CreditLine/CreditLine.sol#754)
	External calls sending eth:
	- _repay(_id,_amount,_fromSavingsAccount,_principalPaid) (contracts/CreditLine/CreditLine.sol#831)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
	State variables written after the call(s):
	- _resetCreditLine(_id) (contracts/CreditLine/CreditLine.sol#834)
		- creditLineVariables[_id].lastPrincipalUpdateTime = 0 (contracts/CreditLine/CreditLine.sol#839)
		- creditLineVariables[_id].totalInterestRepaid = 0 (contracts/CreditLine/CreditLine.sol#840)
		- creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = 0 (contracts/CreditLine/CreditLine.sol#841)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
",798-836
Medium,"CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464) performs a multiplication on the result of a division:
	- _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(creditLineConstants[_id].idealCollateralRatio).mul(10 ** 30).div(10 ** _decimals) (contracts/CreditLine/CreditLine.sol#451-453)
",436-464
Medium,"CreditLine.calculateCurrentCollateralRatio(uint256) (contracts/CreditLine/CreditLine.sol#868-880) performs a multiplication on the result of a division:
	- currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(currentDebt).mul(10 ** 30).div(10 ** _decimals) (contracts/CreditLine/CreditLine.sol#875-877)
",868-880
Medium,"CreditLine._borrowTokensToLiquidate(address,address,uint256) (contracts/CreditLine/CreditLine.sol#1045-1056) performs a multiplication on the result of a division:
	- _borrowTokens = (_totalCollateralTokens.mul(uint256(10 ** 30).sub(liquidatorRewardFraction)).div(10 ** 30).mul(_ratioOfPrices).div(10 ** _decimals)) (contracts/CreditLine/CreditLine.sol#1051-1053)
",1045-1056
Medium,"CreditLine.withdrawableCollateral(uint256) (contracts/CreditLine/CreditLine.sol#930-949) performs a multiplication on the result of a division:
	- _collateralNeeded = _currentDebt.mul(creditLineConstants[_id].idealCollateralRatio).div(_ratioOfPrices).mul(10 ** _decimals).div(10 ** 30) (contracts/CreditLine/CreditLine.sol#939-943)
",930-949
Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) uses a dangerous strict equality:
	- require(bool,string)(msg.value == _amount,creditLine::repay - Ether sent not equal to repay amount) (contracts/CreditLine/CreditLine.sol#775)
",763-788
Medium,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) uses a dangerous strict equality:
	- _amount == _activeAmount (contracts/CreditLine/CreditLine.sol#756)
",729-761
Medium,"Reentrancy in CreditLine._depositCollateralFromSavingsAccount(uint256,uint256,address) (contracts/CreditLine/CreditLine.sol#474-509):
	External calls:
	- _tokenInStrategy = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#491)
	- _savingsAccount.transferFrom(_tokensToTransfer,_collateralAsset,_strategy,_sender,address(this)) (contracts/CreditLine/CreditLine.sol#498)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy)) (contracts/CreditLine/CreditLine.sol#500-502)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
",474-509
Medium,"Reentrancy in CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727):
	External calls:
	- _borrowableAmount = calculateBorrowableAmount(_id) (contracts/CreditLine/CreditLine.sol#693)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	State variables written after the call(s):
	- updateinterestAccruedTillLastPrincipalUpdate(_id) (contracts/CreditLine/CreditLine.sol#698)
		- creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued (contracts/CreditLine/CreditLine.sol#471)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
	- creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount) (contracts/CreditLine/CreditLine.sol#699)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
	- creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp (contracts/CreditLine/CreditLine.sol#700)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
",691-727
Medium,"Reentrancy in CreditLine.withdrawCollateral(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#912-922):
	External calls:
	- _withdrawableCollateral = withdrawableCollateral(_id) (contracts/CreditLine/CreditLine.sol#917)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _transferCollateral(_id,_collateralAsset,_amount,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#920)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
		- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
		- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	State variables written after the call(s):
	- _transferCollateral(_id,_collateralAsset,_amount,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#920)
		- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
",912-922
Medium,"Reentrancy in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	External calls:
	- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/CreditLine/CreditLine.sol#1000)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _totalCollateralTokens = calculateTotalCollateralTokens(_id) (contracts/CreditLine/CreditLine.sol#1008)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	State variables written after the call(s):
	- creditLineVariables[_id].status = CreditLineStatus.LIQUIDATED (contracts/CreditLine/CreditLine.sol#1011)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
",996-1029
Medium,"Reentrancy in CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986):
	External calls:
	- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
	- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
	- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
",951-986
Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by IERC20(_borrowAsset).approve(_defaultStrategy,_amount) (contracts/CreditLine/CreditLine.sol#779)
",763-788
Medium,"CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986) ignores return value by ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
",951-986
Medium,"CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986) ignores return value by ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
",951-986
Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
",763-788
Medium,"CreditLine._withdrawBorrowAmount(address,uint256,address) (contracts/CreditLine/CreditLine.sol#654-682) ignores return value by _savingsAccount.withdrawFrom(_tokensToTransfer,_asset,_strategyList[_index],_lender,address(this),false) (contracts/CreditLine/CreditLine.sol#675)
",654-682
Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by _savingsAccount.deposit(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#780)
",763-788
Medium,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) ignores return value by _savingsAccount.transferFrom(_tokensToTransfer,_asset,_strategyList[_index],msg.sender,_lender) (contracts/CreditLine/CreditLine.sol#754)
",729-761
Medium,"CreditLine._depositCollateralFromSavingsAccount(uint256,uint256,address) (contracts/CreditLine/CreditLine.sol#474-509) ignores return value by _savingsAccount.transferFrom(_tokensToTransfer,_collateralAsset,_strategy,_sender,address(this)) (contracts/CreditLine/CreditLine.sol#498)
",474-509
Medium,"CreditLine._depositCollateral(uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol#631-652) ignores return value by IERC20(_collateralAsset).approve(_strategy,_amount) (contracts/CreditLine/CreditLine.sol#647)
",631-652
Low,"CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902) has external calls inside a loop: _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
",888-902
Low,"Reentrancy in CreditLine._depositCollateral(uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol#631-652):
	External calls:
	- IERC20(_collateralAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/CreditLine/CreditLine.sol#646)
	- IERC20(_collateralAsset).approve(_strategy,_amount) (contracts/CreditLine/CreditLine.sol#647)
	- _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount,_collateralAsset,_strategy,address(this)) (contracts/CreditLine/CreditLine.sol#649)
	External calls sending eth:
	- _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount,_collateralAsset,_strategy,address(this)) (contracts/CreditLine/CreditLine.sol#649)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_sharesReceived) (contracts/CreditLine/CreditLine.sol#650)
",631-652
Low,"CreditLine.withdrawableCollateral(uint256) (contracts/CreditLine/CreditLine.sol#930-949) uses timestamp for comparisons
	Dangerous comparisons:
	- _collateralNeeded >= _totalCollateralTokens (contracts/CreditLine/CreditLine.sol#945)
",930-949
Low,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(msg.value == _amount,creditLine::repay - Ether sent not equal to repay amount) (contracts/CreditLine/CreditLine.sol#775)
	- _principalPaid != 0 (contracts/CreditLine/CreditLine.sol#785)
",763-788
Low,"CreditLine.repay(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#798-836) uses timestamp for comparisons
	Dangerous comparisons:
	- _amount >= _totalCurrentDebt (contracts/CreditLine/CreditLine.sol#814)
	- _amount > _interestToPay (contracts/CreditLine/CreditLine.sol#821)
",798-836
Low,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) uses timestamp for comparisons
	Dangerous comparisons:
	- _activeAmount.add(_tokenInStrategy) >= _amount (contracts/CreditLine/CreditLine.sol#750)
	- _amount == _activeAmount (contracts/CreditLine/CreditLine.sol#756)
",729-761
Low,"CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(currentCollateralRatio < creditLineConstants[_id].idealCollateralRatio,CreditLine: Collateral ratio is higher than ideal value) (contracts/CreditLine/CreditLine.sol#1001-1004)
",996-1029
Low,"CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464) uses timestamp for comparisons
	Dangerous comparisons:
	- _maxPossible > _currentDebt (contracts/CreditLine/CreditLine.sol#460)
",436-464
Low,"CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount <= _borrowableAmount,CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount) (contracts/CreditLine/CreditLine.sol#694)
",691-727
Low,"CreditLine.withdrawCollateral(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#912-922) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount <= _withdrawableCollateral,Collateral ratio cant go below ideal) (contracts/CreditLine/CreditLine.sol#918)
",912-922
Informational,"Low level call in CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727):
	- (feeSuccess,None) = protocolFeeCollector.call{value: _protocolFee}() (contracts/CreditLine/CreditLine.sol#718)
	- (success,None) = msg.sender.call{value: _tokenDiffBalance}() (contracts/CreditLine/CreditLine.sol#720)
",691-727
Informational,"Low level call in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
",996-1029
