### 安全审计报告总结

#### 高危问题 (High Severity)
1. **任意转账风险 (arbitrary-send-erc20/eth)**
   - **问题**：多个合约（如 `YearnYield`、`AaveYield`）的 `lockTokens` 函数使用 `safeTransferFrom`，允许用户指定 `from` 地址，可能导致未经授权的代币转移。
   - **修复建议**：验证 `from` 地址的权限，限制为 `msg.sender` 或通过签名授权。

2. **重入攻击 (reentrancy-eth)**
   - **问题**：`Pool` 合约的 `initialize`、`liquidate` 等函数存在外部调用后修改状态变量的风险。
   - **修复建议**：遵循“检查-效果-交互”模式，使用 OpenZeppelin 的 `ReentrancyGuard` 修饰器。

3. **操作符错误 (incorrect-exp)**
   - **问题**：`FullMath.mulDiv` 中使用 `^` 代替幂运算符 `**`。
   - **修复建议**：替换为 `**` 运算符。

4. **未正确处理 ETH 转账**
   - **问题**：`CreditLine._repay` 直接使用 `msg.value` 而未验证金额匹配。
   - **修复建议**：增加 `require(msg.value == _amount)` 或改用 SafeERC20 标准。

---

#### 中危问题 (Medium Severity)
1. **锁定的 ETH (locked-ether)**
   - **问题**：`PoolFactory` 合约支持 ETH 存款但无提现功能。
   - **修复建议**：添加提现函数并限制权限。

2. **除法优先于乘法 (divide-before-multiply)**
   - **问题**：多处计算（如 `PriceOracle.getChainlinkLatestPrice`）可能因计算顺序导致精度损失。
   - **修复建议**：调整计算顺序或使用更高精度类型（如 `uint256`）。

3. **危险的严格相等 (incorrect-equality)**
   - **问题**：`Pool._withdrawRepayment` 使用 `_amountToWithdraw == 0` 可能导致逻辑漏洞。
   - **修复建议**：改用范围检查（如 `<=`）或明确状态机约束。

---

#### 低危问题 (Low Severity)
1. **变量遮蔽 (shadowing-local)**
   - **问题**：构造函数参数名与继承合约状态变量冲突（如 `Pool.initialize` 中的 `_decimals`）。
   - **修复建议**：重命名局部变量以避免冲突。

2. **未使用返回值 (unused-return)**
   - **问题**：多个外部调用（如 `IERC20.approve`）未验证返回值。
   - **修复建议**：使用 SafeERC20 的 `safeApprove` 或检查返回值。

3. **循环中的外部调用 (calls-loop)**
   - **问题**：`SavingsAccount.withdrawAll` 在循环中调用外部合约。
   - **修复建议**：限制循环次数或拆分操作。

---
