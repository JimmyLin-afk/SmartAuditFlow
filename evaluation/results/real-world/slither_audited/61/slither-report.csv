Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"YearnYield.lockTokens(address,address,uint256) (contracts/yield/YearnYield.sol#114-131) uses arbitrary from in transferFrom: IERC20(asset).safeTransferFrom(user,address(this),amount) (contracts/yield/YearnYield.sol#126)
","address,address,uint256) (contracts/yield/YearnYield.sol",114-131
arbitrary-send-erc20,High,"AaveYield.lockTokens(address,address,uint256) (contracts/yield/AaveYield.sol#192-209) uses arbitrary from in transferFrom: IERC20(asset).safeTransferFrom(user,address(this),amount) (contracts/yield/AaveYield.sol#204)
","address,address,uint256) (contracts/yield/AaveYield.sol",192-209
arbitrary-send-erc20,High,"CompoundYield.lockTokens(address,address,uint256) (contracts/yield/CompoundYield.sol#115-130) uses arbitrary from in transferFrom: IERC20(asset).safeTransferFrom(user,address(this),amount) (contracts/yield/CompoundYield.sol#126)
","address,address,uint256) (contracts/yield/CompoundYield.sol",115-130
arbitrary-send-erc20,High,"NoYield.lockTokens(address,address,uint256) (contracts/yield/NoYield.sol#93-106) uses arbitrary from in transferFrom: IERC20(asset).safeTransferFrom(user,address(this),amount) (contracts/yield/NoYield.sol#100)
","address,address,uint256) (contracts/yield/NoYield.sol",93-106
arbitrary-send-erc20,High,"SavingsAccountUtil.transferTokens(address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol#98-127) uses arbitrary from in transferFrom: IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
","address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol",98-127
arbitrary-send-eth,High,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) sends eth to arbitrary user
	Dangerous calls:
	- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
arbitrary-send-eth,High,"CompoundYield.unlockTokens(address,uint256) (contracts/yield/CompoundYield.sol#138-152) sends eth to arbitrary user
	Dangerous calls:
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/CompoundYield.sol#144)
","address,uint256) (contracts/yield/CompoundYield.sol",138-152
arbitrary-send-eth,High,"Repayments._transferTokens(address,address,address,uint256) (contracts/Pool/Repayments.sol#457-473) sends eth to arbitrary user
	Dangerous calls:
	- (transferSuccess,None) = _to.call{value: _amount}() (contracts/Pool/Repayments.sol#464)
","address,address,address,uint256) (contracts/Pool/Repayments.sol",457-473
arbitrary-send-eth,High,"NoYield._unlockTokens(address,uint256) (contracts/yield/NoYield.sol#134-144) sends eth to arbitrary user
	Dangerous calls:
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/NoYield.sol#138)
","address,uint256) (contracts/yield/NoYield.sol",134-144
arbitrary-send-eth,High,"SavingsAccount._depositToYield(uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol#130-143) sends eth to arbitrary user
	Dangerous calls:
	- _sharesReceived = IYield(_strategy).lockTokens{value: _ethValue}(msg.sender,_token,_amount) (contracts/SavingsAccount/SavingsAccount.sol#142)
","uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol",130-143
arbitrary-send-eth,High,"YearnYield.unlockTokens(address,uint256) (contracts/yield/YearnYield.sol#139-153) sends eth to arbitrary user
	Dangerous calls:
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/YearnYield.sol#145)
","address,uint256) (contracts/yield/YearnYield.sol",139-153
arbitrary-send-eth,High,"AaveYield.unlockTokens(address,uint256) (contracts/yield/AaveYield.sol#217-230) sends eth to arbitrary user
	Dangerous calls:
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/AaveYield.sol#222)
","address,uint256) (contracts/yield/AaveYield.sol",217-230
arbitrary-send-eth,High,"AaveYield._depositETH(uint256) (contracts/yield/AaveYield.sol#277-288) sends eth to arbitrary user
	Dangerous calls:
	- IWETHGateway(wethGateway).depositETH{value: amount}(lendingPool,address(this),referralCode) (contracts/yield/AaveYield.sol#285)
",uint256) (contracts/yield/AaveYield.sol,277-288
arbitrary-send-eth,High,"SavingsAccount._transfer(uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol#269-280) sends eth to arbitrary user
	Dangerous calls:
	- (_success,None) = _to.call{value: _amount}() (contracts/SavingsAccount/SavingsAccount.sol#275)
","uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol",269-280
incorrect-exp,High,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inv = (3 * denominator) ^ 2 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#87)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
incorrect-return,High,"TransparentUpgradeableProxy.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#116-119) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol",116-119
incorrect-return,High,"TransparentUpgradeableProxy.admin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#70-72) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,70-72
incorrect-return,High,"TransparentUpgradeableProxy.upgradeTo(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#105-107) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,105-107
incorrect-return,High,"TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) calls Proxy._fallback() (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#54-57) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,53-59
incorrect-return,High,"TransparentUpgradeableProxy.changeAdmin(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#94-98) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,94-98
incorrect-return,High,"TransparentUpgradeableProxy.implementation() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#83-85) calls TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) which halt the execution return(uint256,uint256)(0,returndatasize()()) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#39)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,83-85
reentrancy-eth,High,"Reentrancy in Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168):
	External calls:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _initialized = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#41)
	Initializable._initialized (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#25) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _initializing = true (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#40)
		- _initializing = false (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#47)
	Initializable._initializing (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#30) can be used in cross function reentrancies:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#35-49)
	- poolConstants.borrower = _borrower (contracts/Pool/Pool.sol#156)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.borrowRate = _borrowRate (contracts/Pool/Pool.sol#157)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals (contracts/Pool/Pool.sol#158)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.repaymentInterval = _repaymentInterval (contracts/Pool/Pool.sol#159)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.lenderVerifier = _lenderVerifier (contracts/Pool/Pool.sol#160)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod) (contracts/Pool/Pool.sol#162)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration) (contracts/Pool/Pool.sol#163)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
","uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol",133-168
reentrancy-eth,High,"Reentrancy in Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484):
	External calls:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
","address,address,uint256) (contracts/Pool/Pool.sol",432-484
reentrancy-eth,High,"Reentrancy in Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484):
	External calls:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _withdrawRepayment(_from) (contracts/Pool/Pool.sol#462)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _withdrawRepayment(_to) (contracts/Pool/Pool.sol#463)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
","address,address,uint256) (contracts/Pool/Pool.sol",432-484
reentrancy-eth,High,"Reentrancy in Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#298)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#296)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
","address,uint256,bool) (contracts/Pool/Pool.sol",275-305
reentrancy-eth,High,"Reentrancy in Pool.withdrawLiquidity() (contracts/Pool/Pool.sol#607-648):
	External calls:
	- _withdrawRepayment(msg.sender) (contracts/Pool/Pool.sol#639)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _withdrawRepayment(msg.sender) (contracts/Pool/Pool.sol#639)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#260)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#37) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#214-223)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#109-111)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
	- _burn(msg.sender,_actualBalance) (contracts/Pool/Pool.sol#642)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
		- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
		- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
		- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
		- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",) (contracts/Pool/Pool.sol,607-648
reentrancy-eth,High,"Reentrancy in Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio (contracts/Pool/Pool.sol#300)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#286-294)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- delete lenders[_lender].marginCallEndTime (contracts/Pool/Pool.sol#301)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
","address,uint256,bool) (contracts/Pool/Pool.sol",275-305
reentrancy-eth,High,"Reentrancy in Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424):
	External calls:
	- _deposit(_fromSavingsAccount,false,_borrowToken,_amount,_strategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#413-421)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _deposit(_fromSavingsAccount,false,_borrowToken,_amount,_strategy,msg.sender,address(this)) (contracts/Pool/Pool.sol#413-421)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _mint(_lender,_amount) (contracts/Pool/Pool.sol#422)
		- _totalSupply = _totalSupply.add(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#239)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
","address,uint256,address) (contracts/Pool/Pool.sol",390-424
reentrancy-eth,High,"Reentrancy in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	External calls:
	- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/CreditLine/CreditLine.sol#1000)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _totalCollateralTokens = calculateTotalCollateralTokens(_id) (contracts/CreditLine/CreditLine.sol#1008)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
	- IERC20(_borrowAsset).safeTransferFrom(msg.sender,_lender,_borrowTokens) (contracts/CreditLine/CreditLine.sol#1022)
	- _transferCollateral(_id,_collateralAsset,_totalCollateralTokens,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#1026)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
		- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
		- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	External calls sending eth:
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
	State variables written after the call(s):
	- _transferCollateral(_id,_collateralAsset,_totalCollateralTokens,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#1026)
		- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
","uint256,bool) (contracts/CreditLine/CreditLine.sol",996-1029
reentrancy-eth,High,"Reentrancy in Pool.liquidateForLender(address,bool,bool,bool) (contracts/Pool/Pool.sol#864-890):
	External calls:
	- _canLenderBeLiquidated(_lender) (contracts/Pool/Pool.sol#870)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	- _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare,poolConstants.collateralAsset) (contracts/Pool/Pool.sol#876)
	- _liquidateForLender(_fromSavingsAccount,_lender,_lenderCollateralTokens) (contracts/Pool/Pool.sol#878)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	- _amountReceived = _withdraw(_toSavingsAccount,_recieveLiquidityShare,poolConstants.collateralAsset,_poolSavingsStrategy,_lenderCollateralTokens) (contracts/Pool/Pool.sol#880-886)
		- SavingsAccountUtil.depositFromSavingsAccount(_savingsAccount,address(this),msg.sender,_amountInTokens,_asset,_poolSavingsStrategy,_recieveLiquidityShare,_toSavingsAccount) (contracts/Pool/Pool.sol#784-794)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
		- IExtension(_poolFactory.extension()).removeVotes(_from,_to,_amount) (contracts/Pool/Pool.sol#471)
	External calls sending eth:
	- _liquidateForLender(_fromSavingsAccount,_lender,_lenderCollateralTokens) (contracts/Pool/Pool.sol#878)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- _balances[account] = _balances[account].sub(amount,ERC20: burn amount exceeds balance) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#260)
	ERC20Upgradeable._balances (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#37) can be used in cross function reentrancies:
	- ERC20Upgradeable._transfer(address,address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#214-223)
	- ERC20Upgradeable.balanceOf(address) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#109-111)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- _totalSupply = _totalSupply.sub(amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#261)
	ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) can be used in cross function reentrancies:
	- ERC20Upgradeable.totalSupply() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#102-104)
	- _burn(_lender,_lenderBalance) (contracts/Pool/Pool.sol#887)
		- lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw) (contracts/Pool/Pool.sol#971)
		- lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#468)
		- lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply) (contracts/Pool/Pool.sol#469)
		- lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer) (contracts/Pool/Pool.sol#482)
		- lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer) (contracts/Pool/Pool.sol#483)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- delete lenders[_lender] (contracts/Pool/Pool.sol#888)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
","address,bool,bool,bool) (contracts/Pool/Pool.sol",864-890
reentrancy-eth,High,"Reentrancy in CreditLine.repay(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#798-836):
	External calls:
	- _repay(_id,_amount,_fromSavingsAccount,_principalPaid) (contracts/CreditLine/CreditLine.sol#831)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
		- IERC20(_borrowAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/CreditLine/CreditLine.sol#778)
		- IERC20(_borrowAsset).approve(_defaultStrategy,_amount) (contracts/CreditLine/CreditLine.sol#779)
		- _savingsAccount.deposit(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#780)
		- _savingsAccount.increaseAllowanceToCreditLine(_principalPaid,_borrowAsset,_lender) (contracts/CreditLine/CreditLine.sol#786)
		- _tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#747)
		- _savingsAccount.transferFrom(_tokensToTransfer,_asset,_strategyList[_index],msg.sender,_lender) (contracts/CreditLine/CreditLine.sol#754)
	External calls sending eth:
	- _repay(_id,_amount,_fromSavingsAccount,_principalPaid) (contracts/CreditLine/CreditLine.sol#831)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
	State variables written after the call(s):
	- _resetCreditLine(_id) (contracts/CreditLine/CreditLine.sol#834)
		- creditLineVariables[_id].lastPrincipalUpdateTime = 0 (contracts/CreditLine/CreditLine.sol#839)
		- creditLineVariables[_id].totalInterestRepaid = 0 (contracts/CreditLine/CreditLine.sol#840)
		- creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = 0 (contracts/CreditLine/CreditLine.sol#841)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
","uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol",798-836
reentrancy-eth,High,"Reentrancy in SavingsAccount.switchStrategy(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#152-183):
	External calls:
	- _amount = IYield(_currentStrategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#162)
	- _tokensReceived = IYield(_currentStrategy).unlockTokens(_token,_amount) (contracts/SavingsAccount/SavingsAccount.sol#169)
	- IERC20(_token).safeApprove(_newStrategy,_tokensReceived) (contracts/SavingsAccount/SavingsAccount.sol#173)
	- _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this),_token,_tokensReceived) (contracts/SavingsAccount/SavingsAccount.sol#179)
	External calls sending eth:
	- _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this),_token,_tokensReceived) (contracts/SavingsAccount/SavingsAccount.sol#179)
	State variables written after the call(s):
	- balanceInShares[msg.sender][_token][_newStrategy] = balanceInShares[msg.sender][_token][_newStrategy].add(_sharesReceived) (contracts/SavingsAccount/SavingsAccount.sol#181)
	SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35) can be used in cross function reentrancies:
	- SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35)
	- SavingsAccount.getTotalTokens(address,address) (contracts/SavingsAccount/SavingsAccount.sol#464-479)
	- SavingsAccount.transfer(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#393-416)
	- SavingsAccount.transferFrom(uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#426-456)
","uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",152-183
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#34)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#37)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#33)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"PriceOracle.getChainlinkLatestPrice(address,address) (contracts/PriceOracle.sol#48-94) performs a multiplication on the result of a division:
	- price = uint256(price1).mul(10 ** _feedData2.decimals).mul(10 ** 30).div(uint256(price2)).div(10 ** _feedData1.decimals).mul(10 ** decimals[den]).div(10 ** decimals[num]) (contracts/PriceOracle.sol#86-92)
","address,address) (contracts/PriceOracle.sol",48-94
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#29)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"Repayments.getInstalmentsCompleted(address) (contracts/Pool/Repayments.sol#187-193) performs a multiplication on the result of a division:
	- _instalmentsCompleted = _loanDurationCovered.div(_repaymentInterval).mul(10 ** 30) (contracts/Pool/Repayments.sol#190)
",address) (contracts/Pool/Repayments.sol,187-193
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#35)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#91)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464) performs a multiplication on the result of a division:
	- _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(creditLineConstants[_id].idealCollateralRatio).mul(10 ** 30).div(10 ** _decimals) (contracts/CreditLine/CreditLine.sol#451-453)
",uint256) (contracts/CreditLine/CreditLine.sol,436-464
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#30)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#32)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#42)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#96)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"CreditLine.calculateCurrentCollateralRatio(uint256) (contracts/CreditLine/CreditLine.sol#868-880) performs a multiplication on the result of a division:
	- currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(currentDebt).mul(10 ** 30).div(10 ** _decimals) (contracts/CreditLine/CreditLine.sol#875-877)
",uint256) (contracts/CreditLine/CreditLine.sol,868-880
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#40)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#94)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#41)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#45)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#93)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv = (3 * denominator) ^ 2 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#87)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#46)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#43)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#72)
	- result = prod0 * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#104)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#28)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#95)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"CreditLine._borrowTokensToLiquidate(address,address,uint256) (contracts/CreditLine/CreditLine.sol#1045-1056) performs a multiplication on the result of a division:
	- _borrowTokens = (_totalCollateralTokens.mul(uint256(10 ** 30).sub(liquidatorRewardFraction)).div(10 ** 30).mul(_ratioOfPrices).div(10 ** _decimals)) (contracts/CreditLine/CreditLine.sol#1051-1053)
","address,address,uint256) (contracts/CreditLine/CreditLine.sol",1045-1056
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#39)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#67)
	- inv *= 2 - denominator * inv (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#92)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
divide-before-multiply,Medium,"Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909) performs a multiplication on the result of a division:
	- _totalCollateralTokens.mul(_ratioOfPrices).div(10 ** _decimals).mul(uint256(10 ** 30).sub(_fraction)).div(10 ** 30) (contracts/Pool/Pool.sol#908)
","uint256,address,uint256) (contracts/Pool/Pool.sol",899-909
divide-before-multiply,Medium,"CreditLine.withdrawableCollateral(uint256) (contracts/CreditLine/CreditLine.sol#930-949) performs a multiplication on the result of a division:
	- _collateralNeeded = _currentDebt.mul(creditLineConstants[_id].idealCollateralRatio).div(_ratioOfPrices).mul(10 ** _decimals).div(10 ** 30) (contracts/CreditLine/CreditLine.sol#939-943)
",uint256) (contracts/CreditLine/CreditLine.sol,930-949
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#31)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#36)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) performs a multiplication on the result of a division:
	- penalty = _cancelPenaltyMultiple.mul(poolConstants.borrowRate).div(10 ** 30).mul(_collateralLiquidityShare).div(10 ** 30).mul(_penaltyTime).div(31536000) (contracts/Pool/Pool.sol#523-529)
",) (contracts/Pool/Pool.sol,501-531
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#38)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
divide-before-multiply,Medium,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#44)
	- ratio = type()(uint256).max / ratio (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#48)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
incorrect-equality,Medium,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) uses a dangerous strict equality:
	- _amountToWithdraw == 0 (contracts/Pool/Pool.sol#968)
",address) (contracts/Pool/Pool.sol,965-974
incorrect-equality,Medium,"CompoundYield._withdrawERC(address,address,uint256) (contracts/yield/CompoundYield.sol#225-233) uses a dangerous strict equality:
	- require(bool,string)(ICToken(cToken).redeem(amount) == 0,Error in unwrapping) (contracts/yield/CompoundYield.sol#231)
","address,address,uint256) (contracts/yield/CompoundYield.sol",225-233
incorrect-equality,Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) uses a dangerous strict equality:
	- require(bool,string)(msg.value == _amount,creditLine::repay - Ether sent not equal to repay amount) (contracts/CreditLine/CreditLine.sol#775)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
incorrect-equality,Medium,"Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305) uses a dangerous strict equality:
	- require(bool,string)(balanceOf(msg.sender) == 0,ACMC2) (contracts/Pool/Pool.sol#281)
","address,uint256,bool) (contracts/Pool/Pool.sol",275-305
incorrect-equality,Medium,"Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424) uses a dangerous strict equality:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime,L3) (contracts/Pool/Pool.sol#401)
","address,uint256,address) (contracts/Pool/Pool.sol",390-424
incorrect-equality,Medium,"CompoundYield._withdrawETH(address,uint256) (contracts/yield/CompoundYield.sol#217-223) uses a dangerous strict equality:
	- require(bool,string)(ICToken(cToken).redeem(amount) == 0,Error in unwrapping) (contracts/yield/CompoundYield.sol#220)
","address,uint256) (contracts/yield/CompoundYield.sol",217-223
incorrect-equality,Medium,"yVault.depositETH() (contracts/mocks/yVault/yVault.sol#290-304) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mocks/yVault/yVault.sol#298)
",) (contracts/mocks/yVault/yVault.sol,290-304
incorrect-equality,Medium,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) uses a dangerous strict equality:
	- _amount == _activeAmount (contracts/CreditLine/CreditLine.sol#756)
","uint256,address,address) (contracts/CreditLine/CreditLine.sol",729-761
incorrect-equality,Medium,"Pool.depositCollateral(uint256,bool) (contracts/Pool/Pool.sol#175-179) uses a dangerous strict equality:
	- require(bool,string)(balanceOf(msg.sender) == 0,DC2) (contracts/Pool/Pool.sol#177)
","uint256,bool) (contracts/Pool/Pool.sol",175-179
incorrect-equality,Medium,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) uses a dangerous strict equality:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION,CP1) (contracts/Pool/Pool.sol#503)
",) (contracts/Pool/Pool.sol,501-531
incorrect-equality,Medium,"yVault.deposit(uint256) (contracts/mocks/yVault/yVault.sol#275-288) uses a dangerous strict equality:
	- totalSupply() == 0 (contracts/mocks/yVault/yVault.sol#282)
",uint256) (contracts/mocks/yVault/yVault.sol,275-288
incorrect-equality,Medium,"Pool._canLenderBeLiquidated(address) (contracts/Pool/Pool.sol#801-809) uses a dangerous strict equality:
	- require(bool,string)((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline),CLBL1) (contracts/Pool/Pool.sol#802)
",address) (contracts/Pool/Pool.sol,801-809
locked-ether,Medium,"Contract locking ether found:
	Contract PoolFactory (contracts/Pool/PoolFactory.sol#18-746) has payable functions:
	 - PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address) (contracts/Pool/PoolFactory.sol#260-317)
	But does not have a function to withdraw the ether
",contracts/Pool/PoolFactory.sol,18-746
mapping-deletion,Medium,"Extension.closePoolExtension() (contracts/Pool/Extension.sol#174-176) deletes Extension.ExtensionVariables (contracts/Pool/Extension.sol#19-25) which contains a mapping:
	-delete extensions[msg.sender] (contracts/Pool/Extension.sol#175)
",) (contracts/Pool/Extension.sol,174-176
reentrancy-no-eth,Medium,"Reentrancy in Pool.liquidateForLender(address,bool,bool,bool) (contracts/Pool/Pool.sol#864-890):
	External calls:
	- _canLenderBeLiquidated(_lender) (contracts/Pool/Pool.sol#870)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	State variables written after the call(s):
	- (_lenderCollateralLPShare,_lenderBalance) = _updateLenderSharesDuringLiquidation(_lender) (contracts/Pool/Pool.sol#873)
		- poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares) (contracts/Pool/Pool.sol#826)
		- poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares) (contracts/Pool/Pool.sol#827)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
","address,bool,bool,bool) (contracts/Pool/Pool.sol",864-890
reentrancy-no-eth,Medium,"Reentrancy in CreditLine._depositCollateralFromSavingsAccount(uint256,uint256,address) (contracts/CreditLine/CreditLine.sol#474-509):
	External calls:
	- _tokenInStrategy = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#491)
	- _savingsAccount.transferFrom(_tokensToTransfer,_collateralAsset,_strategy,_sender,address(this)) (contracts/CreditLine/CreditLine.sol#498)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy)) (contracts/CreditLine/CreditLine.sol#500-502)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
","uint256,uint256,address) (contracts/CreditLine/CreditLine.sol",474-509
reentrancy-no-eth,Medium,"Reentrancy in CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727):
	External calls:
	- _borrowableAmount = calculateBorrowableAmount(_id) (contracts/CreditLine/CreditLine.sol#693)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	State variables written after the call(s):
	- updateinterestAccruedTillLastPrincipalUpdate(_id) (contracts/CreditLine/CreditLine.sol#698)
		- creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued (contracts/CreditLine/CreditLine.sol#471)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
	- creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount) (contracts/CreditLine/CreditLine.sol#699)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
	- creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp (contracts/CreditLine/CreditLine.sol#700)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
","uint256,uint256) (contracts/CreditLine/CreditLine.sol",691-727
reentrancy-no-eth,Medium,"Reentrancy in Pool.liquidatePool(bool,bool,bool) (contracts/Pool/Pool.sol#735-765):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare,_collateralAsset) (contracts/Pool/Pool.sol#752)
	State variables written after the call(s):
	- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#759)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
	- delete poolVariables.baseLiquidityShares (contracts/Pool/Pool.sol#760)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
","bool,bool,bool) (contracts/Pool/Pool.sol",735-765
reentrancy-no-eth,Medium,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- poolVariables.loanStatus = LoanStatus.TERMINATED (contracts/Pool/Pool.sol#583)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",) (contracts/Pool/Pool.sol,580-586
reentrancy-no-eth,Medium,"Reentrancy in Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
	State variables written after the call(s):
	- poolVariables.baseLiquidityShares = _penalty (contracts/Pool/Pool.sol#365)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
	- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#366)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
","address,uint256) (contracts/Pool/Pool.sol",355-381
reentrancy-no-eth,Medium,"Reentrancy in CreditLine.withdrawCollateral(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#912-922):
	External calls:
	- _withdrawableCollateral = withdrawableCollateral(_id) (contracts/CreditLine/CreditLine.sol#917)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _transferCollateral(_id,_collateralAsset,_amount,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#920)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
		- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
		- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	State variables written after the call(s):
	- _transferCollateral(_id,_collateralAsset,_amount,_toSavingsAccount) (contracts/CreditLine/CreditLine.sol#920)
		- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
","uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol",912-922
reentrancy-no-eth,Medium,"Reentrancy in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	External calls:
	- currentCollateralRatio = calculateCurrentCollateralRatio(_id) (contracts/CreditLine/CreditLine.sol#1000)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	- _totalCollateralTokens = calculateTotalCollateralTokens(_id) (contracts/CreditLine/CreditLine.sol#1008)
		- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
	State variables written after the call(s):
	- creditLineVariables[_id].status = CreditLineStatus.LIQUIDATED (contracts/CreditLine/CreditLine.sol#1011)
	CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69) can be used in cross function reentrancies:
	- CreditLine._createRequest(address,address,uint256,uint256,bool,uint256,address,address,bool) (contracts/CreditLine/CreditLine.sol#562-587)
	- CreditLine.accept(uint256) (contracts/CreditLine/CreditLine.sol#594-607)
	- CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464)
	- CreditLine.calculateCurrentDebt(uint256) (contracts/CreditLine/CreditLine.sol#420-427)
	- CreditLine.calculateInterestAccrued(uint256) (contracts/CreditLine/CreditLine.sol#407-413)
	- CreditLine.close(uint256) (contracts/CreditLine/CreditLine.sol#849-859)
	- CreditLine.creditLineVariables (contracts/CreditLine/CreditLine.sol#69)
	- CreditLine.ifCreditLineExists(uint256) (contracts/CreditLine/CreditLine.sol#116-119)
","uint256,bool) (contracts/CreditLine/CreditLine.sol",996-1029
reentrancy-no-eth,Medium,"Reentrancy in Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666):
	External calls:
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	State variables written after the call(s):
	- lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration()) (contracts/Pool/Pool.sol#663)
	Pool.lenders (contracts/Pool/Pool.sol#71) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.calculateRepaymentWithdrawable(address) (contracts/Pool/Pool.sol#944-952)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989)
	- Pool.lenders (contracts/Pool/Pool.sol#71)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",) (contracts/Pool/Pool.sol,656-666
reentrancy-no-eth,Medium,"Reentrancy in Pool.closeLoan() (contracts/Pool/Pool.sol#591-601):
	External calls:
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#596)
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- poolVariables.baseLiquidityShares = _penalty (contracts/Pool/Pool.sol#365)
		- delete poolVariables.extraLiquidityShares (contracts/Pool/Pool.sol#366)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
",) (contracts/Pool/Pool.sol,591-601
reentrancy-no-eth,Medium,"Reentrancy in Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens,_collateralAsset) (contracts/Pool/Pool.sol#558)
	State variables written after the call(s):
	- poolVariables.penaltyLiquidityAmount = _liquidationTokens (contracts/Pool/Pool.sol#565)
	Pool.poolVariables (contracts/Pool/Pool.sol#81) can be used in cross function reentrancies:
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.getCurrentCollateralRatio(address) (contracts/Pool/Pool.sol#720-727)
	- Pool.getCurrentCollateralRatio() (contracts/Pool/Pool.sol#709-713)
	- Pool.getLoanStatus() (contracts/Pool/Pool.sol#1005-1007)
	- Pool.poolVariables (contracts/Pool/Pool.sol#81)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
	- Pool.terminatePool() (contracts/Pool/Pool.sol#580-586)
","bool,bool) (contracts/Pool/Pool.sol",550-574
reentrancy-no-eth,Medium,"Reentrancy in SavingsAccount.withdrawAll(address,address) (contracts/SavingsAccount/SavingsAccount.sol#305-317):
	External calls:
	- _amount = IYield(_strategy).unlockTokens(_token,_sharesBalance) (contracts/SavingsAccount/SavingsAccount.sol#310)
	State variables written after the call(s):
	- delete balanceInShares[msg.sender][_token][_strategy] (contracts/SavingsAccount/SavingsAccount.sol#312)
	SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35) can be used in cross function reentrancies:
	- SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35)
	- SavingsAccount.getTotalTokens(address,address) (contracts/SavingsAccount/SavingsAccount.sol#464-479)
	- SavingsAccount.transfer(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#393-416)
	- SavingsAccount.transferFrom(uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#426-456)
","address,address) (contracts/SavingsAccount/SavingsAccount.sol",305-317
reentrancy-no-eth,Medium,"Reentrancy in Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348):
	External calls:
	- _currentCollateralRatio = getCurrentCollateralRatio() (contracts/Pool/Pool.sol#323)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	- IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(_noOfRepaymentIntervals,_repaymentInterval,poolConstants.borrowRate,poolConstants.loanStartTime,poolConstants.borrowAsset) (contracts/Pool/Pool.sol#328-334)
	- IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval) (contracts/Pool/Pool.sol#335)
	State variables written after the call(s):
	- delete poolConstants.loanWithdrawalDeadline (contracts/Pool/Pool.sol#340)
	Pool.poolConstants (contracts/Pool/Pool.sol#76) can be used in cross function reentrancies:
	- Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484)
	- Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496)
	- Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542)
	- Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223)
	- Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199)
	- Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381)
	- Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974)
	- Pool.borrower() (contracts/Pool/Pool.sol#1034-1036)
	- Pool.calculateCollateralRatio(uint256,uint256) (contracts/Pool/Pool.sol#694-702)
	- Pool.calculateCurrentPeriod() (contracts/Pool/Pool.sol#934-937)
	- Pool.cancelPool() (contracts/Pool/Pool.sol#501-531)
	- Pool.correspondingBorrowTokens(uint256,address,uint256) (contracts/Pool/Pool.sol#899-909)
	- Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168)
	- Pool.interestPerPeriod(uint256) (contracts/Pool/Pool.sol#926-928)
	- Pool.interestPerSecond(uint256) (contracts/Pool/Pool.sol#916-919)
	- Pool.interestToPay() (contracts/Pool/Pool.sol#672-685)
	- Pool.poolConstants (contracts/Pool/Pool.sol#76)
	- Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666)
",) (contracts/Pool/Pool.sol,310-348
reentrancy-no-eth,Medium,"Reentrancy in SavingsAccount.withdrawAll(address) (contracts/SavingsAccount/SavingsAccount.sol#286-303):
	External calls:
	- _amount = IYield(_strategyList[i]).unlockTokens(_token,balanceInShares[msg.sender][_token][_strategyList[i]]) (contracts/SavingsAccount/SavingsAccount.sol#292)
	State variables written after the call(s):
	- delete balanceInShares[msg.sender][_token][_strategyList[i]] (contracts/SavingsAccount/SavingsAccount.sol#294)
	SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35) can be used in cross function reentrancies:
	- SavingsAccount.balanceInShares (contracts/SavingsAccount/SavingsAccount.sol#35)
	- SavingsAccount.getTotalTokens(address,address) (contracts/SavingsAccount/SavingsAccount.sol#464-479)
	- SavingsAccount.transfer(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#393-416)
	- SavingsAccount.transferFrom(uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#426-456)
",address) (contracts/SavingsAccount/SavingsAccount.sol,286-303
reentrancy-no-eth,Medium,"Reentrancy in AdminVerifier.registerUser(address,string,bool) (contracts/Verification/adminVerifier.sol#41-50):
	External calls:
	- verification.registerMasterAddress(_user,_isMasterLinked) (contracts/Verification/adminVerifier.sol#47)
	State variables written after the call(s):
	- userData[_user] = _metadata (contracts/Verification/adminVerifier.sol#48)
	AdminVerifier.userData (contracts/Verification/adminVerifier.sol#17) can be used in cross function reentrancies:
	- AdminVerifier.registerUser(address,string,bool) (contracts/Verification/adminVerifier.sol#41-50)
	- AdminVerifier.unregisterUser(address) (contracts/Verification/adminVerifier.sol#57-62)
	- AdminVerifier.userData (contracts/Verification/adminVerifier.sol#17)
","address,string,bool) (contracts/Verification/adminVerifier.sol",41-50
reentrancy-no-eth,Medium,"Reentrancy in Controller.setStrategy(address,address) (contracts/mocks/yVault/Controller.sol#125-134):
	External calls:
	- IStrategy(_current).withdrawAll() (contracts/mocks/yVault/Controller.sol#131)
	State variables written after the call(s):
	- strategies[_token] = _strategy (contracts/mocks/yVault/Controller.sol#133)
	Controller.strategies (contracts/mocks/yVault/Controller.sol#60) can be used in cross function reentrancies:
	- Controller.balanceOf(address) (contracts/mocks/yVault/Controller.sol#150-152)
	- Controller.earn(address,uint256) (contracts/mocks/yVault/Controller.sol#136-148)
	- Controller.setStrategy(address,address) (contracts/mocks/yVault/Controller.sol#125-134)
	- Controller.strategies (contracts/mocks/yVault/Controller.sol#60)
	- Controller.withdraw(address,uint256) (contracts/mocks/yVault/Controller.sol#210-213)
	- Controller.withdrawAll(address) (contracts/mocks/yVault/Controller.sol#154-157)
","address,address) (contracts/mocks/yVault/Controller.sol",125-134
reentrancy-no-eth,Medium,"Reentrancy in CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986):
	External calls:
	- _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares,_asset) (contracts/CreditLine/CreditLine.sol#965)
	- ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
	- ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(liquidityShares) (contracts/CreditLine/CreditLine.sol#972-974)
	CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64) can be used in cross function reentrancies:
	- CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902)
	- CreditLine.collateralShareInStrategy (contracts/CreditLine/CreditLine.sol#64)
","uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol",951-986
uninitialized-local,Medium,"SavingsAccount.switchStrategy(uint256,address,address,address)._ethValue (contracts/SavingsAccount/SavingsAccount.sol#171) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._ethValue (contracts/SavingsAccount/SavingsAccountUtil.sol#53) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CreditLine._withdrawBorrowAmount(address,uint256,address)._activeAmount (contracts/CreditLine/CreditLine.sol#661) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Pool._withdrawAllCollateral(address,uint256)._sharesReceived (contracts/Pool/Pool.sol#368) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CreditLine._depositCollateralFromSavingsAccount(uint256,uint256,address)._activeAmount (contracts/CreditLine/CreditLine.sol#482) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Pool.lend(address,uint256,address)._fromSavingsAccount (contracts/Pool/Pool.sol#409) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CreditLine._repayFromSavingsAccount(uint256,address,address)._activeAmount (contracts/CreditLine/CreditLine.sol#736) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"SavingsAccount._depositToYield(uint256,address,address)._ethValue (contracts/SavingsAccount/SavingsAccount.sol#136) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CreditLine._transferCollateral(uint256,address,uint256,bool)._activeAmount (contracts/CreditLine/CreditLine.sol#958) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by IERC20(_borrowAsset).approve(_defaultStrategy,_amount) (contracts/CreditLine/CreditLine.sol#779)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
unused-return,Medium,"CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986) ignores return value by ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer,_asset,_strategyList[index],msg.sender,false) (contracts/CreditLine/CreditLine.sol#978)
","uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol",951-986
unused-return,Medium,"SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol#66-80) ignores return value by _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
","ISavingsAccount,address,address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol",66-80
unused-return,Medium,"Controller.getExpectedReturn(address,address,uint256) (contracts/mocks/yVault/Controller.sol#169-177) ignores return value by (expected,None) = OneSplitAudit(onesplit).getExpectedReturn(_token,_want,_balance,parts,0) (contracts/mocks/yVault/Controller.sol#176)
","address,address,uint256) (contracts/mocks/yVault/Controller.sol",169-177
unused-return,Medium,"CreditLine._transferCollateral(uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol#951-986) ignores return value by ISavingsAccount(savingsAccount).transfer(_tokensToTransfer,_asset,_strategyList[index],msg.sender) (contracts/CreditLine/CreditLine.sol#976)
","uint256,address,uint256,bool) (contracts/CreditLine/CreditLine.sol",951-986
unused-return,Medium,"PriceOracle.getChainlinkLatestPrice(address,address) (contracts/PriceOracle.sol#48-94) ignores return value by (roundID1,price1,None,timeStamp1,answeredInRound1) = AggregatorV3Interface(_feedData1.oracle).latestRoundData() (contracts/PriceOracle.sol#60-66)
","address,address) (contracts/PriceOracle.sol",48-94
unused-return,Medium,"YearnYield._depositERC20(address,address,uint256) (contracts/yield/YearnYield.sol#202-215) ignores return value by IERC20(asset).approve(vault,0) (contracts/yield/YearnYield.sol#210)
","address,address,uint256) (contracts/yield/YearnYield.sol",202-215
unused-return,Medium,"AaveYield._withdrawETH(uint256) (contracts/yield/AaveYield.sol#306-315) ignores return value by IERC20(IWETHGateway(wethGateway).getAWETHAddress()).approve(wethGateway,amount) (contracts/yield/AaveYield.sol#307)
",uint256) (contracts/yield/AaveYield.sol,306-315
unused-return,Medium,"YearnYield._depositERC20(address,address,uint256) (contracts/yield/YearnYield.sol#202-215) ignores return value by IERC20(asset).approve(vault,amount) (contracts/yield/YearnYield.sol#211)
","address,address,uint256) (contracts/yield/YearnYield.sol",202-215
unused-return,Medium,"SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol#66-80) ignores return value by _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
","ISavingsAccount,address,address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol",66-80
unused-return,Medium,"AaveYield._withdrawERC(address,uint256) (contracts/yield/AaveYield.sol#317-330) ignores return value by AaveLendingPool(lendingPool).withdraw(asset,amount,address(this)) (contracts/yield/AaveYield.sol#327)
","address,uint256) (contracts/yield/AaveYield.sol",317-330
unused-return,Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by _savingsAccount.deposit{value: _amount}(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#776)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
unused-return,Medium,"PriceOracle.getChainlinkLatestPrice(address,address) (contracts/PriceOracle.sol#48-94) ignores return value by (roundID2,price2,None,timeStamp2,answeredInRound2) = AggregatorV3Interface(_feedData2.oracle).latestRoundData() (contracts/PriceOracle.sol#75-81)
","address,address) (contracts/PriceOracle.sol",48-94
unused-return,Medium,"CompoundYield._depositERC20(address,address,uint256) (contracts/yield/CompoundYield.sol#204-215) ignores return value by IERC20(asset).approve(cToken,amount) (contracts/yield/CompoundYield.sol#212)
","address,address,uint256) (contracts/yield/CompoundYield.sol",204-215
unused-return,Medium,"AaveYield._depositERC20(address,uint256) (contracts/yield/AaveYield.sol#290-304) ignores return value by IERC20(asset).approve(lendingPool,0) (contracts/yield/AaveYield.sol#297)
","address,uint256) (contracts/yield/AaveYield.sol",290-304
unused-return,Medium,"CreditLine._withdrawBorrowAmount(address,uint256,address) (contracts/CreditLine/CreditLine.sol#654-682) ignores return value by _savingsAccount.withdrawFrom(_tokensToTransfer,_asset,_strategyList[_index],_lender,address(this),false) (contracts/CreditLine/CreditLine.sol#675)
","address,uint256,address) (contracts/CreditLine/CreditLine.sol",654-682
unused-return,Medium,"Controller.yearn(address,address,uint256) (contracts/mocks/yVault/Controller.sol#180-208) ignores return value by OneSplitAudit(onesplit).swap(_token,_want,_amount,_expected,_distribution,0) (contracts/mocks/yVault/Controller.sol#199)
","address,address,uint256) (contracts/mocks/yVault/Controller.sol",180-208
unused-return,Medium,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) ignores return value by SavingsAccountUtil.transferTokens(_borrowAsset,_feeAdjustedWithdrawalAmount,address(this),msg.sender) (contracts/Pool/Pool.sol#345)
",) (contracts/Pool/Pool.sol,310-348
unused-return,Medium,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) ignores return value by _savingsAccount.deposit(_amount,_borrowAsset,_defaultStrategy,_lender) (contracts/CreditLine/CreditLine.sol#780)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
unused-return,Medium,"Pool.withdrawLiquidity() (contracts/Pool/Pool.sol#607-648) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_toTransfer,address(this),msg.sender) (contracts/Pool/Pool.sol#645)
",) (contracts/Pool/Pool.sol,607-648
unused-return,Medium,"OracleLibrary.consult(address,uint32) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#17-31) ignores return value by (tickCumulatives,None) = IUniswapV3Pool(pool).observe(secondAgos) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#24)
","address,uint32) (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol",17-31
unused-return,Medium,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) ignores return value by _savingsAccount.transferFrom(_tokensToTransfer,_asset,_strategyList[_index],msg.sender,_lender) (contracts/CreditLine/CreditLine.sol#754)
","uint256,address,address) (contracts/CreditLine/CreditLine.sol",729-761
unused-return,Medium,"AaveYield._withdrawERC(address,uint256) (contracts/yield/AaveYield.sol#317-330) ignores return value by IERC20(aToken).approve(lendingPool,amount) (contracts/yield/AaveYield.sol#324)
","address,uint256) (contracts/yield/AaveYield.sol",317-330
unused-return,Medium,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_amountToWithdraw,address(this),_lender) (contracts/Pool/Pool.sol#973)
",address) (contracts/Pool/Pool.sol,965-974
unused-return,Medium,"AaveYield._depositERC20(address,uint256) (contracts/yield/AaveYield.sol#290-304) ignores return value by IERC20(asset).approve(lendingPool,amount) (contracts/yield/AaveYield.sol#298)
","address,uint256) (contracts/yield/AaveYield.sol",290-304
unused-return,Medium,"TransparentUpgradeableProxy.upgradeToAndCall(address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#116-119) ignores return value by Address.functionDelegateCall(newImplementation,data) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#118)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol",116-119
unused-return,Medium,"CreditLine._depositCollateralFromSavingsAccount(uint256,uint256,address) (contracts/CreditLine/CreditLine.sol#474-509) ignores return value by _savingsAccount.transferFrom(_tokensToTransfer,_collateralAsset,_strategy,_sender,address(this)) (contracts/CreditLine/CreditLine.sol#498)
","uint256,uint256,address) (contracts/CreditLine/CreditLine.sol",474-509
unused-return,Medium,"Controller.withdrawAll(address) (contracts/mocks/yVault/Controller.sol#154-157) ignores return value by IStrategy(strategies[_token]).withdrawAll() (contracts/mocks/yVault/Controller.sol#156)
",address) (contracts/mocks/yVault/Controller.sol,154-157
unused-return,Medium,"AaveYield.getTokensForShares(uint256,address) (contracts/yield/AaveYield.sol#256-265) ignores return value by (None,None,None,None,None,None,None,liquidityIndex,None,None) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset) (contracts/yield/AaveYield.sol#260)
","uint256,address) (contracts/yield/AaveYield.sol",256-265
unused-return,Medium,"Controller.setStrategy(address,address) (contracts/mocks/yVault/Controller.sol#125-134) ignores return value by IStrategy(_current).withdrawAll() (contracts/mocks/yVault/Controller.sol#131)
","address,address) (contracts/mocks/yVault/Controller.sol",125-134
unused-return,Medium,"UpgradeableProxy.constructor(address,bytes) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#24-30) ignores return value by Address.functionDelegateCall(_logic,_data) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#28)
","address,bytes) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol",24-30
unused-return,Medium,"CreditLine._depositCollateral(uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol#631-652) ignores return value by IERC20(_collateralAsset).approve(_strategy,_amount) (contracts/CreditLine/CreditLine.sol#647)
","uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol",631-652
unused-return,Medium,"Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574) ignores return value by SavingsAccountUtil.transferTokens(poolConstants.borrowAsset,_liquidationTokens,msg.sender,address(this)) (contracts/Pool/Pool.sol#566)
","bool,bool) (contracts/Pool/Pool.sol",550-574
unused-return,Medium,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) ignores return value by SavingsAccountUtil.transferTokens(_borrowAsset,_protocolFee,address(this),_collector) (contracts/Pool/Pool.sol#344)
",) (contracts/Pool/Pool.sol,310-348
unused-return,Medium,"CompoundYield._depositERC20(address,address,uint256) (contracts/yield/CompoundYield.sol#204-215) ignores return value by IERC20(asset).approve(cToken,0) (contracts/yield/CompoundYield.sol#211)
","address,address,uint256) (contracts/yield/CompoundYield.sol",204-215
unused-return,Medium,"AaveYield.liquidityToken(address) (contracts/yield/AaveYield.sol#103-109) ignores return value by (aToken,None,None) = IProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(asset) (contracts/yield/AaveYield.sol#107)
",address) (contracts/yield/AaveYield.sol,103-109
shadowing-local,Low,"Token.constructor(string,string,uint256).name (contracts/mocks/Token.sol#9) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#64-66) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,64-66
shadowing-local,Low,"SavingsAccount.initialize(address,address,address)._owner (contracts/SavingsAccount/SavingsAccount.sol#59) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"CreditLine.calculateBorrowableAmount(uint256)._status (contracts/CreditLine/CreditLine.sol#437) shadows:
	- ReentrancyGuard._status (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#36) (state variable)
",N/A,N/A
shadowing-local,Low,"Token.constructor(string,string,uint256).symbol (contracts/mocks/Token.sol#10) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#72-74) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,72-74
shadowing-local,Low,"ERC20Detailed.constructor(string,string,uint8).symbol (contracts/mocks/yVault/yVault.sol#122) shadows:
	- ERC20Detailed.symbol() (contracts/mocks/yVault/yVault.sol#134-136) (function)
",) (contracts/mocks/yVault/yVault.sol,134-136
shadowing-local,Low,"Pool.getEquivalentTokens(address,address,uint256)._decimals (contracts/Pool/Pool.sol#1026) shadows:
	- ERC20Upgradeable._decimals (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#45) (state variable)
",N/A,N/A
shadowing-local,Low,"ERC20Detailed.constructor(string,string,uint8).decimals (contracts/mocks/yVault/yVault.sol#123) shadows:
	- ERC20Detailed.decimals() (contracts/mocks/yVault/yVault.sol#138-140) (function)
",) (contracts/mocks/yVault/yVault.sol,138-140
shadowing-local,Low,"CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._owner (contracts/CreditLine/CreditLine.sol#267) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"Pool.correspondingBorrowTokens(uint256,address,uint256)._decimals (contracts/Pool/Pool.sol#904) shadows:
	- ERC20Upgradeable._decimals (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#45) (state variable)
",N/A,N/A
shadowing-local,Low,"SublimeProxy.constructor(address,address,bytes).admin (contracts/Proxy.sol#9) shadows:
	- TransparentUpgradeableProxy.admin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#70-72) (function)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,70-72
shadowing-local,Low,"Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._decimals (contracts/Pool/Pool.sol#165) shadows:
	- ERC20Upgradeable._decimals (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#45) (state variable)
",N/A,N/A
shadowing-local,Low,"StrategyRegistry.initialize(address,uint256)._owner (contracts/yield/StrategyRegistry.sol#33) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"ERC20Detailed.constructor(string,string,uint8).name (contracts/mocks/yVault/yVault.sol#121) shadows:
	- ERC20Detailed.name() (contracts/mocks/yVault/yVault.sol#130-132) (function)
",) (contracts/mocks/yVault/yVault.sol,130-132
shadowing-local,Low,"AaveYield.initialize(address,address,address,address,address)._owner (contracts/yield/AaveYield.sol#85) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"CompoundYield.initialize(address,address)._owner (contracts/yield/CompoundYield.sol#53) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"NoYield.initialize(address,address)._owner (contracts/yield/NoYield.sol#41) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
shadowing-local,Low,"Pool._beforeTokenTransfer(address,address,uint256)._totalSupply (contracts/Pool/Pool.sol#465) shadows:
	- ERC20Upgradeable._totalSupply (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#41) (state variable)
",N/A,N/A
shadowing-local,Low,"YearnYield.initialize(address,address)._owner (contracts/yield/YearnYield.sol#52) shadows:
	- OwnableUpgradeable._owner (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#20) (state variable)
",N/A,N/A
events-maths,Low,"yVault.setMin(uint256) (contracts/mocks/yVault/yVault.sol#244-247) should emit an event for: 
	- min = _min (contracts/mocks/yVault/yVault.sol#246) 
",uint256) (contracts/mocks/yVault/yVault.sol,244-247
missing-zero-check,Low,"yVault.setController(address)._controller (contracts/mocks/yVault/yVault.sol#254) lacks a zero-check on :
		- controller = _controller (contracts/mocks/yVault/yVault.sol#256)
",N/A,N/A
missing-zero-check,Low,"yVault.setGovernance(address)._governance (contracts/mocks/yVault/yVault.sol#249) lacks a zero-check on :
		- governance = _governance (contracts/mocks/yVault/yVault.sol#251)
",N/A,N/A
missing-zero-check,Low,"Strategy.constructor(address,address)._want (contracts/mocks/yVault/Strategy.sol#35) lacks a zero-check on :
		- want = _want (contracts/mocks/yVault/Strategy.sol#38)
",N/A,N/A
missing-zero-check,Low,"Strategy.setController(address)._controller (contracts/mocks/yVault/Strategy.sol#86) lacks a zero-check on :
		- controller = _controller (contracts/mocks/yVault/Strategy.sol#88)
",N/A,N/A
missing-zero-check,Low,"Controller.setGovernance(address)._governance (contracts/mocks/yVault/Controller.sol#95) lacks a zero-check on :
		- governance = _governance (contracts/mocks/yVault/Controller.sol#97)
",N/A,N/A
missing-zero-check,Low,"Strategy.constructor(address,address)._controller (contracts/mocks/yVault/Strategy.sol#35) lacks a zero-check on :
		- controller = _controller (contracts/mocks/yVault/Strategy.sol#37)
",N/A,N/A
missing-zero-check,Low,"Controller.setRewards(address)._rewards (contracts/mocks/yVault/Controller.sol#75) lacks a zero-check on :
		- rewards = _rewards (contracts/mocks/yVault/Controller.sol#77)
",N/A,N/A
missing-zero-check,Low,"yVault.constructor(address,address)._controller (contracts/mocks/yVault/yVault.sol#228) lacks a zero-check on :
		- controller = _controller (contracts/mocks/yVault/yVault.sol#237)
",N/A,N/A
missing-zero-check,Low,"Controller.constructor(address)._rewards (contracts/mocks/yVault/Controller.sol#68) lacks a zero-check on :
		- rewards = _rewards (contracts/mocks/yVault/Controller.sol#72)
",N/A,N/A
missing-zero-check,Low,"Controller.setStrategist(address)._strategist (contracts/mocks/yVault/Controller.sol#80) lacks a zero-check on :
		- strategist = _strategist (contracts/mocks/yVault/Controller.sol#82)
",N/A,N/A
missing-zero-check,Low,"Controller.setOneSplit(address)._onesplit (contracts/mocks/yVault/Controller.sol#90) lacks a zero-check on :
		- onesplit = _onesplit (contracts/mocks/yVault/Controller.sol#92)
",N/A,N/A
missing-zero-check,Low,"Strategy.setGovernance(address)._governance (contracts/mocks/yVault/Strategy.sol#81) lacks a zero-check on :
		- governance = _governance (contracts/mocks/yVault/Strategy.sol#83)
",N/A,N/A
missing-zero-check,Low,"GovernanceTester.constructor(address,uint256)._gov (contracts/mocks/GovernanceTester.sol#15) lacks a zero-check on :
		- gov = _gov (contracts/mocks/GovernanceTester.sol#16)
",N/A,N/A
incorrect-modifier,Low,"Modifier TransparentUpgradeableProxy.ifAdmin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#53-59) does not always execute _; or revert
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,53-59
calls-loop,Low,"SavingsAccount.withdrawAll(address) (contracts/SavingsAccount/SavingsAccount.sol#286-303) has external calls inside a loop: _amount = IYield(_strategyList[i]).unlockTokens(_token,balanceInShares[msg.sender][_token][_strategyList[i]]) (contracts/SavingsAccount/SavingsAccount.sol#292)
",address) (contracts/SavingsAccount/SavingsAccount.sol,286-303
calls-loop,Low,"SavingsAccount.getTotalTokens(address,address) (contracts/SavingsAccount/SavingsAccount.sol#464-479) has external calls inside a loop: _tokenInStrategy = IYield(_strategyList[i]).getTokensForShares(_liquidityShares,_token) (contracts/SavingsAccount/SavingsAccount.sol#473)
","address,address) (contracts/SavingsAccount/SavingsAccount.sol",464-479
calls-loop,Low,"CreditLine.calculateTotalCollateralTokens(uint256) (contracts/CreditLine/CreditLine.sol#888-902) has external calls inside a loop: _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/CreditLine/CreditLine.sol#898)
",uint256) (contracts/CreditLine/CreditLine.sol,888-902
reentrancy-benign,Low,"Reentrancy in Pool._depositCollateral(address,uint256,bool) (contracts/Pool/Pool.sol#207-223):
	External calls:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,_depositor,address(this)) (contracts/Pool/Pool.sol#212-220)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _sharesReceived = _deposit(_transferFromSavingsAccount,true,poolConstants.collateralAsset,_amount,poolConstants.poolSavingsStrategy,_depositor,address(this)) (contracts/Pool/Pool.sol#212-220)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived) (contracts/Pool/Pool.sol#221)
","address,uint256,bool) (contracts/Pool/Pool.sol",207-223
reentrancy-benign,Low,"Reentrancy in SavingsAccount.deposit(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#108-119):
	External calls:
	- _sharesReceived = _deposit(_amount,_token,_strategy) (contracts/SavingsAccount/SavingsAccount.sol#115)
		- _sharesReceived = IYield(_strategy).lockTokens{value: _ethValue}(msg.sender,_token,_amount) (contracts/SavingsAccount/SavingsAccount.sol#142)
	State variables written after the call(s):
	- balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived) (contracts/SavingsAccount/SavingsAccount.sol#116)
","uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",108-119
reentrancy-benign,Low,"Reentrancy in Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol#133-168):
	External calls:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#69)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_poolSavingsStrategy,true,_toSavingsAccount) (contracts/Pool/Pool.sol#246-255)
		- _amountReceived = _savingsAccount.withdraw(_amount,_token,_strategy,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#92)
		- _amountReceived = _savingsAccount.withdrawFrom(_amount,_token,_strategy,_from,address(_to),_withdrawShares) (contracts/SavingsAccount/SavingsAccountUtil.sol#94)
		- _sharesReceived = SavingsAccountUtil.directDeposit(ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),_depositFrom,_depositTo,_amount,_asset,_toSavingsAccount,_poolSavingsStrategy) (contracts/Pool/Pool.sol#257-265)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- IERC20(_token).safeApprove(_approveTo,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#61)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
		- IERC20(_token).safeTransfer(_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#121)
		- IERC20(_token).safeTransferFrom(_from,_to,_amount) (contracts/SavingsAccount/SavingsAccountUtil.sol#124)
	External calls sending eth:
	- _initialDeposit(_borrower,_collateralAmount,_transferFromSavingsAccount) (contracts/Pool/Pool.sol#155)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
		- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
		- _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#63)
		- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
	State variables written after the call(s):
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _decimals = 18 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#64)
	- _setupDecimals(_decimals) (contracts/Pool/Pool.sol#166)
		- _decimals = decimals_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#294)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _name = name_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#62)
	- __ERC20_init(Pool Tokens,PT) (contracts/Pool/Pool.sol#164)
		- _symbol = symbol_ (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#63)
","uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256) (contracts/Pool/Pool.sol",133-168
reentrancy-benign,Low,"Reentrancy in Extension.requestExtension(address) (contracts/Pool/Extension.sol#79-94):
	External calls:
	- onlyBorrower(_pool) (contracts/Pool/Extension.sol#79)
		- require(bool,string)(IPool(_pool).borrower() == msg.sender,Not Borrower) (contracts/Pool/Extension.sol#50)
	State variables written after the call(s):
	- extensions[_pool].totalExtensionSupport = 0 (contracts/Pool/Extension.sol#88)
	- extensions[_pool].extensionVoteEndTime = _extensionVoteEndTime (contracts/Pool/Extension.sol#92)
",address) (contracts/Pool/Extension.sol,79-94
reentrancy-benign,Low,"Reentrancy in SavingsAccount.switchStrategy(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#152-183):
	External calls:
	- _amount = IYield(_currentStrategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#162)
	State variables written after the call(s):
	- balanceInShares[msg.sender][_token][_currentStrategy] = balanceInShares[msg.sender][_token][_currentStrategy].sub(_amount,SavingsAccount::switchStrategy Insufficient balance) (contracts/SavingsAccount/SavingsAccount.sol#164-167)
","uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",152-183
reentrancy-benign,Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#582)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",) (contracts/Pool/Pool.sol,580-586
reentrancy-benign,Low,"Reentrancy in SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool) (contracts/SavingsAccount/SavingsAccount.sol#225-249):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#240)
	State variables written after the call(s):
	- balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(_amount,SavingsAccount::withdrawFrom insufficient balance) (contracts/SavingsAccount/SavingsAccount.sol#242-245)
","uint256,address,address,address,address,bool) (contracts/SavingsAccount/SavingsAccount.sol",225-249
reentrancy-benign,Low,"Reentrancy in SavingsAccount.transferFrom(uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#426-456):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#441)
	State variables written after the call(s):
	- balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(_amount,SavingsAccount::transferFrom insufficient allowance) (contracts/SavingsAccount/SavingsAccount.sol#445-448)
	- balanceInShares[_to][_token][_strategy] = (balanceInShares[_to][_token][_strategy]).add(_amount) (contracts/SavingsAccount/SavingsAccount.sol#451)
","uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",426-456
reentrancy-benign,Low,"Reentrancy in yVault.depositETH() (contracts/mocks/yVault/yVault.sol#290-304):
	External calls:
	- WETH(address(token)).deposit{value: _amount}() (contracts/mocks/yVault/yVault.sol#294)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#303)
		- _balances[account] = _balances[account].add(amount) (contracts/mocks/yVault/yVault.sol#85)
	- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#303)
		- _totalSupply = _totalSupply.add(amount) (contracts/mocks/yVault/yVault.sol#84)
",) (contracts/mocks/yVault/yVault.sol,290-304
reentrancy-benign,Low,"Reentrancy in Pool.closeLoan() (contracts/Pool/Pool.sol#591-601):
	External calls:
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#596)
	- _withdrawAllCollateral(poolConstants.borrower,0) (contracts/Pool/Pool.sol#597)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#598)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",) (contracts/Pool/Pool.sol,591-601
reentrancy-benign,Low,"Reentrancy in CreditLine._depositCollateral(uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol#631-652):
	External calls:
	- IERC20(_collateralAsset).safeTransferFrom(msg.sender,address(this),_amount) (contracts/CreditLine/CreditLine.sol#646)
	- IERC20(_collateralAsset).approve(_strategy,_amount) (contracts/CreditLine/CreditLine.sol#647)
	- _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount,_collateralAsset,_strategy,address(this)) (contracts/CreditLine/CreditLine.sol#649)
	External calls sending eth:
	- _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount,_collateralAsset,_strategy,address(this)) (contracts/CreditLine/CreditLine.sol#649)
	State variables written after the call(s):
	- collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_sharesReceived) (contracts/CreditLine/CreditLine.sol#650)
","uint256,uint256,address,bool) (contracts/CreditLine/CreditLine.sol",631-652
reentrancy-benign,Low,"Reentrancy in yVault.deposit(uint256) (contracts/mocks/yVault/yVault.sol#275-288):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mocks/yVault/yVault.sol#278)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#287)
		- _balances[account] = _balances[account].add(amount) (contracts/mocks/yVault/yVault.sol#85)
	- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#287)
		- _totalSupply = _totalSupply.add(amount) (contracts/mocks/yVault/yVault.sol#84)
",uint256) (contracts/mocks/yVault/yVault.sol,275-288
reentrancy-benign,Low,"Reentrancy in SavingsAccount.transfer(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#393-416):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#402)
	State variables written after the call(s):
	- balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(_amount,SavingsAccount::transfer insufficient funds) (contracts/SavingsAccount/SavingsAccount.sol#405-408)
	- balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_amount) (contracts/SavingsAccount/SavingsAccount.sol#411)
","uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",393-416
reentrancy-benign,Low,"Reentrancy in SavingsAccount.withdraw(uint256,address,address,address,bool) (contracts/SavingsAccount/SavingsAccount.sol#193-213):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#202)
	State variables written after the call(s):
	- balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(_amount,SavingsAccount::withdraw Insufficient amount) (contracts/SavingsAccount/SavingsAccount.sol#204-207)
","uint256,address,address,address,bool) (contracts/SavingsAccount/SavingsAccount.sol",193-213
reentrancy-benign,Low,"Reentrancy in Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542):
	External calls:
	- _withdrawAllCollateral(poolConstants.borrower,_penalty) (contracts/Pool/Pool.sol#539)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	State variables written after the call(s):
	- _pause() (contracts/Pool/Pool.sol#540)
		- _paused = true (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#81)
",uint256) (contracts/Pool/Pool.sol,537-542
reentrancy-events,Low,"Reentrancy in yVault.deposit(uint256) (contracts/mocks/yVault/yVault.sol#275-288):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mocks/yVault/yVault.sol#278)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (contracts/mocks/yVault/yVault.sol#86)
		- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#287)
",uint256) (contracts/mocks/yVault/yVault.sol,275-288
reentrancy-events,Low,"Reentrancy in SavingsAccount.transferFrom(uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#426-456):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#441)
	Event emitted after the call(s):
	- Transfer(_token,_strategy,_from,_to,_amount) (contracts/SavingsAccount/SavingsAccount.sol#453)
","uint256,address,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",426-456
reentrancy-events,Low,"Reentrancy in AdminVerifier.unregisterUser(address) (contracts/Verification/adminVerifier.sol#57-62):
	External calls:
	- verification.unregisterMasterAddress(_user,address(this)) (contracts/Verification/adminVerifier.sol#60)
	Event emitted after the call(s):
	- UserUnregistered(_user) (contracts/Verification/adminVerifier.sol#61)
",address) (contracts/Verification/adminVerifier.sol,57-62
reentrancy-events,Low,"Reentrancy in Extension.grantExtension(address) (contracts/Pool/Extension.sol#159-169):
	External calls:
	- _repayment.instalmentDeadlineExtended(_pool) (contracts/Pool/Extension.sol#166)
	Event emitted after the call(s):
	- ExtensionPassed(_pool) (contracts/Pool/Extension.sol#168)
",address) (contracts/Pool/Extension.sol,159-169
reentrancy-events,Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	- IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension() (contracts/Pool/Pool.sol#584)
	Event emitted after the call(s):
	- PoolTerminated() (contracts/Pool/Pool.sol#585)
",) (contracts/Pool/Pool.sol,580-586
reentrancy-events,Low,"Reentrancy in AdminVerifier.registerUser(address,string,bool) (contracts/Verification/adminVerifier.sol#41-50):
	External calls:
	- verification.registerMasterAddress(_user,_isMasterLinked) (contracts/Verification/adminVerifier.sol#47)
	Event emitted after the call(s):
	- UserRegistered(_user,_isMasterLinked,_metadata) (contracts/Verification/adminVerifier.sol#49)
","address,string,bool) (contracts/Verification/adminVerifier.sol",41-50
reentrancy-events,Low,"Reentrancy in yVault.depositETH() (contracts/mocks/yVault/yVault.sol#290-304):
	External calls:
	- WETH(address(token)).deposit{value: _amount}() (contracts/mocks/yVault/yVault.sol#294)
	Event emitted after the call(s):
	- Transfer(address(0),account,amount) (contracts/mocks/yVault/yVault.sol#86)
		- _mint(msg.sender,shares) (contracts/mocks/yVault/yVault.sol#303)
",) (contracts/mocks/yVault/yVault.sol,290-304
reentrancy-events,Low,"Reentrancy in Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666):
	External calls:
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
		- _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares,_collateralAsset) (contracts/Pool/Pool.sol#698)
	Event emitted after the call(s):
	- MarginCalled(msg.sender) (contracts/Pool/Pool.sol#665)
",) (contracts/Pool/Pool.sol,656-666
reentrancy-events,Low,"Reentrancy in Pool.terminatePool() (contracts/Pool/Pool.sol#580-586):
	External calls:
	- _withdrawAllCollateral(msg.sender,0) (contracts/Pool/Pool.sol#581)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- Paused(_msgSender()) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#82)
		- _pause() (contracts/Pool/Pool.sol#582)
",) (contracts/Pool/Pool.sol,580-586
reentrancy-events,Low,"Reentrancy in Pool._cancelPool(uint256) (contracts/Pool/Pool.sol#537-542):
	External calls:
	- _withdrawAllCollateral(poolConstants.borrower,_penalty) (contracts/Pool/Pool.sol#539)
		- _savingsAccount.transfer(_amount,_token,_strategy,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#75)
		- _savingsAccount.transferFrom(_amount,_token,_strategy,_from,_to) (contracts/SavingsAccount/SavingsAccountUtil.sol#77)
		- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
		- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- Paused(_msgSender()) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#82)
		- _pause() (contracts/Pool/Pool.sol#540)
	- PoolCancelled() (contracts/Pool/Pool.sol#541)
",uint256) (contracts/Pool/Pool.sol,537-542
reentrancy-events,Low,"Reentrancy in SavingsAccount.transfer(uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol#393-416):
	External calls:
	- _amount = IYield(_strategy).getSharesForTokens(_amount,_token) (contracts/SavingsAccount/SavingsAccount.sol#402)
	Event emitted after the call(s):
	- Transfer(_token,_strategy,msg.sender,_to,_amount) (contracts/SavingsAccount/SavingsAccount.sol#413)
","uint256,address,address,address) (contracts/SavingsAccount/SavingsAccount.sol",393-416
reentrancy-events,Low,"Reentrancy in Extension.requestExtension(address) (contracts/Pool/Extension.sol#79-94):
	External calls:
	- onlyBorrower(_pool) (contracts/Pool/Extension.sol#79)
		- require(bool,string)(IPool(_pool).borrower() == msg.sender,Not Borrower) (contracts/Pool/Extension.sol#50)
	Event emitted after the call(s):
	- ExtensionRequested(_extensionVoteEndTime) (contracts/Pool/Extension.sol#93)
",address) (contracts/Pool/Extension.sol,79-94
reentrancy-events,Low,"Reentrancy in Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381):
	External calls:
	- _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares,_collateralAsset) (contracts/Pool/Pool.sol#363)
	- _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(_savingsAccount,address(this),_receiver,_collateralTokens,_collateralAsset,_poolSavingsStrategy) (contracts/Pool/Pool.sol#371-378)
	Event emitted after the call(s):
	- CollateralWithdrawn(_receiver,_sharesReceived) (contracts/Pool/Pool.sol#380)
","address,uint256) (contracts/Pool/Pool.sol",355-381
timestamp,Low,"CreditLine.withdrawableCollateral(uint256) (contracts/CreditLine/CreditLine.sol#930-949) uses timestamp for comparisons
	Dangerous comparisons:
	- _collateralNeeded >= _totalCollateralTokens (contracts/CreditLine/CreditLine.sol#945)
",uint256) (contracts/CreditLine/CreditLine.sol,930-949
timestamp,Low,"CreditLine._repay(uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol#763-788) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(msg.value == _amount,creditLine::repay - Ether sent not equal to repay amount) (contracts/CreditLine/CreditLine.sol#775)
	- _principalPaid != 0 (contracts/CreditLine/CreditLine.sol#785)
","uint256,uint256,bool,uint256) (contracts/CreditLine/CreditLine.sol",763-788
timestamp,Low,"CreditLine.repay(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#798-836) uses timestamp for comparisons
	Dangerous comparisons:
	- _amount >= _totalCurrentDebt (contracts/CreditLine/CreditLine.sol#814)
	- _amount > _interestToPay (contracts/CreditLine/CreditLine.sol#821)
","uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol",798-836
timestamp,Low,"Repayments.isGracePenaltyApplicable(address) (contracts/Pool/Repayments.sol#256-267) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_currentTime <= _gracePeriodDeadline,Borrower has defaulted) (contracts/Pool/Repayments.sol#263)
	- _currentTime <= _nextInstalmentDeadline (contracts/Pool/Repayments.sol#265)
",address) (contracts/Pool/Repayments.sol,256-267
timestamp,Low,"Pool._withdrawRepayment(address) (contracts/Pool/Pool.sol#965-974) uses timestamp for comparisons
	Dangerous comparisons:
	- _amountToWithdraw == 0 (contracts/Pool/Pool.sol#968)
",address) (contracts/Pool/Pool.sol,965-974
timestamp,Low,"CreditLine._repayFromSavingsAccount(uint256,address,address) (contracts/CreditLine/CreditLine.sol#729-761) uses timestamp for comparisons
	Dangerous comparisons:
	- _activeAmount.add(_tokenInStrategy) >= _amount (contracts/CreditLine/CreditLine.sol#750)
	- _amount == _activeAmount (contracts/CreditLine/CreditLine.sol#756)
","uint256,address,address) (contracts/CreditLine/CreditLine.sol",729-761
timestamp,Low,"CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(currentCollateralRatio < creditLineConstants[_id].idealCollateralRatio,CreditLine: Collateral ratio is higher than ideal value) (contracts/CreditLine/CreditLine.sol#1001-1004)
","uint256,bool) (contracts/CreditLine/CreditLine.sol",996-1029
timestamp,Low,"CreditLine.calculateBorrowableAmount(uint256) (contracts/CreditLine/CreditLine.sol#436-464) uses timestamp for comparisons
	Dangerous comparisons:
	- _maxPossible > _currentDebt (contracts/CreditLine/CreditLine.sol#460)
",uint256) (contracts/CreditLine/CreditLine.sol,436-464
timestamp,Low,"Pool.cancelPool() (contracts/Pool/Pool.sol#501-531) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION,CP1) (contracts/Pool/Pool.sol#503)
	- _loanStartTime < block.timestamp && totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10 ** 30) (contracts/Pool/Pool.sol#508-509)
	- _loanWithdrawalDeadline > block.timestamp (contracts/Pool/Pool.sol#516)
	- require(bool,string)(msg.sender == poolConstants.borrower,CP2) (contracts/Pool/Pool.sol#517)
",) (contracts/Pool/Pool.sol,501-531
timestamp,Low,"Pool.requestMarginCall() (contracts/Pool/Pool.sol#656-666) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,RMC1) (contracts/Pool/Pool.sol#657)
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender),RMC3) (contracts/Pool/Pool.sol#661)
",) (contracts/Pool/Pool.sol,656-666
timestamp,Low,"Verification.unlinkAddress(address) (contracts/Verification/Verification.sol#148-154) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_linkedTo != address(0),V:UA-Address not linked) (contracts/Verification/Verification.sol#150)
	- require(bool,string)(_linkedTo == msg.sender,V:UA-Not linked to sender) (contracts/Verification/Verification.sol#151)
",address) (contracts/Verification/Verification.sol,148-154
timestamp,Low,"Pool.liquidateCancelPenalty(bool,bool) (contracts/Pool/Pool.sol#550-574) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.CANCELLED,LCP1) (contracts/Pool/Pool.sol#551)
	- require(bool,string)(poolVariables.penaltyLiquidityAmount == 0,LCP2) (contracts/Pool/Pool.sol#552)
","bool,bool) (contracts/Pool/Pool.sol",550-574
timestamp,Low,"Pool.getMarginCallEndTime(address) (contracts/Pool/Pool.sol#981-989) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2)) (contracts/Pool/Pool.sol#985)
",address) (contracts/Pool/Pool.sol,981-989
timestamp,Low,"Extension.removeVotes(address,address,uint256) (contracts/Pool/Extension.sol#103-124) uses timestamp for comparisons
	Dangerous comparisons:
	- _extensionVoteEndTime != 0 && _extensionVoteEndTime <= block.timestamp (contracts/Pool/Extension.sol#115)
","address,address,uint256) (contracts/Pool/Extension.sol",103-124
timestamp,Low,"Verification.linkAddress(address) (contracts/Verification/Verification.sol#139-143) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(linkedAddresses[msg.sender].masterAddress == address(0),V:LA-Address already linked) (contracts/Verification/Verification.sol#140)
",address) (contracts/Verification/Verification.sol,139-143
timestamp,Low,"Extension.requestExtension(address) (contracts/Pool/Extension.sol#79-94) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > _extensionVoteEndTime,Extension::requestExtension - Extension requested already) (contracts/Pool/Extension.sol#83)
",address) (contracts/Pool/Extension.sol,79-94
timestamp,Low,"CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount <= _borrowableAmount,CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount) (contracts/CreditLine/CreditLine.sol#694)
","uint256,uint256) (contracts/CreditLine/CreditLine.sol",691-727
timestamp,Low,"Pool.depositCollateral(uint256,bool) (contracts/Pool/Pool.sol#175-179) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(balanceOf(msg.sender) == 0,DC2) (contracts/Pool/Pool.sol#177)
","uint256,bool) (contracts/Pool/Pool.sol",175-179
timestamp,Low,"Pool._withdrawAllCollateral(address,uint256) (contracts/Pool/Pool.sol#355-381) uses timestamp for comparisons
	Dangerous comparisons:
	- poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty (contracts/Pool/Pool.sol#359)
	- _collateralShares != 0 (contracts/Pool/Pool.sol#369)
","address,uint256) (contracts/Pool/Pool.sol",355-381
timestamp,Low,"Extension.voteOnExtension(address) (contracts/Pool/Extension.sol#130-153) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp < _extensionVoteEndTime,Pool::voteOnExtension - Voting is over) (contracts/Pool/Extension.sol#132)
",address) (contracts/Pool/Extension.sol,130-153
timestamp,Low,"Pool._calculatePenaltyTime(uint256,uint256) (contracts/Pool/Pool.sol#486-496) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > _loanStartTime (contracts/Pool/Pool.sol#488)
	- block.timestamp > _loanWithdrawalDeadline (contracts/Pool/Pool.sol#490)
","uint256,uint256) (contracts/Pool/Pool.sol",486-496
timestamp,Low,"Pool._beforeTokenTransfer(address,address,uint256) (contracts/Pool/Pool.sol#432-484) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_to != poolConstants.borrower,TT2) (contracts/Pool/Pool.sol#440)
	- _amount != _fromBalance (contracts/Pool/Pool.sol#478)
","address,address,uint256) (contracts/Pool/Pool.sol",432-484
timestamp,Low,"Pool.closeLoan() (contracts/Pool/Pool.sol#591-601) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,CL1) (contracts/Pool/Pool.sol#592)
",) (contracts/Pool/Pool.sol,591-601
timestamp,Low,"Pool._canLenderBeLiquidated(address) (contracts/Pool/Pool.sol#801-809) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline),CLBL1) (contracts/Pool/Pool.sol#802)
	- require(bool,string)(_marginCallEndTime < block.timestamp,CLBL3) (contracts/Pool/Pool.sol#805)
	- require(bool,string)(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender),CLBL4) (contracts/Pool/Pool.sol#807)
	- require(bool,string)(balanceOf(_lender) != 0,CLBL5) (contracts/Pool/Pool.sol#808)
",address) (contracts/Pool/Pool.sol,801-809
timestamp,Low,"Repayments.didBorrowerDefault(address) (contracts/Pool/Repayments.sol#273-281) uses timestamp for comparisons
	Dangerous comparisons:
	- _currentTime > _gracePeriodDeadline (contracts/Pool/Repayments.sol#279)
",address) (contracts/Pool/Repayments.sol,273-281
timestamp,Low,"Pool._initialDeposit(address,uint256,bool) (contracts/Pool/Pool.sol#187-199) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30),ID1) (contracts/Pool/Pool.sol#197)
","address,uint256,bool) (contracts/Pool/Pool.sol",187-199
timestamp,Low,"CreditLine.withdrawCollateral(uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol#912-922) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount <= _withdrawableCollateral,Collateral ratio cant go below ideal) (contracts/CreditLine/CreditLine.sol#918)
","uint256,uint256,bool) (contracts/CreditLine/CreditLine.sol",912-922
timestamp,Low,"Verification.isUser(address,address) (contracts/Verification/Verification.sol#161-173) uses timestamp for comparisons
	Dangerous comparisons:
	- _linkedAddress.masterAddress == address(0) || _linkedAddress.activatesAt > block.timestamp || _masterActivatesAt == 0 || _masterActivatesAt > block.timestamp (contracts/Verification/Verification.sol#165-168)
","address,address) (contracts/Verification/Verification.sol",161-173
timestamp,Low,"Pool.withdrawBorrowedAmount() (contracts/Pool/Pool.sol#310-348) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_poolStatus == LoanStatus.COLLECTION && poolConstants.loanStartTime < block.timestamp && block.timestamp < poolConstants.loanWithdrawalDeadline,WBA1) (contracts/Pool/Pool.sol#313-318)
	- require(bool,string)(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10 ** 30),WBA2) (contracts/Pool/Pool.sol#320)
	- require(bool,string)(_currentCollateralRatio >= poolConstants.idealCollateralRatio,WBA3) (contracts/Pool/Pool.sol#324)
",) (contracts/Pool/Pool.sol,310-348
timestamp,Low,"Verification.requestAddressLinking(address) (contracts/Verification/Verification.sol#121-125) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(linkedAddresses[_linkedAddress].masterAddress == address(0),V:LA-Address already linked) (contracts/Verification/Verification.sol#122)
",address) (contracts/Verification/Verification.sol,121-125
timestamp,Low,"Pool.addCollateralInMarginCall(address,uint256,bool) (contracts/Pool/Pool.sol#275-305) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.ACTIVE,ACMC1) (contracts/Pool/Pool.sol#280)
	- require(bool,string)(balanceOf(msg.sender) == 0,ACMC2) (contracts/Pool/Pool.sol#281)
	- require(bool,string)(getMarginCallEndTime(_lender) >= block.timestamp,ACMC3) (contracts/Pool/Pool.sol#282)
	- getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio (contracts/Pool/Pool.sol#300)
","address,uint256,bool) (contracts/Pool/Pool.sol",275-305
timestamp,Low,"Pool.interestToPay() (contracts/Pool/Pool.sol#672-685) uses timestamp for comparisons
	Dangerous comparisons:
	- _loanDurationTillNow <= _loanDurationCovered (contracts/Pool/Pool.sol#679)
",) (contracts/Pool/Pool.sol,672-685
timestamp,Low,"Pool.lend(address,uint256,address) (contracts/Pool/Pool.sol#390-424) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime,L3) (contracts/Pool/Pool.sol#401)
	- _amount.add(_lentAmount) > _borrowAmountNeeded (contracts/Pool/Pool.sol#404)
","address,uint256,address) (contracts/Pool/Pool.sol",390-424
assembly,Informational,"ECDSA.recover(bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#26-47) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#40-44)
","bytes32,bytes) (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol",26-47
assembly,Informational,"AddressUpgradeable.isContract(address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#33)
",address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol,26-35
assembly,Informational,"Address._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#171-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#180-183)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",171-188
assembly,Informational,"Proxy._delegate(address) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#21-41) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#23-40)
",address) (node_modules/@openzeppelin/contracts/proxy/Proxy.sol,21-41
assembly,Informational,"PoolFactory._deploy(uint256,bytes32,bytes) (contracts/Pool/PoolFactory.sol#404-415) uses assembly
	- INLINE ASM (contracts/Pool/PoolFactory.sol#411-413)
","uint256,bytes32,bytes) (contracts/Pool/PoolFactory.sol",404-415
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-35
assembly,Informational,"TransparentUpgradeableProxy._admin() (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#124-130) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#127-129)
",) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,124-130
assembly,Informational,"UpgradeableProxy._implementation() (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#47-53) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#50-52)
",) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol,47-53
assembly,Informational,"AddressUpgradeable._verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#147-164) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#156-159)
","bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",147-164
assembly,Informational,"UpgradeableProxy._setImplementation(address) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#68-77) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#74-76)
",address) (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol,68-77
assembly,Informational,"TransparentUpgradeableProxy._setAdmin(address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#135-142) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#139-141)
",address) (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol,135-142
assembly,Informational,"TickMath.getTickAtSqrtRatio(uint160) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#61-204) uses assembly
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#69-73)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#74-78)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#79-83)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#84-88)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#89-93)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#94-98)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#99-103)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#104-107)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#114-119)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#120-125)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#126-131)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#132-137)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#138-143)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#144-149)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#150-155)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#156-161)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#162-167)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#168-173)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#174-179)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#180-185)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#186-191)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#192-196)
",uint160) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,61-204
assembly,Informational,"FullMath.mulDiv(uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#14-106) uses assembly
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#26-30)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#35-37)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#52-54)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#56-59)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#66-68)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#71-73)
	- INLINE ASM (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#77-79)
","uint256,uint256,uint256) (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol",14-106
pragma,Informational,"10 different versions of Solidity are used:
	- Version constraint ^0.7.0 is used by:
		-^0.7.0 (node_modules/@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol#2)
	- Version constraint >=0.6.0<0.8.0 is used by:
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/GSN/Context.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
		->=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#3)
	- Version constraint >=0.4.24<0.8.0 is used by:
		->=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4)
	- Version constraint >=0.6.2<0.8.0 is used by:
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)
		->=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- Version constraint >=0.5.0 is used by:
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2)
		->=0.5.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol#2)
	- Version constraint >=0.4.0 is used by:
		->=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2)
	- Version constraint >=0.7.0 is used by:
		->=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)
	- Version constraint >=0.5.0<0.8.0 is used by:
		->=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2)
	- Version constraint 0.7.6 is used by:
		-0.7.6 (contracts/CreditLine/CreditLine.sol#2)
		-0.7.6 (contracts/Pool/Extension.sol#2)
		-0.7.6 (contracts/Pool/Pool.sol#2)
		-0.7.6 (contracts/Pool/PoolFactory.sol#2)
		-0.7.6 (contracts/Pool/Repayments.sol#2)
		-0.7.6 (contracts/Proxy.sol#2)
		-0.7.6 (contracts/SavingsAccount/SavingsAccount.sol#2)
		-0.7.6 (contracts/SavingsAccount/SavingsAccountUtil.sol#2)
		-0.7.6 (contracts/Verification/Verification.sol#2)
		-0.7.6 (contracts/Verification/adminVerifier.sol#2)
		-0.7.6 (contracts/interfaces/IExtension.sol#2)
		-0.7.6 (contracts/interfaces/IPool.sol#2)
		-0.7.6 (contracts/interfaces/IPoolFactory.sol#2)
		-0.7.6 (contracts/interfaces/IPriceOracle.sol#2)
		-0.7.6 (contracts/interfaces/IRepayment.sol#2)
		-0.7.6 (contracts/interfaces/ISavingsAccount.sol#2)
		-0.7.6 (contracts/interfaces/IStrategyRegistry.sol#2)
		-0.7.6 (contracts/interfaces/IVerification.sol#2)
		-0.7.6 (contracts/interfaces/IVerifier.sol#2)
		-0.7.6 (contracts/interfaces/IYield.sol#2)
		-0.7.6 (contracts/interfaces/Invest/AaveLendingPool.sol#2)
		-0.7.6 (contracts/interfaces/Invest/DataTypes.sol#2)
		-0.7.6 (contracts/interfaces/Invest/ICEther.sol#2)
		-0.7.6 (contracts/interfaces/Invest/ICToken.sol#2)
		-0.7.6 (contracts/interfaces/Invest/ILendingPoolAddressesProvider.sol#2)
		-0.7.6 (contracts/interfaces/Invest/IProtocolDataProvider.sol#2)
		-0.7.6 (contracts/interfaces/Invest/IScaledBalanceToken.sol#2)
		-0.7.6 (contracts/interfaces/Invest/IWETHGateway.sol#2)
		-0.7.6 (contracts/interfaces/Invest/IyVault.sol#2)
		-0.7.6 (contracts/mocks/Token.sol#2)
		-0.7.6 (contracts/mocks/yVault/Controller.sol#7)
		-0.7.6 (contracts/mocks/yVault/IController.sol#2)
		-0.7.6 (contracts/mocks/yVault/Strategy.sol#3)
		-0.7.6 (contracts/mocks/yVault/yVault.sol#6)
		-0.7.6 (contracts/yield/AaveYield.sol#2)
		-0.7.6 (contracts/yield/CompoundYield.sol#2)
		-0.7.6 (contracts/yield/NoYield.sol#2)
		-0.7.6 (contracts/yield/StrategyRegistry.sol#2)
		-0.7.6 (contracts/yield/YearnYield.sol#2)
	- Version constraint ^0.7.6 is used by:
		-^0.7.6 (contracts/PriceOracle.sol#2)
",N/A,N/A
cyclomatic-complexity,Informational,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) has a high cyclomatic complexity (24).
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
dead-code,Informational,"ERC20._burnFrom(address,uint256) (contracts/mocks/yVault/yVault.sol#109-112) is never used and should be removed
","address,uint256) (contracts/mocks/yVault/yVault.sol",109-112
dead-code,Informational,"Strategy._approveAll() (contracts/mocks/yVault/Strategy.sol#41-43) is never used and should be removed
",) (contracts/mocks/yVault/Strategy.sol,41-43
solc-version,Informational,"Version constraint >=0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- >=0.7.0 (node_modules/@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.8.0 is too complex.
It is used by:
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/GSN/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/cryptography/ECDSA.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/math/SafeMath.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/Proxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/proxy/UpgradeableProxy.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/SafeERC20.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- >=0.6.0<0.8.0 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.24<0.8.0 is too complex.
It is used by:
	- >=0.4.24<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol#4)
",N/A,N/A
solc-version,Informational,"solc-0.7.6 is an outdated solc version. Use a more recent version (at least 0.8.0), if possible.
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#2)
	- >=0.5.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/CreditLine/CreditLine.sol#2)
	- 0.7.6 (contracts/Pool/Extension.sol#2)
	- 0.7.6 (contracts/Pool/Pool.sol#2)
	- 0.7.6 (contracts/Pool/PoolFactory.sol#2)
	- 0.7.6 (contracts/Pool/Repayments.sol#2)
	- 0.7.6 (contracts/Proxy.sol#2)
	- 0.7.6 (contracts/SavingsAccount/SavingsAccount.sol#2)
	- 0.7.6 (contracts/SavingsAccount/SavingsAccountUtil.sol#2)
	- 0.7.6 (contracts/Verification/Verification.sol#2)
	- 0.7.6 (contracts/Verification/adminVerifier.sol#2)
	- 0.7.6 (contracts/interfaces/IExtension.sol#2)
	- 0.7.6 (contracts/interfaces/IPool.sol#2)
	- 0.7.6 (contracts/interfaces/IPoolFactory.sol#2)
	- 0.7.6 (contracts/interfaces/IPriceOracle.sol#2)
	- 0.7.6 (contracts/interfaces/IRepayment.sol#2)
	- 0.7.6 (contracts/interfaces/ISavingsAccount.sol#2)
	- 0.7.6 (contracts/interfaces/IStrategyRegistry.sol#2)
	- 0.7.6 (contracts/interfaces/IVerification.sol#2)
	- 0.7.6 (contracts/interfaces/IVerifier.sol#2)
	- 0.7.6 (contracts/interfaces/IYield.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/AaveLendingPool.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/DataTypes.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/ICEther.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/ICToken.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/ILendingPoolAddressesProvider.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/IProtocolDataProvider.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/IScaledBalanceToken.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/IWETHGateway.sol#2)
	- 0.7.6 (contracts/interfaces/Invest/IyVault.sol#2)
	- 0.7.6 (contracts/mocks/Token.sol#2)
	- 0.7.6 (contracts/mocks/yVault/Controller.sol#7)
	- 0.7.6 (contracts/mocks/yVault/IController.sol#2)
	- 0.7.6 (contracts/mocks/yVault/Strategy.sol#3)
	- 0.7.6 (contracts/mocks/yVault/yVault.sol#6)
	- 0.7.6 (contracts/yield/AaveYield.sol#2)
	- 0.7.6 (contracts/yield/CompoundYield.sol#2)
	- 0.7.6 (contracts/yield/NoYield.sol#2)
	- 0.7.6 (contracts/yield/StrategyRegistry.sol#2)
	- 0.7.6 (contracts/yield/YearnYield.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.2<0.8.0 is too complex.
It is used by:
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)
	- >=0.6.2<0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- IncorrectEventSignatureInLibraries_0.4.x
	- ExpExponentCleanup
	- NestedArrayFunctionCallDecoder
	- ZeroFunctionSelector
	- DelegateCallReturnValue
	- ECRecoverMalformedInput
	- SkipEmptyStringLiteral
	- ConstantOptimizerSubtraction
	- IdentityPrecompileReturnIgnored
	- HighOrderByteCleanStorage
	- OptimizerStaleKnowledgeAboutSHA3
	- LibrariesNotCallableFromPayableFunctions.
It is used by:
	- >=0.4.0 (node_modules/@uniswap/v3-core/contracts/libraries/FullMath.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.7.6 (contracts/PriceOracle.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.0<0.8.0 is too complex.
It is used by:
	- >=0.5.0<0.8.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- ^0.7.0 (node_modules/@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.7.6 (contracts/interfaces/IUniswapV3Factory.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/Migrations.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/mocks/FluxAggregator.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint 0.7.6 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.7.6 (contracts/mocks/GovernanceTester.sol#2)
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#163-169):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#167)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",163-169
low-level-calls,Informational,"Low level call in CompoundYield.unlockTokens(address,uint256) (contracts/yield/CompoundYield.sol#138-152):
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/CompoundYield.sol#144)
","address,uint256) (contracts/yield/CompoundYield.sol",138-152
low-level-calls,Informational,"Low level call in CompoundYield.emergencyWithdraw(address,address) (contracts/yield/CompoundYield.sol#92-105):
	- (success,None) = _wallet.call{value: received}() (contracts/yield/CompoundYield.sol#99)
","address,address) (contracts/yield/CompoundYield.sol",92-105
low-level-calls,Informational,"Low level call in SafeERC20.callOptionalReturn(ERC20,bytes) (contracts/mocks/yVault/yVault.sol#191-203):
	- (success,returndata) = address(token).call(data) (contracts/mocks/yVault/yVault.sol#195)
","ERC20,bytes) (contracts/mocks/yVault/yVault.sol",191-203
low-level-calls,Informational,"Low level call in SavingsAccountUtil.transferTokens(address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol#98-127):
	- (success,None) = address(_to).call{value: _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#111)
	- (success_scope_0,None) = address(address(msg.sender)).call{value: msg.value - _amount}() (contracts/SavingsAccount/SavingsAccountUtil.sol#115)
","address,uint256,address,address) (contracts/SavingsAccount/SavingsAccountUtil.sol",98-127
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#143)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",139-145
low-level-calls,Informational,"Low level call in NoYield._unlockTokens(address,uint256) (contracts/yield/NoYield.sol#134-144):
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/NoYield.sol#138)
","address,uint256) (contracts/yield/NoYield.sol",134-144
low-level-calls,Informational,"Low level call in YearnYield.unlockTokens(address,uint256) (contracts/yield/YearnYield.sol#139-153):
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/YearnYield.sol#145)
","address,uint256) (contracts/yield/YearnYield.sol",139-153
low-level-calls,Informational,"Low level call in YearnYield.emergencyWithdraw(address,address) (contracts/yield/YearnYield.sol#91-104):
	- (success,None) = _wallet.call{value: received}() (contracts/yield/YearnYield.sol#98)
","address,address) (contracts/yield/YearnYield.sol",91-104
low-level-calls,Informational,"Low level call in AaveYield.unlockTokens(address,uint256) (contracts/yield/AaveYield.sol#217-230):
	- (success,None) = savingsAccount.call{value: received}() (contracts/yield/AaveYield.sol#222)
","address,uint256) (contracts/yield/AaveYield.sol",217-230
low-level-calls,Informational,"Low level call in AaveYield.emergencyWithdraw(address,address) (contracts/yield/AaveYield.sol#171-183):
	- (success,None) = _wallet.call{value: received}() (contracts/yield/AaveYield.sol#177)
","address,address) (contracts/yield/AaveYield.sol",171-183
low-level-calls,Informational,"Low level call in CreditLine.borrow(uint256,uint256) (contracts/CreditLine/CreditLine.sol#691-727):
	- (feeSuccess,None) = protocolFeeCollector.call{value: _protocolFee}() (contracts/CreditLine/CreditLine.sol#718)
	- (success,None) = msg.sender.call{value: _tokenDiffBalance}() (contracts/CreditLine/CreditLine.sol#720)
","uint256,uint256) (contracts/CreditLine/CreditLine.sol",691-727
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#139-145):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#143)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",139-145
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",53-59
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",114-121
low-level-calls,Informational,"Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#53-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",53-59
low-level-calls,Informational,"Low level call in SavingsAccount._transfer(uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol#269-280):
	- (_success,None) = _to.call{value: _amount}() (contracts/SavingsAccount/SavingsAccount.sol#275)
","uint256,address,address) (contracts/SavingsAccount/SavingsAccount.sol",269-280
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#114-121):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#119)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",114-121
low-level-calls,Informational,"Low level call in Repayments._transferTokens(address,address,address,uint256) (contracts/Pool/Repayments.sol#457-473):
	- (transferSuccess,None) = _to.call{value: _amount}() (contracts/Pool/Repayments.sol#464)
	- (refundSuccess,None) = address(_from).call{value: msg.value.sub(_amount)}() (contracts/Pool/Repayments.sol#467)
","address,address,address,uint256) (contracts/Pool/Repayments.sol",457-473
low-level-calls,Informational,"Low level call in CreditLine.liquidate(uint256,bool) (contracts/CreditLine/CreditLine.sol#996-1029):
	- (success,None) = msg.sender.call{value: _returnETH}() (contracts/CreditLine/CreditLine.sol#1018)
","uint256,bool) (contracts/CreditLine/CreditLine.sol",996-1029
missing-inheritance,Informational,"Strategy (contracts/mocks/yVault/Strategy.sol#25-90) should inherit from WETH (contracts/mocks/yVault/yVault.sol#206-213)
",contracts/mocks/yVault/Strategy.sol,25-90
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._protocolFeeCollector (contracts/CreditLine/CreditLine.sol#269) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._admin (contracts/Pool/PoolFactory.sol#189) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.revokeStrategy(address,address)._strategy (contracts/mocks/yVault/Controller.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.approve(uint256,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#329) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.decreaseAllowance(uint256,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#361) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.didBorrowerDefault(address)._poolID (contracts/Pool/Repayments.sol#273) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateCurrentDebt(uint256)._id (contracts/CreditLine/CreditLine.sol#420) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._toSavingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.updatePoolFactory(address)._poolFactory (contracts/Pool/Extension.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateLoanWithdrawalDuration(uint256)._loanWithdrawalDuration (contracts/Pool/PoolFactory.sol#601) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._savingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#83) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Strategy.setGovernance(address)._governance (contracts/mocks/yVault/Strategy.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.yearn(address,address,uint256)._strategy (contracts/mocks/yVault/Controller.sol#181) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.deposit(uint256)._amount (contracts/mocks/yVault/yVault.sol#275) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.transferTokens(address,uint256,address,address)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#101) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.removeVerifier(address)._verifier (contracts/Verification/Verification.sol#78) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.depositCollateral(uint256,bool)._amount (contracts/Pool/Pool.sol#175) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.emergencyWithdraw(address,address)._asset (contracts/yield/AaveYield.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.updatePoolFactory(address)._poolFactory (contracts/Pool/Repayments.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.removeVotes(address,address,uint256)._to (contracts/Pool/Extension.sol#105) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.initialize(address,address)._verification (contracts/Verification/adminVerifier.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IProtocolDataProvider.ADDRESSES_PROVIDER() (contracts/interfaces/Invest/IProtocolDataProvider.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateProtocolFeeCollector(address)._protocolFeeCollector (contracts/Pool/PoolFactory.sol#679) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#71) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.yearn(address,address,uint256)._token (contracts/mocks/yVault/Controller.sol#182) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowance(uint256,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#345) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._collectionPeriod (contracts/Pool/Pool.sol#147) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getCurrentCollateralRatio(address)._lender (contracts/Pool/Pool.sol#720) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._from (contracts/SavingsAccount/SavingsAccount.sol#229) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.updateProtocolAddresses(address,address)._liquidityToken (contracts/yield/YearnYield.sol#80) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawAll(address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#305) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateSupportedCollateralTokens(address,bool)._isSupported (contracts/Pool/PoolFactory.sol#458) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowanceToCreditLine(uint256,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#378) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.correspondingBorrowTokens(uint256,address,uint256)._priceOracle (contracts/Pool/Pool.sol#901) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.requestExtension(address)._pool (contracts/Pool/Extension.sol#79) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.cancelAddressLinkingRequest(address)._linkedAddress (contracts/Verification/Verification.sol#129) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._borrowAmountRequested (contracts/Pool/Pool.sol#134) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._priceOracle (contracts/Pool/PoolFactory.sol#233) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.registerMasterAddress(address,bool)._isMasterLinked (contracts/Verification/Verification.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._poolSavingsStrategy (contracts/Pool/Pool.sol#142) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.requestAddressLinking(address)._linkedAddress (contracts/Verification/Verification.sol#121) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._collateralAmount (contracts/Pool/PoolFactory.sol#269) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._poolSize (contracts/Pool/PoolFactory.sol#261) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._repaymentInterval (contracts/Pool/PoolFactory.sol#266) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.initialize(address,address,address,address,address)._savingsAccount (contracts/yield/AaveYield.sol#86) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateStrategyRegistry(address)._strategyRegistry (contracts/Pool/PoolFactory.sol#510) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.updateGracePenaltyRate(uint256)._gracePenaltyRate (contracts/Pool/Repayments.sol#138) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.removeVotes(address,address,uint256)._amount (contracts/Pool/Extension.sol#106) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getEquivalentTokens(address,address,uint256)._target (contracts/Pool/Pool.sol#1023) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInterestDueTillInstalmentDeadline(address)._poolID (contracts/Pool/Repayments.sol#198) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateUserRegistry(address)._userRegistry (contracts/Pool/PoolFactory.sol#497) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseStrategyTokenGetStuck(address,address)._token (contracts/mocks/yVault/Controller.sol#164) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.updateStrategyRegistry(address)._strategyRegistry (contracts/SavingsAccount/SavingsAccount.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getEquivalentTokens(address,address,uint256)._amount (contracts/Pool/Pool.sol#1024) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatePoolCancelPenaltyMultiple(uint256)._poolCancelPenaltyMultiple (contracts/Pool/PoolFactory.sol#653) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.deposit(uint256,address,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#109) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.decreaseAllowance(uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#360) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setStrategy(address,address)._token (contracts/mocks/yVault/Controller.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transferFrom(uint256,address,address,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#431) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.borrow(uint256,uint256)._id (contracts/CreditLine/CreditLine.sol#691) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.lend(address,uint256,address)._lender (contracts/Pool/Pool.sol#391) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.decreaseAllowance(uint256,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#362) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.withdrawETH(uint256)._shares (contracts/mocks/yVault/yVault.sol#342) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._marginCallDuration (contracts/Pool/PoolFactory.sol#192) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.setMin(uint256)._min (contracts/mocks/yVault/yVault.sol#244) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.updateReferralCode(uint16)._referralCode (contracts/yield/AaveYield.sol#160) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.approveStrategy(address,address)._strategy (contracts/mocks/yVault/Controller.sol#106) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._priceOracle (contracts/CreditLine/CreditLine.sol#264) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.initialize(address,uint256,uint256)._gracePeriodFraction (contracts/Pool/Repayments.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._strategy (contracts/SavingsAccount/SavingsAccount.sol#228) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateCollectionPeriod(uint256)._collectionPeriod (contracts/Pool/PoolFactory.sol#588) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.deposit(uint256,address,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#110) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateBorrowRateLimit(uint256,uint256)._min (contracts/Pool/PoolFactory.sol#713) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.updateStrategy(uint256,address,address)._oldStrategy (contracts/yield/StrategyRegistry.sol#99) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.deposit(uint256,address,address,address)._strategy (contracts/SavingsAccount/SavingsAccount.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.emergencyWithdraw(address,address)._asset (contracts/yield/YearnYield.sol#91) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.initialize(address,address,address)._strategyRegistry (contracts/SavingsAccount/SavingsAccount.sol#60) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.revokeStrategy(address,address)._token (contracts/mocks/yVault/Controller.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._borrowRate (contracts/CreditLine/CreditLine.sol#529) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdraw(uint256,address,address,address,bool)._to (contracts/SavingsAccount/SavingsAccount.sol#197) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInterestOverdue(address)._poolID (contracts/Pool/Repayments.sol#299) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._strategy (contracts/SavingsAccount/SavingsAccountUtil.sol#17) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateSupportedBorrowTokens(address,bool)._isSupported (contracts/Pool/PoolFactory.sol#444) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.updateProtocolAddresses(address,address)._liquidityToken (contracts/yield/CompoundYield.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._repaymentInterval (contracts/Pool/Pool.sol#140) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInterestPerSecond(address)._poolID (contracts/Pool/Repayments.sol#178) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._lenderVerifier (contracts/Pool/PoolFactory.sol#273) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(address,uint256)._amount (contracts/mocks/yVault/Controller.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.getTotalTokens(address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#464) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.emergencyWithdraw(address,address)._wallet (contracts/yield/YearnYield.sol#91) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.initialize(address,address)._admin (contracts/Verification/adminVerifier.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateCancelPenalty(bool,bool)._toSavingsAccount (contracts/Pool/Pool.sol#550) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.emergencyWithdraw(address,address)._asset (contracts/yield/CompoundYield.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInterestCalculationVars(address)._poolID (contracts/Pool/Repayments.sol#446) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._strategyRegistry (contracts/CreditLine/CreditLine.sol#266) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#84) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateSavingsAccount(address)._savingsAccount (contracts/Pool/PoolFactory.sol#575) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.repay(address,uint256)._amount (contracts/Pool/Repayments.sol#317) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.borrowTokensToLiquidate(uint256)._id (contracts/CreditLine/CreditLine.sol#1037) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.initialize(address,uint256)._admin (contracts/Verification/Verification.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatePoolSizeLimit(uint256,uint256)._min (contracts/Pool/PoolFactory.sol#693) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._savingsAccount (contracts/CreditLine/CreditLine.sol#265) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setSplit(uint256)._split (contracts/mocks/yVault/Controller.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(address,uint256)._amount (contracts/mocks/yVault/Controller.sol#210) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatePriceoracle(address)._priceOracle (contracts/Pool/PoolFactory.sol#549) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.repay(uint256,uint256,bool)._fromSavingsAccount (contracts/CreditLine/CreditLine.sol#801) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.getExpectedReturn(address,address,uint256)._strategy (contracts/mocks/yVault/Controller.sol#170) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._poolInitFuncSelector (contracts/Pool/PoolFactory.sol#193) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.repay(address,uint256)._poolID (contracts/Pool/Repayments.sol#317) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.updateProtocolAddresses(address,address)._asset (contracts/yield/CompoundYield.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.unlinkAddress(address)._linkedAddress (contracts/Verification/Verification.sol#148) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.initialize(address,address)._owner (contracts/yield/YearnYield.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateinterestAccruedTillLastPrincipalUpdate(uint256)._id (contracts/CreditLine/CreditLine.sol#466) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transfer(uint256,address,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#397) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.updateSavingsAccount(address)._savingsAccount (contracts/yield/AaveYield.sol#116) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.updateProtocolAddresses(address,address)._asset (contracts/yield/YearnYield.sol#80) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setStrategy(address,address)._strategy (contracts/mocks/yVault/Controller.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._lenderVerifier (contracts/Pool/Pool.sol#145) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateInterestAccrued(uint256)._id (contracts/CreditLine/CreditLine.sol#407) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#27-30) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,27-30
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._loanWithdrawalDuration (contracts/Pool/Pool.sol#146) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawAll(address)._token (contracts/SavingsAccount/SavingsAccount.sol#286) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidatePool(bool,bool,bool)._toSavingsAccount (contracts/Pool/Pool.sol#737) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateForLender(address,bool,bool,bool)._recieveLiquidityShare (contracts/Pool/Pool.sol#868) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._savingsAccount (contracts/Pool/PoolFactory.sol#234) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._minBorrowFraction (contracts/Pool/PoolFactory.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateNoStrategy(address)._noStrategy (contracts/Pool/PoolFactory.sol#536) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.updateAaveAddresses(address,address,address)._protocolDataProvider (contracts/yield/AaveYield.sol#135) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.initialize(address,uint256)._maxStrategies (contracts/yield/StrategyRegistry.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.withdrawCollateral(uint256,uint256,bool)._toSavingsAccount (contracts/CreditLine/CreditLine.sol#915) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.approveStrategy(address,address)._token (contracts/mocks/yVault/Controller.sol#106) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Token.mint(address,uint256)._amount (contracts/mocks/Token.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setConverter(address,address,address)._converter (contracts/mocks/yVault/Controller.sol#119) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transferFrom(uint256,address,address,address,address)._from (contracts/SavingsAccount/SavingsAccount.sol#430) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateSupportedBorrowTokens(address,bool)._borrowToken (contracts/Pool/PoolFactory.sol#444) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.repayPrincipal(address)._poolID (contracts/Pool/Repayments.sol#407) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#74) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._repaymentImpl (contracts/Pool/PoolFactory.sol#230) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateBorrowRateLimit(uint256,uint256)._max (contracts/Pool/PoolFactory.sol#713) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getBalanceDetails(address)._lender (contracts/Pool/Pool.sol#997) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.initialize(address,address)._savingsAccount (contracts/yield/YearnYield.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.interestPerSecond(uint256)._principal (contracts/Pool/Pool.sol#916) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.isGracePenaltyApplicable(address)._poolID (contracts/Pool/Repayments.sol#256) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateCancelPenalty(bool,bool)._receiveLiquidityShare (contracts/Pool/Pool.sol#550) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseStrategyTokenGetStuck(address,address)._strategy (contracts/mocks/yVault/Controller.sol#164) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.borrow(uint256,uint256)._amount (contracts/CreditLine/CreditLine.sol#691) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._borrower (contracts/Pool/Pool.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.emergencyWithdraw(address,address)._wallet (contracts/yield/CompoundYield.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getCurrentInstalmentInterval(address)._poolID (contracts/Pool/Repayments.sol#234) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(address,uint256)._token (contracts/mocks/yVault/Controller.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowanceToCreditLine(uint256,address,address)._from (contracts/SavingsAccount/SavingsAccount.sol#379) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.grantExtension(address)._pool (contracts/Pool/Extension.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowanceToCreditLine(uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#377) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable PausableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#96) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.updateVerification(address)._verification (contracts/Verification/adminVerifier.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._strategy (contracts/SavingsAccount/SavingsAccountUtil.sol#88) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateSavingsAccount(address)._savingsAccount (contracts/CreditLine/CreditLine.sol#317) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._requestAsLender (contracts/CreditLine/CreditLine.sol#534) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.initialize(address,uint256,uint256)._poolFactory (contracts/Pool/Repayments.sol#98) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.linkAddress(address)._masterAddress (contracts/Verification/Verification.sol#139) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.setController(address)._controller (contracts/mocks/yVault/yVault.sol#254) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.lend(address,uint256,address)._strategy (contracts/Pool/Pool.sol#393) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transferFrom(uint256,address,address,address,address)._strategy (contracts/SavingsAccount/SavingsAccount.sol#429) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.updateAaveAddresses(address,address,address)._lendingPoolAddressesProvider (contracts/yield/AaveYield.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatePoolSizeLimit(uint256,uint256)._max (contracts/Pool/PoolFactory.sol#693) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInterestLeft(address)._poolID (contracts/Pool/Repayments.sol#287) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#61-65) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",61-65
naming-convention,Informational,"Parameter Repayments.updateGracePeriodFraction(uint256)._gracePeriodFraction (contracts/Pool/Repayments.sol#125) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdraw(uint256,address,address,address,bool)._token (contracts/SavingsAccount/SavingsAccount.sol#195) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._collateralAsset (contracts/Pool/Pool.sol#138) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.updateStrategy(uint256,address,address)._strategyIndex (contracts/yield/StrategyRegistry.sol#98) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateBorrowableAmount(uint256)._id (contracts/CreditLine/CreditLine.sol#436) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._collateralToken (contracts/Pool/PoolFactory.sol#264) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.initialize(address,address,address)._owner (contracts/SavingsAccount/SavingsAccount.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._protocolFeeCollector (contracts/Pool/PoolFactory.sol#198) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.depositCollateral(uint256,uint256,address,bool)._amount (contracts/CreditLine/CreditLine.sol#622) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._strategyRegistry (contracts/Pool/PoolFactory.sol#232) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidatePool(bool,bool,bool)._recieveLiquidityShare (contracts/Pool/Pool.sol#738) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.accept(uint256)._id (contracts/CreditLine/CreditLine.sol#594) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateRepaymentIntervalLimit(uint256,uint256)._max (contracts/Pool/PoolFactory.sol#723) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.updateStrategy(uint256,address,address)._newStrategy (contracts/yield/StrategyRegistry.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._poolImpl (contracts/Pool/PoolFactory.sol#229) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.registerUser(address,string,bool)._metadata (contracts/Verification/adminVerifier.sol#43) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.switchStrategy(uint256,address,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#153) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getMarginCallEndTime(address)._lender (contracts/Pool/Pool.sol#981) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#56-59) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",56-59
naming-convention,Informational,"Parameter Controller.setConverter(address,address,address)._input (contracts/mocks/yVault/Controller.sol#117) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.initialize(address,address,address)._creditLine (contracts/SavingsAccount/SavingsAccount.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._savingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setRewards(address)._rewards (contracts/mocks/yVault/Controller.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._to (contracts/SavingsAccount/SavingsAccount.sol#230) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.updateCreditLine(address)._creditLine (contracts/SavingsAccount/SavingsAccount.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,21-22
naming-convention,Informational,"Parameter Pool.depositCollateral(uint256,bool)._transferFromSavingsAccount (contracts/Pool/Pool.sol#175) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._poolSavingsStrategy (contracts/Pool/PoolFactory.sol#268) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.getEquivalentTokens(address,address,uint256)._source (contracts/Pool/Pool.sol#1022) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowance(uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#343) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.balanceOf(address)._token (contracts/mocks/yVault/Controller.sol#150) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateForLender(address,bool,bool,bool)._lender (contracts/Pool/Pool.sol#865) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.withdrawableCollateral(uint256)._id (contracts/CreditLine/CreditLine.sol#930) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateNoOfRepaymentIntervalsLimit(uint256,uint256)._max (contracts/Pool/PoolFactory.sol#733) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._requestTo (contracts/CreditLine/CreditLine.sol#527) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._withdrawShares (contracts/SavingsAccount/SavingsAccountUtil.sol#18) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.initialize(address,address,address,address,address)._lendingPoolAddressesProvider (contracts/yield/AaveYield.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.initialize(address,address,address,address,address)._wethGateway (contracts/yield/AaveYield.sol#87) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.approve(uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#327) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateInterest(uint256,uint256,uint256)._borrowRate (contracts/CreditLine/CreditLine.sol#393) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transferFrom(uint256,address,address,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#427) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._userRegistry (contracts/Pool/PoolFactory.sol#231) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._withdrawShares (contracts/SavingsAccount/SavingsAccountUtil.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PriceOracle.initialize(address)._admin (contracts/PriceOracle.sol#36) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setGovernance(address)._governance (contracts/mocks/yVault/Controller.sol#95) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20PausableUpgradeable.__ERC20Pausable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol#23-24) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol,23-24
naming-convention,Informational,"Parameter PoolFactory.updateMarginCallDuration(uint256)._marginCallDuration (contracts/Pool/PoolFactory.sol#614) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._salt (contracts/Pool/PoolFactory.sol#271) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateLiquidatorRewardFraction(uint256)._liquidatorRewardFraction (contracts/Pool/PoolFactory.sol#640) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#312) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._transferFromSavingsAccount (contracts/Pool/Pool.sol#144) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.updateSavingsAccount(address)._savingsAccount (contracts/yield/NoYield.sol#62) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.initialize(address,uint256,uint256)._gracePenaltyRate (contracts/Pool/Repayments.sol#99) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._strategy (contracts/SavingsAccount/SavingsAccountUtil.sol#50) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateidealCollateralRatioLimit(uint256,uint256)._min (contracts/Pool/PoolFactory.sol#703) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._poolCancelPenaltyMultiple (contracts/Pool/PoolFactory.sol#195) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#14) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PriceOracle.setUniswapPriceAveragingPeriod(uint32)._uniswapPriceAveragingPeriod (contracts/PriceOracle.sol#219) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract yVault (contracts/mocks/yVault/yVault.sol#215-371) is not in CapWords
",contracts/mocks/yVault/yVault.sol,215-371
naming-convention,Informational,"Parameter PoolFactory.updateidealCollateralRatioLimit(uint256,uint256)._max (contracts/Pool/PoolFactory.sol#703) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.updateSavingsAccount(address)._savingsAccount (contracts/yield/CompoundYield.sol#65) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(address,uint256)._token (contracts/mocks/yVault/Controller.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Token.mint(address,uint256)._to (contracts/mocks/Token.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateProtocolFeeCollector(address)._protocolFeeCollector (contracts/CreditLine/CreditLine.sol#345) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.unregisterUser(address)._user (contracts/Verification/adminVerifier.sol#57) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getTotalRepaidAmount(address)._poolID (contracts/Pool/Repayments.sol#430) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.initialize(address,uint256)._poolFactory (contracts/Pool/Extension.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateRepaymentIntervalLimit(uint256,uint256)._min (contracts/Pool/PoolFactory.sol#723) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._toSavingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._transferFromSavingsAccount (contracts/Pool/PoolFactory.sol#270) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._autoLiquidation (contracts/CreditLine/CreditLine.sol#530) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._owner (contracts/CreditLine/CreditLine.sol#267) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.depositCollateral(uint256,uint256,address,bool)._fromSavingsAccount (contracts/CreditLine/CreditLine.sol#624) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._protocolFeeFraction (contracts/CreditLine/CreditLine.sol#268) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getNextInstalmentDeadline(address)._poolID (contracts/Pool/Repayments.sol#211) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawAll(address)._token (contracts/mocks/yVault/Controller.sol#154) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateDefaultStrategy(address)._defaultStrategy (contracts/CreditLine/CreditLine.sol#289) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setVault(address,address)._token (contracts/mocks/yVault/Controller.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._strategy (contracts/SavingsAccount/SavingsAccountUtil.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.getExpectedReturn(address,address,uint256)._token (contracts/mocks/yVault/Controller.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.emergencyWithdraw(address,address)._wallet (contracts/yield/AaveYield.sol#171) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Strategy.withdraw(IERC20)._asset (contracts/mocks/yVault/Strategy.sol#54) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._noOfRepaymentIntervals (contracts/Pool/Pool.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(address,uint256)._token (contracts/mocks/yVault/Controller.sol#210) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._borrowLimit (contracts/CreditLine/CreditLine.sol#528) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.initialize(address,uint256)._activationDelay (contracts/Verification/Verification.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.deposit(uint256,address,address,address)._to (contracts/SavingsAccount/SavingsAccount.sol#112) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._savingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#29) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._strategy (contracts/SavingsAccount/SavingsAccountUtil.sol#72) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdraw(uint256,address,address,address,bool)._amount (contracts/SavingsAccount/SavingsAccount.sol#194) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.correspondingBorrowTokens(uint256,address,uint256)._totalCollateralTokens (contracts/Pool/Pool.sol#900) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._defaultStrategy (contracts/CreditLine/CreditLine.sol#263) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20PausableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.lend(address,uint256,address)._amount (contracts/Pool/Pool.sol#392) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateInterest(uint256,uint256,uint256)._timeElapsed (contracts/CreditLine/CreditLine.sol#394) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.initialize(address,address)._owner (contracts/yield/NoYield.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateProtocolFeeFraction(uint256)._protocolFee (contracts/Pool/PoolFactory.sol#666) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._borrowRate (contracts/Pool/Pool.sol#135) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.emergencyWithdraw(address,address)._wallet (contracts/yield/NoYield.sol#78) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.calculateCollateralRatio(uint256,uint256)._balance (contracts/Pool/Pool.sol#694) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.initializePoolExtension(uint256)._repaymentInterval (contracts/Pool/Extension.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._noStrategy (contracts/Pool/PoolFactory.sol#199) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20PausableUpgradeable.__ERC20Pausable_init() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol#17-21) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol,17-21
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#32-36) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,32-36
naming-convention,Informational,"Parameter Controller.setOneSplit(address)._onesplit (contracts/mocks/yVault/Controller.sol#90) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._withdrawShares (contracts/SavingsAccount/SavingsAccount.sol#231) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getCurrentLoanInterval(address)._poolID (contracts/Pool/Repayments.sol#243) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawAll(address,address)._strategy (contracts/SavingsAccount/SavingsAccount.sol#305) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.transferTokens(address,uint256,address,address)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#102) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._collateralAsset (contracts/CreditLine/CreditLine.sol#533) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdraw(uint256,address,address,address,bool)._withdrawShares (contracts/SavingsAccount/SavingsAccount.sol#198) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.unregisterMasterAddress(address,address)._masterAddress (contracts/Verification/Verification.sol#104) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateForLender(address,bool,bool,bool)._toSavingsAccount (contracts/Pool/Pool.sol#867) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(address,uint256)._amount (contracts/mocks/yVault/Controller.sol#136) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Strategy.withdraw(uint256)._amount (contracts/mocks/yVault/Strategy.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.switchStrategy(uint256,address,address,address)._currentStrategy (contracts/SavingsAccount/SavingsAccount.sol#155) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._verifier (contracts/Pool/PoolFactory.sol#272) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.addVerifier(address)._verifier (contracts/Verification/Verification.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setConverter(address,address,address)._output (contracts/mocks/yVault/Controller.sol#118) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.repay(uint256,uint256,bool)._id (contracts/CreditLine/CreditLine.sol#799) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.repay(uint256,uint256,bool)._amount (contracts/CreditLine/CreditLine.sol#800) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.approve(uint256,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#328) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.correspondingBorrowTokens(uint256,address,uint256)._fraction (contracts/Pool/Pool.sol#902) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._savingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatePoolLogic(address)._poolLogic (contracts/Pool/PoolFactory.sol#484) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidatePool(bool,bool,bool)._fromSavingsAccount (contracts/Pool/Pool.sol#736) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.interestPerPeriod(uint256)._balance (contracts/Pool/Pool.sol#926) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.updateMaxStrategies(uint256)._maxStrategies (contracts/yield/StrategyRegistry.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateInterest(uint256,uint256,uint256)._principal (contracts/CreditLine/CreditLine.sol#392) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._idealCollateralRatio (contracts/Pool/Pool.sol#139) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._borrowAsset (contracts/CreditLine/CreditLine.sol#532) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.liquidate(uint256,bool)._id (contracts/CreditLine/CreditLine.sol#996) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._borrowToken (contracts/Pool/PoolFactory.sol#263) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.instalmentDeadlineExtended(address)._poolID (contracts/Pool/Repayments.sol#436) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.isWithinLimits(uint256,uint256,uint256)._max (contracts/Pool/PoolFactory.sol#426) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transfer(uint256,address,address,address)._strategy (contracts/SavingsAccount/SavingsAccount.sol#396) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.addCollateralInMarginCall(address,uint256,bool)._amount (contracts/Pool/Pool.sol#277) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transferFrom(uint256,address,address,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#428) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#13) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.initialize(address,uint256)._votingPassRatio (contracts/Pool/Extension.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.transferTokens(address,uint256,address,address)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatepoolInitFuncSelector(bytes4)._functionId (contracts/Pool/PoolFactory.sol#471) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.initialize(address,uint256)._owner (contracts/yield/StrategyRegistry.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.removeVotes(address,address,uint256)._from (contracts/Pool/Extension.sol#104) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._token (contracts/SavingsAccount/SavingsAccount.sol#227) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.calculateCollateralRatio(uint256,uint256)._liquidityShares (contracts/Pool/Pool.sol#694) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._protocolFeeFraction (contracts/Pool/PoolFactory.sol#197) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._borrowRate (contracts/Pool/PoolFactory.sol#262) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directDeposit(ISavingsAccount,address,address,uint256,address,bool,address)._from (contracts/SavingsAccount/SavingsAccountUtil.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.calculateRepaymentWithdrawable(address)._lender (contracts/Pool/Pool.sol#944) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._borrowAsset (contracts/Pool/Pool.sol#137) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.liquidityToken(address)._asset (contracts/yield/NoYield.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.removeStrategy(uint256)._strategyIndex (contracts/yield/StrategyRegistry.sol#82) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.registerUser(address,string,bool)._isMasterLinked (contracts/Verification/adminVerifier.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.withdrawCollateral(uint256,uint256,bool)._amount (contracts/CreditLine/CreditLine.sol#914) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._idealCollateralRatio (contracts/Pool/PoolFactory.sol#265) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Strategy.setController(address)._controller (contracts/mocks/yVault/Strategy.sol#86) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.getTotalTokens(address,address)._user (contracts/SavingsAccount/SavingsAccount.sol#464) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.initialize(address,address,address,address,address)._protocolDataProvider (contracts/yield/AaveYield.sol#88) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PriceOracle.getDecimals(address)._token (contracts/PriceOracle.sol#101) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setVault(address,address)._vault (contracts/mocks/yVault/Controller.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.setGovernance(address)._governance (contracts/mocks/yVault/yVault.sol#249) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.initialize(address,address)._savingsAccount (contracts/yield/CompoundYield.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.initialize(address,address,address,address,address,uint256,address,uint256)._liquidatorRewardFraction (contracts/CreditLine/CreditLine.sol#270) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateRepaymentImpl(address)._repaymentImpl (contracts/Pool/PoolFactory.sol#523) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._amount (contracts/SavingsAccount/SavingsAccountUtil.sol#86) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.liquidateForLender(address,bool,bool,bool)._fromSavingsAccount (contracts/Pool/Pool.sol#866) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.isWithinLimits(uint256,uint256,uint256)._min (contracts/Pool/PoolFactory.sol#425) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.transferTokens(address,uint256,address,address)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#99) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.savingsAccountTransfer(ISavingsAccount,address,address,uint256,address,address)._savingsAccount (contracts/SavingsAccount/SavingsAccountUtil.sol#67) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateStrategyRegistry(address)._strategyRegistry (contracts/CreditLine/CreditLine.sol#360) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._loanWithdrawalDuration (contracts/Pool/PoolFactory.sol#191) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.initialize(address,address,address,address,address)._owner (contracts/yield/AaveYield.sol#85) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyRegistry.addStrategy(address)._strategy (contracts/yield/StrategyRegistry.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.updateVotingPassRatio(uint256)._votingPassRatio (contracts/Pool/Extension.sol#182) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.depositFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool,bool)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#16) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function PausableUpgradeable.__Pausable_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#33-36) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol,33-36
naming-convention,Informational,"Parameter SavingsAccount.withdrawFrom(uint256,address,address,address,address,bool)._amount (contracts/SavingsAccount/SavingsAccount.sol#226) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.withdrawCollateral(uint256,uint256,bool)._id (contracts/CreditLine/CreditLine.sol#913) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.liquidate(uint256,bool)._toSavingsAccount (contracts/CreditLine/CreditLine.sol#996) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)._collateralAmount (contracts/Pool/Pool.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Repayments.getInstalmentsCompleted(address)._poolID (contracts/Pool/Repayments.sol#187) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.increaseAllowance(uint256,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#344) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateTotalCollateralTokens(uint256)._id (contracts/CreditLine/CreditLine.sol#888) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.switchStrategy(uint256,address,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#154) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#17-19) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,17-19
naming-convention,Informational,"Parameter CreditLine.close(uint256)._id (contracts/CreditLine/CreditLine.sol#849) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._to (contracts/SavingsAccount/SavingsAccountUtil.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.isUser(address,address)._verifier (contracts/Verification/Verification.sol#161) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setStrategist(address)._strategist (contracts/mocks/yVault/Controller.sol#80) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AaveYield.updateAaveAddresses(address,address,address)._wethGateway (contracts/yield/AaveYield.sol#134) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter yVault.withdraw(uint256)._shares (contracts/mocks/yVault/yVault.sol#322) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transfer(uint256,address,address,address)._amount (contracts/SavingsAccount/SavingsAccount.sol#394) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.request(address,uint256,uint256,bool,uint256,address,address,bool)._collateralRatio (contracts/CreditLine/CreditLine.sol#531) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.setImplementations(address,address,address,address,address,address,address)._extension (contracts/Pool/PoolFactory.sol#235) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.isUser(address,address)._user (contracts/Verification/Verification.sol#161) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.addCollateralInMarginCall(address,uint256,bool)._lender (contracts/Pool/Pool.sol#276) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Pool.addCollateralInMarginCall(address,uint256,bool)._transferFromSavingsAccount (contracts/Pool/Pool.sol#278) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._collectionPeriod (contracts/Pool/PoolFactory.sol#190) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter AdminVerifier.registerUser(address,string,bool)._user (contracts/Verification/adminVerifier.sol#42) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CompoundYield.initialize(address,address)._owner (contracts/yield/CompoundYield.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.withdrawFromSavingsAccount(ISavingsAccount,address,address,uint256,address,address,bool)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#87) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.unregisterMasterAddress(address,address)._verifier (contracts/Verification/Verification.sol#104) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.registerMasterAddress(address,bool)._masterAddress (contracts/Verification/Verification.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.calculateCurrentCollateralRatio(uint256)._id (contracts/CreditLine/CreditLine.sol#868) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateSupportedCollateralTokens(address,bool)._collateralToken (contracts/Pool/PoolFactory.sol#458) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.isWithinLimits(uint256,uint256,uint256)._value (contracts/Pool/PoolFactory.sol#424) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateMinBorrowFraction(uint256)._minBorrowFraction (contracts/Pool/PoolFactory.sol#627) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.switchStrategy(uint256,address,address,address)._newStrategy (contracts/SavingsAccount/SavingsAccount.sol#156) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.transfer(uint256,address,address,address)._token (contracts/SavingsAccount/SavingsAccount.sol#395) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.depositCollateral(uint256,uint256,address,bool)._id (contracts/CreditLine/CreditLine.sol#621) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Extension.voteOnExtension(address)._pool (contracts/Pool/Extension.sol#130) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateProtocolFeeFraction(uint256)._protocolFee (contracts/CreditLine/CreditLine.sol#331) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)._noOfRepaymentIntervals (contracts/Pool/PoolFactory.sol#267) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YearnYield.updateSavingsAccount(address)._savingsAccount (contracts/yield/YearnYield.sol#64) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updateLiquidatorRewardFraction(uint256)._rewardFraction (contracts/CreditLine/CreditLine.sol#375) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.initialize(address,address)._savingsAccount (contracts/yield/NoYield.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updateNoOfRepaymentIntervalsLimit(uint256,uint256)._min (contracts/Pool/PoolFactory.sol#733) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccountUtil.directSavingsAccountDeposit(ISavingsAccount,address,address,uint256,address,address)._token (contracts/SavingsAccount/SavingsAccountUtil.sol#49) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PoolFactory.updatedExtension(address)._extension (contracts/Pool/PoolFactory.sol#562) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter SavingsAccount.withdraw(uint256,address,address,address,bool)._strategy (contracts/SavingsAccount/SavingsAccount.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function PausableUpgradeable.__Pausable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol#38-40) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol,38-40
naming-convention,Informational,"Parameter PoolFactory.initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)._liquidatorRewardFraction (contracts/Pool/PoolFactory.sol#194) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Verification.updateActivationDelay(uint256)._activationDelay (contracts/Verification/Verification.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NoYield.emergencyWithdraw(address,address)._asset (contracts/yield/NoYield.sol#78) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.depositCollateral(uint256,uint256,address,bool)._strategy (contracts/CreditLine/CreditLine.sol#623) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CreditLine.updatePriceOracle(address)._priceOracle (contracts/CreditLine/CreditLine.sol#303) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Migrations.last_completed_migration (contracts/Migrations.sol#6) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Event GovernanceTester.valueUpdated(address,address,uint256) (contracts/mocks/GovernanceTester.sol#8) is not in CapWords
",N/A,N/A
naming-convention,Informational,"Parameter GovernanceTester.update(uint256)._value (contracts/mocks/GovernanceTester.sol#20) is not in mixedCase
",N/A,N/A
redundant-statements,Informational,"Redundant expression ""this (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#28)"" inContextUpgradeable (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#16-32)
",node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,16-32
redundant-statements,Informational,"Redundant expression ""this (node_modules/@openzeppelin/contracts/utils/Context.sol#21)"" inContext (node_modules/@openzeppelin/contracts/utils/Context.sol#15-24)
",node_modules/@openzeppelin/contracts/utils/Context.sol,15-24
too-many-digits,Informational,"PoolFactory._createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address) (contracts/Pool/PoolFactory.sol#320-355) uses literals with too many digits:
	- bytecode = abi.encodePacked(type()(SublimeProxy).creationCode,abi.encode(poolImpl,address(0x01),data)) (contracts/Pool/PoolFactory.sol#348)
","uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address) (contracts/Pool/PoolFactory.sol",320-355
too-many-digits,Informational,"TickMath.getSqrtRatioAtTick(int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#23-54) uses literals with too many digits:
	- ratio = 0x100000000000000000000000000000000 (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol#27)
",int24) (node_modules/@uniswap/v3-core/contracts/libraries/TickMath.sol,23-54
unused-state,Informational,"FluxAggregator.latestRoundId (contracts/mocks/FluxAggregator.sol#10) is never used in FluxAggregator (contracts/mocks/FluxAggregator.sol#4-43)
",contracts/mocks/FluxAggregator.sol,4-43
constable-states,Optimization,"Strategy.strategist (contracts/mocks/yVault/Strategy.sol#33) should be constant 
",N/A,N/A
constable-states,Optimization,"FluxAggregator.version (contracts/mocks/FluxAggregator.sol#5) should be constant 
",N/A,N/A
constable-states,Optimization,"FluxAggregator.decimals (contracts/mocks/FluxAggregator.sol#6) should be constant 
",N/A,N/A
constable-states,Optimization,"FluxAggregator.latestRoundId (contracts/mocks/FluxAggregator.sol#10) should be constant 
",N/A,N/A
constable-states,Optimization,"FluxAggregator.description (contracts/mocks/FluxAggregator.sol#7) should be constant 
",N/A,N/A
immutable-states,Optimization,"Strategy.want (contracts/mocks/yVault/Strategy.sol#30) should be immutable 
",N/A,N/A
immutable-states,Optimization,"ERC20Detailed._decimals (contracts/mocks/yVault/yVault.sol#118) should be immutable 
",N/A,N/A
immutable-states,Optimization,"yVault.token (contracts/mocks/yVault/yVault.sol#220) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Migrations.owner (contracts/Migrations.sol#5) should be immutable 
",N/A,N/A
immutable-states,Optimization,"GovernanceTester.gov (contracts/mocks/GovernanceTester.sol#5) should be immutable 
",N/A,N/A
