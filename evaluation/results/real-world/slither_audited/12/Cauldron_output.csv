Severity,Description,Line
Medium,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#268-295):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#290)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	State variables written after the call(s):
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#428)
	Cauldron.ratesAtMaturity (contracts/Cauldron.sol#62) can be used in cross function reentrancies:
	- Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#445-458)
	- Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430)
	- Cauldron.mature(bytes6) (contracts/Cauldron.sol#413-420)
	- Cauldron.ratesAtMaturity (contracts/Cauldron.sol#62)
",268-295
Medium,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#357)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	State variables written after the call(s):
	- auctions[vaultId] = now_ (contracts/Cauldron.sol#359)
	Cauldron.auctions (contracts/Cauldron.sol#68) can be used in cross function reentrancies:
	- Cauldron.auctions (contracts/Cauldron.sol#68)
	- Cauldron.destroy(bytes12) (contracts/Cauldron.sol#193-202)
	- Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363)
	- _give(vaultId,receiver) (contracts/Cauldron.sol#360)
		- vaults[vaultId] = vault (contracts/Cauldron.sol#241)
	Cauldron.vaults (contracts/Cauldron.sol#66) can be used in cross function reentrancies:
	- Cauldron._give(bytes12,address) (contracts/Cauldron.sol#235-243)
	- Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#205-212)
	- Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#174-190)
	- Cauldron.destroy(bytes12) (contracts/Cauldron.sol#193-202)
	- Cauldron.tweak(bytes12,bytes6,bytes6) (contracts/Cauldron.sol#216-232)
	- Cauldron.vaultData(bytes12,bool) (contracts/Cauldron.sol#256-265)
	- Cauldron.vaults (contracts/Cauldron.sol#66)
",349-363
Medium,"Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430) ignores return value by (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
",423-430
Medium,"Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#445-458) ignores return value by (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
",445-458
Medium,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479) ignores return value by (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
",461-479
Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
	State variables written after the call(s):
	- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#428)
",423-430
Low,"Reentrancy in Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479):
	External calls:
	- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
	- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#474)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
		- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#474)
",461-479
Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
",423-430
Low,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#268-295):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#290)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
		- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
	- VaultStirred(from,to,ink,art) (contracts/Cauldron.sol#293)
",268-295
Low,"Reentrancy in Cauldron.roll(bytes12,bytes6,int128) (contracts/Cauldron.sol#381-401):
	External calls:
	- require(bool,string)(_level(vault_,balances_,newSeries_) >= 0,Undercollateralized) (contracts/Cauldron.sol#397)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- VaultRolled(vaultId,newSeriesId,balances_.art) (contracts/Cauldron.sol#398)
",381-401
Low,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#357)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- VaultGiven(vaultId,receiver) (contracts/Cauldron.sol#242)
		- _give(vaultId,receiver) (contracts/Cauldron.sol#360)
	- VaultLocked(vaultId,now_) (contracts/Cauldron.sol#362)
",349-363
Low,"Cauldron.accrual(bytes6) (contracts/Cauldron.sol#434-441) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(uint32(block.timestamp) >= series_.maturity,Only after maturity) (contracts/Cauldron.sol#439)
",434-441
Low,"Cauldron.mature(bytes6) (contracts/Cauldron.sol#413-420) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(uint32(block.timestamp) >= series_.maturity,Only after maturity) (contracts/Cauldron.sol#417)
",413-420
Low,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479) uses timestamp for comparisons
	Dangerous comparisons:
	- uint32(block.timestamp) >= series_.maturity (contracts/Cauldron.sol#473)
",461-479
Low,"Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(auctions[vaultId] + auctionInterval <= now_,Vault under auction) (contracts/Cauldron.sol#354)
",349-363
Informational,"Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#205-212) compares to a boolean constant:
	-require(bool,string)(ilks[vault.seriesId][vault.ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#208)
",205-212
Informational,"Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#174-190) compares to a boolean constant:
	-require(bool,string)(ilks[seriesId][ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#181)
",174-190
Informational,"Cauldron.slitherConstructorConstantVariables() (contracts/Cauldron.sol#23-481) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",23-481
