Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"Join._join(address,uint128) (contracts/Join.sol#51-61) uses arbitrary from in transferFrom: token.safeTransferFrom(user,address(this),amount - available) (contracts/Join.sol#59)
","address,uint128) (contracts/Join.sol",51-61
arbitrary-send-erc20,High,"GemJoinMock.pull(address,uint256) (contracts/mocks/TLMMock.sol#15-17) uses arbitrary from in transferFrom: gem.transferFrom(from,address(this),amount) (contracts/mocks/TLMMock.sol#16)
","address,uint256) (contracts/mocks/TLMMock.sol",15-17
delegatecall-loop,High,"Ladle._moduleCall(address,bytes) (contracts/Ladle.sol#588-595) has delegatecall inside a loop in a payable function: (success,result) = module.delegatecall(moduleCall) (contracts/Ladle.sol#593)
","address,bytes) (contracts/Ladle.sol",588-595
unchecked-transfer,High,"GemJoinMock.pull(address,uint256) (contracts/mocks/TLMMock.sol#15-17) ignores return value by gem.transferFrom(from,address(this),amount) (contracts/mocks/TLMMock.sol#16)
","address,uint256) (contracts/mocks/TLMMock.sol",15-17
unchecked-transfer,High,"FlashBorrower.onFlashLoan(address,address,uint256,uint256,bytes) (contracts/mocks/FlashBorrower.sol#25-43) ignores return value by IERC20(token).transfer(address(lender),amount + fee) (contracts/mocks/FlashBorrower.sol#36)
","address,address,uint256,uint256,bytes) (contracts/mocks/FlashBorrower.sol",25-43
unchecked-transfer,High,"FlashBorrower.onFlashLoan(address,address,uint256,uint256,bytes) (contracts/mocks/FlashBorrower.sol#25-43) ignores return value by IERC20(token).transfer(address(0),amount) (contracts/mocks/FlashBorrower.sol#38)
","address,address,uint256,uint256,bytes) (contracts/mocks/FlashBorrower.sol",25-43
divide-before-multiply,Medium,"Pool._update(uint128,uint128,uint112,uint112) (contracts/yieldspace/Pool.sol#181-192) performs a multiplication on the result of a division:
	- cumulativeBalancesRatio += scaledFYTokenCached / _baseCached * timeElapsed (contracts/yieldspace/Pool.sol#186)
","uint128,uint128,uint112,uint112) (contracts/yieldspace/Pool.sol",181-192
divide-before-multiply,Medium,"Pool._mintInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#231-298) performs a multiplication on the result of a division:
	- tokensMinted = (supply * baseIn) / _baseCached (contracts/yieldspace/Pool.sol#264)
	- fyTokenIn = (_realFYTokenCached * tokensMinted) / supply (contracts/yieldspace/Pool.sol#265)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",231-298
divide-before-multiply,Medium,"Pool._mintInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#231-298) performs a multiplication on the result of a division:
	- tokensMinted = (supply * (fyTokenToBuy + fyTokenIn)) / (_realFYTokenCached - fyTokenToBuy) (contracts/yieldspace/Pool.sol#269)
	- baseIn = baseToSell + ((_baseCached + baseToSell) * tokensMinted) / supply (contracts/yieldspace/Pool.sol#270)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",231-298
divide-before-multiply,Medium,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#622-663) performs a multiplication on the result of a division:
	- result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (contracts/yieldspace/Math64x64.sol#640)
	- hi = result * (y >> 128) (contracts/yieldspace/Math64x64.sol#643)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",622-663
divide-before-multiply,Medium,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#622-663) performs a multiplication on the result of a division:
	- result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (contracts/yieldspace/Math64x64.sol#640)
	- lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (contracts/yieldspace/Math64x64.sol#644)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",622-663
erc20-interface,Medium,"DaiAbstract (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#5-28) has incorrect ERC20 function interface:DaiAbstract.transfer(address,uint256) (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#19)
",node_modules/dss-interfaces/src/dss/DaiAbstract.sol,5-28
reentrancy-no-eth,Medium,"Reentrancy in Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#57-86):
	External calls:
	- ladle.settle(vaultId,msg.sender,ink.u128(),art) (contracts/Witch.sol#79)
	- cauldron.give(vaultId,vaultOwners[vaultId]) (contracts/Witch.sol#81)
	State variables written after the call(s):
	- delete vaultOwners[vaultId] (contracts/Witch.sol#82)
	Witch.vaultOwners (contracts/Witch.sol#29) can be used in cross function reentrancies:
	- Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#57-86)
	- Witch.grab(bytes12) (contracts/Witch.sol#50-54)
	- Witch.vaultOwners (contracts/Witch.sol#29)
","bytes12,uint128,uint128) (contracts/Witch.sol",57-86
reentrancy-no-eth,Medium,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#268-295):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#290)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	State variables written after the call(s):
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#428)
	Cauldron.ratesAtMaturity (contracts/Cauldron.sol#62) can be used in cross function reentrancies:
	- Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#445-458)
	- Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430)
	- Cauldron.mature(bytes6) (contracts/Cauldron.sol#413-420)
	- Cauldron.ratesAtMaturity (contracts/Cauldron.sol#62)
","bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol",268-295
reentrancy-no-eth,Medium,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#217-227):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#224)
	State variables written after the call(s):
	- _burn(address(receiver),amount) (contracts/FYToken.sol#225)
		- _balanceOf[src] = _balanceOf[src] - wad (contracts/utils/token/ERC20.sol#190)
	ERC20._balanceOf (contracts/utils/token/ERC20.sol#30) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (contracts/utils/token/ERC20.sol#187-196)
	- FYToken._burn(address,uint256) (contracts/FYToken.sol#165-178)
	- ERC20._mint(address,uint256) (contracts/utils/token/ERC20.sol#167-173)
	- ERC20._transfer(address,address,uint256) (contracts/utils/token/ERC20.sol#115-123)
	- ERC20.balanceOf(address) (contracts/utils/token/ERC20.sol#55-57)
	- _burn(address(receiver),amount) (contracts/FYToken.sol#225)
		- _totalSupply = _totalSupply - wad (contracts/utils/token/ERC20.sol#191)
	ERC20._totalSupply (contracts/utils/token/ERC20.sol#29) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (contracts/utils/token/ERC20.sol#187-196)
	- ERC20._mint(address,uint256) (contracts/utils/token/ERC20.sol#167-173)
	- FYToken.maxFlashLoan(address) (contracts/FYToken.sol#185-191)
	- ERC20.totalSupply() (contracts/utils/token/ERC20.sol#48-50)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",217-227
reentrancy-no-eth,Medium,"Reentrancy in Join.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/Join.sol#129-139):
	External calls:
	- _exit(address(receiver),_amount) (contracts/Join.sol#133)
		- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/TransferHelper.sol#22)
		- token.safeTransfer(user,amount) (contracts/Join.sol#79)
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,_amount,_fee,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/Join.sol#135)
	- _join(address(receiver),_amount + _fee) (contracts/Join.sol#137)
		- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (contracts/utils/token/TransferHelper.sol#38)
		- token.safeTransferFrom(user,address(this),amount - available) (contracts/Join.sol#59)
	State variables written after the call(s):
	- _join(address(receiver),_amount + _fee) (contracts/Join.sol#137)
		- storedBalance = _storedBalance + amount (contracts/Join.sol#58)
	Join.storedBalance (contracts/Join.sol#25) can be used in cross function reentrancies:
	- Join._exit(address,uint128) (contracts/Join.sol#73-81)
	- Join._join(address,uint128) (contracts/Join.sol#51-61)
	- Join.maxFlashLoan(address) (contracts/Join.sol#97-99)
	- Join.storedBalance (contracts/Join.sol#25)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/Join.sol",129-139
reentrancy-no-eth,Medium,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#357)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	State variables written after the call(s):
	- auctions[vaultId] = now_ (contracts/Cauldron.sol#359)
	Cauldron.auctions (contracts/Cauldron.sol#68) can be used in cross function reentrancies:
	- Cauldron.auctions (contracts/Cauldron.sol#68)
	- Cauldron.destroy(bytes12) (contracts/Cauldron.sol#193-202)
	- Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363)
	- _give(vaultId,receiver) (contracts/Cauldron.sol#360)
		- vaults[vaultId] = vault (contracts/Cauldron.sol#241)
	Cauldron.vaults (contracts/Cauldron.sol#66) can be used in cross function reentrancies:
	- Cauldron._give(bytes12,address) (contracts/Cauldron.sol#235-243)
	- Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#205-212)
	- Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#174-190)
	- Cauldron.destroy(bytes12) (contracts/Cauldron.sol#193-202)
	- Cauldron.tweak(bytes12,bytes6,bytes6) (contracts/Cauldron.sol#216-232)
	- Cauldron.vaultData(bytes12,bool) (contracts/Cauldron.sol#256-265)
	- Cauldron.vaults (contracts/Cauldron.sol#66)
","bytes12,address) (contracts/Cauldron.sol",349-363
uninitialized-local,Medium,"Ladle.batch(LadleStorage.Operation[],bytes[]).cachedId (contracts/Ladle.sol#125) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Ladle.batch(LadleStorage.Operation[],bytes[]).vault (contracts/Ladle.sol#126) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"CompoundMultiOracle._peek(bytes6,bytes6).rawPrice (contracts/oracles/compound/CompoundMultiOracle.sol#41) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"PoolRouter.batch(PoolDataTypes.Operation[],bytes[]).cache (contracts/yieldspace/PoolRouter.sol#45) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Pool._mintInternal(address,bool,uint256,uint256).baseToSell (contracts/yieldspace/Pool.sol#253) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"Ladle._stir(bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol#284-291) ignores return value by cauldron.stir(from,to,ink,art) (contracts/Ladle.sol#290)
","bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol",284-291
unused-return,Medium,"FYToken._accrual() (contracts/FYToken.sol#118-129) ignores return value by (chi,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#125)
",) (contracts/FYToken.sol,118-129
unused-return,Medium,"FlashBorrower.flashBorrow(address,uint256,FlashBorrower.Action) (contracts/mocks/FlashBorrower.sol#45-50) ignores return value by lender.flashLoan(this,token,amount,data) (contracts/mocks/FlashBorrower.sol#49)
","address,uint256,FlashBorrower.Action) (contracts/mocks/FlashBorrower.sol",45-50
unused-return,Medium,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#57-86) ignores return value by cauldron.give(vaultId,vaultOwners[vaultId]) (contracts/Witch.sol#81)
","bytes12,uint128,uint128) (contracts/Witch.sol",57-86
unused-return,Medium,"Ladle.settle(bytes12,address,uint128,uint128) (contracts/Ladle.sol#474-491) ignores return value by cauldron.slurp(vaultId,ink,art) (contracts/Ladle.sol#481)
","bytes12,address,uint128,uint128) (contracts/Ladle.sol",474-491
unused-return,Medium,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) ignores return value by pool.retrieveFYToken(address(fyToken)) (contracts/Ladle.sol#434)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
unused-return,Medium,"FlashBorrower.flashBorrow(address,uint256,FlashBorrower.Action) (contracts/mocks/FlashBorrower.sol#45-50) ignores return value by IERC20(token).approve(address(lender),allowance + amount + lender.flashFee(token,amount)) (contracts/mocks/FlashBorrower.sol#48)
","address,uint256,FlashBorrower.Action) (contracts/mocks/FlashBorrower.sol",45-50
unused-return,Medium,"FYToken.redeem(address,uint256) (contracts/FYToken.sol#132-143) ignores return value by join.exit(to,redeemed.u128()) (contracts/FYToken.sol#139)
","address,uint256) (contracts/FYToken.sol",132-143
unused-return,Medium,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) ignores return value by baseJoin.join(msg.sender,amt) (contracts/Ladle.sol#364)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
unused-return,Medium,"ChainlinkMultiOracle._peek(bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#64-79) ignores return value by (roundId,rawPrice,None,updateTime,answeredInRound) = AggregatorV3Interface(source.source).latestRoundData() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#70)
","bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",64-79
unused-return,Medium,"Ladle._serve(bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol#326-335) ignores return value by pool.buyBase(to,base,max) (contracts/Ladle.sol#334)
","bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol",326-335
unused-return,Medium,"Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430) ignores return value by (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",423-430
unused-return,Medium,"Wand.addSeries(bytes6,bytes6,uint32,bytes6[],string,string) (contracts/Wand.sol#84-139) ignores return value by poolFactory.createPool(base,address(fyToken)) (contracts/Wand.sol#130)
","bytes6,bytes6,uint32,bytes6[],string,string) (contracts/Wand.sol",84-139
unused-return,Medium,"Ladle._repayVault(bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol#396-407) ignores return value by pool.retrieveBase(msg.sender) (contracts/Ladle.sol#406)
","bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol",396-407
unused-return,Medium,"Ladle.settle(bytes12,address,uint128,uint128) (contracts/Ladle.sol#474-491) ignores return value by ilkJoin.exit(user,ink) (contracts/Ladle.sol#485)
","bytes12,address,uint128,uint128) (contracts/Ladle.sol",474-491
unused-return,Medium,"Ladle.settle(bytes12,address,uint128,uint128) (contracts/Ladle.sol#474-491) ignores return value by baseJoin.join(user,art) (contracts/Ladle.sol#489)
","bytes12,address,uint128,uint128) (contracts/Ladle.sol",474-491
unused-return,Medium,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) ignores return value by ilkJoin.exit(to,uint128(- ink)) (contracts/Ladle.sol#359)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
unused-return,Medium,"FYToken._mature() (contracts/FYToken.sol#98-105) ignores return value by (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#102)
",) (contracts/FYToken.sol,98-105
unused-return,Medium,"Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#445-458) ignores return value by (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",445-458
unused-return,Medium,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479) ignores return value by (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",461-479
unused-return,Medium,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) ignores return value by baseJoin.join(address(baseJoin),amt) (contracts/Ladle.sol#432)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
unused-return,Medium,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) ignores return value by ilkJoin.join(vault.owner,uint128(ink)) (contracts/Ladle.sol#358)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
write-after-write,Medium,"OracleMock.updated (contracts/mocks/oracles/OracleMock.sol#12) is written in both
	updated = block.timestamp (contracts/mocks/oracles/OracleMock.sol#25)
	(spot * amount / 1e18,updated = block.timestamp) (contracts/mocks/oracles/OracleMock.sol#26)
",N/A,N/A
write-after-write,Medium,"Ladle.batch(LadleStorage.Operation[],bytes[]).cachedId (contracts/Ladle.sol#125) is written in both
	(cachedId,vault) = (vaultId_scope_46,getOwnedVault(vaultId_scope_46)) (contracts/Ladle.sol#234)
	cachedId = bytes12(0) (contracts/Ladle.sol#237)
",N/A,N/A
write-after-write,Medium,"JoinFactory._nextAsset (contracts/JoinFactory.sol#14) is written in both
	_nextAsset = asset (contracts/JoinFactory.sol#65)
	_nextAsset = address(0) (contracts/JoinFactory.sol#67)
",N/A,N/A
write-after-write,Medium,"PoolFactory._nextFYToken (contracts/yieldspace/PoolFactory.sol#15) is written in both
	_nextFYToken = fyToken (contracts/yieldspace/PoolFactory.sol#70)
	_nextFYToken = address(0) (contracts/yieldspace/PoolFactory.sol#73)
",N/A,N/A
write-after-write,Medium,"Ladle.batch(LadleStorage.Operation[],bytes[]).cachedId (contracts/Ladle.sol#125) is written in both
	(cachedId,vault) = (vaultId_scope_44,getOwnedVault(vaultId_scope_44)) (contracts/Ladle.sol#227)
	cachedId = bytes12(0) (contracts/Ladle.sol#230)
",N/A,N/A
write-after-write,Medium,"PoolFactory._nextBase (contracts/yieldspace/PoolFactory.sol#14) is written in both
	_nextBase = base (contracts/yieldspace/PoolFactory.sol#69)
	_nextBase = address(0) (contracts/yieldspace/PoolFactory.sol#72)
",N/A,N/A
shadowing-local,Low,"Ladle.constructor(ICauldron,IWETH9).cauldron (contracts/Ladle.sol#31) shadows:
	- LadleStorage.cauldron (contracts/LadleStorage.sol#36) (state variable)
",N/A,N/A
shadowing-local,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string).name (contracts/FYToken.sol#44) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"RestrictedERC20Mock.constructor(string,string).name (contracts/mocks/RestrictedERC20Mock.sol#9) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"ERC20Mock.constructor(string,string).name (contracts/mocks/ERC20Mock.sol#9) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"ERC20Mock.constructor(string,string).symbol (contracts/mocks/ERC20Mock.sol#10) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
shadowing-local,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string).symbol (contracts/FYToken.sol#45) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
shadowing-local,Low,"RestrictedERC20Mock.constructor(string,string).symbol (contracts/mocks/RestrictedERC20Mock.sol#10) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
missing-zero-check,Low,"JoinFactory.createJoin(address).asset (contracts/JoinFactory.sol#64) lacks a zero-check on :
		- _nextAsset = asset (contracts/JoinFactory.sol#65)
",N/A,N/A
missing-zero-check,Low,"PoolFactory.createPool(address,address).fyToken (contracts/yieldspace/PoolFactory.sol#68) lacks a zero-check on :
		- _nextFYToken = fyToken (contracts/yieldspace/PoolFactory.sol#70)
",N/A,N/A
missing-zero-check,Low,"FlashBorrower.onFlashLoan(address,address,uint256,uint256,bytes).token (contracts/mocks/FlashBorrower.sol#25) lacks a zero-check on :
		- flashToken = token (contracts/mocks/FlashBorrower.sol#29)
",N/A,N/A
missing-zero-check,Low,"UniswapV3PoolMock.constructor(address,address,address,uint24).token1_ (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#16) lacks a zero-check on :
		- (factory,token0,token1,fee) = (factory_,token0_,token1_,fee_) (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#17)
",N/A,N/A
missing-zero-check,Low,"Ownable.transferOwnership(address).newOwner (contracts/utils/access/Ownable.sol#23) lacks a zero-check on :
		- owner = newOwner (contracts/utils/access/Ownable.sol#25)
",N/A,N/A
missing-zero-check,Low,"UniswapV3PoolMock.constructor(address,address,address,uint24).factory_ (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#16) lacks a zero-check on :
		- (factory,token0,token1,fee) = (factory_,token0_,token1_,fee_) (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#17)
",N/A,N/A
missing-zero-check,Low,"FlashBorrower.onFlashLoan(address,address,uint256,uint256,bytes).initiator (contracts/mocks/FlashBorrower.sol#25) lacks a zero-check on :
		- flashInitiator = initiator (contracts/mocks/FlashBorrower.sol#28)
",N/A,N/A
missing-zero-check,Low,"UniswapV3PoolMock.constructor(address,address,address,uint24).token0_ (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#16) lacks a zero-check on :
		- (factory,token0,token1,fee) = (factory_,token0_,token1_,fee_) (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#17)
",N/A,N/A
missing-zero-check,Low,"PoolFactory.createPool(address,address).base (contracts/yieldspace/PoolFactory.sol#68) lacks a zero-check on :
		- _nextBase = base (contracts/yieldspace/PoolFactory.sol#69)
",N/A,N/A
calls-loop,Low,"Ladle._transferToPool(IPool,bool,uint128) (contracts/Ladle.sol#551-556) has external calls inside a loop: token = pool.base() (contracts/Ladle.sol#554)
","IPool,bool,uint128) (contracts/Ladle.sol",551-556
calls-loop,Low,"PoolRouter._forwardPermit(PoolRouter.PoolAddresses,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/yieldspace/PoolRouter.sol#128-133) has external calls inside a loop: IERC2612(token).permit(msg.sender,spender,amount,deadline,v,r,s) (contracts/yieldspace/PoolRouter.sol#132)
","PoolRouter.PoolAddresses,address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/yieldspace/PoolRouter.sol",128-133
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: fyToken.burn(address(fyToken),(amt * loan) - newDebt) (contracts/Ladle.sol#435)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: newDebt = pool.buyBase(address(baseJoin),amt,max) (contracts/Ladle.sol#431)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"UniswapV3Oracle.setSource(bytes6,bytes6,address) (contracts/oracles/uniswap/UniswapV3Oracle.sol#49-60) has external calls inside a loop: sourcesData[source] = SourceData(IUniswapV3PoolImmutables(source).factory(),IUniswapV3PoolImmutables(source).token0(),IUniswapV3PoolImmutables(source).token1(),IUniswapV3PoolImmutables(source).fee()) (contracts/oracles/uniswap/UniswapV3Oracle.sol#52-57)
","bytes6,bytes6,address) (contracts/oracles/uniswap/UniswapV3Oracle.sol",49-60
calls-loop,Low,"Ladle._repayLadle(bytes12,DataTypes.Vault) (contracts/Ladle.sol#446-459) has external calls inside a loop: balances = cauldron.pour(vaultId,0,- (amount.u128().i128())) (contracts/Ladle.sol#457)
","bytes12,DataTypes.Vault) (contracts/Ladle.sol",446-459
calls-loop,Low,"Ladle._redeem(IFYToken,address,uint256) (contracts/Ladle.sol#578-583) has external calls inside a loop: fyToken.redeem(to,wad) (contracts/Ladle.sol#582)
","IFYToken,address,uint256) (contracts/Ladle.sol",578-583
calls-loop,Low,"Ladle._stir(bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol#284-291) has external calls inside a loop: cauldron.stir(from,to,ink,art) (contracts/Ladle.sol#290)
","bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol",284-291
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: balances = cauldron.balances(vaultId) (contracts/Ladle.sol#416)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"Ladle._exitEther(address) (contracts/Ladle.sol#539-546) has external calls inside a loop: ethTransferred = weth.balanceOf(address(this)) (contracts/Ladle.sol#543)
",address) (contracts/Ladle.sol,539-546
calls-loop,Low,"Ladle._build(bytes12,bytes6,bytes6) (contracts/Ladle.sol#250-255) has external calls inside a loop: cauldron.build(msg.sender,vaultId,seriesId,ilkId) (contracts/Ladle.sol#254)
","bytes12,bytes6,bytes6) (contracts/Ladle.sol",250-255
calls-loop,Low,"PoolRouter.findPool(address,address) (contracts/yieldspace/PoolRouter.sol#88-93) has external calls inside a loop: pool = factory.getPool(base,fyToken) (contracts/yieldspace/PoolRouter.sol#91)
","address,address) (contracts/yieldspace/PoolRouter.sol",88-93
calls-loop,Low,"Ladle._repayLadle(bytes12,DataTypes.Vault) (contracts/Ladle.sol#446-459) has external calls inside a loop: amount = series.fyToken.balanceOf(address(this)) (contracts/Ladle.sol#453)
","bytes12,DataTypes.Vault) (contracts/Ladle.sol",446-459
calls-loop,Low,"Ladle._repay(bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol#382-391) has external calls inside a loop: art = pool.sellBase(address(series.fyToken),min) (contracts/Ladle.sol#389)
","bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol",382-391
calls-loop,Low,"Ladle._destroy(bytes12) (contracts/Ladle.sol#275-279) has external calls inside a loop: cauldron.destroy(vaultId) (contracts/Ladle.sol#278)
",bytes12) (contracts/Ladle.sol,275-279
calls-loop,Low,"Ladle._serve(bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol#326-335) has external calls inside a loop: pool.buyBase(to,base,max) (contracts/Ladle.sol#334)
","bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol",326-335
calls-loop,Low,"ChainlinkMultiOracle.setSource(bytes6,bytes6,address) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#29-44) has external calls inside a loop: decimals = AggregatorV3Interface(source).decimals() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#30)
","bytes6,bytes6,address) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",29-44
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: pool.retrieveFYToken(address(fyToken)) (contracts/Ladle.sol#434)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"Ladle._serve(bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol#326-335) has external calls inside a loop: art = pool.buyBasePreview(base) (contracts/Ladle.sol#332)
","bytes12,DataTypes.Vault,address,uint128,uint128,uint128) (contracts/Ladle.sol",326-335
calls-loop,Low,"Ladle._debtInBase(bytes6,DataTypes.Series,uint128) (contracts/Ladle.sol#368-377) has external calls inside a loop: amt = uint256(art).wmul(cauldron.accrual(seriesId)).u128() (contracts/Ladle.sol#373)
","bytes6,DataTypes.Series,uint128) (contracts/Ladle.sol",368-377
calls-loop,Low,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) has external calls inside a loop: baseJoin.join(msg.sender,amt) (contracts/Ladle.sol#364)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
calls-loop,Low,"PoolRouter._route(PoolRouter.PoolAddresses,bytes) (contracts/yieldspace/PoolRouter.sol#117-123) has external calls inside a loop: (success,result) = addresses.pool.call(data) (contracts/yieldspace/PoolRouter.sol#121)
","PoolRouter.PoolAddresses,bytes) (contracts/yieldspace/PoolRouter.sol",117-123
calls-loop,Low,"PoolRouter._exitEther(address) (contracts/yieldspace/PoolRouter.sol#162-170) has external calls inside a loop: ethTransferred = weth.balanceOf(address(this)) (contracts/yieldspace/PoolRouter.sol#166)
",address) (contracts/yieldspace/PoolRouter.sol,162-170
calls-loop,Low,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) has external calls inside a loop: ilkJoin.join(vault.owner,uint128(ink)) (contracts/Ladle.sol#358)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
calls-loop,Low,"Ladle._repayVault(bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol#396-407) has external calls inside a loop: balances = cauldron.balances(vaultId) (contracts/Ladle.sol#403)
","bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol",396-407
calls-loop,Low,"Ladle._forwardDaiPermit(bytes6,bool,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/Ladle.sol#512-517) has external calls inside a loop: token.permit(msg.sender,spender,nonce,deadline,allowed,v,r,s) (contracts/Ladle.sol#516)
","bytes6,bool,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/Ladle.sol",512-517
calls-loop,Low,"Ladle._redeem(IFYToken,address,uint256) (contracts/Ladle.sol#578-583) has external calls inside a loop: fyToken.redeem(to,fyToken.balanceOf(address(this))) (contracts/Ladle.sol#582)
","IFYToken,address,uint256) (contracts/Ladle.sol",578-583
calls-loop,Low,"Ladle._stir(bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol#284-291) has external calls inside a loop: require(bool,string)(cauldron.vaults(to).owner == msg.sender,Only destination vault owner) (contracts/Ladle.sol#289)
","bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol",284-291
calls-loop,Low,"Ladle.findToken(bytes6,bool) (contracts/Ladle.sol#496-501) has external calls inside a loop: token = cauldron.assets(id) (contracts/Ladle.sol#499)
","bytes6,bool) (contracts/Ladle.sol",496-501
calls-loop,Low,"Ladle._give(bytes12,address) (contracts/Ladle.sol#267-272) has external calls inside a loop: cauldron.give(vaultId,receiver) (contracts/Ladle.sol#271)
","bytes12,address) (contracts/Ladle.sol",267-272
calls-loop,Low,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) has external calls inside a loop: ilkJoin.exit(to,uint128(- ink)) (contracts/Ladle.sol#359)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: fyToken.mint(address(pool),amt * loan) (contracts/Ladle.sol#428)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"Ladle._repayLadle(bytes12,DataTypes.Vault) (contracts/Ladle.sol#446-459) has external calls inside a loop: series.fyToken.burn(address(this),amount) (contracts/Ladle.sol#458)
","bytes12,DataTypes.Vault) (contracts/Ladle.sol",446-459
calls-loop,Low,"Ladle._roll(bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol#410-441) has external calls inside a loop: baseJoin.join(address(baseJoin),amt) (contracts/Ladle.sol#432)
","bytes12,DataTypes.Vault,bytes6,uint8,uint128) (contracts/Ladle.sol",410-441
calls-loop,Low,"Ladle._transferToPool(IPool,bool,uint128) (contracts/Ladle.sol#551-556) has external calls inside a loop: token = pool.fyToken() (contracts/Ladle.sol#554)
","IPool,bool,uint128) (contracts/Ladle.sol",551-556
calls-loop,Low,"Ladle._repayVault(bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol#396-407) has external calls inside a loop: base = pool.buyFYToken(address(series.fyToken),balances.art,max) (contracts/Ladle.sol#404)
","bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol",396-407
calls-loop,Low,"TransferHelper.safeTransferETH(address,uint256) (contracts/utils/token/TransferHelper.sol#46-49) has external calls inside a loop: (success,data) = to.call{value: value}(new bytes(0)) (contracts/utils/token/TransferHelper.sol#47)
","address,uint256) (contracts/utils/token/TransferHelper.sol",46-49
calls-loop,Low,"PoolRouter._forwardDaiPermit(PoolRouter.PoolAddresses,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/yieldspace/PoolRouter.sol#136-141) has external calls inside a loop: DaiAbstract(addresses.base).permit(msg.sender,spender,nonce,deadline,allowed,v,r,s) (contracts/yieldspace/PoolRouter.sol#140)
","PoolRouter.PoolAddresses,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/yieldspace/PoolRouter.sol",136-141
calls-loop,Low,"Ladle._repayVault(bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol#396-407) has external calls inside a loop: pool.retrieveBase(msg.sender) (contracts/Ladle.sol#406)
","bytes12,DataTypes.Vault,address,int128,uint128) (contracts/Ladle.sol",396-407
calls-loop,Low,"Ladle.getOwnedVault(bytes12) (contracts/Ladle.sol#37-42) has external calls inside a loop: vault = cauldron.vaults(vaultId) (contracts/Ladle.sol#40)
",bytes12) (contracts/Ladle.sol,37-42
calls-loop,Low,"TransferHelper.safeTransfer(IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol#17-24) has external calls inside a loop: (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/TransferHelper.sol#22)
","IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol",17-24
calls-loop,Low,"Ladle._moduleCall(address,bytes) (contracts/Ladle.sol#588-595) has external calls inside a loop: (success,result) = module.delegatecall(moduleCall) (contracts/Ladle.sol#593)
","address,bytes) (contracts/Ladle.sol",588-595
calls-loop,Low,"Ladle._repayLadle(bytes12,DataTypes.Vault) (contracts/Ladle.sol#446-459) has external calls inside a loop: balances = cauldron.balances(vaultId) (contracts/Ladle.sol#451)
","bytes12,DataTypes.Vault) (contracts/Ladle.sol",446-459
calls-loop,Low,"Ladle._tweak(bytes12,bytes6,bytes6) (contracts/Ladle.sol#258-264) has external calls inside a loop: cauldron.tweak(vaultId,seriesId,ilkId) (contracts/Ladle.sol#263)
","bytes12,bytes6,bytes6) (contracts/Ladle.sol",258-264
calls-loop,Low,"Ladle._retrieve(bytes6,bool,address) (contracts/Ladle.sol#462-469) has external calls inside a loop: amount = token.balanceOf(address(this)) (contracts/Ladle.sol#467)
","bytes6,bool,address) (contracts/Ladle.sol",462-469
calls-loop,Low,"PoolRouter._joinEther(address) (contracts/yieldspace/PoolRouter.sol#151-159) has external calls inside a loop: weth.deposit{value: ethTransferred}() (contracts/yieldspace/PoolRouter.sol#157)
",address) (contracts/yieldspace/PoolRouter.sol,151-159
calls-loop,Low,"Ladle._route(IPool,bytes) (contracts/Ladle.sol#559-565) has external calls inside a loop: (success,result) = address(pool).call(data) (contracts/Ladle.sol#563)
","IPool,bytes) (contracts/Ladle.sol",559-565
calls-loop,Low,"Ladle._stir(bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol#284-291) has external calls inside a loop: require(bool,string)(cauldron.vaults(from).owner == msg.sender,Only origin vault owner) (contracts/Ladle.sol#288)
","bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol",284-291
calls-loop,Low,"Ladle._close(bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol#342-365) has external calls inside a loop: balances = cauldron.pour(vaultId,ink,art) (contracts/Ladle.sol#353)
","bytes12,DataTypes.Vault,address,int128,int128) (contracts/Ladle.sol",342-365
calls-loop,Low,"TransferHelper.safeTransferFrom(IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol#32-40) has external calls inside a loop: (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (contracts/utils/token/TransferHelper.sol#38)
","IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol",32-40
calls-loop,Low,"Ladle._joinEther(bytes6) (contracts/Ladle.sol#527-535) has external calls inside a loop: weth.deposit{value: ethTransferred}() (contracts/Ladle.sol#533)
",bytes6) (contracts/Ladle.sol,527-535
calls-loop,Low,"Ladle._forwardPermit(bytes6,bool,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/Ladle.sol#504-509) has external calls inside a loop: token.permit(msg.sender,spender,amount,deadline,v,r,s) (contracts/Ladle.sol#508)
","bytes6,bool,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/Ladle.sol",504-509
calls-loop,Low,"Ladle._exitEther(address) (contracts/Ladle.sol#539-546) has external calls inside a loop: weth.withdraw(ethTransferred) (contracts/Ladle.sol#544)
",address) (contracts/Ladle.sol,539-546
calls-loop,Low,"PoolRouter._exitEther(address) (contracts/yieldspace/PoolRouter.sol#162-170) has external calls inside a loop: weth.withdraw(ethTransferred) (contracts/yieldspace/PoolRouter.sol#168)
",address) (contracts/yieldspace/PoolRouter.sol,162-170
calls-loop,Low,"Ladle.getSeries(bytes6) (contracts/Ladle.sol#45-50) has external calls inside a loop: series = cauldron.series(seriesId) (contracts/Ladle.sol#48)
",bytes6) (contracts/Ladle.sol,45-50
reentrancy-benign,Low,"Reentrancy in FYToken._mature() (contracts/FYToken.sol#98-105):
	External calls:
	- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#102)
	State variables written after the call(s):
	- chiAtMaturity = _chiAtMaturity (contracts/FYToken.sol#103)
",) (contracts/FYToken.sol,98-105
reentrancy-benign,Low,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#217-227):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#224)
	State variables written after the call(s):
	- _burn(address(receiver),amount) (contracts/FYToken.sol#225)
		- _allowance[owner][spender] = wad (contracts/utils/token/ERC20.sol#131)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",217-227
reentrancy-benign,Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
	State variables written after the call(s):
	- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#428)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",423-430
reentrancy-events,Low,"Reentrancy in Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479):
	External calls:
	- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
	- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#474)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
		- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#474)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",461-479
reentrancy-events,Low,"Reentrancy in Pool.buyBase(address,uint128,uint128) (contracts/yieldspace/Pool.sol#469-506):
	External calls:
	- base.safeTransfer(to,tokenOut) (contracts/yieldspace/Pool.sol#502)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,tokenOut.i128(),- (fyTokenIn.i128())) (contracts/yieldspace/Pool.sol#504)
","address,uint128,uint128) (contracts/yieldspace/Pool.sol",469-506
reentrancy-events,Low,"Reentrancy in Pool.buyFYToken(address,uint128,uint128) (contracts/yieldspace/Pool.sol#622-659):
	External calls:
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#655)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,- (baseIn.i128()),fyTokenOut.i128()) (contracts/yieldspace/Pool.sol#657)
","address,uint128,uint128) (contracts/yieldspace/Pool.sol",622-659
reentrancy-events,Low,"Reentrancy in FYToken._mature() (contracts/FYToken.sol#98-105):
	External calls:
	- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#102)
	Event emitted after the call(s):
	- SeriesMatured(_chiAtMaturity) (contracts/FYToken.sol#104)
",) (contracts/FYToken.sol,98-105
reentrancy-events,Low,"Reentrancy in Pool.sellFYToken(address,uint128) (contracts/yieldspace/Pool.sol#546-581):
	External calls:
	- base.safeTransfer(to,baseOut) (contracts/yieldspace/Pool.sol#577)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,baseOut.i128(),- (fyTokenIn.i128())) (contracts/yieldspace/Pool.sol#579)
","address,uint128) (contracts/yieldspace/Pool.sol",546-581
reentrancy-events,Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#423-430):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",423-430
reentrancy-events,Low,"Reentrancy in Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#57-86):
	External calls:
	- ladle.settle(vaultId,msg.sender,ink.u128(),art) (contracts/Witch.sol#79)
	- cauldron.give(vaultId,vaultOwners[vaultId]) (contracts/Witch.sol#81)
	Event emitted after the call(s):
	- Bought(vaultId,msg.sender,ink,art) (contracts/Witch.sol#85)
","bytes12,uint128,uint128) (contracts/Witch.sol",57-86
reentrancy-events,Low,"Reentrancy in FYToken.redeem(address,uint256) (contracts/FYToken.sol#132-143):
	External calls:
	- redeemed = amount.wmul(_accrual()) (contracts/FYToken.sol#138)
		- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#102)
		- (chi,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#125)
	- join.exit(to,redeemed.u128()) (contracts/FYToken.sol#139)
	Event emitted after the call(s):
	- Redeemed(msg.sender,to,amount,redeemed) (contracts/FYToken.sol#141)
","address,uint256) (contracts/FYToken.sol",132-143
reentrancy-events,Low,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#268-295):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#290)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#429)
		- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#291)
	- VaultStirred(from,to,ink,art) (contracts/Cauldron.sol#293)
","bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol",268-295
reentrancy-events,Low,"Reentrancy in JoinFactory.createJoin(address) (contracts/JoinFactory.sol#64-75):
	External calls:
	- join.grantRole(join.ROOT(),msg.sender) (contracts/JoinFactory.sol#69)
	- join.renounceRole(join.ROOT(),address(this)) (contracts/JoinFactory.sol#70)
	Event emitted after the call(s):
	- JoinCreated(asset,address(join)) (contracts/JoinFactory.sol#72)
",address) (contracts/JoinFactory.sol,64-75
reentrancy-events,Low,"Reentrancy in Pool.sellBase(address,uint128) (contracts/yieldspace/Pool.sol#386-421):
	External calls:
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#417)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,- (baseIn.i128()),fyTokenOut.i128()) (contracts/yieldspace/Pool.sol#419)
","address,uint128) (contracts/yieldspace/Pool.sol",386-421
reentrancy-events,Low,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#217-227):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#224)
	Event emitted after the call(s):
	- Approval(owner,spender,wad) (contracts/utils/token/ERC20.sol#132)
		- _burn(address(receiver),amount) (contracts/FYToken.sol#225)
	- Transfer(src,address(0),wad) (contracts/utils/token/ERC20.sol#192)
		- _burn(address(receiver),amount) (contracts/FYToken.sol#225)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",217-227
reentrancy-events,Low,"Reentrancy in Cauldron.roll(bytes12,bytes6,int128) (contracts/Cauldron.sol#381-401):
	External calls:
	- require(bool,string)(_level(vault_,balances_,newSeries_) >= 0,Undercollateralized) (contracts/Cauldron.sol#397)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- VaultRolled(vaultId,newSeriesId,balances_.art) (contracts/Cauldron.sol#398)
","bytes12,bytes6,int128) (contracts/Cauldron.sol",381-401
reentrancy-events,Low,"Reentrancy in Pool._burnInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#329-377):
	External calls:
	- base.safeTransfer(to,tokenOut) (contracts/yieldspace/Pool.sol#372)
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#373)
	Event emitted after the call(s):
	- Liquidity(maturity,msg.sender,to,tokenOut.i256(),fyTokenOut.i256(),- (tokensBurned.i256())) (contracts/yieldspace/Pool.sol#375)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",329-377
reentrancy-events,Low,"Reentrancy in PoolFactory.createPool(address,address) (contracts/yieldspace/PoolFactory.sol#68-80):
	External calls:
	- pool.transferOwnership(msg.sender) (contracts/yieldspace/PoolFactory.sol#75)
	Event emitted after the call(s):
	- PoolCreated(base,fyToken,address(pool)) (contracts/yieldspace/PoolFactory.sol#77)
","address,address) (contracts/yieldspace/PoolFactory.sol",68-80
reentrancy-events,Low,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#357)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#427)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#471)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#454)
	Event emitted after the call(s):
	- VaultGiven(vaultId,receiver) (contracts/Cauldron.sol#242)
		- _give(vaultId,receiver) (contracts/Cauldron.sol#360)
	- VaultLocked(vaultId,now_) (contracts/Cauldron.sol#362)
","bytes12,address) (contracts/Cauldron.sol",349-363
timestamp,Low,"Cauldron.accrual(bytes6) (contracts/Cauldron.sol#434-441) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(uint32(block.timestamp) >= series_.maturity,Only after maturity) (contracts/Cauldron.sol#439)
",bytes6) (contracts/Cauldron.sol,434-441
timestamp,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string) (contracts/FYToken.sol#39-60) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(maturity_ > now_ && maturity_ < now_ + MAX_TIME_TO_MATURITY && maturity_ < type()(uint32).max,Invalid maturity) (contracts/FYToken.sol#48-53)
","bytes6,IOracle,IJoin,uint256,string,string) (contracts/FYToken.sol",39-60
timestamp,Low,"Cauldron.mature(bytes6) (contracts/Cauldron.sol#413-420) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(uint32(block.timestamp) >= series_.maturity,Only after maturity) (contracts/Cauldron.sol#417)
",bytes6) (contracts/Cauldron.sol,413-420
timestamp,Low,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#461-479) uses timestamp for comparisons
	Dangerous comparisons:
	- uint32(block.timestamp) >= series_.maturity (contracts/Cauldron.sol#473)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",461-479
timestamp,Low,"Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#349-363) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(auctions[vaultId] + auctionInterval <= now_,Vault under auction) (contracts/Cauldron.sol#354)
","bytes12,address) (contracts/Cauldron.sol",349-363
timestamp,Low,"ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol#59-91) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deadline >= block.timestamp,ERC20Permit: expired deadline) (contracts/utils/token/ERC20Permit.sol#60)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol",59-91
timestamp,Low,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#57-86) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ink >= min,Not enough bought) (contracts/Witch.sol#77)
	- auctionTime_ < elapsed (contracts/Witch.sol#71)
","bytes12,uint128,uint128) (contracts/Witch.sol",57-86
timestamp,Low,"DAIMock.permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/mocks/DAIMock.sol#36-58) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expiry == 0 || block.timestamp <= expiry,Dai/permit-expired) (contracts/mocks/DAIMock.sol#53)
","address,address,uint256,uint256,bool,uint8,bytes32,bytes32) (contracts/mocks/DAIMock.sol",36-58
assembly,Informational,"DAIMock.constructor() (contracts/mocks/DAIMock.sol#15-28) uses assembly
	- INLINE ASM (contracts/mocks/DAIMock.sol#17-19)
",) (contracts/mocks/DAIMock.sol,15-28
assembly,Informational,"PoolFactory.isContract(address) (contracts/yieldspace/PoolFactory.sol#18-27) uses assembly
	- INLINE ASM (contracts/yieldspace/PoolFactory.sol#25)
",address) (contracts/yieldspace/PoolFactory.sol,18-27
assembly,Informational,"ERC20Permit.DOMAIN_SEPARATOR() (contracts/utils/token/ERC20Permit.sol#44-48) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#46)
",) (contracts/utils/token/ERC20Permit.sol,44-48
assembly,Informational,"JoinFactory.isContract(address) (contracts/JoinFactory.sol#17-26) uses assembly
	- INLINE ASM (contracts/JoinFactory.sol#24)
",address) (contracts/JoinFactory.sol,17-26
assembly,Informational,"RevertMsgExtractor.getRevertMsg(bytes) (contracts/utils/RevertMsgExtractor.sol#10-22) uses assembly
	- INLINE ASM (contracts/utils/RevertMsgExtractor.sol#17-20)
",bytes) (contracts/utils/RevertMsgExtractor.sol,10-22
assembly,Informational,"ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol#59-91) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#63)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol",59-91
assembly,Informational,"ERC20Permit.constructor(string,string,uint8) (contracts/utils/token/ERC20Permit.sol#23-28) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#25)
","string,string,uint8) (contracts/utils/token/ERC20Permit.sol",23-28
boolean-equal,Informational,"ChainlinkMultiOracle._peek(bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#64-79) compares to a boolean constant:
	-source.inverse == true (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#74)
","bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",64-79
boolean-equal,Informational,"Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#205-212) compares to a boolean constant:
	-require(bool,string)(ilks[vault.seriesId][vault.ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#208)
","bytes12,DataTypes.Vault) (contracts/Cauldron.sol",205-212
boolean-equal,Informational,"Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#174-190) compares to a boolean constant:
	-require(bool,string)(ilks[seriesId][ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#181)
","address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol",174-190
pragma,Informational,"7 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (contracts/Cauldron.sol#2)
		-^0.8.0 (contracts/FYToken.sol#2)
		-^0.8.0 (contracts/Join.sol#2)
		-^0.8.0 (contracts/Ladle.sol#2)
		-^0.8.0 (contracts/LadleStorage.sol#2)
		-^0.8.0 (contracts/Wand.sol#2)
		-^0.8.0 (contracts/Witch.sol#2)
		-^0.8.0 (contracts/interfaces/external/IERC20.sol#3)
		-^0.8.0 (contracts/interfaces/external/IERC20Metadata.sol#4)
		-^0.8.0 (contracts/interfaces/external/IERC2612.sol#3)
		-^0.8.0 (contracts/interfaces/external/IWETH9.sol#4)
		-^0.8.0 (contracts/interfaces/vault/DataTypes.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ICauldron.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ICauldronGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IFYToken.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IJoin.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ILadle.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ILadleGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IMultiOracleGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IOracle.sol#2)
		-^0.8.0 (contracts/math/CastBytes32Bytes6.sol#2)
		-^0.8.0 (contracts/math/CastI128U128.sol#2)
		-^0.8.0 (contracts/math/CastU128I128.sol#2)
		-^0.8.0 (contracts/math/CastU256I256.sol#2)
		-^0.8.0 (contracts/math/CastU256U128.sol#2)
		-^0.8.0 (contracts/math/CastU256U32.sol#2)
		-^0.8.0 (contracts/math/WDiv.sol#2)
		-^0.8.0 (contracts/math/WDivUp.sol#2)
		-^0.8.0 (contracts/math/WMul.sol#2)
		-^0.8.0 (contracts/mocks/DAIMock.sol#2)
		-^0.8.0 (contracts/mocks/ERC20Mock.sol#2)
		-^0.8.0 (contracts/mocks/FlashBorrower.sol#2)
		-^0.8.0 (contracts/mocks/RestrictedERC20Mock.sol#2)
		-^0.8.0 (contracts/mocks/WETH9Mock.sol#4)
		-^0.8.0 (contracts/mocks/oracles/ISourceMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/OracleMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/chainlink/ChainlinkAggregatorV3Mock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/compound/CTokenChiMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/compound/CTokenRateMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3FactoryMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3OracleLibraryMock.sol#2)
		-^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#2)
		-^0.8.0 (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#2)
		-^0.8.0 (contracts/oracles/compound/CompoundMultiOracle.sol#2)
		-^0.8.0 (contracts/oracles/uniswap/UniswapV3Oracle.sol#2)
		-^0.8.0 (contracts/utils/access/AccessControl.sol#3)
		-^0.8.0 (contracts/utils/access/Ownable.sol#2)
		-^0.8.0 (contracts/utils/token/ERC20.sol#4)
		-^0.8.0 (contracts/utils/token/ERC20Permit.sol#3)
	- Version constraint >=0.8.0 is used by:
		->=0.8.0 (contracts/JoinFactory.sol#2)
		->=0.8.0 (contracts/interfaces/vault/IJoinFactory.sol#2)
		->=0.8.0 (contracts/interfaces/yieldspace/IPool.sol#2)
		->=0.8.0 (contracts/interfaces/yieldspace/IPoolFactory.sol#2)
		->=0.8.0 (contracts/interfaces/yieldspace/PoolDataTypes.sol#2)
		->=0.8.0 (contracts/mocks/TLMMock.sol#2)
		->=0.8.0 (contracts/mocks/USDCMock.sol#2)
		->=0.8.0 (contracts/yieldspace/Math64x64.sol#2)
		->=0.8.0 (contracts/yieldspace/Pool.sol#2)
		->=0.8.0 (contracts/yieldspace/PoolFactory.sol#2)
		->=0.8.0 (contracts/yieldspace/PoolRouter.sol#3)
		->=0.8.0 (contracts/yieldspace/YieldMath.sol#2)
	- Version constraint >=0.6.0 is used by:
		->=0.6.0 (contracts/oracles/chainlink/AggregatorV3Interface.sol#2)
		->=0.6.0 (contracts/utils/RevertMsgExtractor.sol#4)
		->=0.6.0 (contracts/utils/token/MinimalTransferHelper.sol#4)
		->=0.6.0 (contracts/utils/token/TransferHelper.sol#4)
	- Version constraint >=0.5.16 is used by:
		->=0.5.16 (contracts/oracles/compound/CTokenInterface.sol#3)
	- Version constraint >=0.5.0 is used by:
		->=0.5.0 (contracts/oracles/uniswap/IUniswapV3PoolImmutables.sol#2)
		->=0.5.0 (contracts/utils/AddressStringUtil.sol#3)
		->=0.5.0 (contracts/utils/token/SafeERC20Namer.sol#3)
	- Version constraint >=0.5.12 is used by:
		->=0.5.12 (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#2)
	- Version constraint >=0.6.0<0.9.0 is used by:
		->=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashBorrower.sol#2)
		->=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashLender.sol#2)
",N/A,N/A
cyclomatic-complexity,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) has a high cyclomatic complexity (16).
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
cyclomatic-complexity,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) has a high cyclomatic complexity (58).
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
cyclomatic-complexity,Informational,"Ladle.batch(LadleStorage.Operation[],bytes[]) (contracts/Ladle.sol#120-245) has a high cyclomatic complexity (34).
","LadleStorage.Operation[],bytes[]) (contracts/Ladle.sol",120-245
cyclomatic-complexity,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) has a high cyclomatic complexity (65).
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
cyclomatic-complexity,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) has a high cyclomatic complexity (65).
",int128) (contracts/yieldspace/Math64x64.sol,453-595
cyclomatic-complexity,Informational,"PoolRouter.batch(PoolDataTypes.Operation[],bytes[]) (contracts/yieldspace/PoolRouter.sol#40-85) has a high cyclomatic complexity (13).
","PoolDataTypes.Operation[],bytes[]) (contracts/yieldspace/PoolRouter.sol",40-85
solc-version,Informational,"Version constraint >=0.5.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- YulOptimizerRedundantAssignmentBreakContinue0.5.
It is used by:
	- >=0.5.12 (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- >=0.6.0 (contracts/oracles/chainlink/AggregatorV3Interface.sol#2)
	- >=0.6.0 (contracts/utils/RevertMsgExtractor.sol#4)
	- >=0.6.0 (contracts/utils/token/MinimalTransferHelper.sol#4)
	- >=0.6.0 (contracts/utils/token/TransferHelper.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- >=0.5.0 (contracts/oracles/uniswap/IUniswapV3PoolImmutables.sol#2)
	- >=0.5.0 (contracts/utils/AddressStringUtil.sol#3)
	- >=0.5.0 (contracts/utils/token/SafeERC20Namer.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.9.0 is too complex.
It is used by:
	- >=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashBorrower.sol#2)
	- >=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashLender.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden.
It is used by:
	- >=0.5.16 (contracts/oracles/compound/CTokenInterface.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- >=0.8.0 (contracts/JoinFactory.sol#2)
	- >=0.8.0 (contracts/interfaces/vault/IJoinFactory.sol#2)
	- >=0.8.0 (contracts/interfaces/yieldspace/IPool.sol#2)
	- >=0.8.0 (contracts/interfaces/yieldspace/IPoolFactory.sol#2)
	- >=0.8.0 (contracts/interfaces/yieldspace/PoolDataTypes.sol#2)
	- >=0.8.0 (contracts/mocks/TLMMock.sol#2)
	- >=0.8.0 (contracts/mocks/USDCMock.sol#2)
	- >=0.8.0 (contracts/yieldspace/Math64x64.sol#2)
	- >=0.8.0 (contracts/yieldspace/Pool.sol#2)
	- >=0.8.0 (contracts/yieldspace/PoolFactory.sol#2)
	- >=0.8.0 (contracts/yieldspace/PoolRouter.sol#3)
	- >=0.8.0 (contracts/yieldspace/YieldMath.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/Cauldron.sol#2)
	- ^0.8.0 (contracts/FYToken.sol#2)
	- ^0.8.0 (contracts/Join.sol#2)
	- ^0.8.0 (contracts/Ladle.sol#2)
	- ^0.8.0 (contracts/LadleStorage.sol#2)
	- ^0.8.0 (contracts/Wand.sol#2)
	- ^0.8.0 (contracts/Witch.sol#2)
	- ^0.8.0 (contracts/interfaces/external/IERC20.sol#3)
	- ^0.8.0 (contracts/interfaces/external/IERC20Metadata.sol#4)
	- ^0.8.0 (contracts/interfaces/external/IERC2612.sol#3)
	- ^0.8.0 (contracts/interfaces/external/IWETH9.sol#4)
	- ^0.8.0 (contracts/interfaces/vault/DataTypes.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ICauldron.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ICauldronGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IFYToken.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IJoin.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ILadle.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ILadleGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IMultiOracleGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IOracle.sol#2)
	- ^0.8.0 (contracts/math/CastBytes32Bytes6.sol#2)
	- ^0.8.0 (contracts/math/CastI128U128.sol#2)
	- ^0.8.0 (contracts/math/CastU128I128.sol#2)
	- ^0.8.0 (contracts/math/CastU256I256.sol#2)
	- ^0.8.0 (contracts/math/CastU256U128.sol#2)
	- ^0.8.0 (contracts/math/CastU256U32.sol#2)
	- ^0.8.0 (contracts/math/WDiv.sol#2)
	- ^0.8.0 (contracts/math/WDivUp.sol#2)
	- ^0.8.0 (contracts/math/WMul.sol#2)
	- ^0.8.0 (contracts/mocks/DAIMock.sol#2)
	- ^0.8.0 (contracts/mocks/ERC20Mock.sol#2)
	- ^0.8.0 (contracts/mocks/FlashBorrower.sol#2)
	- ^0.8.0 (contracts/mocks/RestrictedERC20Mock.sol#2)
	- ^0.8.0 (contracts/mocks/WETH9Mock.sol#4)
	- ^0.8.0 (contracts/mocks/oracles/ISourceMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/OracleMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/chainlink/ChainlinkAggregatorV3Mock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/compound/CTokenChiMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/compound/CTokenRateMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3FactoryMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3OracleLibraryMock.sol#2)
	- ^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV3PoolMock.sol#2)
	- ^0.8.0 (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#2)
	- ^0.8.0 (contracts/oracles/compound/CompoundMultiOracle.sol#2)
	- ^0.8.0 (contracts/oracles/uniswap/UniswapV3Oracle.sol#2)
	- ^0.8.0 (contracts/utils/access/AccessControl.sol#3)
	- ^0.8.0 (contracts/utils/access/Ownable.sol#2)
	- ^0.8.0 (contracts/utils/token/ERC20.sol#4)
	- ^0.8.0 (contracts/utils/token/ERC20Permit.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/math/WMulUp.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/mocks/oracles/uniswap/UniswapV2PairMock.sol#2)
",N/A,N/A
low-level-calls,Informational,"Low level call in SafeERC20Namer.callAndParseStringReturn(address,bytes4) (contracts/utils/token/SafeERC20Namer.sol#57-71):
	- (success,data) = token.staticcall(abi.encodeWithSelector(selector)) (contracts/utils/token/SafeERC20Namer.sol#58)
","address,bytes4) (contracts/utils/token/SafeERC20Namer.sol",57-71
low-level-calls,Informational,"Low level call in MinimalTransferHelper.safeTransfer(IERC20,address,uint256) (contracts/utils/token/MinimalTransferHelper.sol#17-24):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/MinimalTransferHelper.sol#22)
","IERC20,address,uint256) (contracts/utils/token/MinimalTransferHelper.sol",17-24
low-level-calls,Informational,"Low level call in SafeERC20Namer.tokenDecimals(address) (contracts/utils/token/SafeERC20Namer.sol#98-102):
	- (success,data) = token.staticcall(abi.encodeWithSelector(0x313ce567)) (contracts/utils/token/SafeERC20Namer.sol#100)
",address) (contracts/utils/token/SafeERC20Namer.sol,98-102
low-level-calls,Informational,"Low level call in Ladle._route(IPool,bytes) (contracts/Ladle.sol#559-565):
	- (success,result) = address(pool).call(data) (contracts/Ladle.sol#563)
","IPool,bytes) (contracts/Ladle.sol",559-565
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferFrom(IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol#32-40):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (contracts/utils/token/TransferHelper.sol#38)
","IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol",32-40
low-level-calls,Informational,"Low level call in TransferHelper.safeTransfer(IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol#17-24):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/TransferHelper.sol#22)
","IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol",17-24
low-level-calls,Informational,"Low level call in PoolRouter._route(PoolRouter.PoolAddresses,bytes) (contracts/yieldspace/PoolRouter.sol#117-123):
	- (success,result) = addresses.pool.call(data) (contracts/yieldspace/PoolRouter.sol#121)
","PoolRouter.PoolAddresses,bytes) (contracts/yieldspace/PoolRouter.sol",117-123
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferETH(address,uint256) (contracts/utils/token/TransferHelper.sol#46-49):
	- (success,data) = to.call{value: value}(new bytes(0)) (contracts/utils/token/TransferHelper.sol#47)
","address,uint256) (contracts/utils/token/TransferHelper.sol",46-49
low-level-calls,Informational,"Low level call in Ladle._moduleCall(address,bytes) (contracts/Ladle.sol#588-595):
	- (success,result) = module.delegatecall(moduleCall) (contracts/Ladle.sol#593)
","address,bytes) (contracts/Ladle.sol",588-595
missing-inheritance,Informational,"UniswapV3Oracle (contracts/oracles/uniswap/UniswapV3Oracle.sol#15-104) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/uniswap/UniswapV3Oracle.sol,15-104
missing-inheritance,Informational,"Ladle (contracts/Ladle.sol#22-597) should inherit from ILadle (contracts/interfaces/vault/ILadle.sol#5-9)
",contracts/Ladle.sol,22-597
missing-inheritance,Informational,"WETH9Mock (contracts/mocks/WETH9Mock.sol#7-33) should inherit from IWETH9 (contracts/interfaces/external/IWETH9.sol#7-14)
",contracts/mocks/WETH9Mock.sol,7-33
missing-inheritance,Informational,"ChainlinkMultiOracle (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#13-100) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/chainlink/ChainlinkMultiOracle.sol,13-100
missing-inheritance,Informational,"OracleMock (contracts/mocks/oracles/OracleMock.sol#7-35) should inherit from ISourceMock (contracts/mocks/oracles/ISourceMock.sol#4-6)
",contracts/mocks/oracles/OracleMock.sol,7-35
missing-inheritance,Informational,"CompoundMultiOracle (contracts/oracles/compound/CompoundMultiOracle.sol#10-75) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/compound/CompoundMultiOracle.sol,10-75
naming-convention,Informational,"Variable ERC20Permit.PERMIT_TYPEHASH (contracts/utils/token/ERC20Permit.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function UniswapV3Oracle._peek(bytes6,bytes6,uint256) (contracts/oracles/uniswap/UniswapV3Oracle.sol#76-87) is not in mixedCase
","bytes6,bytes6,uint256) (contracts/oracles/uniswap/UniswapV3Oracle.sol",76-87
naming-convention,Informational,"Function Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) is not in mixedCase
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
naming-convention,Informational,"Constant Math64x64.MAX_64x64 (contracts/yieldspace/Math64x64.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function IJoinFactory.JOIN_BYTECODE_HASH() (contracts/interfaces/vault/IJoinFactory.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable DAIMock.DOMAIN_SEPARATOR (contracts/mocks/DAIMock.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function DaiAbstract.DOMAIN_SEPARATOR() (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#17) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) is not in mixedCase
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
naming-convention,Informational,"Function Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#405-430) is not in mixedCase
",int128) (contracts/yieldspace/Math64x64.sol,405-430
naming-convention,Informational,"Function IPoolFactory.POOL_BYTECODE_HASH() (contracts/interfaces/yieldspace/IPoolFactory.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant Math64x64.MIN_64x64 (contracts/yieldspace/Math64x64.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Variable ERC20Permit._DOMAIN_SEPARATOR (contracts/utils/token/ERC20Permit.sol#20) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) is not in mixedCase
",int128) (contracts/yieldspace/Math64x64.sol,453-595
naming-convention,Informational,"Function ERC20Permit.DOMAIN_SEPARATOR() (contracts/utils/token/ERC20Permit.sol#44-48) is not in mixedCase
",) (contracts/utils/token/ERC20Permit.sol,44-48
naming-convention,Informational,"Function DaiAbstract.PERMIT_TYPEHASH() (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#18) is not in mixedCase
",N/A,N/A
reentrancy-unlimited-gas,Informational,"Reentrancy in WETH9Mock.withdraw(uint256) (contracts/mocks/WETH9Mock.sol#22-27):
	External calls:
	- address(msg.sender).transfer(wad) (contracts/mocks/WETH9Mock.sol#25)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,wad) (contracts/mocks/WETH9Mock.sol#26)
",uint256) (contracts/mocks/WETH9Mock.sol,22-27
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000 (contracts/yieldspace/YieldMath.sol#98)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#99)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (contracts/yieldspace/Math64x64.sol#522)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000 (contracts/yieldspace/YieldMath.sol#90)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (contracts/yieldspace/Math64x64.sol#566)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (contracts/yieldspace/Math64x64.sol#518)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x8000000 > 0 (contracts/yieldspace/Math64x64.sol#533)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x10000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#53)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#59)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127 (contracts/yieldspace/YieldMath.sol#242)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"FYToken.slitherConstructorConstantVariables() (contracts/FYToken.sol#17-228) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/FYToken.sol,17-228
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#194)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127 (contracts/yieldspace/YieldMath.sol#230)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#104)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#97)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#195)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (contracts/yieldspace/Math64x64.sol#520)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x10000000000 > 0 (contracts/yieldspace/Math64x64.sol#507)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000 (contracts/yieldspace/YieldMath.sol#100)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000 (contracts/yieldspace/YieldMath.sol#91)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000 (contracts/yieldspace/YieldMath.sol#99)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#78)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"CompoundMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/compound/CompoundMultiOracle.sol#10-75) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/compound/CompoundMultiOracle.sol,10-75
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x40000000000 > 0 (contracts/yieldspace/Math64x64.sol#503)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.muli(int128,int256) (contracts/yieldspace/Math64x64.sol#159-187) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#177-178)
","int128,int256) (contracts/yieldspace/Math64x64.sol",159-187
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000162e42fefa39f121751c >> 127 (contracts/yieldspace/YieldMath.sol#243)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (contracts/yieldspace/Math64x64.sol#500)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#68)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (contracts/yieldspace/Math64x64.sol#560)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#238)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#61)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127 (contracts/yieldspace/YieldMath.sol#234)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#228)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000002c5c85fdf473de72a2 >> 127 (contracts/yieldspace/YieldMath.sol#250)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l = 0xFE000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#48)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- xc >= 0x10000000000000000 (contracts/yieldspace/Math64x64.sol#681)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127 (contracts/yieldspace/YieldMath.sol#235)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#112)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (contracts/yieldspace/Math64x64.sol#540)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127 (contracts/yieldspace/YieldMath.sol#221)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#218)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (contracts/yieldspace/Math64x64.sol#552)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#71)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#94)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (contracts/yieldspace/Math64x64.sol#536)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#72)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#226)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000 (contracts/yieldspace/YieldMath.sol#83)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#74)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#249)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#106)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#207)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (contracts/yieldspace/Math64x64.sol#516)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000000 (contracts/yieldspace/YieldMath.sol#73)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (contracts/yieldspace/Math64x64.sol#487)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000 (contracts/yieldspace/YieldMath.sol#85)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#66)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127 (contracts/yieldspace/YieldMath.sol#245)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (contracts/yieldspace/Math64x64.sol#580)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (contracts/yieldspace/Math64x64.sol#483)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#50)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#235)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#465)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (contracts/yieldspace/Math64x64.sol#512)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000 (contracts/yieldspace/YieldMath.sol#82)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (contracts/yieldspace/Math64x64.sol#534)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000002c5c85fdf4745969ea76f >> 127 (contracts/yieldspace/YieldMath.sol#238)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#248)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000162e42fefa58aef378bf586 >> 127 (contracts/yieldspace/YieldMath.sol#231)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#79)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#243)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#210)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#675)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#87)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#109)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#70)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x2000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#56)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x100000 > 0 (contracts/yieldspace/Math64x64.sol#547)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#95)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#405-430) uses literals with too many digits:
	- xc >= 0x10000000000000000 (contracts/yieldspace/Math64x64.sol#411)
",int128) (contracts/yieldspace/Math64x64.sol,405-430
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#247)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/yieldspace/Math64x64.sol#682)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000 (contracts/yieldspace/YieldMath.sol#96)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x200000000 > 0 (contracts/yieldspace/Math64x64.sol#521)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000 (contracts/yieldspace/YieldMath.sol#105)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#114)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"RestrictedERC20Mock.slitherConstructorConstantVariables() (contracts/mocks/RestrictedERC20Mock.sol#6-22) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/mocks/RestrictedERC20Mock.sol,6-22
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#62)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#66)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#230)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#463)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#222)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x1000000000000000000000000 (contracts/yieldspace/YieldMath.sol#51)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#67)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000000 (contracts/yieldspace/YieldMath.sol#77)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#231)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (contracts/yieldspace/Math64x64.sol#514)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#467)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/yieldspace/Math64x64.sol#457)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#225)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.gavg(int128,int128) (contracts/yieldspace/Math64x64.sol#344-352) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#348-349)
","int128,int128) (contracts/yieldspace/Math64x64.sol",344-352
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x80000000000 > 0 (contracts/yieldspace/Math64x64.sol#501)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127 (contracts/yieldspace/YieldMath.sol#225)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#193)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#67)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (contracts/yieldspace/Math64x64.sol#576)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#234)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/yieldspace/Math64x64.sol#455)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127 (contracts/yieldspace/YieldMath.sol#248)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (contracts/yieldspace/Math64x64.sol#546)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000000 (contracts/yieldspace/YieldMath.sol#81)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127 (contracts/yieldspace/YieldMath.sol#233)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000 (contracts/yieldspace/YieldMath.sol#101)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000 (contracts/yieldspace/YieldMath.sol#97)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (contracts/yieldspace/Math64x64.sol#473)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#239)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#83)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (contracts/yieldspace/Math64x64.sol#477)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (contracts/yieldspace/Math64x64.sol#526)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#62)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (contracts/yieldspace/Math64x64.sol#574)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"YieldMath.slitherConstructorConstantVariables() (contracts/yieldspace/YieldMath.sol#326-565) uses literals with too many digits:
	- ONE = 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#333)
",) (contracts/yieldspace/YieldMath.sol,326-565
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (contracts/yieldspace/Math64x64.sol#491)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#63)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#241)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x800000 > 0 (contracts/yieldspace/Math64x64.sol#541)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#69)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#93)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x4000000000 > 0 (contracts/yieldspace/Math64x64.sol#511)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (contracts/yieldspace/Math64x64.sol#582)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp(int128) (contracts/yieldspace/Math64x64.sol#603-612) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/yieldspace/Math64x64.sol#605)
",int128) (contracts/yieldspace/Math64x64.sol,603-612
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (contracts/yieldspace/Math64x64.sol#570)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#693)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#237)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x20000000000 > 0 (contracts/yieldspace/Math64x64.sol#505)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000 (contracts/yieldspace/YieldMath.sol#103)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x200000 > 0 (contracts/yieldspace/Math64x64.sol#545)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#236)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#221)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#197)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x10000000 > 0 (contracts/yieldspace/Math64x64.sol#531)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127 (contracts/yieldspace/YieldMath.sol#232)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (contracts/yieldspace/Math64x64.sol#562)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (contracts/yieldspace/Math64x64.sol#532)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000000 (contracts/yieldspace/YieldMath.sol#74)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#203)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#91)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#60)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#65)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#215)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x40000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#51)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#58)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#60)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x4000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#55)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (contracts/yieldspace/Math64x64.sol#578)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#201)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#92)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x80000000 > 0 (contracts/yieldspace/Math64x64.sol#525)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000 (contracts/yieldspace/YieldMath.sol#113)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#50)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x40000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#55)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127 (contracts/yieldspace/YieldMath.sol#240)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x2000000000 > 0 (contracts/yieldspace/Math64x64.sol#513)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000 (contracts/yieldspace/YieldMath.sol#106)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x1000000 > 0 (contracts/yieldspace/Math64x64.sol#539)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x200000000000 > 0 (contracts/yieldspace/Math64x64.sol#497)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127 (contracts/yieldspace/YieldMath.sol#244)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#205)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#217)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (contracts/yieldspace/Math64x64.sol#469)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000 (contracts/yieldspace/YieldMath.sol#102)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#199)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (contracts/yieldspace/Math64x64.sol#479)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (contracts/yieldspace/Math64x64.sol#508)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#113)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x20000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#52)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#68)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (contracts/yieldspace/Math64x64.sol#485)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000 (contracts/yieldspace/YieldMath.sol#86)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#211)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000 (contracts/yieldspace/YieldMath.sol#108)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (contracts/yieldspace/Math64x64.sol#556)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (contracts/yieldspace/Math64x64.sol#588)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000 (contracts/yieldspace/YieldMath.sol#107)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127 (contracts/yieldspace/YieldMath.sol#246)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#69)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#52)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (contracts/yieldspace/Math64x64.sol#544)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (contracts/yieldspace/Math64x64.sol#568)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000000 (contracts/yieldspace/YieldMath.sol#75)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000162e4300e635cf4a109e3939bd >> 127 (contracts/yieldspace/YieldMath.sol#219)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#196)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127 (contracts/yieldspace/YieldMath.sol#217)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.slitherConstructorConstantVariables() (contracts/yieldspace/Math64x64.sol#12-751) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#16)
",) (contracts/yieldspace/Math64x64.sol,12-751
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#200)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#103)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (contracts/yieldspace/Math64x64.sol#510)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (contracts/yieldspace/Math64x64.sol#506)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.divi(int256,int256) (contracts/yieldspace/Math64x64.sol#240-262) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#255)
","int256,int256) (contracts/yieldspace/Math64x64.sol",240-262
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000000 (contracts/yieldspace/YieldMath.sol#71)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#240)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127 (contracts/yieldspace/YieldMath.sol#218)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#242)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#98)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (contracts/yieldspace/Math64x64.sol#475)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x800000000000 > 0 (contracts/yieldspace/Math64x64.sol#493)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#224)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#220)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Wand.slitherConstructorConstantVariables() (contracts/Wand.sol#19-141) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Wand.sol,19-141
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#108)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (contracts/yieldspace/Math64x64.sol#538)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#110)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#233)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#65)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (contracts/yieldspace/Math64x64.sol#550)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000 (contracts/yieldspace/YieldMath.sol#111)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000 (contracts/yieldspace/YieldMath.sol#112)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127 (contracts/yieldspace/YieldMath.sol#222)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#622-663) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/yieldspace/Math64x64.sol#633)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",622-663
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127 (contracts/yieldspace/YieldMath.sol#216)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000000 (contracts/yieldspace/YieldMath.sol#78)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (contracts/yieldspace/Math64x64.sol#584)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#244)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#70)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#84)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (contracts/yieldspace/Math64x64.sol#528)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Ladle.slitherConstructorConstantVariables() (contracts/Ladle.sol#22-597) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Ladle.sol,22-597
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127 (contracts/yieldspace/YieldMath.sol#229)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.muli(int128,int256) (contracts/yieldspace/Math64x64.sol#159-187) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#162-163)
","int128,int256) (contracts/yieldspace/Math64x64.sol",159-187
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#232)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#75)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#102)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000 (contracts/yieldspace/YieldMath.sol#104)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#229)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#701-702)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"UniswapV3Oracle.slitherConstructorConstantVariables() (contracts/oracles/uniswap/UniswapV3Oracle.sol#15-104) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/uniswap/UniswapV3Oracle.sol,15-104
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127 (contracts/yieldspace/YieldMath.sol#249)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Witch.slitherConstructorConstantVariables() (contracts/Witch.sol#14-88) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Witch.sol,14-88
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x1000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#53)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#219)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#208)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127 (contracts/yieldspace/YieldMath.sol#237)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#96)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (contracts/yieldspace/Math64x64.sol#502)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.sqrt(int128) (contracts/yieldspace/Math64x64.sol#392-397) uses literals with too many digits:
	- int128(sqrtu(uint256(uint128(x)) << 64,0x10000000000000000)) (contracts/yieldspace/Math64x64.sol#395)
",int128) (contracts/yieldspace/Math64x64.sol,392-397
too-many-digits,Informational,"PoolFactory.slitherConstructorConstantVariables() (contracts/yieldspace/PoolFactory.sol#9-93) uses literals with too many digits:
	- POOL_BYTECODE_HASH = keccak256(bytes)(type()(Pool).creationCode) (contracts/yieldspace/PoolFactory.sol#12)
",) (contracts/yieldspace/PoolFactory.sol,9-93
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#198)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#82)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"ChainlinkMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#13-100) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol,13-100
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#88)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127 (contracts/yieldspace/YieldMath.sol#223)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#105)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x400000 > 0 (contracts/yieldspace/Math64x64.sol#543)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#100)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (contracts/yieldspace/Math64x64.sol#504)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127 (contracts/yieldspace/YieldMath.sol#224)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000 (contracts/yieldspace/YieldMath.sol#95)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#459)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#213)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#362-384) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#377)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",362-384
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127 (contracts/yieldspace/YieldMath.sol#226)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#81)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#202)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (contracts/yieldspace/Math64x64.sol#572)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#245)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#101)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#61)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000000 (contracts/yieldspace/YieldMath.sol#76)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#80)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#212)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x20000000 > 0 (contracts/yieldspace/Math64x64.sol#529)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#90)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000 (contracts/yieldspace/YieldMath.sol#94)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#73)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#54)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x2000000 > 0 (contracts/yieldspace/Math64x64.sol#537)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000 (contracts/yieldspace/YieldMath.sol#93)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Cauldron.slitherConstructorConstantVariables() (contracts/Cauldron.sol#23-481) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Cauldron.sol,23-481
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x4000000 > 0 (contracts/yieldspace/Math64x64.sol#535)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x400000000000 > 0 (contracts/yieldspace/Math64x64.sol#495)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (contracts/yieldspace/Math64x64.sol#564)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x800000000 > 0 (contracts/yieldspace/Math64x64.sol#517)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000000 (contracts/yieldspace/YieldMath.sol#79)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x100000000000 > 0 (contracts/yieldspace/Math64x64.sol#499)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#405-430) uses literals with too many digits:
	- bit = 0x8000000000000000 (contracts/yieldspace/Math64x64.sol#421)
",int128) (contracts/yieldspace/Math64x64.sol,405-430
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (contracts/yieldspace/Math64x64.sol#554)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000 (contracts/yieldspace/YieldMath.sol#84)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#76)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#214)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp(int128) (contracts/yieldspace/Math64x64.sol#603-612) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/yieldspace/Math64x64.sol#607)
",int128) (contracts/yieldspace/Math64x64.sol,603-612
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#89)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x100000000 > 0 (contracts/yieldspace/Math64x64.sol#523)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#64)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x8000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#54)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000 (contracts/yieldspace/YieldMath.sol#88)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127 (contracts/yieldspace/YieldMath.sol#236)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127 (contracts/yieldspace/YieldMath.sol#241)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (contracts/yieldspace/Math64x64.sol#471)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"JoinFactory.slitherConstructorConstantVariables() (contracts/JoinFactory.sol#9-83) uses literals with too many digits:
	- JOIN_BYTECODE_HASH = keccak256(bytes)(type()(Join).creationCode) (contracts/JoinFactory.sol#12)
",) (contracts/JoinFactory.sol,9-83
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000162e42fefc25eb1571853a66 >> 127 (contracts/yieldspace/YieldMath.sol#227)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#209)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000000 (contracts/yieldspace/YieldMath.sol#72)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#56)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#114)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#227)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#111)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#107)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#77)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000 (contracts/yieldspace/YieldMath.sol#87)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x8000000000 > 0 (contracts/yieldspace/Math64x64.sol#509)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (contracts/yieldspace/Math64x64.sol#489)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#64)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x40000000 > 0 (contracts/yieldspace/Math64x64.sol#527)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#206)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000162e42fefa3a0df5373bf >> 127 (contracts/yieldspace/YieldMath.sol#239)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#58)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (contracts/yieldspace/Math64x64.sol#530)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000 (contracts/yieldspace/YieldMath.sol#92)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000 (contracts/yieldspace/YieldMath.sol#109)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (contracts/yieldspace/Math64x64.sol#481)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (contracts/yieldspace/Math64x64.sol#542)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x400000000 > 0 (contracts/yieldspace/Math64x64.sol#519)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x1000000000 > 0 (contracts/yieldspace/Math64x64.sol#515)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000000 (contracts/yieldspace/YieldMath.sol#80)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#216)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#86)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#461)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#250)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#59)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (contracts/yieldspace/Math64x64.sol#558)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.inv(int128) (contracts/yieldspace/Math64x64.sol#314-321) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (contracts/yieldspace/Math64x64.sol#317)
",int128) (contracts/yieldspace/Math64x64.sol,314-321
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000162e42fefa39ef5438f >> 127 (contracts/yieldspace/YieldMath.sol#247)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#246)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#680)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Math64x64.powu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#673-728) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#712-713)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",673-728
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000 (contracts/yieldspace/YieldMath.sol#110)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.fromInt(int256) (contracts/yieldspace/Math64x64.sol#30-35) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (contracts/yieldspace/Math64x64.sol#32)
",int256) (contracts/yieldspace/Math64x64.sol,30-35
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#204)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Join.slitherConstructorConstantVariables() (contracts/Join.sol#15-141) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Join.sol,15-141
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127 (contracts/yieldspace/YieldMath.sol#220)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#405-430) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/yieldspace/Math64x64.sol#412)
",int128) (contracts/yieldspace/Math64x64.sol,405-430
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (contracts/yieldspace/Math64x64.sol#548)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (contracts/yieldspace/Math64x64.sol#586)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000b17217f7d97f692baacded5 >> 127 (contracts/yieldspace/YieldMath.sol#228)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000 (contracts/yieldspace/YieldMath.sol#89)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#453-595) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (contracts/yieldspace/Math64x64.sol#524)
",int128) (contracts/yieldspace/Math64x64.sol,453-595
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#223)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#63)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b > 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#85)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
immutable-states,Optimization,"FlashBorrower.lender (contracts/mocks/FlashBorrower.sol#12) should be immutable 
",N/A,N/A
immutable-states,Optimization,"ERC20.decimals (contracts/utils/token/ERC20.sol#34) should be immutable 
",N/A,N/A
immutable-states,Optimization,"ChainlinkAggregatorV3Mock.decimals (contracts/mocks/oracles/chainlink/ChainlinkAggregatorV3Mock.sol#9) should be immutable 
",N/A,N/A
immutable-states,Optimization,"DAIMock.DOMAIN_SEPARATOR (contracts/mocks/DAIMock.sol#11) should be immutable 
",N/A,N/A
