Severity,Description,Line
Medium,"Vault.claimYield(address) (contracts/Vault.sol#166-185) uses a dangerous strict equality:
	- yield == 0 (contracts/Vault.sol#169)
",166-185
Medium,"Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505) uses a dangerous strict equality:
	- require(bool)(ret == IIntegration(_claim.beneficiary).onDepositMinted.selector) (contracts/Vault.sol#490-492)
",454-505
Medium,"Vault._computeAmount(uint256,uint256,uint256) (contracts/Vault.sol#629-640) uses a dangerous strict equality:
	- _totalShares == 0 || _totalUnderlyingMinusSponsored == 0 (contracts/Vault.sol#634)
",629-640
Medium,"Vault._computeShares(uint256,uint256,uint256) (contracts/Vault.sol#605-619) uses a dangerous strict equality:
	- _amount == 0 (contracts/Vault.sol#610)
",605-619
Medium,"Vault._transferAndCheckUnderlying(address,uint256) (contracts/Vault.sol#580-591) uses a dangerous strict equality:
	- require(bool,string)(balanceAfter == balanceBefore + _amount,Vault: amount received does not match params) (contracts/Vault.sol#587-590)
",580-591
Low,"Reentrancy in Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402):
	External calls:
	- depositors.burn(tokenId) (contracts/Vault.sol#381)
	State variables written after the call(s):
	- totalSponsored -= sponsorAmount (contracts/Vault.sol#399)
",357-402
Low,"Reentrancy in Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267):
	External calls:
	- tokenId = depositors.mint(_msgSender(),_amount,0,_lockedUntil) (contracts/Vault.sol#256-261)
	State variables written after the call(s):
	- totalSponsored += _amount (contracts/Vault.sol#265)
",244-267
Low,"Reentrancy in Vault.updateInvested() (contracts/Vault.sol#226-238):
	External calls:
	- underlying.safeTransfer(address(strategy),_investable) (contracts/Vault.sol#232)
	Event emitted after the call(s):
	- Invested(_investable) (contracts/Vault.sol#234)
",226-238
Low,"Reentrancy in Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505):
	External calls:
	- claimerId = claimers.mint(_claim.beneficiary,amount,newShares) (contracts/Vault.sol#470-474)
	- tokenId = depositors.mint(_msgSender(),amount,claimerId,_lockedUntil) (contracts/Vault.sol#476-481)
	- ret = IIntegration(_claim.beneficiary).onDepositMinted(tokenId,newShares,_claim.data) (contracts/Vault.sol#484-488)
	Event emitted after the call(s):
	- DepositMinted(tokenId,_depositGroupId,amount,newShares,_msgSender(),_claim.beneficiary,claimerId,_lockedUntil) (contracts/Vault.sol#495-504)
",454-505
Low,"Reentrancy in Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402):
	External calls:
	- depositors.burn(tokenId) (contracts/Vault.sol#381)
	Event emitted after the call(s):
	- Unsponsored(tokenId) (contracts/Vault.sol#383)
",357-402
Low,"Reentrancy in Vault._withdrawDeposit(uint256,uint256,uint256,address,bool) (contracts/Vault.sol#521-578):
	External calls:
	- claimers.onWithdraw(claimerId,depositAmount,depositShares) (contracts/Vault.sol#559)
	- depositors.burn(_tokenId) (contracts/Vault.sol#560)
	- ret = IIntegration(claimer).onDepositBurned(_tokenId) (contracts/Vault.sol#565)
	Event emitted after the call(s):
	- DepositBurned(_tokenId,depositShares,_to) (contracts/Vault.sol#570)
",521-578
Low,"Reentrancy in Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267):
	External calls:
	- tokenId = depositors.mint(_msgSender(),_amount,0,_lockedUntil) (contracts/Vault.sol#256-261)
	Event emitted after the call(s):
	- Sponsored(tokenId,_amount,_msgSender(),_lockedUntil) (contracts/Vault.sol#263)
",244-267
Low,"Vault._withdrawDeposit(uint256,uint256,uint256,address,bool) (contracts/Vault.sol#521-578) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lockedUntil <= block.timestamp,Vault: deposit is locked) (contracts/Vault.sol#538)
",521-578
Low,"Vault._createDeposit(uint256,uint256,IVault.ClaimParams[]) (contracts/Vault.sol#420-452) uses timestamp for comparisons
	Dangerous comparisons:
	- _lockedUntil == 0 (contracts/Vault.sol#425)
	- require(bool,string)(_lockedUntil >= block.timestamp + minLockPeriod,Vault: lock time is too small) (contracts/Vault.sol#427-430)
",420-452
Low,"Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(ret == IIntegration(_claim.beneficiary).onDepositMinted.selector) (contracts/Vault.sol#490-492)
",454-505
Low,"Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lockedUntil <= block.timestamp,Vault: amount is locked) (contracts/Vault.sol#377)
",357-402
Low,"Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267) uses timestamp for comparisons
	Dangerous comparisons:
	- _lockedUntil == 0 (contracts/Vault.sol#248)
	- require(bool,string)(_lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,Vault: lock time is too small) (contracts/Vault.sol#251-254)
",244-267
Informational,"Function Vault._blockTimestamp() (contracts/Vault.sol#593-595) is not in mixedCase
",593-595
