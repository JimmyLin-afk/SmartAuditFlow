Check,Severity,Description,Filename,Line
incorrect-equality,Medium,"Vault.claimYield(address) (contracts/Vault.sol#166-185) uses a dangerous strict equality:
	- yield == 0 (contracts/Vault.sol#169)
",address) (contracts/Vault.sol,166-185
incorrect-equality,Medium,"Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505) uses a dangerous strict equality:
	- require(bool)(ret == IIntegration(_claim.beneficiary).onDepositMinted.selector) (contracts/Vault.sol#490-492)
","uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol",454-505
incorrect-equality,Medium,"Vault._computeAmount(uint256,uint256,uint256) (contracts/Vault.sol#629-640) uses a dangerous strict equality:
	- _totalShares == 0 || _totalUnderlyingMinusSponsored == 0 (contracts/Vault.sol#634)
","uint256,uint256,uint256) (contracts/Vault.sol",629-640
incorrect-equality,Medium,"Vault._computeShares(uint256,uint256,uint256) (contracts/Vault.sol#605-619) uses a dangerous strict equality:
	- _amount == 0 (contracts/Vault.sol#610)
","uint256,uint256,uint256) (contracts/Vault.sol",605-619
incorrect-equality,Medium,"Vault._transferAndCheckUnderlying(address,uint256) (contracts/Vault.sol#580-591) uses a dangerous strict equality:
	- require(bool,string)(balanceAfter == balanceBefore + _amount,Vault: amount received does not match params) (contracts/Vault.sol#587-590)
","address,uint256) (contracts/Vault.sol",580-591
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.notifyDepositResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#46-51):
	External calls:
	- aUstToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#48)
	State variables written after the call(s):
	- depositOperations[_operation] = 0 (contracts/mock/MockEthAnchorRouter.sol#49)
	MockEthAnchorRouter.depositOperations (contracts/mock/MockEthAnchorRouter.sol#15) can be used in cross function reentrancies:
	- MockEthAnchorRouter.depositOperations (contracts/mock/MockEthAnchorRouter.sol#15)
	- MockEthAnchorRouter.initDepositStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#34-44)
	- MockEthAnchorRouter.notifyDepositResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#46-51)
","address,uint256) (contracts/mock/MockEthAnchorRouter.sol",46-51
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.finishDepositStable(address) (contracts/mock/MockEthAnchorRouter.sol#53-60):
	External calls:
	- aUstToken.safeTransfer(msg.sender,depositFinishResults[_operation]) (contracts/mock/MockEthAnchorRouter.sol#58)
	State variables written after the call(s):
	- depositFinishResults[_operation] = 0 (contracts/mock/MockEthAnchorRouter.sol#59)
	MockEthAnchorRouter.depositFinishResults (contracts/mock/MockEthAnchorRouter.sol#17) can be used in cross function reentrancies:
	- MockEthAnchorRouter.depositFinishResults (contracts/mock/MockEthAnchorRouter.sol#17)
	- MockEthAnchorRouter.finishDepositStable(address) (contracts/mock/MockEthAnchorRouter.sol#53-60)
	- MockEthAnchorRouter.notifyDepositResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#46-51)
",address) (contracts/mock/MockEthAnchorRouter.sol,53-60
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.initDepositStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#34-44):
	External calls:
	- ustToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#40)
	State variables written after the call(s):
	- pendingOperator = address(0) (contracts/mock/MockEthAnchorRouter.sol#43)
	MockEthAnchorRouter.pendingOperator (contracts/mock/MockEthAnchorRouter.sol#14) can be used in cross function reentrancies:
	- MockEthAnchorRouter.addPendingOperator(address) (contracts/mock/MockEthAnchorRouter.sol#28-32)
	- MockEthAnchorRouter.initDepositStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#34-44)
	- MockEthAnchorRouter.initRedeemStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#62-72)
	- MockEthAnchorRouter.pendingOperator (contracts/mock/MockEthAnchorRouter.sol#14)
",uint256) (contracts/mock/MockEthAnchorRouter.sol,34-44
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.finishRedeemStable(address) (contracts/mock/MockEthAnchorRouter.sol#81-85):
	External calls:
	- ustToken.safeTransfer(msg.sender,redeemFinishResults[_operation]) (contracts/mock/MockEthAnchorRouter.sol#83)
	State variables written after the call(s):
	- redeemFinishResults[_operation] = 0 (contracts/mock/MockEthAnchorRouter.sol#84)
	MockEthAnchorRouter.redeemFinishResults (contracts/mock/MockEthAnchorRouter.sol#18) can be used in cross function reentrancies:
	- MockEthAnchorRouter.finishRedeemStable(address) (contracts/mock/MockEthAnchorRouter.sol#81-85)
	- MockEthAnchorRouter.notifyRedeemResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#74-79)
	- MockEthAnchorRouter.redeemFinishResults (contracts/mock/MockEthAnchorRouter.sol#18)
",address) (contracts/mock/MockEthAnchorRouter.sol,81-85
reentrancy-no-eth,Medium,"Reentrancy in BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204):
	External calls:
	- ethAnchorRouter.finishRedeemStable(operation.operator) (contracts/strategy/BaseStrategy.sol#187)
	- ustToken.safeTransfer(treasury,perfFee) (contracts/strategy/BaseStrategy.sol#194)
	State variables written after the call(s):
	- convertedUst -= originalUst (contracts/strategy/BaseStrategy.sol#197)
	BaseStrategy.convertedUst (contracts/strategy/BaseStrategy.sol#67) can be used in cross function reentrancies:
	- BaseStrategy.convertedUst (contracts/strategy/BaseStrategy.sol#67)
	- BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153)
	- BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204)
	- pendingRedeems -= operation.amount (contracts/strategy/BaseStrategy.sol#198)
	BaseStrategy.pendingRedeems (contracts/strategy/BaseStrategy.sol#58) can be used in cross function reentrancies:
	- BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204)
	- BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170)
	- BaseStrategy.investedAssets() (contracts/strategy/BaseStrategy.sol#263-277)
	- BaseStrategy.pendingRedeems (contracts/strategy/BaseStrategy.sol#58)
	- operation.operator = redeemOperations[redeemOperations.length - 1].operator (contracts/strategy/BaseStrategy.sol#200-201)
	BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64) can be used in cross function reentrancies:
	- BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204)
	- BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170)
	- BaseStrategy.redeemOperationLength() (contracts/strategy/BaseStrategy.sol#300-302)
	- BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64)
	- operation.amount = redeemOperations[redeemOperations.length - 1].amount (contracts/strategy/BaseStrategy.sol#202)
	BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64) can be used in cross function reentrancies:
	- BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204)
	- BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170)
	- BaseStrategy.redeemOperationLength() (contracts/strategy/BaseStrategy.sol#300-302)
	- BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64)
	- redeemOperations.pop() (contracts/strategy/BaseStrategy.sol#203)
	BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64) can be used in cross function reentrancies:
	- BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204)
	- BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170)
	- BaseStrategy.redeemOperationLength() (contracts/strategy/BaseStrategy.sol#300-302)
	- BaseStrategy.redeemOperations (contracts/strategy/BaseStrategy.sol#64)
",uint256) (contracts/strategy/BaseStrategy.sol,180-204
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.initRedeemStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#62-72):
	External calls:
	- aUstToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#68)
	State variables written after the call(s):
	- pendingOperator = address(0) (contracts/mock/MockEthAnchorRouter.sol#71)
	MockEthAnchorRouter.pendingOperator (contracts/mock/MockEthAnchorRouter.sol#14) can be used in cross function reentrancies:
	- MockEthAnchorRouter.addPendingOperator(address) (contracts/mock/MockEthAnchorRouter.sol#28-32)
	- MockEthAnchorRouter.initDepositStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#34-44)
	- MockEthAnchorRouter.initRedeemStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#62-72)
	- MockEthAnchorRouter.pendingOperator (contracts/mock/MockEthAnchorRouter.sol#14)
",uint256) (contracts/mock/MockEthAnchorRouter.sol,62-72
reentrancy-no-eth,Medium,"Reentrancy in MockEthAnchorRouter.notifyRedeemResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#74-79):
	External calls:
	- ustToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#76)
	State variables written after the call(s):
	- redeemOperations[_operation] = 0 (contracts/mock/MockEthAnchorRouter.sol#77)
	MockEthAnchorRouter.redeemOperations (contracts/mock/MockEthAnchorRouter.sol#16) can be used in cross function reentrancies:
	- MockEthAnchorRouter.initRedeemStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#62-72)
	- MockEthAnchorRouter.notifyRedeemResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#74-79)
	- MockEthAnchorRouter.redeemOperations (contracts/mock/MockEthAnchorRouter.sol#16)
","address,uint256) (contracts/mock/MockEthAnchorRouter.sol",74-79
reentrancy-no-eth,Medium,"Reentrancy in BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153):
	External calls:
	- ethAnchorRouter.finishDepositStable(operation.operator) (contracts/strategy/BaseStrategy.sol#143)
	State variables written after the call(s):
	- operation.operator = depositOperations[depositOperations.length - 1].operator (contracts/strategy/BaseStrategy.sol#148-149)
	BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61) can be used in cross function reentrancies:
	- BaseStrategy._initDepositStable() (contracts/strategy/BaseStrategy.sol#122-130)
	- BaseStrategy.depositOperationLength() (contracts/strategy/BaseStrategy.sol#295-297)
	- BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61)
	- BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153)
	- operation.amount = depositOperations[depositOperations.length - 1].amount (contracts/strategy/BaseStrategy.sol#150-151)
	BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61) can be used in cross function reentrancies:
	- BaseStrategy._initDepositStable() (contracts/strategy/BaseStrategy.sol#122-130)
	- BaseStrategy.depositOperationLength() (contracts/strategy/BaseStrategy.sol#295-297)
	- BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61)
	- BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153)
	- depositOperations.pop() (contracts/strategy/BaseStrategy.sol#152)
	BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61) can be used in cross function reentrancies:
	- BaseStrategy._initDepositStable() (contracts/strategy/BaseStrategy.sol#122-130)
	- BaseStrategy.depositOperationLength() (contracts/strategy/BaseStrategy.sol#295-297)
	- BaseStrategy.depositOperations (contracts/strategy/BaseStrategy.sol#61)
	- BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153)
",uint256) (contracts/strategy/BaseStrategy.sol,140-153
shadowing-local,Low,"MockERC20.constructor(uint256)._totalSupply (contracts/mock/MockERC20.sol#7) shadows:
	- ERC20._totalSupply (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#40) (state variable)
",N/A,N/A
shadowing-local,Low,"Depositors.constructor(address,string,string)._name (contracts/vault/Depositors.sol#36) shadows:
	- ERC721._name (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#24) (state variable)
",N/A,N/A
shadowing-local,Low,"Depositors.constructor(address,string,string)._symbol (contracts/vault/Depositors.sol#37) shadows:
	- ERC721._symbol (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#27) (state variable)
",N/A,N/A
shadowing-local,Low,"TestERC20.constructor(uint256)._totalSupply (contracts/test/TestERC20.sol#7) shadows:
	- ERC20._totalSupply (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#40) (state variable)
",N/A,N/A
events-maths,Low,"BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170) should emit an event for: 
	- pendingRedeems += amount (contracts/strategy/BaseStrategy.sol#167) 
",uint256) (contracts/strategy/BaseStrategy.sol,163-170
missing-zero-check,Low,"Depositors.constructor(address,string,string)._vault (contracts/vault/Depositors.sol#35) lacks a zero-check on :
		- vault = _vault (contracts/vault/Depositors.sol#39)
",N/A,N/A
missing-zero-check,Low,"Claimers.constructor(address)._vault (contracts/vault/Claimers.sol#33) lacks a zero-check on :
		- vault = _vault (contracts/vault/Claimers.sol#34)
",N/A,N/A
reentrancy-benign,Low,"Reentrancy in MockEthAnchorRouter.initDepositStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#34-44):
	External calls:
	- ustToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#40)
	State variables written after the call(s):
	- depositOperations[pendingOperator] = _amount (contracts/mock/MockEthAnchorRouter.sol#41)
",uint256) (contracts/mock/MockEthAnchorRouter.sol,34-44
reentrancy-benign,Low,"Reentrancy in MockEthAnchorRouter.notifyDepositResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#46-51):
	External calls:
	- aUstToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#48)
	State variables written after the call(s):
	- depositFinishResults[_operation] = _amount (contracts/mock/MockEthAnchorRouter.sol#50)
","address,uint256) (contracts/mock/MockEthAnchorRouter.sol",46-51
reentrancy-benign,Low,"Reentrancy in BaseStrategy._initDepositStable() (contracts/strategy/BaseStrategy.sol#122-130):
	External calls:
	- _operator = ethAnchorRouter.initDepositStable(ustBalance) (contracts/strategy/BaseStrategy.sol#126)
	State variables written after the call(s):
	- depositOperations.push(Operation({operator:_operator,amount:ustBalance})) (contracts/strategy/BaseStrategy.sol#127-129)
",) (contracts/strategy/BaseStrategy.sol,122-130
reentrancy-benign,Low,"Reentrancy in BaseStrategy.finishDepositStable(uint256) (contracts/strategy/BaseStrategy.sol#140-153):
	External calls:
	- ethAnchorRouter.finishDepositStable(operation.operator) (contracts/strategy/BaseStrategy.sol#143)
	State variables written after the call(s):
	- convertedUst += operation.amount (contracts/strategy/BaseStrategy.sol#146)
	- pendingDeposits -= operation.amount (contracts/strategy/BaseStrategy.sol#145)
",uint256) (contracts/strategy/BaseStrategy.sol,140-153
reentrancy-benign,Low,"Reentrancy in Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402):
	External calls:
	- depositors.burn(tokenId) (contracts/Vault.sol#381)
	State variables written after the call(s):
	- totalSponsored -= sponsorAmount (contracts/Vault.sol#399)
","address,uint256[],bool) (contracts/Vault.sol",357-402
reentrancy-benign,Low,"Reentrancy in MockEthAnchorRouter.initRedeemStable(uint256) (contracts/mock/MockEthAnchorRouter.sol#62-72):
	External calls:
	- aUstToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#68)
	State variables written after the call(s):
	- redeemOperations[pendingOperator] = _amount (contracts/mock/MockEthAnchorRouter.sol#69)
",uint256) (contracts/mock/MockEthAnchorRouter.sol,62-72
reentrancy-benign,Low,"Reentrancy in Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267):
	External calls:
	- tokenId = depositors.mint(_msgSender(),_amount,0,_lockedUntil) (contracts/Vault.sol#256-261)
	State variables written after the call(s):
	- totalSponsored += _amount (contracts/Vault.sol#265)
","uint256,uint256) (contracts/Vault.sol",244-267
reentrancy-benign,Low,"Reentrancy in Depositors.mint(address,uint256,uint256,uint256) (contracts/vault/Depositors.sol#44-58):
	External calls:
	- _safeMint(_owner,localTokenId) (contracts/vault/Depositors.sol#53)
		- retval = IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,_data) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#389-399)
	State variables written after the call(s):
	- deposits[localTokenId] = Deposit(_amount,_claimerId,_lockedUntil) (contracts/vault/Depositors.sol#55)
","address,uint256,uint256,uint256) (contracts/vault/Depositors.sol",44-58
reentrancy-benign,Low,"Reentrancy in BaseStrategy.initRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#163-170):
	External calls:
	- _operator = ethAnchorRouter.initRedeemStable(amount) (contracts/strategy/BaseStrategy.sol#168)
	State variables written after the call(s):
	- redeemOperations.push(Operation({operator:_operator,amount:amount})) (contracts/strategy/BaseStrategy.sol#169)
",uint256) (contracts/strategy/BaseStrategy.sol,163-170
reentrancy-benign,Low,"Reentrancy in MockEthAnchorRouter.notifyRedeemResult(address,uint256) (contracts/mock/MockEthAnchorRouter.sol#74-79):
	External calls:
	- ustToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/mock/MockEthAnchorRouter.sol#76)
	State variables written after the call(s):
	- redeemFinishResults[_operation] = _amount (contracts/mock/MockEthAnchorRouter.sol#78)
","address,uint256) (contracts/mock/MockEthAnchorRouter.sol",74-79
reentrancy-events,Low,"Reentrancy in BaseStrategy.finishRedeemStable(uint256) (contracts/strategy/BaseStrategy.sol#180-204):
	External calls:
	- ethAnchorRouter.finishRedeemStable(operation.operator) (contracts/strategy/BaseStrategy.sol#187)
	- ustToken.safeTransfer(treasury,perfFee) (contracts/strategy/BaseStrategy.sol#194)
	Event emitted after the call(s):
	- PerfFeeClaimed(perfFee) (contracts/strategy/BaseStrategy.sol#195)
",uint256) (contracts/strategy/BaseStrategy.sol,180-204
reentrancy-events,Low,"Reentrancy in Vault.updateInvested() (contracts/Vault.sol#226-238):
	External calls:
	- underlying.safeTransfer(address(strategy),_investable) (contracts/Vault.sol#232)
	Event emitted after the call(s):
	- Invested(_investable) (contracts/Vault.sol#234)
",) (contracts/Vault.sol,226-238
reentrancy-events,Low,"Reentrancy in Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505):
	External calls:
	- claimerId = claimers.mint(_claim.beneficiary,amount,newShares) (contracts/Vault.sol#470-474)
	- tokenId = depositors.mint(_msgSender(),amount,claimerId,_lockedUntil) (contracts/Vault.sol#476-481)
	- ret = IIntegration(_claim.beneficiary).onDepositMinted(tokenId,newShares,_claim.data) (contracts/Vault.sol#484-488)
	Event emitted after the call(s):
	- DepositMinted(tokenId,_depositGroupId,amount,newShares,_msgSender(),_claim.beneficiary,claimerId,_lockedUntil) (contracts/Vault.sol#495-504)
","uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol",454-505
reentrancy-events,Low,"Reentrancy in Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402):
	External calls:
	- depositors.burn(tokenId) (contracts/Vault.sol#381)
	Event emitted after the call(s):
	- Unsponsored(tokenId) (contracts/Vault.sol#383)
","address,uint256[],bool) (contracts/Vault.sol",357-402
reentrancy-events,Low,"Reentrancy in Vault._withdrawDeposit(uint256,uint256,uint256,address,bool) (contracts/Vault.sol#521-578):
	External calls:
	- claimers.onWithdraw(claimerId,depositAmount,depositShares) (contracts/Vault.sol#559)
	- depositors.burn(_tokenId) (contracts/Vault.sol#560)
	- ret = IIntegration(claimer).onDepositBurned(_tokenId) (contracts/Vault.sol#565)
	Event emitted after the call(s):
	- DepositBurned(_tokenId,depositShares,_to) (contracts/Vault.sol#570)
","uint256,uint256,uint256,address,bool) (contracts/Vault.sol",521-578
reentrancy-events,Low,"Reentrancy in Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267):
	External calls:
	- tokenId = depositors.mint(_msgSender(),_amount,0,_lockedUntil) (contracts/Vault.sol#256-261)
	Event emitted after the call(s):
	- Sponsored(tokenId,_amount,_msgSender(),_lockedUntil) (contracts/Vault.sol#263)
","uint256,uint256) (contracts/Vault.sol",244-267
timestamp,Low,"Vault._withdrawDeposit(uint256,uint256,uint256,address,bool) (contracts/Vault.sol#521-578) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lockedUntil <= block.timestamp,Vault: deposit is locked) (contracts/Vault.sol#538)
","uint256,uint256,uint256,address,bool) (contracts/Vault.sol",521-578
timestamp,Low,"Vault._createDeposit(uint256,uint256,IVault.ClaimParams[]) (contracts/Vault.sol#420-452) uses timestamp for comparisons
	Dangerous comparisons:
	- _lockedUntil == 0 (contracts/Vault.sol#425)
	- require(bool,string)(_lockedUntil >= block.timestamp + minLockPeriod,Vault: lock time is too small) (contracts/Vault.sol#427-430)
","uint256,uint256,IVault.ClaimParams[]) (contracts/Vault.sol",420-452
timestamp,Low,"Vault._createClaim(uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol#454-505) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(ret == IIntegration(_claim.beneficiary).onDepositMinted.selector) (contracts/Vault.sol#490-492)
","uint256,uint256,uint256,IVault.ClaimParams,uint256,uint256) (contracts/Vault.sol",454-505
timestamp,Low,"Vault._unsponsor(address,uint256[],bool) (contracts/Vault.sol#357-402) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(lockedUntil <= block.timestamp,Vault: amount is locked) (contracts/Vault.sol#377)
","address,uint256[],bool) (contracts/Vault.sol",357-402
timestamp,Low,"Vault.sponsor(uint256,uint256) (contracts/Vault.sol#244-267) uses timestamp for comparisons
	Dangerous comparisons:
	- _lockedUntil == 0 (contracts/Vault.sol#248)
	- require(bool,string)(_lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,Vault: lock time is too small) (contracts/Vault.sol#251-254)
","uint256,uint256) (contracts/Vault.sol",244-267
assembly,Informational,"SandclockFactory.deploy(bytes,uint256) (contracts/SandclockFactory.sol#45-58) uses assembly
	- INLINE ASM (contracts/SandclockFactory.sol#50-55)
","bytes,uint256) (contracts/SandclockFactory.sol",45-58
assembly,Informational,"console._sendLogPayload(bytes) (node_modules/hardhat/console.sol#7-14) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#10-13)
",bytes) (node_modules/hardhat/console.sol,7-14
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#27-37) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#33-35)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,27-37
assembly,Informational,"ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#382-403) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#395-397)
","address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",382-403
assembly,Informational,"ERC165Query.noThrowCall(address,bytes4) (contracts/lib/ERC165Query.sol#32-55) uses assembly
	- INLINE ASM (contracts/lib/ERC165Query.sol#39-54)
","address,bytes4) (contracts/lib/ERC165Query.sol",32-55
assembly,Informational,"Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#196-216) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#208-211)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",196-216
pragma,Informational,"5 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
	- Version constraint >=0.7.0 is used by:
		->=0.7.0 (node_modules/@rari-capital/solmate/src/auth/Trust.sol#2)
	- Version constraint ^0.8.10 is used by:
		-^0.8.10 (contracts/SandclockFactory.sol#2)
		-^0.8.10 (contracts/Vault.sol#2)
		-^0.8.10 (contracts/integrations/IIntegration.sol#2)
		-^0.8.10 (contracts/lib/ERC165Query.sol#2)
		-^0.8.10 (contracts/lib/PercentMath.sol#2)
		-^0.8.10 (contracts/mock/MockCurvePool.sol#2)
		-^0.8.10 (contracts/mock/MockEthAnchorRouter.sol#2)
		-^0.8.10 (contracts/mock/MockExchangeRateFeeder.sol#2)
		-^0.8.10 (contracts/mock/MockVault.sol#2)
		-^0.8.10 (contracts/strategy/BaseStrategy.sol#2)
		-^0.8.10 (contracts/strategy/IStrategy.sol#2)
		-^0.8.10 (contracts/strategy/NonUSTStrategy.sol#2)
		-^0.8.10 (contracts/strategy/USTStrategy.sol#2)
		-^0.8.10 (contracts/strategy/anchor/IEthAnchorRouter.sol#2)
		-^0.8.10 (contracts/strategy/anchor/IExchangeRateFeeder.sol#2)
		-^0.8.10 (contracts/strategy/curve/ICurve.sol#2)
		-^0.8.10 (contracts/vault/Claimers.sol#2)
		-^0.8.10 (contracts/vault/IClaimers.sol#2)
		-^0.8.10 (contracts/vault/IVault.sol#2)
		-^0.8.10 (contracts/vault/IVaultSponsoring.sol#2)
	- Version constraint =0.8.10 is used by:
		-=0.8.10 (contracts/mock/MockERC20.sol#2)
		-=0.8.10 (contracts/mock/MockStrategy.sol#2)
		-=0.8.10 (contracts/test/TestERC20.sol#2)
		-=0.8.10 (contracts/vault/Depositors.sol#2)
	- Version constraint >=0.4.22<0.9.0 is used by:
		->=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint =0.8.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- =0.8.10 (contracts/mock/MockERC20.sol#2)
	- =0.8.10 (contracts/mock/MockStrategy.sol#2)
	- =0.8.10 (contracts/test/TestERC20.sol#2)
	- =0.8.10 (contracts/vault/Depositors.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.4.22<0.9.0 is too complex.
It is used by:
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- ^0.8.10 (contracts/SandclockFactory.sol#2)
	- ^0.8.10 (contracts/Vault.sol#2)
	- ^0.8.10 (contracts/integrations/IIntegration.sol#2)
	- ^0.8.10 (contracts/lib/ERC165Query.sol#2)
	- ^0.8.10 (contracts/lib/PercentMath.sol#2)
	- ^0.8.10 (contracts/mock/MockCurvePool.sol#2)
	- ^0.8.10 (contracts/mock/MockEthAnchorRouter.sol#2)
	- ^0.8.10 (contracts/mock/MockExchangeRateFeeder.sol#2)
	- ^0.8.10 (contracts/mock/MockVault.sol#2)
	- ^0.8.10 (contracts/strategy/BaseStrategy.sol#2)
	- ^0.8.10 (contracts/strategy/IStrategy.sol#2)
	- ^0.8.10 (contracts/strategy/NonUSTStrategy.sol#2)
	- ^0.8.10 (contracts/strategy/USTStrategy.sol#2)
	- ^0.8.10 (contracts/strategy/anchor/IEthAnchorRouter.sol#2)
	- ^0.8.10 (contracts/strategy/anchor/IExchangeRateFeeder.sol#2)
	- ^0.8.10 (contracts/strategy/curve/ICurve.sol#2)
	- ^0.8.10 (contracts/vault/Claimers.sol#2)
	- ^0.8.10 (contracts/vault/IClaimers.sol#2)
	- ^0.8.10 (contracts/vault/IVault.sol#2)
	- ^0.8.10 (contracts/vault/IVaultSponsoring.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.7.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup.
It is used by:
	- >=0.7.0 (node_modules/@rari-capital/solmate/src/auth/Trust.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.10 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation.
It is used by:
	- ^0.8.10 (contracts/strategy/anchor/IConversionPool.sol#2)
",N/A,N/A
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#152-161):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#159)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",152-161
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#55-60):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#58)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",55-60
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#179-188):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#186)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",179-188
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#123-134):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#132)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",123-134
naming-convention,Informational,"Parameter TestERC20.burn(address,uint256)._amount (contracts/test/TestERC20.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ICurve.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/strategy/curve/ICurve.sol#9) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurvePool.exchange_underlying(int128,int128,uint256,uint256).min_dy (contracts/mock/MockCurvePool.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.validPerc(uint256)._amount (contracts/lib/PercentMath.sol#12) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.mint(address,uint256,uint256)._principal (contracts/vault/Claimers.sol#54) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percOf(uint256,uint256,uint256)._amount (contracts/lib/PercentMath.sol#23) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.mint(address,uint256,uint256)._shares (contracts/vault/Claimers.sol#55) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve.get_dy_underlying(int128,int128,uint256) (contracts/strategy/curve/ICurve.sol#12-16) is not in mixedCase
","int128,int128,uint256) (contracts/strategy/curve/ICurve.sol",12-16
naming-convention,Informational,"Parameter Vault.setStrategy(address)._strategy (contracts/Vault.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdraw(address,uint256[])._ids (contracts/Vault.sol#188) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC165Query.noThrowCall(address,bytes4)._interfaceId (contracts/lib/ERC165Query.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.notifyDepositResult(address,uint256)._amount (contracts/mock/MockEthAnchorRouter.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MockCurvePool.get_dy_underlying(int128,int128,uint256) (contracts/mock/MockCurvePool.sol#39-45) is not in mixedCase
","int128,int128,uint256) (contracts/mock/MockCurvePool.sol",39-45
naming-convention,Informational,"Parameter MockEthAnchorRouter.addPendingOperator(address)._operator (contracts/mock/MockEthAnchorRouter.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#179) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.finishRedeemStable(address)._operation (contracts/mock/MockEthAnchorRouter.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC165Query.doesContractImplementInterface(address,bytes4)._contract (contracts/lib/ERC165Query.sol#9) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.withdraw(address,uint256[])._to (contracts/Vault.sol#188) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Contract console (node_modules/hardhat/console.sol#4-1532) is not in CapWords
",node_modules/hardhat/console.sol,4-1532
naming-convention,Informational,"Parameter MockExchangeRateFeeder.setExchangeRate(uint256)._exchangeRate (contracts/mock/MockExchangeRateFeeder.sol#9) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.unsponsor(address,uint256[])._to (contracts/Vault.sol#270) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockERC20.mint(address,uint256)._user (contracts/mock/MockERC20.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Depositors.mint(address,uint256,uint256,uint256)._claimerId (contracts/vault/Depositors.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percPoints(uint256,uint256)._fracNum (contracts/lib/PercentMath.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.forceWithdraw(address,uint256[])._ids (contracts/Vault.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockCurvePool.updateRate(int128,int128,uint256)._rate (contracts/mock/MockCurvePool.sol#21) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.mint(address,uint256,uint256)._to (contracts/vault/Claimers.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.initRedeemStable(uint256)._amount (contracts/mock/MockEthAnchorRouter.sol#62) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.sponsor(uint256,uint256)._amount (contracts/Vault.sol#244) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.sponsor(uint256,uint256)._lockedUntil (contracts/Vault.sol#244) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.claimYield(address,address,uint256,uint256)._amount (contracts/vault/Claimers.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve.exchange_underlying(int128,int128,uint256,uint256) (contracts/strategy/curve/ICurve.sol#5-10) is not in mixedCase
","int128,int128,uint256,uint256) (contracts/strategy/curve/ICurve.sol",5-10
naming-convention,Informational,"Parameter MockEthAnchorRouter.finishDepositStable(address)._operation (contracts/mock/MockEthAnchorRouter.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.claimYield(address,address,uint256,uint256)._to (contracts/vault/Claimers.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percOf(uint256,uint256)._fracNum (contracts/lib/PercentMath.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter TestERC20.burn(address,uint256)._user (contracts/test/TestERC20.sol#15) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.forceUnsponsor(address,uint256[])._ids (contracts/Vault.sol#275) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.onWithdraw(uint256,uint256,uint256)._principal (contracts/vault/Claimers.sol#76) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter BaseStrategy.setPerfFeePct(uint16)._perfFeePct (contracts/strategy/BaseStrategy.sol#249) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.unsponsor(address,uint256[])._ids (contracts/Vault.sol#270) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter TestERC20.mint(address,uint256)._user (contracts/test/TestERC20.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Depositors.mint(address,uint256,uint256,uint256)._amount (contracts/vault/Depositors.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.sharesOf(uint256)._tokenId (contracts/vault/Claimers.sol#88) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Depositors.exists(uint256)._tokenId (contracts/vault/Depositors.sol#65) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockERC20.mint(address,uint256)._amount (contracts/mock/MockERC20.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.principalOf(uint256)._tokenId (contracts/vault/Claimers.sol#84) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MockCurvePool.exchange_underlying(int128,int128,uint256,uint256) (contracts/mock/MockCurvePool.sol#26-37) is not in mixedCase
","int128,int128,uint256,uint256) (contracts/mock/MockCurvePool.sol",26-37
naming-convention,Informational,"Parameter PercentMath.percOf(uint256,uint256,uint256)._fracNum (contracts/lib/PercentMath.sol#24) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter TestERC20.mint(address,uint256)._amount (contracts/test/TestERC20.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.notifyRedeemResult(address,uint256)._amount (contracts/mock/MockEthAnchorRouter.sol#74) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.is100Perc(uint256)._perc (contracts/lib/PercentMath.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.setInvestPerc(uint16)._investPerc (contracts/Vault.sol#201) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.onWithdraw(uint256,uint256,uint256)._tokenId (contracts/vault/Claimers.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percPoints(uint256,uint256)._fracDenom (contracts/lib/PercentMath.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.claimYield(address,address,uint256,uint256)._owner (contracts/vault/Claimers.sol#38) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.notifyRedeemResult(address,uint256)._operation (contracts/mock/MockEthAnchorRouter.sol#74) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.notifyDepositResult(address,uint256)._operation (contracts/mock/MockEthAnchorRouter.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant ERC165Query.InvalidID (contracts/lib/ERC165Query.sol#5) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percOf(uint256,uint256)._amount (contracts/lib/PercentMath.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.forceUnsponsor(address,uint256[])._to (contracts/Vault.sol#275) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.yieldFor(address)._to (contracts/Vault.sol#137) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Depositors.mint(address,uint256,uint256,uint256)._owner (contracts/vault/Depositors.sol#45) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.claimYield(address,address,uint256,uint256)._shares (contracts/vault/Claimers.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Vault._blockTimestamp() (contracts/Vault.sol#593-595) is not in mixedCase
",) (contracts/Vault.sol,593-595
naming-convention,Informational,"Parameter Depositors.burn(uint256)._id (contracts/vault/Depositors.sol#61) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC165Query.noThrowCall(address,bytes4)._contract (contracts/lib/ERC165Query.sol#32) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.forceWithdraw(address,uint256[])._to (contracts/Vault.sol#196) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter PercentMath.percOf(uint256,uint256,uint256)._fracDenom (contracts/lib/PercentMath.sol#25) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC165Query.doesContractImplementInterface(address,bytes4)._interfaceId (contracts/lib/ERC165Query.sol#10) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Claimers.onWithdraw(uint256,uint256,uint256)._shares (contracts/vault/Claimers.sol#77) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Depositors.mint(address,uint256,uint256,uint256)._lockedUntil (contracts/vault/Depositors.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.claimYield(address)._to (contracts/Vault.sol#166) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockEthAnchorRouter.initDepositStable(uint256)._amount (contracts/mock/MockEthAnchorRouter.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Vault.deposit(IVault.DepositParams)._params (contracts/Vault.sol#160) is not in mixedCase
",N/A,N/A
unused-state,Informational,"Depositors.nextId (contracts/vault/Depositors.sol#27) is never used in Depositors (contracts/vault/Depositors.sol#9-68)
",contracts/vault/Depositors.sol,9-68
constable-states,Optimization,"Depositors.nextId (contracts/vault/Depositors.sol#27) should be constant 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.treasury (contracts/strategy/BaseStrategy.sol#37) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Claimers.vault (contracts/vault/Claimers.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.ethAnchorRouter (contracts/strategy/BaseStrategy.sol#49) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Vault.depositors (contracts/Vault.sol#65) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.aUstToken (contracts/strategy/BaseStrategy.sol#43) should be immutable 
",N/A,N/A
immutable-states,Optimization,"NonUSTStrategy.underlyingI (contracts/strategy/NonUSTStrategy.sol#20) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockEthAnchorRouter.ustToken (contracts/mock/MockEthAnchorRouter.sol#11) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.underlying (contracts/strategy/BaseStrategy.sol#32) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.vault (contracts/strategy/BaseStrategy.sol#34) should be immutable 
",N/A,N/A
immutable-states,Optimization,"NonUSTStrategy.curvePool (contracts/strategy/NonUSTStrategy.sol#17) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockEthAnchorRouter.aUstToken (contracts/mock/MockEthAnchorRouter.sol#12) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.exchangeRateFeeder (contracts/strategy/BaseStrategy.sol#52) should be immutable 
",N/A,N/A
immutable-states,Optimization,"NonUSTStrategy.ustI (contracts/strategy/NonUSTStrategy.sol#23) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Vault.claimers (contracts/Vault.sol#68) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Depositors.vault (contracts/vault/Depositors.sol#13) should be immutable 
",N/A,N/A
immutable-states,Optimization,"Vault.underlying (contracts/Vault.sol#50) should be immutable 
",N/A,N/A
immutable-states,Optimization,"BaseStrategy.ustToken (contracts/strategy/BaseStrategy.sol#40) should be immutable 
",N/A,N/A
