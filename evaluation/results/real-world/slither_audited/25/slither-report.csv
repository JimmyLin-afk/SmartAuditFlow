Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"Join._join(address,uint128) (contracts/Join.sol#52-62) uses arbitrary from in transferFrom: token.safeTransferFrom(user,address(this),amount - available) (contracts/Join.sol#60)
","address,uint128) (contracts/Join.sol",52-62
controlled-delegatecall,High,"Ladle.moduleCall(address,bytes) (contracts/Ladle.sol#496-504) uses delegatecall to a input-controlled function id
	- (success,result) = module.delegatecall(data) (contracts/Ladle.sol#502)
","address,bytes) (contracts/Ladle.sol",496-504
delegatecall-loop,High,"Ladle.batch(bytes[]) (contracts/Ladle.sol#127-137) has delegatecall inside a loop in a payable function: (success,result) = address(this).delegatecall(calls[i]) (contracts/Ladle.sol#130)
",bytes[]) (contracts/Ladle.sol,127-137
unchecked-transfer,High,"ERC20Rewards.claim(address) (contracts/utils/token/ERC20Rewards.sol#168-177) ignores return value by rewardsToken.transfer(to,claiming) (contracts/utils/token/ERC20Rewards.sol#175)
",address) (contracts/utils/token/ERC20Rewards.sol,168-177
divide-before-multiply,Medium,"Pool._mintInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#246-313) performs a multiplication on the result of a division:
	- tokensMinted = (supply * (fyTokenToBuy + fyTokenIn)) / (_realFYTokenCached - fyTokenToBuy) (contracts/yieldspace/Pool.sol#284)
	- baseIn = baseToSell + ((_baseCached + baseToSell) * tokensMinted) / supply (contracts/yieldspace/Pool.sol#285)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",246-313
divide-before-multiply,Medium,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#677-718) performs a multiplication on the result of a division:
	- result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (contracts/yieldspace/Math64x64.sol#695)
	- hi = result * (y >> 128) (contracts/yieldspace/Math64x64.sol#698)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",677-718
divide-before-multiply,Medium,"Pool._mintInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#246-313) performs a multiplication on the result of a division:
	- tokensMinted = (supply * baseIn) / _baseCached (contracts/yieldspace/Pool.sol#279)
	- fyTokenIn = (_realFYTokenCached * tokensMinted) / supply (contracts/yieldspace/Pool.sol#280)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",246-313
divide-before-multiply,Medium,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#677-718) performs a multiplication on the result of a division:
	- result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (contracts/yieldspace/Math64x64.sol#695)
	- lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (contracts/yieldspace/Math64x64.sol#699)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",677-718
erc20-interface,Medium,"DaiAbstract (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#5-28) has incorrect ERC20 function interface:DaiAbstract.transfer(address,uint256) (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#19)
",node_modules/dss-interfaces/src/dss/DaiAbstract.sol,5-28
incorrect-equality,Medium,"Witch.auction(bytes12) (contracts/Witch.sol#86-97) uses a dangerous strict equality:
	- require(bool,string)(auctions[vaultId].start == 0,Vault already under auction) (contracts/Witch.sol#89)
",bytes12) (contracts/Witch.sol,86-97
incorrect-equality,Medium,"Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156) uses a dangerous strict equality:
	- require(bool,string)(ink == balances_.ink || balances_.ink - ink >= ilk_.dust,Leaves dust) (contracts/Witch.sol#148)
","bytes12,uint128) (contracts/Witch.sol",132-156
incorrect-equality,Medium,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128) uses a dangerous strict equality:
	- require(bool,string)(ink == balances_.ink || balances_.ink - ink >= ilk_.dust,Leaves dust) (contracts/Witch.sol#117)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
reentrancy-no-eth,Medium,"Reentrancy in Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252):
	External calls:
	- IERC20(address(pool)).safeTransfer(address(pool),toDivest) (contracts/yieldspace/Strategy.sol#211)
	- (None,None,fyTokenDivested) = pool.burn(address(this),0,0) (contracts/yieldspace/Strategy.sol#212)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRepay) (contracts/yieldspace/Strategy.sol#219)
	- ladle.pour(vaultId,address(this),0,- toRepay_) (contracts/yieldspace/Strategy.sol#221)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRedeem) (contracts/yieldspace/Strategy.sol#228)
	- fyToken.redeem(address(this),toRedeem) (contracts/yieldspace/Strategy.sol#229)
	- base.safeTransfer(address(baseJoin),cauldron.debtToBase(seriesId,debt.u128())) (contracts/yieldspace/Strategy.sol#234)
	- ladle.close(vaultId,address(this),0,- debt_) (contracts/yieldspace/Strategy.sol#236)
	- ladle.pour(vaultId,address(this),- (balances_.ink.i128()),0) (contracts/yieldspace/Strategy.sol#240)
	State variables written after the call(s):
	- delete fyToken (contracts/yieldspace/Strategy.sol#246)
	Strategy.fyToken (contracts/yieldspace/Strategy.sol#60) can be used in cross function reentrancies:
	- Strategy.afterMaturity() (contracts/yieldspace/Strategy.sol#90-96)
	- Strategy.beforeMaturity() (contracts/yieldspace/Strategy.sol#82-88)
	- Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252)
	- Strategy.fyToken (contracts/yieldspace/Strategy.sol#60)
	- Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201)
	- delete pool (contracts/yieldspace/Strategy.sol#245)
	Strategy.pool (contracts/yieldspace/Strategy.sol#58) can be used in cross function reentrancies:
	- Strategy.burn(address) (contracts/yieldspace/Strategy.sol#272-283)
	- Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252)
	- Strategy.mint(address) (contracts/yieldspace/Strategy.sol#256-267)
	- Strategy.pool (contracts/yieldspace/Strategy.sol#58)
	- Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201)
	- delete seriesId (contracts/yieldspace/Strategy.sol#247)
	Strategy.seriesId (contracts/yieldspace/Strategy.sol#59) can be used in cross function reentrancies:
	- Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252)
	- Strategy.seriesId (contracts/yieldspace/Strategy.sol#59)
	- Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201)
",) (contracts/yieldspace/Strategy.sol,204-252
reentrancy-no-eth,Medium,"Reentrancy in Join.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/Join.sol#136-149):
	External calls:
	- _exit(address(receiver),_amount) (contracts/Join.sol#143)
		- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/TransferHelper.sol#22)
		- token.safeTransfer(user,amount) (contracts/Join.sol#80)
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,_amount,_fee,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/Join.sol#145)
	- _join(address(receiver),_amount + _fee) (contracts/Join.sol#147)
		- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (contracts/utils/token/TransferHelper.sol#38)
		- token.safeTransferFrom(user,address(this),amount - available) (contracts/Join.sol#60)
	State variables written after the call(s):
	- _join(address(receiver),_amount + _fee) (contracts/Join.sol#147)
		- storedBalance = _storedBalance + amount (contracts/Join.sol#59)
	Join.storedBalance (contracts/Join.sol#26) can be used in cross function reentrancies:
	- Join._exit(address,uint128) (contracts/Join.sol#74-82)
	- Join._join(address,uint128) (contracts/Join.sol#52-62)
	- Join.maxFlashLoan(address) (contracts/Join.sol#98-103)
	- Join.storedBalance (contracts/Join.sol#26)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/Join.sol",136-149
reentrancy-no-eth,Medium,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#219-229):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#226)
	State variables written after the call(s):
	- _burn(address(receiver),amount) (contracts/FYToken.sol#227)
		- _balanceOf[src] = _balanceOf[src] - wad (contracts/utils/token/ERC20.sol#190)
	ERC20._balanceOf (contracts/utils/token/ERC20.sol#30) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (contracts/utils/token/ERC20.sol#187-196)
	- FYToken._burn(address,uint256) (contracts/FYToken.sol#167-180)
	- ERC20._mint(address,uint256) (contracts/utils/token/ERC20.sol#167-173)
	- ERC20._transfer(address,address,uint256) (contracts/utils/token/ERC20.sol#115-123)
	- ERC20.balanceOf(address) (contracts/utils/token/ERC20.sol#55-57)
	- _burn(address(receiver),amount) (contracts/FYToken.sol#227)
		- _totalSupply = _totalSupply - wad (contracts/utils/token/ERC20.sol#191)
	ERC20._totalSupply (contracts/utils/token/ERC20.sol#29) can be used in cross function reentrancies:
	- ERC20._burn(address,uint256) (contracts/utils/token/ERC20.sol#187-196)
	- ERC20._mint(address,uint256) (contracts/utils/token/ERC20.sol#167-173)
	- FYToken.maxFlashLoan(address) (contracts/FYToken.sol#187-193)
	- ERC20.totalSupply() (contracts/utils/token/ERC20.sol#48-50)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",219-229
reentrancy-no-eth,Medium,"Reentrancy in Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128):
	External calls:
	- art = cauldron.debtFromBase(vault_.seriesId,base) (contracts/Witch.sol#111)
	- cauldron.slurp(vaultId,ink.u128(),art.u128()) (contracts/Witch.sol#120)
	- settle(msg.sender,vault_.ilkId,series_.baseId,ink.u128(),base) (contracts/Witch.sol#121)
		- ilkJoin.exit(user,ink) (contracts/Witch.sol#165)
		- baseJoin.join(user,art) (contracts/Witch.sol#170)
	- cauldron.give(vaultId,auction_.owner) (contracts/Witch.sol#123)
	State variables written after the call(s):
	- delete auctions[vaultId] (contracts/Witch.sol#124)
	Witch.auctions (contracts/Witch.sol#44) can be used in cross function reentrancies:
	- Witch.auction(bytes12) (contracts/Witch.sol#86-97)
	- Witch.auctions (contracts/Witch.sol#44)
	- Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128)
	- Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
reentrancy-no-eth,Medium,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#287-315):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#310)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#311)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	State variables written after the call(s):
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#311)
		- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#444)
	Cauldron.ratesAtMaturity (contracts/Cauldron.sol#61) can be used in cross function reentrancies:
	- Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#459-472)
	- Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#438-446)
	- Cauldron.mature(bytes6) (contracts/Cauldron.sol#429-435)
	- Cauldron.ratesAtMaturity (contracts/Cauldron.sol#61)
","bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol",287-315
reentrancy-no-eth,Medium,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#369-376):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#374)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	State variables written after the call(s):
	- _give(vaultId,receiver) (contracts/Cauldron.sol#375)
		- vaults[vaultId] = vault (contracts/Cauldron.sol#233)
	Cauldron.vaults (contracts/Cauldron.sol#64) can be used in cross function reentrancies:
	- Cauldron._give(bytes12,address) (contracts/Cauldron.sol#226-235)
	- Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#194-203)
	- Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#162-180)
	- Cauldron.destroy(bytes12) (contracts/Cauldron.sol#183-191)
	- Cauldron.tweak(bytes12,bytes6,bytes6) (contracts/Cauldron.sol#207-223)
	- Cauldron.vaultData(bytes12,bool) (contracts/Cauldron.sol#248-257)
	- Cauldron.vaults (contracts/Cauldron.sol#64)
","bytes12,address) (contracts/Cauldron.sol",369-376
reentrancy-no-eth,Medium,"Reentrancy in Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252):
	External calls:
	- IERC20(address(pool)).safeTransfer(address(pool),toDivest) (contracts/yieldspace/Strategy.sol#211)
	- (None,None,fyTokenDivested) = pool.burn(address(this),0,0) (contracts/yieldspace/Strategy.sol#212)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRepay) (contracts/yieldspace/Strategy.sol#219)
	- ladle.pour(vaultId,address(this),0,- toRepay_) (contracts/yieldspace/Strategy.sol#221)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRedeem) (contracts/yieldspace/Strategy.sol#228)
	- fyToken.redeem(address(this),toRedeem) (contracts/yieldspace/Strategy.sol#229)
	- base.safeTransfer(address(baseJoin),cauldron.debtToBase(seriesId,debt.u128())) (contracts/yieldspace/Strategy.sol#234)
	- ladle.close(vaultId,address(this),0,- debt_) (contracts/yieldspace/Strategy.sol#236)
	- ladle.pour(vaultId,address(this),- (balances_.ink.i128()),0) (contracts/yieldspace/Strategy.sol#240)
	- ladle.destroy(vaultId) (contracts/yieldspace/Strategy.sol#250)
	State variables written after the call(s):
	- delete vaultId (contracts/yieldspace/Strategy.sol#251)
	Strategy.vaultId (contracts/yieldspace/Strategy.sol#56) can be used in cross function reentrancies:
	- Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252)
	- Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201)
	- Strategy.vaultId (contracts/yieldspace/Strategy.sol#56)
",) (contracts/yieldspace/Strategy.sol,204-252
uninitialized-local,Medium,"CompoundMultiOracle._peek(bytes6,bytes6).rawPrice (contracts/oracles/compound/CompoundMultiOracle.sol#64) is a local variable never initialized
",N/A,N/A
uninitialized-local,Medium,"Pool._mintInternal(address,bool,uint256,uint256).baseToSell (contracts/yieldspace/Pool.sol#268) is a local variable never initialized
",N/A,N/A
unused-return,Medium,"Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#438-446) ignores return value by (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",438-446
unused-return,Medium,"Ladle.close(bytes12,address,int128,int128) (contracts/Ladle.sol#267-291) ignores return value by baseJoin.join(msg.sender,base) (contracts/Ladle.sol#290)
","bytes12,address,int128,int128) (contracts/Ladle.sol",267-291
unused-return,Medium,"Ladle.roll(bytes12,bytes6,uint8,uint128) (contracts/Ladle.sol#326-361) ignores return value by baseJoin.join(address(baseJoin),base) (contracts/Ladle.sol#350)
","bytes12,bytes6,uint8,uint128) (contracts/Ladle.sol",326-361
unused-return,Medium,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128) ignores return value by cauldron.slurp(vaultId,ink.u128(),art.u128()) (contracts/Witch.sol#120)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
unused-return,Medium,"Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201) ignores return value by (vaultId,None) = ladle.build(seriesId,baseId,0) (contracts/yieldspace/Strategy.sol#172)
",) (contracts/yieldspace/Strategy.sol,159-201
unused-return,Medium,"Ladle.close(bytes12,address,int128,int128) (contracts/Ladle.sol#267-291) ignores return value by ilkJoin.join(vault.owner,uint128(ink)) (contracts/Ladle.sol#284)
","bytes12,address,int128,int128) (contracts/Ladle.sol",267-291
unused-return,Medium,"Ladle.stir(bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol#200-206) ignores return value by cauldron.stir(from,to,ink,art) (contracts/Ladle.sol#205)
","bytes12,bytes12,uint128,uint128) (contracts/Ladle.sol",200-206
unused-return,Medium,"Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252) ignores return value by (None,None,fyTokenDivested) = pool.burn(address(this),0,0) (contracts/yieldspace/Strategy.sol#212)
",) (contracts/yieldspace/Strategy.sol,204-252
unused-return,Medium,"Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201) ignores return value by (None,None,cached) = pool.mint(address(this),true,0) (contracts/yieldspace/Strategy.sol#196)
",) (contracts/yieldspace/Strategy.sol,159-201
unused-return,Medium,"Ladle.repayVault(bytes12,address,int128,uint128) (contracts/Ladle.sol#311-323) ignores return value by pool.retrieveBase(msg.sender) (contracts/Ladle.sol#322)
","bytes12,address,int128,uint128) (contracts/Ladle.sol",311-323
unused-return,Medium,"ChainlinkMultiOracle._peek(bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#75-90) ignores return value by (roundId,rawPrice,None,updateTime,answeredInRound) = AggregatorV3Interface(source.source).latestRoundData() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#81)
","bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",75-90
unused-return,Medium,"Ladle.serve(bytes12,address,uint128,uint128,uint128) (contracts/Ladle.sol#250-260) ignores return value by pool.buyBase(to,base,max) (contracts/Ladle.sol#259)
","bytes12,address,uint128,uint128,uint128) (contracts/Ladle.sol",250-260
unused-return,Medium,"Ladle.close(bytes12,address,int128,int128) (contracts/Ladle.sol#267-291) ignores return value by cauldron.pour(vaultId,ink,art) (contracts/Ladle.sol#279)
","bytes12,address,int128,int128) (contracts/Ladle.sol",267-291
unused-return,Medium,"Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156) ignores return value by cauldron.slurp(vaultId,ink.u128(),balances_.art) (contracts/Witch.sol#151)
","bytes12,uint128) (contracts/Witch.sol",132-156
unused-return,Medium,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128) ignores return value by cauldron.give(vaultId,auction_.owner) (contracts/Witch.sol#123)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
unused-return,Medium,"Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156) ignores return value by cauldron.give(vaultId,auction_.owner) (contracts/Witch.sol#153)
","bytes12,uint128) (contracts/Witch.sol",132-156
unused-return,Medium,"Ladle.close(bytes12,address,int128,int128) (contracts/Ladle.sol#267-291) ignores return value by ilkJoin.exit(to,uint128(- ink)) (contracts/Ladle.sol#285)
","bytes12,address,int128,int128) (contracts/Ladle.sol",267-291
unused-return,Medium,"Witch.settle(address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol#159-172) ignores return value by baseJoin.join(user,art) (contracts/Witch.sol#170)
","address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol",159-172
unused-return,Medium,"Witch.settle(address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol#159-172) ignores return value by ilkJoin.exit(user,ink) (contracts/Witch.sol#165)
","address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol",159-172
unused-return,Medium,"FYToken._mature() (contracts/FYToken.sol#101-108) ignores return value by (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#105)
",) (contracts/FYToken.sol,101-108
unused-return,Medium,"FYToken._accrual() (contracts/FYToken.sol#121-132) ignores return value by (chi,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#128)
",) (contracts/FYToken.sol,121-132
unused-return,Medium,"Ladle.repayLadle(bytes12) (contracts/Ladle.sol#366-380) ignores return value by cauldron.pour(vaultId,0,- (repaid.u128().i128())) (contracts/Ladle.sol#378)
",bytes12) (contracts/Ladle.sol,366-380
unused-return,Medium,"Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252) ignores return value by fyToken.redeem(address(this),toRedeem) (contracts/yieldspace/Strategy.sol#229)
",) (contracts/yieldspace/Strategy.sol,204-252
unused-return,Medium,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#475-493) ignores return value by (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",475-493
unused-return,Medium,"Ladle.roll(bytes12,bytes6,uint8,uint128) (contracts/Ladle.sol#326-361) ignores return value by pool.retrieveFYToken(address(fyToken)) (contracts/Ladle.sol#352)
","bytes12,bytes6,uint8,uint128) (contracts/Ladle.sol",326-361
unused-return,Medium,"FYToken.redeem(address,uint256) (contracts/FYToken.sol#135-145) ignores return value by join.exit(to,redeemed.u128()) (contracts/FYToken.sol#142)
","address,uint256) (contracts/FYToken.sol",135-145
unused-return,Medium,"Cauldron._accrual(bytes6,DataTypes.Series) (contracts/Cauldron.sol#459-472) ignores return value by (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",459-472
unused-return,Medium,"Wand.addSeries(bytes6,bytes6,uint32,bytes6[],string,string) (contracts/Wand.sol#116-171) ignores return value by poolFactory.createPool(base,address(fyToken)) (contracts/Wand.sol#162)
","bytes6,bytes6,uint32,bytes6[],string,string) (contracts/Wand.sol",116-171
write-after-write,Medium,"PoolFactory._nextFYToken (contracts/yieldspace/PoolFactory.sol#15) is written in both
	_nextFYToken = fyToken (contracts/yieldspace/PoolFactory.sol#70)
	_nextFYToken = address(0) (contracts/yieldspace/PoolFactory.sol#73)
",N/A,N/A
write-after-write,Medium,"PoolFactory._nextBase (contracts/yieldspace/PoolFactory.sol#14) is written in both
	_nextBase = base (contracts/yieldspace/PoolFactory.sol#69)
	_nextBase = address(0) (contracts/yieldspace/PoolFactory.sol#72)
",N/A,N/A
shadowing-local,Low,"Strategy.constructor(string,string,uint8,ILadle,IERC20,bytes6).name (contracts/yieldspace/Strategy.sol#67) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"Strategy.constructor(string,string,uint8,ILadle,IERC20,bytes6).decimals (contracts/yieldspace/Strategy.sol#67) shadows:
	- ERC20.decimals (contracts/utils/token/ERC20.sol#34) (state variable)
	- IERC20Metadata.decimals() (contracts/interfaces/external/IERC20Metadata.sol#25) (function)
",N/A,N/A
shadowing-local,Low,"Ladle.constructor(ICauldron,IWETH9).cauldron (contracts/Ladle.sol#33) shadows:
	- LadleStorage.cauldron (contracts/LadleStorage.sol#10) (state variable)
",N/A,N/A
shadowing-local,Low,"ERC20Rewards.constructor(string,string,uint8).decimals (contracts/utils/token/ERC20Rewards.sol#59) shadows:
	- ERC20.decimals (contracts/utils/token/ERC20.sol#34) (state variable)
	- IERC20Metadata.decimals() (contracts/interfaces/external/IERC20Metadata.sol#25) (function)
",N/A,N/A
shadowing-local,Low,"ERC20Rewards.constructor(string,string,uint8).name (contracts/utils/token/ERC20Rewards.sol#59) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"Strategy.constructor(string,string,uint8,ILadle,IERC20,bytes6).symbol (contracts/yieldspace/Strategy.sol#67) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
shadowing-local,Low,"ERC20Rewards.constructor(string,string,uint8).symbol (contracts/utils/token/ERC20Rewards.sol#59) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
shadowing-local,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string).name (contracts/FYToken.sol#46) shadows:
	- ERC20.name (contracts/utils/token/ERC20.sol#32) (state variable)
	- IERC20Metadata.name() (contracts/interfaces/external/IERC20Metadata.sol#15) (function)
",N/A,N/A
shadowing-local,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string).symbol (contracts/FYToken.sol#47) shadows:
	- ERC20.symbol (contracts/utils/token/ERC20.sol#33) (state variable)
	- IERC20Metadata.symbol() (contracts/interfaces/external/IERC20Metadata.sol#20) (function)
",N/A,N/A
missing-zero-check,Low,"Join.constructor(address).asset_ (contracts/Join.sol#29) lacks a zero-check on :
		- asset = asset_ (contracts/Join.sol#30)
",N/A,N/A
missing-zero-check,Low,"PoolFactory.createPool(address,address).fyToken (contracts/yieldspace/PoolFactory.sol#68) lacks a zero-check on :
		- _nextFYToken = fyToken (contracts/yieldspace/PoolFactory.sol#70)
",N/A,N/A
missing-zero-check,Low,"SafeERC20Namer.tokenDecimals(address).token (contracts/utils/token/SafeERC20Namer.sol#97) lacks a zero-check on :
		- (success,data) = token.staticcall(abi.encodeWithSelector(IERC20Metadata.decimals.selector)) (contracts/utils/token/SafeERC20Namer.sol#98)
",N/A,N/A
missing-zero-check,Low,"Ownable.transferOwnership(address).newOwner (contracts/utils/access/Ownable.sol#23) lacks a zero-check on :
		- owner = newOwner (contracts/utils/access/Ownable.sol#25)
",N/A,N/A
missing-zero-check,Low,"Wand.point(bytes32,address).value (contracts/Wand.sol#56) lacks a zero-check on :
		- witch = value (contracts/Wand.sol#59)
",N/A,N/A
missing-zero-check,Low,"PoolFactory.createPool(address,address).base (contracts/yieldspace/PoolFactory.sol#68) lacks a zero-check on :
		- _nextBase = base (contracts/yieldspace/PoolFactory.sol#69)
",N/A,N/A
missing-zero-check,Low,"Wand.constructor(ICauldronGov,ILadleGov,address,IPoolFactory,IJoinFactory,IFYTokenFactory).witch_ (contracts/Wand.sol#42) lacks a zero-check on :
		- witch = witch_ (contracts/Wand.sol#49)
",N/A,N/A
calls-loop,Low,"TimeLock.execute(address[],bytes[]) (contracts/utils/TimeLock.sol#78-98) has external calls inside a loop: (success,result) = targets[i].call(data[i]) (contracts/utils/TimeLock.sol#93)
","address[],bytes[]) (contracts/utils/TimeLock.sol",78-98
calls-loop,Low,"EmergencyBrake.restore(address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol#101-113) has external calls inside a loop: AccessControl(contacts[i]).grantRoles(permissions[i],target) (contracts/utils/EmergencyBrake.sol#110)
","address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol",101-113
calls-loop,Low,"Ladle.batch(bytes[]) (contracts/Ladle.sol#127-137) has external calls inside a loop: (success,result) = address(this).delegatecall(calls[i]) (contracts/Ladle.sol#130)
",bytes[]) (contracts/Ladle.sol,127-137
calls-loop,Low,"CompositeMultiOracle._setSource(bytes6,bytes6,address) (contracts/oracles/composite/CompositeMultiOracle.sol#130-138) has external calls inside a loop: decimals_ = IOracle(source).decimals() (contracts/oracles/composite/CompositeMultiOracle.sol#131)
","bytes6,bytes6,address) (contracts/oracles/composite/CompositeMultiOracle.sol",130-138
calls-loop,Low,"CompositeMultiOracle._get(bytes6,bytes6,uint256,uint256) (contracts/oracles/composite/CompositeMultiOracle.sol#120-128) has external calls inside a loop: (priceOut,updateTimeOut) = IOracle(source.source).get(base,quote,10 ** source.decimals) (contracts/oracles/composite/CompositeMultiOracle.sol#125)
","bytes6,bytes6,uint256,uint256) (contracts/oracles/composite/CompositeMultiOracle.sol",120-128
calls-loop,Low,"CompositeMultiOracle._peek(bytes6,bytes6,uint256,uint256) (contracts/oracles/composite/CompositeMultiOracle.sol#110-118) has external calls inside a loop: (priceOut,updateTimeOut) = IOracle(source.source).peek(base,quote,10 ** source.decimals) (contracts/oracles/composite/CompositeMultiOracle.sol#115)
","bytes6,bytes6,uint256,uint256) (contracts/oracles/composite/CompositeMultiOracle.sol",110-118
calls-loop,Low,"ChainlinkMultiOracle._setSource(bytes6,bytes6,address) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#92-107) has external calls inside a loop: decimals_ = AggregatorV3Interface(source).decimals() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#93)
","bytes6,bytes6,address) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",92-107
calls-loop,Low,"EmergencyBrake.execute(address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol#77-98) has external calls inside a loop: AccessControl(contacts[i]).revokeRoles(permissions[i],target) (contracts/utils/EmergencyBrake.sol#95)
","address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol",77-98
calls-loop,Low,"EmergencyBrake.execute(address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol#77-98) has external calls inside a loop: require(bool,string)(AccessControl(contacts[i]).hasRole(permissions[i][j],target),Permission not found) (contracts/utils/EmergencyBrake.sol#89-92)
","address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol",77-98
reentrancy-benign,Low,"Reentrancy in FYToken._mature() (contracts/FYToken.sol#101-108):
	External calls:
	- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#105)
	State variables written after the call(s):
	- chiAtMaturity = _chiAtMaturity (contracts/FYToken.sol#106)
",) (contracts/FYToken.sol,101-108
reentrancy-benign,Low,"Reentrancy in Ladle._build(bytes6,bytes6,uint8) (contracts/Ladle.sol#156-168):
	External calls:
	- vault = cauldron.build(msg.sender,vaultId,seriesId,ilkId) (contracts/Ladle.sol#161-167)
	- _build(seriesId,ilkId,salt + 1) (contracts/Ladle.sol#166)
		- vault = cauldron.build(msg.sender,vaultId,seriesId,ilkId) (contracts/Ladle.sol#161-167)
	State variables written after the call(s):
	- _build(seriesId,ilkId,salt + 1) (contracts/Ladle.sol#166)
		- cachedVaultId = vaultId (contracts/Ladle.sol#163)
","bytes6,bytes6,uint8) (contracts/Ladle.sol",156-168
reentrancy-benign,Low,"Reentrancy in Ladle.batch(bytes[]) (contracts/Ladle.sol#127-137):
	External calls:
	- (success,result) = address(this).delegatecall(calls[i]) (contracts/Ladle.sol#130)
	State variables written after the call(s):
	- cachedVaultId = bytes12(0) (contracts/Ladle.sol#136)
",bytes[]) (contracts/Ladle.sol,127-137
reentrancy-benign,Low,"Reentrancy in Ladle._build(bytes6,bytes6,uint8) (contracts/Ladle.sol#156-168):
	External calls:
	- vault = cauldron.build(msg.sender,vaultId,seriesId,ilkId) (contracts/Ladle.sol#161-167)
	State variables written after the call(s):
	- cachedVaultId = vaultId (contracts/Ladle.sol#163)
","bytes6,bytes6,uint8) (contracts/Ladle.sol",156-168
reentrancy-benign,Low,"Reentrancy in Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201):
	External calls:
	- (vaultId,None) = ladle.build(seriesId,baseId,0) (contracts/yieldspace/Strategy.sol#172)
	- base.safeTransfer(baseJoin,fyTokenToPool) (contracts/yieldspace/Strategy.sol#190)
	- ladle.pour(vaultId,address(pool),fyTokenToPool_,fyTokenToPool_) (contracts/yieldspace/Strategy.sol#192)
	- base.safeTransfer(address(pool),baseToPool) (contracts/yieldspace/Strategy.sol#195)
	- (None,None,cached) = pool.mint(address(this),true,0) (contracts/yieldspace/Strategy.sol#196)
	State variables written after the call(s):
	- _mint(msg.sender,cached) (contracts/yieldspace/Strategy.sol#198)
		- _balanceOf[dst] = _balanceOf[dst] + wad (contracts/utils/token/ERC20.sol#168)
	- _mint(msg.sender,cached) (contracts/yieldspace/Strategy.sol#198)
		- _totalSupply = _totalSupply + wad (contracts/utils/token/ERC20.sol#169)
	- (None,None,cached) = pool.mint(address(this),true,0) (contracts/yieldspace/Strategy.sol#196)
",) (contracts/yieldspace/Strategy.sol,159-201
reentrancy-benign,Low,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#219-229):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#226)
	State variables written after the call(s):
	- _burn(address(receiver),amount) (contracts/FYToken.sol#227)
		- _allowance[owner][spender] = wad (contracts/utils/token/ERC20.sol#131)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",219-229
reentrancy-benign,Low,"Reentrancy in Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252):
	External calls:
	- IERC20(address(pool)).safeTransfer(address(pool),toDivest) (contracts/yieldspace/Strategy.sol#211)
	- (None,None,fyTokenDivested) = pool.burn(address(this),0,0) (contracts/yieldspace/Strategy.sol#212)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRepay) (contracts/yieldspace/Strategy.sol#219)
	- ladle.pour(vaultId,address(this),0,- toRepay_) (contracts/yieldspace/Strategy.sol#221)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRedeem) (contracts/yieldspace/Strategy.sol#228)
	- fyToken.redeem(address(this),toRedeem) (contracts/yieldspace/Strategy.sol#229)
	- base.safeTransfer(address(baseJoin),cauldron.debtToBase(seriesId,debt.u128())) (contracts/yieldspace/Strategy.sol#234)
	- ladle.close(vaultId,address(this),0,- debt_) (contracts/yieldspace/Strategy.sol#236)
	- ladle.pour(vaultId,address(this),- (balances_.ink.i128()),0) (contracts/yieldspace/Strategy.sol#240)
	State variables written after the call(s):
	- delete cached (contracts/yieldspace/Strategy.sol#248)
",) (contracts/yieldspace/Strategy.sol,204-252
reentrancy-benign,Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#438-446):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
	State variables written after the call(s):
	- ratesAtMaturity[seriesId] = rateAtMaturity (contracts/Cauldron.sol#444)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",438-446
reentrancy-events,Low,"Reentrancy in EmergencyBrake.restore(address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol#101-113):
	External calls:
	- AccessControl(contacts[i]).grantRoles(permissions[i],target) (contracts/utils/EmergencyBrake.sol#110)
	Event emitted after the call(s):
	- Restored(txHash,target,contacts,permissions) (contracts/utils/EmergencyBrake.sol#112)
","address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol",101-113
reentrancy-events,Low,"Reentrancy in ERC20Rewards.claim(address) (contracts/utils/token/ERC20Rewards.sol#168-177):
	External calls:
	- rewardsToken.transfer(to,claiming) (contracts/utils/token/ERC20Rewards.sol#175)
	Event emitted after the call(s):
	- Claimed(to,claiming) (contracts/utils/token/ERC20Rewards.sol#176)
",address) (contracts/utils/token/ERC20Rewards.sol,168-177
reentrancy-events,Low,"Reentrancy in Witch.auction(bytes12) (contracts/Witch.sol#86-97):
	External calls:
	- cauldron.grab(vaultId,address(this)) (contracts/Witch.sol#95)
	Event emitted after the call(s):
	- Auctioned(vaultId,block.timestamp.u32()) (contracts/Witch.sol#96)
",bytes12) (contracts/Witch.sol,86-97
reentrancy-events,Low,"Reentrancy in FYToken.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol#219-229):
	External calls:
	- require(bool,string)(receiver.onFlashLoan(msg.sender,token,amount,0,data) == FLASH_LOAN_RETURN,Non-compliant borrower) (contracts/FYToken.sol#226)
	Event emitted after the call(s):
	- Approval(owner,spender,wad) (contracts/utils/token/ERC20.sol#132)
		- _burn(address(receiver),amount) (contracts/FYToken.sol#227)
	- Transfer(src,address(0),wad) (contracts/utils/token/ERC20.sol#192)
		- _burn(address(receiver),amount) (contracts/FYToken.sol#227)
","IERC3156FlashBorrower,address,uint256,bytes) (contracts/FYToken.sol",219-229
reentrancy-events,Low,"Reentrancy in Cauldron.roll(bytes12,bytes6,int128) (contracts/Cauldron.sol#394-414):
	External calls:
	- require(bool,string)(_level(vault_,balances_,newSeries_) >= 0,Undercollateralized) (contracts/Cauldron.sol#410)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	Event emitted after the call(s):
	- VaultRolled(vaultId,newSeriesId,balances_.art) (contracts/Cauldron.sol#411)
","bytes12,bytes6,int128) (contracts/Cauldron.sol",394-414
reentrancy-events,Low,"Reentrancy in Strategy.startPool() (contracts/yieldspace/Strategy.sol#159-201):
	External calls:
	- (vaultId,None) = ladle.build(seriesId,baseId,0) (contracts/yieldspace/Strategy.sol#172)
	- base.safeTransfer(baseJoin,fyTokenToPool) (contracts/yieldspace/Strategy.sol#190)
	- ladle.pour(vaultId,address(pool),fyTokenToPool_,fyTokenToPool_) (contracts/yieldspace/Strategy.sol#192)
	- base.safeTransfer(address(pool),baseToPool) (contracts/yieldspace/Strategy.sol#195)
	- (None,None,cached) = pool.mint(address(this),true,0) (contracts/yieldspace/Strategy.sol#196)
	Event emitted after the call(s):
	- PoolStarted(address(pool)) (contracts/yieldspace/Strategy.sol#200)
	- Transfer(address(0),dst,wad) (contracts/utils/token/ERC20.sol#170)
		- _mint(msg.sender,cached) (contracts/yieldspace/Strategy.sol#198)
",) (contracts/yieldspace/Strategy.sol,159-201
reentrancy-events,Low,"Reentrancy in EmergencyBrake.execute(address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol#77-98):
	External calls:
	- AccessControl(contacts[i]).revokeRoles(permissions[i],target) (contracts/utils/EmergencyBrake.sol#95)
	Event emitted after the call(s):
	- Executed(txHash,target,contacts,permissions) (contracts/utils/EmergencyBrake.sol#97)
","address,address[],bytes4[][]) (contracts/utils/EmergencyBrake.sol",77-98
reentrancy-events,Low,"Reentrancy in Strategy.endPool() (contracts/yieldspace/Strategy.sol#204-252):
	External calls:
	- IERC20(address(pool)).safeTransfer(address(pool),toDivest) (contracts/yieldspace/Strategy.sol#211)
	- (None,None,fyTokenDivested) = pool.burn(address(this),0,0) (contracts/yieldspace/Strategy.sol#212)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRepay) (contracts/yieldspace/Strategy.sol#219)
	- ladle.pour(vaultId,address(this),0,- toRepay_) (contracts/yieldspace/Strategy.sol#221)
	- IERC20(address(fyToken)).safeTransfer(address(fyToken),toRedeem) (contracts/yieldspace/Strategy.sol#228)
	- fyToken.redeem(address(this),toRedeem) (contracts/yieldspace/Strategy.sol#229)
	- base.safeTransfer(address(baseJoin),cauldron.debtToBase(seriesId,debt.u128())) (contracts/yieldspace/Strategy.sol#234)
	- ladle.close(vaultId,address(this),0,- debt_) (contracts/yieldspace/Strategy.sol#236)
	- ladle.pour(vaultId,address(this),- (balances_.ink.i128()),0) (contracts/yieldspace/Strategy.sol#240)
	Event emitted after the call(s):
	- PoolEnded(address(pool)) (contracts/yieldspace/Strategy.sol#242)
",) (contracts/yieldspace/Strategy.sol,204-252
reentrancy-events,Low,"Reentrancy in JoinFactory.createJoin(address) (contracts/JoinFactory.sol#15-28):
	External calls:
	- join.grantRole(join.ROOT(),msg.sender) (contracts/JoinFactory.sol#22)
	- join.renounceRole(join.ROOT(),address(this)) (contracts/JoinFactory.sol#23)
	Event emitted after the call(s):
	- JoinCreated(asset,address(join)) (contracts/JoinFactory.sol#25)
",address) (contracts/JoinFactory.sol,15-28
reentrancy-events,Low,"Reentrancy in Pool.buyFYToken(address,uint128,uint128) (contracts/yieldspace/Pool.sol#638-675):
	External calls:
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#671)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,- (baseIn.i128()),fyTokenOut.i128()) (contracts/yieldspace/Pool.sol#673)
","address,uint128,uint128) (contracts/yieldspace/Pool.sol",638-675
reentrancy-events,Low,"Reentrancy in Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156):
	External calls:
	- cauldron.slurp(vaultId,ink.u128(),balances_.art) (contracts/Witch.sol#151)
	- settle(msg.sender,vault_.ilkId,series_.baseId,ink.u128(),cauldron.debtToBase(vault_.seriesId,balances_.art)) (contracts/Witch.sol#152)
		- ilkJoin.exit(user,ink) (contracts/Witch.sol#165)
		- baseJoin.join(user,art) (contracts/Witch.sol#170)
	- cauldron.give(vaultId,auction_.owner) (contracts/Witch.sol#153)
	Event emitted after the call(s):
	- Bought(vaultId,msg.sender,ink,balances_.art) (contracts/Witch.sol#155)
","bytes12,uint128) (contracts/Witch.sol",132-156
reentrancy-events,Low,"Reentrancy in Cauldron.grab(bytes12,address) (contracts/Cauldron.sol#369-376):
	External calls:
	- require(bool,string)(_level(vault_,balances_,series_) < 0,Not undercollateralized) (contracts/Cauldron.sol#374)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	Event emitted after the call(s):
	- VaultGiven(vaultId,receiver) (contracts/Cauldron.sol#234)
		- _give(vaultId,receiver) (contracts/Cauldron.sol#375)
","bytes12,address) (contracts/Cauldron.sol",369-376
reentrancy-events,Low,"Reentrancy in Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128):
	External calls:
	- art = cauldron.debtFromBase(vault_.seriesId,base) (contracts/Witch.sol#111)
	- cauldron.slurp(vaultId,ink.u128(),art.u128()) (contracts/Witch.sol#120)
	- settle(msg.sender,vault_.ilkId,series_.baseId,ink.u128(),base) (contracts/Witch.sol#121)
		- ilkJoin.exit(user,ink) (contracts/Witch.sol#165)
		- baseJoin.join(user,art) (contracts/Witch.sol#170)
	- cauldron.give(vaultId,auction_.owner) (contracts/Witch.sol#123)
	Event emitted after the call(s):
	- Bought(vaultId,msg.sender,ink,art) (contracts/Witch.sol#127)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
reentrancy-events,Low,"Reentrancy in Pool.sellBase(address,uint128) (contracts/yieldspace/Pool.sol#402-437):
	External calls:
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#433)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,- (baseIn.i128()),fyTokenOut.i128()) (contracts/yieldspace/Pool.sol#435)
","address,uint128) (contracts/yieldspace/Pool.sol",402-437
reentrancy-events,Low,"Reentrancy in Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#438-446):
	External calls:
	- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#445)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",438-446
reentrancy-events,Low,"Reentrancy in TimeLock.execute(address[],bytes[]) (contracts/utils/TimeLock.sol#78-98):
	External calls:
	- (success,result) = targets[i].call(data[i]) (contracts/utils/TimeLock.sol#93)
	Event emitted after the call(s):
	- Executed(txHash,targets,data) (contracts/utils/TimeLock.sol#97)
","address[],bytes[]) (contracts/utils/TimeLock.sol",78-98
reentrancy-events,Low,"Reentrancy in Pool.buyBase(address,uint128,uint128) (contracts/yieldspace/Pool.sol#485-522):
	External calls:
	- base.safeTransfer(to,tokenOut) (contracts/yieldspace/Pool.sol#518)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,tokenOut.i128(),- (fyTokenIn.i128())) (contracts/yieldspace/Pool.sol#520)
","address,uint128,uint128) (contracts/yieldspace/Pool.sol",485-522
reentrancy-events,Low,"Reentrancy in Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#475-493):
	External calls:
	- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
	- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#488)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#445)
		- accrual_ = _accrual(vault_.seriesId,series_) (contracts/Cauldron.sol#488)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",475-493
reentrancy-events,Low,"Reentrancy in PoolFactory.createPool(address,address) (contracts/yieldspace/PoolFactory.sol#68-80):
	External calls:
	- pool.transferOwnership(msg.sender) (contracts/yieldspace/PoolFactory.sol#75)
	Event emitted after the call(s):
	- PoolCreated(base,fyToken,address(pool)) (contracts/yieldspace/PoolFactory.sol#77)
","address,address) (contracts/yieldspace/PoolFactory.sol",68-80
reentrancy-events,Low,"Reentrancy in FYToken.redeem(address,uint256) (contracts/FYToken.sol#135-145):
	External calls:
	- redeemed = amount.wmul(_accrual()) (contracts/FYToken.sol#141)
		- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#105)
		- (chi,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#128)
	- join.exit(to,redeemed.u128()) (contracts/FYToken.sol#142)
	Event emitted after the call(s):
	- Redeemed(msg.sender,to,amount,redeemed) (contracts/FYToken.sol#144)
","address,uint256) (contracts/FYToken.sol",135-145
reentrancy-events,Low,"Reentrancy in Cauldron.stir(bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol#287-315):
	External calls:
	- require(bool,string)(_level(vaultFrom,balancesFrom,series[vaultFrom.seriesId]) >= 0,Undercollateralized at origin) (contracts/Cauldron.sol#310)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#311)
		- (rateAtMaturity,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#443)
		- (inkValue,None) = spotOracle_.oracle.get(series_.baseId,vault_.ilkId,balances_.ink) (contracts/Cauldron.sol#485)
		- (rate,None) = rateOracle.get(series_.baseId,bytes32(rate),1e18) (contracts/Cauldron.sol#468)
	Event emitted after the call(s):
	- SeriesMatured(seriesId,rateAtMaturity) (contracts/Cauldron.sol#445)
		- require(bool,string)(_level(vaultTo,balancesTo,series[vaultTo.seriesId]) >= 0,Undercollateralized at destination) (contracts/Cauldron.sol#311)
	- VaultStirred(from,to,ink,art) (contracts/Cauldron.sol#313)
","bytes12,bytes12,uint128,uint128) (contracts/Cauldron.sol",287-315
reentrancy-events,Low,"Reentrancy in Pool.sellFYToken(address,uint128) (contracts/yieldspace/Pool.sol#562-597):
	External calls:
	- base.safeTransfer(to,baseOut) (contracts/yieldspace/Pool.sol#593)
	Event emitted after the call(s):
	- Trade(maturity,msg.sender,to,baseOut.i128(),- (fyTokenIn.i128())) (contracts/yieldspace/Pool.sol#595)
","address,uint128) (contracts/yieldspace/Pool.sol",562-597
reentrancy-events,Low,"Reentrancy in FYTokenFactory.createFYToken(bytes6,IOracle,IJoin,uint32,string,string) (contracts/FYTokenFactory.sol#16-43):
	External calls:
	- fyToken.grantRole(fyToken.ROOT(),msg.sender) (contracts/FYTokenFactory.sol#37)
	- fyToken.renounceRole(fyToken.ROOT(),address(this)) (contracts/FYTokenFactory.sol#38)
	Event emitted after the call(s):
	- FYTokenCreated(address(fyToken),baseJoin.asset(),maturity) (contracts/FYTokenFactory.sol#40)
","bytes6,IOracle,IJoin,uint32,string,string) (contracts/FYTokenFactory.sol",16-43
reentrancy-events,Low,"Reentrancy in Pool._burnInternal(address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol#346-393):
	External calls:
	- base.safeTransfer(to,tokenOut) (contracts/yieldspace/Pool.sol#389)
	- IERC20(address(fyToken)).safeTransfer(to,fyTokenOut) (contracts/yieldspace/Pool.sol#390)
	Event emitted after the call(s):
	- Liquidity(maturity,msg.sender,to,tokenOut.i256(),fyTokenOut.i256(),- (tokensBurned.i256())) (contracts/yieldspace/Pool.sol#392)
","address,bool,uint256,uint256) (contracts/yieldspace/Pool.sol",346-393
reentrancy-events,Low,"Reentrancy in FYToken._mature() (contracts/FYToken.sol#101-108):
	External calls:
	- (_chiAtMaturity,None) = oracle.get(underlyingId,CHI,1e18) (contracts/FYToken.sol#105)
	Event emitted after the call(s):
	- SeriesMatured(_chiAtMaturity) (contracts/FYToken.sol#107)
",) (contracts/FYToken.sol,101-108
timestamp,Low,"Cauldron._mature(bytes6,DataTypes.Series) (contracts/Cauldron.sol#438-446) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(uint32(block.timestamp) >= series_.maturity,Only after maturity) (contracts/Cauldron.sol#441)
","bytes6,DataTypes.Series) (contracts/Cauldron.sol",438-446
timestamp,Low,"Witch.settle(address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol#159-172) uses timestamp for comparisons
	Dangerous comparisons:
	- ink != 0 (contracts/Witch.sol#162)
","address,bytes6,bytes6,uint128,uint128) (contracts/Witch.sol",159-172
timestamp,Low,"Witch.auction(bytes12) (contracts/Witch.sol#86-97) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(auctions[vaultId].start == 0,Vault already under auction) (contracts/Witch.sol#89)
",bytes12) (contracts/Witch.sol,86-97
timestamp,Low,"Cauldron.debtToBase(bytes6,uint128) (contracts/Cauldron.sol#274-284) uses timestamp for comparisons
	Dangerous comparisons:
	- uint32(block.timestamp) >= series[seriesId].maturity (contracts/Cauldron.sol#278)
","bytes6,uint128) (contracts/Cauldron.sol",274-284
timestamp,Low,"ERC20Rewards.setRewards(IERC20,uint32,uint32,uint96) (contracts/utils/token/ERC20Rewards.sol#74-98) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp.u32() < rewardsPeriod.start || block.timestamp.u32() > rewardsPeriod.end,Ongoing rewards) (contracts/utils/token/ERC20Rewards.sol#79-82)
","IERC20,uint32,uint32,uint96) (contracts/utils/token/ERC20Rewards.sol",74-98
timestamp,Low,"Cauldron.debtFromBase(bytes6,uint128) (contracts/Cauldron.sol#261-271) uses timestamp for comparisons
	Dangerous comparisons:
	- uint32(block.timestamp) >= series[seriesId].maturity (contracts/Cauldron.sol#265)
","bytes6,uint128) (contracts/Cauldron.sol",261-271
timestamp,Low,"Cauldron._level(DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol#475-493) uses timestamp for comparisons
	Dangerous comparisons:
	- uint32(block.timestamp) >= series_.maturity (contracts/Cauldron.sol#487)
","DataTypes.Vault,DataTypes.Balances,DataTypes.Series) (contracts/Cauldron.sol",475-493
timestamp,Low,"Witch.payAll(bytes12,uint128) (contracts/Witch.sol#132-156) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ink >= min,Not enough bought) (contracts/Witch.sol#147)
	- require(bool,string)(ink == balances_.ink || balances_.ink - ink >= ilk_.dust,Leaves dust) (contracts/Witch.sol#148)
","bytes12,uint128) (contracts/Witch.sol",132-156
timestamp,Low,"Witch.buy(bytes12,uint128,uint128) (contracts/Witch.sol#100-128) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ink >= min,Not enough bought) (contracts/Witch.sol#116)
	- require(bool,string)(ink == balances_.ink || balances_.ink - ink >= ilk_.dust,Leaves dust) (contracts/Witch.sol#117)
","bytes12,uint128,uint128) (contracts/Witch.sol",100-128
timestamp,Low,"TimeLock.execute(address[],bytes[]) (contracts/utils/TimeLock.sol#78-98) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= eta,ETA not reached.) (contracts/utils/TimeLock.sol#86)
	- require(bool,string)(block.timestamp <= eta + GRACE_PERIOD,Transaction is stale.) (contracts/utils/TimeLock.sol#87)
","address[],bytes[]) (contracts/utils/TimeLock.sol",78-98
timestamp,Low,"FYToken.constructor(bytes6,IOracle,IJoin,uint256,string,string) (contracts/FYToken.sol#41-63) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(maturity_ > now_ && maturity_ < now_ + MAX_TIME_TO_MATURITY && maturity_ < type()(uint32).max,Invalid maturity) (contracts/FYToken.sol#50-55)
","bytes6,IOracle,IJoin,uint256,string,string) (contracts/FYToken.sol",41-63
timestamp,Low,"TimeLock.schedule(address[],bytes[],uint256) (contracts/utils/TimeLock.sol#55-64) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= block.timestamp + delay,Must satisfy delay.) (contracts/utils/TimeLock.sol#59)
","address[],bytes[],uint256) (contracts/utils/TimeLock.sol",55-64
timestamp,Low,"ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol#59-91) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deadline >= block.timestamp,ERC20Permit: expired deadline) (contracts/utils/token/ERC20Permit.sol#60)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol",59-91
timestamp,Low,"Witch.inkPrice(DataTypes.Balances,uint256,uint256,uint256) (contracts/Witch.sol#178-187) uses timestamp for comparisons
	Dangerous comparisons:
	- duration_ < elapsed (contracts/Witch.sol#183)
","DataTypes.Balances,uint256,uint256,uint256) (contracts/Witch.sol",178-187
assembly,Informational,"PoolFactory.isContract(address) (contracts/yieldspace/PoolFactory.sol#18-27) uses assembly
	- INLINE ASM (contracts/yieldspace/PoolFactory.sol#25)
",address) (contracts/yieldspace/PoolFactory.sol,18-27
assembly,Informational,"ERC20Permit.DOMAIN_SEPARATOR() (contracts/utils/token/ERC20Permit.sol#44-48) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#46)
",) (contracts/utils/token/ERC20Permit.sol,44-48
assembly,Informational,"RevertMsgExtractor.getRevertMsg(bytes) (contracts/utils/RevertMsgExtractor.sol#10-22) uses assembly
	- INLINE ASM (contracts/utils/RevertMsgExtractor.sol#17-20)
",bytes) (contracts/utils/RevertMsgExtractor.sol,10-22
assembly,Informational,"ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol#59-91) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#63)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (contracts/utils/token/ERC20Permit.sol",59-91
assembly,Informational,"ERC20Permit.constructor(string,string,uint8) (contracts/utils/token/ERC20Permit.sol#23-28) uses assembly
	- INLINE ASM (contracts/utils/token/ERC20Permit.sol#25)
","string,string,uint8) (contracts/utils/token/ERC20Permit.sol",23-28
boolean-equal,Informational,"CTokenMultiOracle._peek(bytes6,bytes6) (contracts/oracles/compound/CTokenMultiOracle.sol#73-89) compares to a boolean constant:
	-source.inverse == true (contracts/oracles/compound/CTokenMultiOracle.sol#82)
","bytes6,bytes6) (contracts/oracles/compound/CTokenMultiOracle.sol",73-89
boolean-equal,Informational,"Cauldron.build(address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol#162-180) compares to a boolean constant:
	-require(bool,string)(ilks[seriesId][ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#171)
","address,bytes12,bytes6,bytes6) (contracts/Cauldron.sol",162-180
boolean-equal,Informational,"ChainlinkMultiOracle._peek(bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#75-90) compares to a boolean constant:
	-source.inverse == true (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#85)
","bytes6,bytes6) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol",75-90
boolean-equal,Informational,"Cauldron._tweak(bytes12,DataTypes.Vault) (contracts/Cauldron.sol#194-203) compares to a boolean constant:
	-require(bool,string)(ilks[vault.seriesId][vault.ilkId] == true,Ilk not added to series) (contracts/Cauldron.sol#199)
","bytes12,DataTypes.Vault) (contracts/Cauldron.sol",194-203
boolean-equal,Informational,"CTokenMultiOracle._get(bytes6,bytes6) (contracts/oracles/compound/CTokenMultiOracle.sol#91-107) compares to a boolean constant:
	-source.inverse == true (contracts/oracles/compound/CTokenMultiOracle.sol#100)
","bytes6,bytes6) (contracts/oracles/compound/CTokenMultiOracle.sol",91-107
pragma,Informational,"8 different versions of Solidity are used:
	- Version constraint 0.8.1 is used by:
		-0.8.1 (contracts/Cauldron.sol#2)
		-0.8.1 (contracts/FYToken.sol#2)
		-0.8.1 (contracts/FYTokenFactory.sol#2)
		-0.8.1 (contracts/Join.sol#2)
		-0.8.1 (contracts/JoinFactory.sol#2)
		-0.8.1 (contracts/Ladle.sol#2)
		-0.8.1 (contracts/LadleStorage.sol#2)
		-0.8.1 (contracts/Wand.sol#2)
		-0.8.1 (contracts/Witch.sol#2)
		-0.8.1 (contracts/constants/Constants.sol#2)
		-0.8.1 (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#2)
		-0.8.1 (contracts/oracles/composite/CompositeMultiOracle.sol#2)
		-0.8.1 (contracts/oracles/compound/CTokenMultiOracle.sol#2)
		-0.8.1 (contracts/oracles/compound/CompoundMultiOracle.sol#2)
		-0.8.1 (contracts/utils/token/ERC20Rewards.sol#2)
		-0.8.1 (contracts/yieldspace/Math64x64.sol#6)
		-0.8.1 (contracts/yieldspace/Pool.sol#2)
		-0.8.1 (contracts/yieldspace/PoolFactory.sol#2)
		-0.8.1 (contracts/yieldspace/Strategy.sol#2)
		-0.8.1 (contracts/yieldspace/YieldMath.sol#2)
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (contracts/interfaces/external/IERC20.sol#3)
		-^0.8.0 (contracts/interfaces/external/IERC20Metadata.sol#4)
		-^0.8.0 (contracts/interfaces/external/IERC2612.sol#3)
		-^0.8.0 (contracts/interfaces/external/IWETH9.sol#4)
		-^0.8.0 (contracts/interfaces/vault/DataTypes.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ICauldron.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ICauldronGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IFYToken.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IJoin.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ILadle.sol#2)
		-^0.8.0 (contracts/interfaces/vault/ILadleGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IMultiOracleGov.sol#2)
		-^0.8.0 (contracts/interfaces/vault/IOracle.sol#2)
		-^0.8.0 (contracts/math/CastBytes32Bytes6.sol#2)
		-^0.8.0 (contracts/math/CastI128U128.sol#2)
		-^0.8.0 (contracts/math/CastU128I128.sol#2)
		-^0.8.0 (contracts/math/CastU256I256.sol#2)
		-^0.8.0 (contracts/math/CastU256U128.sol#2)
		-^0.8.0 (contracts/math/CastU256U32.sol#2)
		-^0.8.0 (contracts/math/WDiv.sol#2)
		-^0.8.0 (contracts/math/WDivUp.sol#2)
		-^0.8.0 (contracts/math/WMul.sol#2)
		-^0.8.0 (contracts/utils/EmergencyBrake.sol#3)
		-^0.8.0 (contracts/utils/TimeLock.sol#4)
		-^0.8.0 (contracts/utils/access/AccessControl.sol#3)
		-^0.8.0 (contracts/utils/access/Ownable.sol#2)
		-^0.8.0 (contracts/utils/token/ERC20.sol#4)
		-^0.8.0 (contracts/utils/token/ERC20Permit.sol#3)
	- Version constraint >=0.8.0 is used by:
		->=0.8.0 (contracts/interfaces/vault/IFYTokenFactory.sol#2)
		->=0.8.0 (contracts/interfaces/vault/IJoinFactory.sol#2)
		->=0.8.0 (contracts/interfaces/yieldspace/IPool.sol#2)
		->=0.8.0 (contracts/interfaces/yieldspace/IPoolFactory.sol#2)
	- Version constraint >=0.6.0 is used by:
		->=0.6.0 (contracts/oracles/chainlink/AggregatorV3Interface.sol#2)
		->=0.6.0 (contracts/utils/RevertMsgExtractor.sol#4)
		->=0.6.0 (contracts/utils/token/MinimalTransferHelper.sol#4)
		->=0.6.0 (contracts/utils/token/TransferHelper.sol#4)
	- Version constraint >=0.5.16 is used by:
		->=0.5.16 (contracts/oracles/compound/CTokenInterface.sol#3)
	- Version constraint >=0.5.0 is used by:
		->=0.5.0 (contracts/utils/AddressStringUtil.sol#3)
		->=0.5.0 (contracts/utils/token/SafeERC20Namer.sol#3)
	- Version constraint >=0.5.12 is used by:
		->=0.5.12 (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#2)
	- Version constraint >=0.6.0<0.9.0 is used by:
		->=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashBorrower.sol#2)
		->=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashLender.sol#2)
",N/A,N/A
cyclomatic-complexity,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) has a high cyclomatic complexity (19).
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
cyclomatic-complexity,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) has a high cyclomatic complexity (58).
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
cyclomatic-complexity,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) has a high cyclomatic complexity (65).
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
cyclomatic-complexity,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) has a high cyclomatic complexity (65).
",int128) (contracts/yieldspace/Math64x64.sol,508-650
dead-code,Informational,"ERC20Rewards.earliest(uint32,uint32) (contracts/utils/token/ERC20Rewards.sol#64-66) is never used and should be removed
","uint32,uint32) (contracts/utils/token/ERC20Rewards.sol",64-66
dead-code,Informational,"ERC20Rewards.latest(uint32,uint32) (contracts/utils/token/ERC20Rewards.sol#69-71) is never used and should be removed
","uint32,uint32) (contracts/utils/token/ERC20Rewards.sol",69-71
solc-version,Informational,"Version constraint >=0.5.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- DirtyBytesArrayToStorage
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- SignedArrayStorageCopy
	- ABIEncoderV2StorageArrayWithMultiSlotElement
	- DynamicConstructorArgumentsClippedABIV2
	- UninitializedFunctionPointerInConstructor
	- IncorrectEventSignatureInLibraries
	- ABIEncoderV2PackedStorage.
It is used by:
	- >=0.5.0 (contracts/utils/AddressStringUtil.sol#3)
	- >=0.5.0 (contracts/utils/token/SafeERC20Namer.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.12 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden
	- YulOptimizerRedundantAssignmentBreakContinue0.5.
It is used by:
	- >=0.5.12 (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ArraySliceDynamicallyEncodedBaseType
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- YulOptimizerRedundantAssignmentBreakContinue.
It is used by:
	- >=0.6.0 (contracts/oracles/chainlink/AggregatorV3Interface.sol#2)
	- >=0.6.0 (contracts/utils/RevertMsgExtractor.sol#4)
	- >=0.6.0 (contracts/utils/token/MinimalTransferHelper.sol#4)
	- >=0.6.0 (contracts/utils/token/TransferHelper.sol#4)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.6.0<0.9.0 is too complex.
It is used by:
	- >=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashBorrower.sol#2)
	- >=0.6.0<0.9.0 (node_modules/erc3156/contracts/interfaces/IERC3156FlashLender.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.5.16 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- NestedCalldataArrayAbiReencodingSizeValidation
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching
	- EmptyByteArrayCopy
	- DynamicArrayCleanup
	- MissingEscapingInFormatting
	- ImplicitConstructorCallvalueCheck
	- TupleAssignmentMultiStackSlotComponents
	- MemoryArrayCreationOverflow
	- privateCanBeOverridden.
It is used by:
	- >=0.5.16 (contracts/oracles/compound/CTokenInterface.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint 0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- 0.8.1 (contracts/Cauldron.sol#2)
	- 0.8.1 (contracts/FYToken.sol#2)
	- 0.8.1 (contracts/FYTokenFactory.sol#2)
	- 0.8.1 (contracts/Join.sol#2)
	- 0.8.1 (contracts/JoinFactory.sol#2)
	- 0.8.1 (contracts/Ladle.sol#2)
	- 0.8.1 (contracts/LadleStorage.sol#2)
	- 0.8.1 (contracts/Wand.sol#2)
	- 0.8.1 (contracts/Witch.sol#2)
	- 0.8.1 (contracts/constants/Constants.sol#2)
	- 0.8.1 (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#2)
	- 0.8.1 (contracts/oracles/composite/CompositeMultiOracle.sol#2)
	- 0.8.1 (contracts/oracles/compound/CTokenMultiOracle.sol#2)
	- 0.8.1 (contracts/oracles/compound/CompoundMultiOracle.sol#2)
	- 0.8.1 (contracts/utils/token/ERC20Rewards.sol#2)
	- 0.8.1 (contracts/yieldspace/Math64x64.sol#6)
	- 0.8.1 (contracts/yieldspace/Pool.sol#2)
	- 0.8.1 (contracts/yieldspace/PoolFactory.sol#2)
	- 0.8.1 (contracts/yieldspace/Strategy.sol#2)
	- 0.8.1 (contracts/yieldspace/YieldMath.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- >=0.8.0 (contracts/interfaces/vault/IFYTokenFactory.sol#2)
	- >=0.8.0 (contracts/interfaces/vault/IJoinFactory.sol#2)
	- >=0.8.0 (contracts/interfaces/yieldspace/IPool.sol#2)
	- >=0.8.0 (contracts/interfaces/yieldspace/IPoolFactory.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/interfaces/external/IERC20.sol#3)
	- ^0.8.0 (contracts/interfaces/external/IERC20Metadata.sol#4)
	- ^0.8.0 (contracts/interfaces/external/IERC2612.sol#3)
	- ^0.8.0 (contracts/interfaces/external/IWETH9.sol#4)
	- ^0.8.0 (contracts/interfaces/vault/DataTypes.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ICauldron.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ICauldronGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IFYToken.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IJoin.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ILadle.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/ILadleGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IMultiOracleGov.sol#2)
	- ^0.8.0 (contracts/interfaces/vault/IOracle.sol#2)
	- ^0.8.0 (contracts/math/CastBytes32Bytes6.sol#2)
	- ^0.8.0 (contracts/math/CastI128U128.sol#2)
	- ^0.8.0 (contracts/math/CastU128I128.sol#2)
	- ^0.8.0 (contracts/math/CastU256I256.sol#2)
	- ^0.8.0 (contracts/math/CastU256U128.sol#2)
	- ^0.8.0 (contracts/math/CastU256U32.sol#2)
	- ^0.8.0 (contracts/math/WDiv.sol#2)
	- ^0.8.0 (contracts/math/WDivUp.sol#2)
	- ^0.8.0 (contracts/math/WMul.sol#2)
	- ^0.8.0 (contracts/utils/EmergencyBrake.sol#3)
	- ^0.8.0 (contracts/utils/TimeLock.sol#4)
	- ^0.8.0 (contracts/utils/access/AccessControl.sol#3)
	- ^0.8.0 (contracts/utils/access/Ownable.sol#2)
	- ^0.8.0 (contracts/utils/token/ERC20.sol#4)
	- ^0.8.0 (contracts/utils/token/ERC20Permit.sol#3)
",N/A,N/A
solc-version,Informational,"Version constraint >=0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- >=0.8.0 (contracts/interfaces/yieldspace/PoolDataTypes.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/math/WMulUp.sol#2)
",N/A,N/A
low-level-calls,Informational,"Low level call in SafeERC20Namer.tokenDecimals(address) (contracts/utils/token/SafeERC20Namer.sol#97-100):
	- (success,data) = token.staticcall(abi.encodeWithSelector(IERC20Metadata.decimals.selector)) (contracts/utils/token/SafeERC20Namer.sol#98)
",address) (contracts/utils/token/SafeERC20Namer.sol,97-100
low-level-calls,Informational,"Low level call in MinimalTransferHelper.safeTransfer(IERC20,address,uint256) (contracts/utils/token/MinimalTransferHelper.sol#17-24):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/MinimalTransferHelper.sol#22)
","IERC20,address,uint256) (contracts/utils/token/MinimalTransferHelper.sol",17-24
low-level-calls,Informational,"Low level call in Ladle.moduleCall(address,bytes) (contracts/Ladle.sol#496-504):
	- (success,result) = module.delegatecall(data) (contracts/Ladle.sol#502)
","address,bytes) (contracts/Ladle.sol",496-504
low-level-calls,Informational,"Low level call in SafeERC20Namer.callAndParseStringReturn(address,bytes4) (contracts/utils/token/SafeERC20Namer.sol#58-72):
	- (success,data) = token.staticcall(abi.encodeWithSelector(selector)) (contracts/utils/token/SafeERC20Namer.sol#59)
","address,bytes4) (contracts/utils/token/SafeERC20Namer.sol",58-72
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferFrom(IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol#32-40):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (contracts/utils/token/TransferHelper.sol#38)
","IERC20,address,address,uint256) (contracts/utils/token/TransferHelper.sol",32-40
low-level-calls,Informational,"Low level call in TransferHelper.safeTransfer(IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol#17-24):
	- (success,data) = address(token).call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (contracts/utils/token/TransferHelper.sol#22)
","IERC20,address,uint256) (contracts/utils/token/TransferHelper.sol",17-24
low-level-calls,Informational,"Low level call in Ladle.batch(bytes[]) (contracts/Ladle.sol#127-137):
	- (success,result) = address(this).delegatecall(calls[i]) (contracts/Ladle.sol#130)
",bytes[]) (contracts/Ladle.sol,127-137
low-level-calls,Informational,"Low level call in TransferHelper.safeTransferETH(address,uint256) (contracts/utils/token/TransferHelper.sol#46-49):
	- (success,data) = to.call{value: value}(new bytes(0)) (contracts/utils/token/TransferHelper.sol#47)
","address,uint256) (contracts/utils/token/TransferHelper.sol",46-49
low-level-calls,Informational,"Low level call in Ladle.route(bytes6,bytes) (contracts/Ladle.sol#461-469):
	- (success,result) = pool.call(data) (contracts/Ladle.sol#467)
","bytes6,bytes) (contracts/Ladle.sol",461-469
low-level-calls,Informational,"Low level call in TimeLock.execute(address[],bytes[]) (contracts/utils/TimeLock.sol#78-98):
	- (success,result) = targets[i].call(data[i]) (contracts/utils/TimeLock.sol#93)
","address[],bytes[]) (contracts/utils/TimeLock.sol",78-98
missing-inheritance,Informational,"ChainlinkMultiOracle (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#13-108) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/chainlink/ChainlinkMultiOracle.sol,13-108
missing-inheritance,Informational,"CTokenMultiOracle (contracts/oracles/compound/CTokenMultiOracle.sol#11-126) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/compound/CTokenMultiOracle.sol,11-126
missing-inheritance,Informational,"CompositeMultiOracle (contracts/oracles/composite/CompositeMultiOracle.sol#12-149) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/composite/CompositeMultiOracle.sol,12-149
missing-inheritance,Informational,"CompoundMultiOracle (contracts/oracles/compound/CompoundMultiOracle.sol#11-83) should inherit from IMultiOracleGov (contracts/interfaces/vault/IMultiOracleGov.sol#4-6)
",contracts/oracles/compound/CompoundMultiOracle.sol,11-83
naming-convention,Informational,"Variable ERC20Permit.PERMIT_TYPEHASH (contracts/utils/token/ERC20Permit.sol#19) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable Constants.RATE (contracts/constants/Constants.sol#6) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) is not in mixedCase
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
naming-convention,Informational,"Constant Math64x64.MAX_64x64 (contracts/yieldspace/Math64x64.sol#25) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Function DaiAbstract.DOMAIN_SEPARATOR() (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#17) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) is not in mixedCase
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
naming-convention,Informational,"Function Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#460-485) is not in mixedCase
",int128) (contracts/yieldspace/Math64x64.sol,460-485
naming-convention,Informational,"Function IPoolFactory.POOL_BYTECODE_HASH() (contracts/interfaces/yieldspace/IPoolFactory.sol#8) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Constant Math64x64.MIN_64x64 (contracts/yieldspace/Math64x64.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES
",N/A,N/A
naming-convention,Informational,"Variable ERC20Permit._DOMAIN_SEPARATOR (contracts/utils/token/ERC20Permit.sol#20) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) is not in mixedCase
",int128) (contracts/yieldspace/Math64x64.sol,508-650
naming-convention,Informational,"Function ERC20Permit.DOMAIN_SEPARATOR() (contracts/utils/token/ERC20Permit.sol#44-48) is not in mixedCase
",) (contracts/utils/token/ERC20Permit.sol,44-48
naming-convention,Informational,"Variable Constants.CHI (contracts/constants/Constants.sol#5) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function DaiAbstract.PERMIT_TYPEHASH() (node_modules/dss-interfaces/src/dss/DaiAbstract.sol#18) is not in mixedCase
",N/A,N/A
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000 (contracts/yieldspace/YieldMath.sol#98)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (contracts/yieldspace/Math64x64.sol#621)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x1000000000000000000000000 (contracts/yieldspace/Math64x64.sol#403)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#522)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000 (contracts/yieldspace/YieldMath.sol#90)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#95)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x10000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#53)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000002c5c85fdf473e61ae1f8 >> 127 (contracts/yieldspace/YieldMath.sol#242)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"FYToken.slitherConstructorConstantVariables() (contracts/FYToken.sol#19-230) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/FYToken.sol,19-230
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#194)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000002c5c85fdf4eedd62f084e67 >> 127 (contracts/yieldspace/YieldMath.sol#230)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (contracts/yieldspace/Math64x64.sol#581)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#107)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#195)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x100000 > 0 (contracts/yieldspace/Math64x64.sol#602)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (contracts/yieldspace/Math64x64.sol#571)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000 (contracts/yieldspace/YieldMath.sol#100)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#406)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000 (contracts/yieldspace/YieldMath.sol#91)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000 (contracts/yieldspace/YieldMath.sol#99)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#99)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"CompoundMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/compound/CompoundMultiOracle.sol#11-83) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/compound/CompoundMultiOracle.sol,11-83
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#63)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000162e42fefa39f121751c >> 127 (contracts/yieldspace/YieldMath.sol#243)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#238)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#61)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (contracts/yieldspace/Math64x64.sol#528)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#72)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000002c5c85fdf47b8e5a72599f >> 127 (contracts/yieldspace/YieldMath.sol#234)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#228)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000002c5c85fdf473de72a2 >> 127 (contracts/yieldspace/YieldMath.sol#250)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l = 0xFE000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#48)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x100000000 > 0 (contracts/yieldspace/Math64x64.sol#578)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x10000000000 > 0 (contracts/yieldspace/Math64x64.sol#562)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x2000000000 > 0 (contracts/yieldspace/Math64x64.sol#568)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#74)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000162e42fefa3bdb315934a2 >> 127 (contracts/yieldspace/YieldMath.sol#235)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX >= 0x100000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#424)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000058b90bfdd4e39cd52c0cfa27c >> 127 (contracts/yieldspace/YieldMath.sol#221)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#65)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#218)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.gavg(int128,int128) (contracts/yieldspace/Math64x64.sol#348-356) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#352-353)
","int128,int128) (contracts/yieldspace/Math64x64.sol",348-356
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#460-485) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/yieldspace/Math64x64.sol#467)
",int128) (contracts/yieldspace/Math64x64.sol,460-485
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#98)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#102)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#226)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000 (contracts/yieldspace/YieldMath.sol#83)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#249)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#207)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.slitherConstructorConstantVariables() (contracts/yieldspace/Math64x64.sol#16-753) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#20)
",) (contracts/yieldspace/Math64x64.sol,16-753
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000000 (contracts/yieldspace/YieldMath.sol#73)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x2000000 > 0 (contracts/yieldspace/Math64x64.sol#592)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000000 (contracts/yieldspace/YieldMath.sol#85)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#66)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#113)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000058b90bfbe8e7bec1e0d >> 127 (contracts/yieldspace/YieldMath.sol#245)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#50)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#235)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.divi(int256,int256) (contracts/yieldspace/Math64x64.sol#244-266) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#259)
","int256,int256) (contracts/yieldspace/Math64x64.sol",244-266
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000 (contracts/yieldspace/YieldMath.sol#82)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000002c5c85fdf4745969ea76f >> 127 (contracts/yieldspace/YieldMath.sol#238)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x200000 > 0 (contracts/yieldspace/Math64x64.sol#600)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#248)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000162e42fefa58aef378bf586 >> 127 (contracts/yieldspace/YieldMath.sol#231)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#243)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#93)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#210)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x80000000 > 0 (contracts/yieldspace/Math64x64.sol#580)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x40000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#407)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#70)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x2000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#56)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (contracts/yieldspace/Math64x64.sol#546)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (contracts/yieldspace/Math64x64.sol#587)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#247)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#460-485) uses literals with too many digits:
	- bit = 0x8000000000000000 (contracts/yieldspace/Math64x64.sol#476)
",int128) (contracts/yieldspace/Math64x64.sol,460-485
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000 (contracts/yieldspace/YieldMath.sol#96)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (contracts/yieldspace/Math64x64.sol#542)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.muli(int128,int256) (contracts/yieldspace/Math64x64.sol#163-191) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#181-182)
","int128,int256) (contracts/yieldspace/Math64x64.sol",163-191
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000 (contracts/yieldspace/YieldMath.sol#105)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#112)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#114)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#230)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#101)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#222)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x1000000000000000000000000 (contracts/yieldspace/YieldMath.sol#51)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000000 (contracts/yieldspace/YieldMath.sol#77)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#231)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#225)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x40000000000 > 0 (contracts/yieldspace/Math64x64.sol#558)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#88)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/yieldspace/Math64x64.sol#512)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (contracts/yieldspace/Math64x64.sol#635)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000058b90bfc07a77ad56ed22aaa >> 127 (contracts/yieldspace/YieldMath.sol#225)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#193)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x1000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#405)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (contracts/yieldspace/Math64x64.sol#605)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#67)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/yieldspace/Math64x64.sol#510)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#234)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000000b17217f7d1cf7a26c8 >> 127 (contracts/yieldspace/YieldMath.sol#248)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#520)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000000 (contracts/yieldspace/YieldMath.sol#81)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"EmergencyBrake.slitherConstructorConstantVariables() (contracts/utils/EmergencyBrake.sol#23-126) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/utils/EmergencyBrake.sol,23-126
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000058b90bfbe9067c93e474a6 >> 127 (contracts/yieldspace/YieldMath.sol#233)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#61)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absResult = 0x100000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#372)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000 (contracts/yieldspace/YieldMath.sol#101)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000000 (contracts/yieldspace/YieldMath.sol#97)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#239)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#111)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#62)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (contracts/yieldspace/Math64x64.sol#627)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#75)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#64)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (contracts/yieldspace/Math64x64.sol#565)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"YieldMath.slitherConstructorConstantVariables() (contracts/yieldspace/YieldMath.sol#326-566) uses literals with too many digits:
	- ONE = 0x10000000000000000 (contracts/yieldspace/YieldMath.sol#333)
",) (contracts/yieldspace/YieldMath.sol,326-566
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#241)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#69)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"CTokenMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/compound/CTokenMultiOracle.sol#11-126) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/compound/CTokenMultiOracle.sol,11-126
too-many-digits,Informational,"Strategy.slitherConstructorConstantVariables() (contracts/yieldspace/Strategy.sol#37-284) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/yieldspace/Strategy.sol,37-284
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#66)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (contracts/yieldspace/Math64x64.sol#536)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX <= 0x10000000000000000 (contracts/yieldspace/Math64x64.sol#374)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#96)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.fromInt(int256) (contracts/yieldspace/Math64x64.sol#34-39) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (contracts/yieldspace/Math64x64.sol#36)
",int256) (contracts/yieldspace/Math64x64.sol,34-39
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (contracts/yieldspace/Math64x64.sol#629)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (contracts/yieldspace/Math64x64.sol#603)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (contracts/yieldspace/Math64x64.sol#619)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#237)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000 (contracts/yieldspace/YieldMath.sol#103)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x800000 > 0 (contracts/yieldspace/Math64x64.sol#596)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#518)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#236)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#221)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#197)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000b17217f7d24a78a3c7ef02 >> 127 (contracts/yieldspace/YieldMath.sol#232)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#68)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000000 (contracts/yieldspace/YieldMath.sol#74)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#203)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#60)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"CompositeMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/composite/CompositeMultiOracle.sol#12-149) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/composite/CompositeMultiOracle.sol,12-149
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (contracts/yieldspace/Math64x64.sol#526)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#215)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x40000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#51)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x4000000 > 0 (contracts/yieldspace/Math64x64.sol#590)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (contracts/yieldspace/Math64x64.sol#601)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp(int128) (contracts/yieldspace/Math64x64.sol#658-667) uses literals with too many digits:
	- x < - 0x400000000000000000 (contracts/yieldspace/Math64x64.sol#662)
",int128) (contracts/yieldspace/Math64x64.sol,658-667
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x4000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#55)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x400000 > 0 (contracts/yieldspace/Math64x64.sol#598)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#201)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x800000000000 > 0 (contracts/yieldspace/Math64x64.sol#548)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.log_2(int128) (contracts/yieldspace/Math64x64.sol#460-485) uses literals with too many digits:
	- xc >= 0x10000000000000000 (contracts/yieldspace/Math64x64.sol#466)
",int128) (contracts/yieldspace/Math64x64.sol,460-485
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000 (contracts/yieldspace/YieldMath.sol#113)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#50)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x40000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#55)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000000b17217f7d1cff4aac1e1 >> 127 (contracts/yieldspace/YieldMath.sol#240)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (contracts/yieldspace/Math64x64.sol#611)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.sqrtu(uint256) (contracts/yieldspace/Math64x64.sol#727-751) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#733)
",uint256) (contracts/yieldspace/Math64x64.sol,727-751
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000 (contracts/yieldspace/YieldMath.sol#106)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"JoinFactory.slitherConstructorConstantVariables() (contracts/JoinFactory.sol#10-30) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/JoinFactory.sol,10-30
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000b17217f7d1cf815bb96 >> 127 (contracts/yieldspace/YieldMath.sol#244)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#205)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#217)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (contracts/yieldspace/Math64x64.sol#637)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x20000000 > 0 (contracts/yieldspace/Math64x64.sol#584)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000 (contracts/yieldspace/YieldMath.sol#102)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#199)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#108)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x20000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#52)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#68)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000000000 (contracts/yieldspace/YieldMath.sol#86)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#211)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000 (contracts/yieldspace/YieldMath.sol#108)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000 (contracts/yieldspace/YieldMath.sol#107)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000002c5c85fdf473dee5f17 >> 127 (contracts/yieldspace/YieldMath.sol#246)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#52)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x200000000 > 0 (contracts/yieldspace/Math64x64.sol#576)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x800000000 > 0 (contracts/yieldspace/Math64x64.sol#572)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000000 (contracts/yieldspace/YieldMath.sol#75)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000162e4300e635cf4a109e3939bd >> 127 (contracts/yieldspace/YieldMath.sol#219)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"TimeLock.slitherConstructorConstantVariables() (contracts/utils/TimeLock.sol#15-100) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/utils/TimeLock.sol,15-100
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#71)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#196)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x100000000000 > 0 (contracts/yieldspace/Math64x64.sol#554)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000058b90c1aa8a5c3736cb77e8dff >> 127 (contracts/yieldspace/YieldMath.sol#217)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#200)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x1000000 > 0 (contracts/yieldspace/Math64x64.sol#594)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (contracts/yieldspace/Math64x64.sol#575)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (contracts/yieldspace/Math64x64.sol#593)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x80000000000 > 0 (contracts/yieldspace/Math64x64.sol#556)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (contracts/yieldspace/Math64x64.sol#591)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000000 (contracts/yieldspace/YieldMath.sol#71)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (contracts/yieldspace/Math64x64.sol#631)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.divuu(uint256,uint256) (contracts/yieldspace/Math64x64.sol#677-718) uses literals with too many digits:
	- xc >= 0x100000000 (contracts/yieldspace/Math64x64.sol#688)
","uint256,uint256) (contracts/yieldspace/Math64x64.sol",677-718
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (contracts/yieldspace/Math64x64.sol#561)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#240)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (contracts/yieldspace/Math64x64.sol#609)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000002c5c8605a4635f2efc2362d978 >> 127 (contracts/yieldspace/YieldMath.sol#218)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#242)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#78)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#80)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#69)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#103)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#224)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#220)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Wand.slitherConstructorConstantVariables() (contracts/Wand.sol#22-173) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Wand.sol,22-173
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#84)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#408)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#233)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#65)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (contracts/yieldspace/Math64x64.sol#625)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000 (contracts/yieldspace/YieldMath.sol#111)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000 (contracts/yieldspace/YieldMath.sol#112)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#82)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (contracts/yieldspace/Math64x64.sol#589)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x4000000000 > 0 (contracts/yieldspace/Math64x64.sol#566)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000002c5c85fe6f72d669e0e76e411 >> 127 (contracts/yieldspace/YieldMath.sol#222)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (contracts/yieldspace/Math64x64.sol#623)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (contracts/yieldspace/Math64x64.sol#524)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000b1721872d0c7b08cf1e0114152 >> 127 (contracts/yieldspace/YieldMath.sol#216)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x10000000000000000000000000 (contracts/yieldspace/YieldMath.sol#78)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#244)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x1000000000 > 0 (contracts/yieldspace/Math64x64.sol#570)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (contracts/yieldspace/Math64x64.sol#641)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#94)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#81)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Ladle.slitherConstructorConstantVariables() (contracts/Ladle.sol#22-506) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Ladle.sol,22-506
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#104)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000058b90bfbead3b8b5dd254d7 >> 127 (contracts/yieldspace/YieldMath.sol#229)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#62)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#232)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x200000000000 > 0 (contracts/yieldspace/Math64x64.sol#552)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (contracts/yieldspace/Math64x64.sol#563)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (contracts/yieldspace/Math64x64.sol#639)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000 (contracts/yieldspace/YieldMath.sol#104)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (contracts/yieldspace/Math64x64.sol#559)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x2000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#229)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000058b90bfbe8e7bcf4a4 >> 127 (contracts/yieldspace/YieldMath.sol#249)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Witch.slitherConstructorConstantVariables() (contracts/Witch.sol#16-189) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Witch.sol,16-189
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#58)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#91)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#90)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x1000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#53)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x800000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#219)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#404)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#83)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x400000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#208)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000058b90bfbe8e9a8d1c4ea0 >> 127 (contracts/yieldspace/YieldMath.sol#237)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"PoolFactory.slitherConstructorConstantVariables() (contracts/yieldspace/PoolFactory.sol#9-93) uses literals with too many digits:
	- POOL_BYTECODE_HASH = keccak256(bytes)(type()(Pool).creationCode) (contracts/yieldspace/PoolFactory.sol#12)
",) (contracts/yieldspace/PoolFactory.sol,9-93
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x400000000 > 0 (contracts/yieldspace/Math64x64.sol#574)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#198)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (contracts/yieldspace/Math64x64.sol#613)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (contracts/yieldspace/Math64x64.sol#532)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"ChainlinkMultiOracle.slitherConstructorConstantVariables() (contracts/oracles/chainlink/ChainlinkMultiOracle.sol#13-108) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/oracles/chainlink/ChainlinkMultiOracle.sol,13-108
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000162e42ff18f9ad35186d0df28 >> 127 (contracts/yieldspace/YieldMath.sol#223)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (contracts/yieldspace/Math64x64.sol#577)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (contracts/yieldspace/Math64x64.sol#573)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x40000000 > 0 (contracts/yieldspace/Math64x64.sol#582)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#89)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (contracts/yieldspace/Math64x64.sol#585)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#106)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000b17217f84cce71aa0dcfffe7 >> 127 (contracts/yieldspace/YieldMath.sol#224)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (contracts/yieldspace/Math64x64.sol#579)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000 (contracts/yieldspace/YieldMath.sol#95)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x20000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#213)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x10000000 > 0 (contracts/yieldspace/Math64x64.sol#586)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.sqrtu(uint256) (contracts/yieldspace/Math64x64.sol#727-751) uses literals with too many digits:
	- xx >= 0x100000000 (contracts/yieldspace/Math64x64.sol#735)
",uint256) (contracts/yieldspace/Math64x64.sol,727-751
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000002c5c85fdfc23cdead40da8d6 >> 127 (contracts/yieldspace/YieldMath.sol#226)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (contracts/yieldspace/Math64x64.sol#633)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (contracts/yieldspace/Math64x64.sol#544)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#202)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x8000000000 > 0 (contracts/yieldspace/Math64x64.sol#564)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#245)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#79)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000000 (contracts/yieldspace/YieldMath.sol#76)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#110)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x40000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#212)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000 (contracts/yieldspace/YieldMath.sol#94)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x10000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#54)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#85)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (contracts/yieldspace/Math64x64.sol#530)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x2000000000000000000000 (contracts/yieldspace/YieldMath.sol#93)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (contracts/yieldspace/Math64x64.sol#617)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x400000000000 > 0 (contracts/yieldspace/Math64x64.sol#550)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (contracts/yieldspace/Math64x64.sol#615)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Cauldron.slitherConstructorConstantVariables() (contracts/Cauldron.sol#23-495) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Cauldron.sol,23-495
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (contracts/yieldspace/Math64x64.sol#599)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (contracts/yieldspace/Math64x64.sol#557)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x20000000000 > 0 (contracts/yieldspace/Math64x64.sol#560)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#97)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x8000000000000000000000000 (contracts/yieldspace/YieldMath.sol#79)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#87)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#109)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (contracts/yieldspace/Math64x64.sol#538)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000 (contracts/yieldspace/YieldMath.sol#84)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (contracts/yieldspace/Math64x64.sol#595)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#214)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#100)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp(int128) (contracts/yieldspace/Math64x64.sol#658-667) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (contracts/yieldspace/Math64x64.sol#660)
",int128) (contracts/yieldspace/Math64x64.sol,658-667
too-many-digits,Informational,"Math64x64.pow(int128,uint256) (contracts/yieldspace/Math64x64.sol#366-439) uses literals with too many digits:
	- absResult > 0x100000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#417)
","int128,uint256) (contracts/yieldspace/Math64x64.sol",366-439
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l -= 0x8000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#54)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000 (contracts/yieldspace/YieldMath.sol#88)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#77)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000b17217f7d1d7299b49c46 >> 127 (contracts/yieldspace/YieldMath.sol#236)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000058b90bfbe8e7db95a2f1 >> 127 (contracts/yieldspace/YieldMath.sol#241)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#86)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000162e42fefc25eb1571853a66 >> 127 (contracts/yieldspace/YieldMath.sol#227)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x200000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#209)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.sqrtu(uint256) (contracts/yieldspace/Math64x64.sol#727-751) uses literals with too many digits:
	- xx >= 0x10000000000000000 (contracts/yieldspace/Math64x64.sol#734)
",uint256) (contracts/yieldspace/Math64x64.sol,727-751
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x400000000000000000000000000 (contracts/yieldspace/YieldMath.sol#72)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b < 0x80000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#56)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (contracts/yieldspace/Math64x64.sol#516)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x8000000 > 0 (contracts/yieldspace/Math64x64.sol#588)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (contracts/yieldspace/Math64x64.sol#583)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x8000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#227)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (contracts/yieldspace/Math64x64.sol#514)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#92)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000 (contracts/yieldspace/YieldMath.sol#87)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#67)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x40000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#64)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x1000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#206)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#59)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x80000000000162e42fefa3a0df5373bf >> 127 (contracts/yieldspace/YieldMath.sol#239)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#114)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x1000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#58)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000 (contracts/yieldspace/YieldMath.sol#92)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x200000000000000000 (contracts/yieldspace/YieldMath.sol#109)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (contracts/yieldspace/Math64x64.sol#534)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (contracts/yieldspace/Math64x64.sol#540)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (contracts/yieldspace/Math64x64.sol#569)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"FYTokenFactory.slitherConstructorConstantVariables() (contracts/FYTokenFactory.sol#12-45) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/FYTokenFactory.sol,12-45
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x4000000000000000000000000 (contracts/yieldspace/YieldMath.sol#80)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#216)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.muli(int128,int256) (contracts/yieldspace/Math64x64.sol#163-191) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (contracts/yieldspace/Math64x64.sol#166-167)
","int128,int256) (contracts/yieldspace/Math64x64.sol",163-191
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x10000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#250)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.inv(int128) (contracts/yieldspace/Math64x64.sol#318-325) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (contracts/yieldspace/Math64x64.sol#321)
",int128) (contracts/yieldspace/Math64x64.sol,318-325
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#70)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x800000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#59)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000000000162e42fefa39ef5438f >> 127 (contracts/yieldspace/YieldMath.sol#247)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x100000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#246)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x100000000000000000 (contracts/yieldspace/YieldMath.sol#110)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x4000000000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#204)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (contracts/yieldspace/Math64x64.sol#643)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#76)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Join.slitherConstructorConstantVariables() (contracts/Join.sol#15-151) uses literals with too many digits:
	- ROOT = 0x00000000 (contracts/utils/access/AccessControl.sol#47)
",) (contracts/Join.sol,15-151
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (contracts/yieldspace/Math64x64.sol#597)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (contracts/yieldspace/Math64x64.sol#555)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x8000000b17217ff81bef9c551590cf83 >> 127 (contracts/yieldspace/YieldMath.sol#220)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (contracts/yieldspace/Math64x64.sol#567)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#73)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#105)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- r = r * 0x800000000b17217f7d97f692baacded5 >> 127 (contracts/yieldspace/YieldMath.sol#228)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- b >= 0x100000000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#60)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x20000000000000000000000 (contracts/yieldspace/YieldMath.sol#89)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Exp64x64.pow_2(uint128) (contracts/yieldspace/YieldMath.sol#190-320) uses literals with too many digits:
	- x & 0x80000000000000000000000 > 0 (contracts/yieldspace/YieldMath.sol#223)
",uint128) (contracts/yieldspace/YieldMath.sol,190-320
too-many-digits,Informational,"Exp64x64.log_2(uint128) (contracts/yieldspace/YieldMath.sol#41-182) uses literals with too many digits:
	- l |= 0x80000000000000000000000000000 (contracts/yieldspace/YieldMath.sol#63)
",uint128) (contracts/yieldspace/YieldMath.sol,41-182
too-many-digits,Informational,"Math64x64.exp_2(int128) (contracts/yieldspace/Math64x64.sol#508-650) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (contracts/yieldspace/Math64x64.sol#607)
",int128) (contracts/yieldspace/Math64x64.sol,508-650
unused-state,Informational,"Constants.RATE (contracts/constants/Constants.sol#6) is never used in FYToken (contracts/FYToken.sol#19-230)
",contracts/FYToken.sol,19-230
unused-state,Informational,"Constants.RATE (contracts/constants/Constants.sol#6) is never used in CTokenMultiOracle (contracts/oracles/compound/CTokenMultiOracle.sol#11-126)
",contracts/oracles/compound/CTokenMultiOracle.sol,11-126
unused-state,Informational,"Constants.CHI (contracts/constants/Constants.sol#5) is never used in CTokenMultiOracle (contracts/oracles/compound/CTokenMultiOracle.sol#11-126)
",contracts/oracles/compound/CTokenMultiOracle.sol,11-126
constable-states,Optimization,"Constants.CHI (contracts/constants/Constants.sol#5) should be constant 
",N/A,N/A
constable-states,Optimization,"Constants.RATE (contracts/constants/Constants.sol#6) should be constant 
",N/A,N/A
immutable-states,Optimization,"ERC20.decimals (contracts/utils/token/ERC20.sol#34) should be immutable 
",N/A,N/A
