Check,Severity,Description,Filename,Line
arbitrary-send-erc20,High,"JPEGLock.lockFor(address,uint256,uint256) (contracts/lock/JPEGLock.sol#49-63) uses arbitrary from in transferFrom: jpeg.safeTransferFrom(_account,address(this),_lockAmount) (contracts/lock/JPEGLock.sol#54)
","address,uint256,uint256) (contracts/lock/JPEGLock.sol",49-63
arbitrary-send-eth,High,"FungibleAssetVaultForDAO.withdraw(uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol#193-206) sends eth to arbitrary user
	Dangerous calls:
	- address(msg.sender).transfer(amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#201)
",uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol,193-206
unchecked-transfer,High,"JPEGStaking.stake(uint256) (contracts/staking/JPEGStaking.sol#31-39) ignores return value by jpeg.transferFrom(msg.sender,address(this),_amount) (contracts/staking/JPEGStaking.sol#34)
",uint256) (contracts/staking/JPEGStaking.sol,31-39
unchecked-transfer,High,"NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913) ignores return value by stablecoin.transferFrom(msg.sender,position.liquidator,debtAmount + penalty) (contracts/vaults/NFTVault.sol#899-903)
",uint256) (contracts/vaults/NFTVault.sol,879-913
unchecked-transfer,High,"JPEGStaking.unstake(uint256) (contracts/staking/JPEGStaking.sol#44-55) ignores return value by jpeg.transfer(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#52)
",uint256) (contracts/staking/JPEGStaking.sol,44-55
unchecked-transfer,High,"MockBooster.depositAll(uint256,bool) (contracts/test/MockBooster.sol#17-24) ignores return value by poolToken.transferFrom(msg.sender,recipient,poolToken.balanceOf(msg.sender)) (contracts/test/MockBooster.sol#18-22)
","uint256,bool) (contracts/test/MockBooster.sol",17-24
unchecked-transfer,High,"MockStrategy.withdraw(uint256) (contracts/test/MockStrategy.sol#33-36) ignores return value by IERC20(want).transfer(vault,amount) (contracts/test/MockStrategy.sol#35)
",uint256) (contracts/test/MockStrategy.sol,33-36
unchecked-transfer,High,"MockCurve.add_liquidity(uint256[4],uint256) (contracts/test/MockCurve.sol#17-27) ignores return value by poolToken.transfer(msg.sender,balance) (contracts/test/MockCurve.sol#26)
","uint256[4],uint256) (contracts/test/MockCurve.sol",17-27
unchecked-transfer,High,"MockRewardPool.withdrawAndUnwrap(uint256,bool) (contracts/test/MockRewardPool.sol#27-35) ignores return value by poolToken.transfer(msg.sender,amount) (contracts/test/MockRewardPool.sol#32)
","uint256,bool) (contracts/test/MockRewardPool.sol",27-35
unchecked-transfer,High,"MockCurve.add_liquidity(uint256[4],uint256) (contracts/test/MockCurve.sol#17-27) ignores return value by tokens[i].transferFrom(msg.sender,address(this),amount) (contracts/test/MockCurve.sol#21)
","uint256[4],uint256) (contracts/test/MockCurve.sol",17-27
unchecked-transfer,High,"MockStrategy.withdrawJPEG(address) (contracts/test/MockStrategy.sol#53-55) ignores return value by IERC20(jpeg).transfer(to,balanceOfJPEG()) (contracts/test/MockStrategy.sol#54)
",address) (contracts/test/MockStrategy.sol,53-55
unchecked-transfer,High,"MockStrategy.withdrawAll() (contracts/test/MockStrategy.sol#38-43) ignores return value by IERC20(want).transfer(vault,balance) (contracts/test/MockStrategy.sol#41)
",) (contracts/test/MockStrategy.sol,38-43
unchecked-transfer,High,"MockRewardPool.getReward(address,bool) (contracts/test/MockRewardPool.sol#37-49) ignores return value by IERC20(rewardToken).transfer(recipient,IERC20(rewardToken).balanceOf(address(this))) (contracts/test/MockRewardPool.sol#38)
","address,bool) (contracts/test/MockRewardPool.sol",37-49
unchecked-transfer,High,"MockStrategy.withdraw(address) (contracts/test/MockStrategy.sol#26-31) ignores return value by IERC20(token).transfer(msg.sender,IERC20(token).balanceOf(address(this))) (contracts/test/MockStrategy.sol#27-30)
",address) (contracts/test/MockStrategy.sol,26-31
uninitialized-state,High,"EtherRock.owner (contracts/test/EtherRocks.sol#18) is never initialized. It is used in:
	- EtherRock.withdraw() (contracts/test/EtherRocks.sol#92-94)
",) (contracts/test/EtherRocks.sol,92-94
divide-before-multiply,Medium,"NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596) performs a multiplication on the result of a division:
	- interestPerSec = interestPerYear / 31536000 (contracts/vaults/NFTVault.sol#593)
	- elapsedTime * interestPerSec (contracts/vaults/NFTVault.sol#595)
",) (contracts/vaults/NFTVault.sol,578-596
divide-before-multiply,Medium,"NFTVault.finalizePendingNFTValueETH(uint256) (contracts/vaults/NFTVault.sol#360-381) performs a multiplication on the result of a division:
	- toLockJpeg = (((pendingValue * _ethPriceUSD() * settings.creditLimitRate.numerator) / settings.creditLimitRate.denominator) * settings.valueIncreaseLockRate.numerator) / settings.valueIncreaseLockRate.denominator / _jpegPriceUSD() (contracts/vaults/NFTVault.sol#366-372)
",uint256) (contracts/vaults/NFTVault.sol,360-381
incorrect-equality,Medium,"NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596) uses a dangerous strict equality:
	- totalDebtAmount == 0 (contracts/vaults/NFTVault.sol#585)
",) (contracts/vaults/NFTVault.sol,578-596
incorrect-equality,Medium,"NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818) uses a dangerous strict equality:
	- require(bool,string)(_getDebtAmount(_nftIndex) == 0,position_not_repaid) (contracts/vaults/NFTVault.sol#806)
",uint256) (contracts/vaults/NFTVault.sol,799-818
incorrect-equality,Medium,"NFTVault.borrow(uint256,uint256,bool) (contracts/vaults/NFTVault.sol#675-748) uses a dangerous strict equality:
	- totalDebtPortion == 0 (contracts/vaults/NFTVault.sol#735)
","uint256,uint256,bool) (contracts/vaults/NFTVault.sol",675-748
incorrect-equality,Medium,"NFTVault._calculateDebt(uint256,uint256,uint256) (contracts/vaults/NFTVault.sol#547-553) uses a dangerous strict equality:
	- totalPortion == 0 (contracts/vaults/NFTVault.sol#552)
","uint256,uint256,uint256) (contracts/vaults/NFTVault.sol",547-553
incorrect-equality,Medium,"ERC20VotesUpgradeable._writeCheckpoint(ERC20VotesUpgradeable.Checkpoint[],function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#239-253) uses a dangerous strict equality:
	- pos > 0 && ckpts[pos - 1].fromBlock == block.number (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#248)
","ERC20VotesUpgradeable.Checkpoint[],function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol",239-253
incorrect-equality,Medium,"NFTVault.repay(uint256,uint256) (contracts/vaults/NFTVault.sol#756-794) uses a dangerous strict equality:
	- paidPrincipal == debtPrincipal (contracts/vaults/NFTVault.sol#784-786)
","uint256,uint256) (contracts/vaults/NFTVault.sol",756-794
incorrect-equality,Medium,"NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596) uses a dangerous strict equality:
	- elapsedTime == 0 (contracts/vaults/NFTVault.sol#581)
",) (contracts/vaults/NFTVault.sol,578-596
incorrect-equality,Medium,"LPFarming._updatePool(uint256) (contracts/farming/LPFarming.sol#288-311) uses a dangerous strict equality:
	- lpSupply == 0 (contracts/farming/LPFarming.sol#301)
",uint256) (contracts/farming/LPFarming.sol,288-311
incorrect-equality,Medium,"YVault.getPricePerFullShare() (contracts/vaults/yVault/yVault.sol#193-197) uses a dangerous strict equality:
	- supply == 0 (contracts/vaults/yVault/yVault.sol#195)
",) (contracts/vaults/yVault/yVault.sol,193-197
incorrect-equality,Medium,"ERC20Votes._writeCheckpoint(ERC20Votes.Checkpoint[],function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#236-250) uses a dangerous strict equality:
	- pos > 0 && ckpts[pos - 1].fromBlock == block.number (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#245)
","ERC20Votes.Checkpoint[],function(uint256,uint256) returns(uint256),uint256) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol",236-250
incorrect-equality,Medium,"YVault.deposit(uint256) (contracts/vaults/yVault/yVault.sol#142-157) uses a dangerous strict equality:
	- supply == 0 (contracts/vaults/yVault/yVault.sol#148)
",uint256) (contracts/vaults/yVault/yVault.sol,142-157
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.finalizePendingNFTValueETH(uint256) (contracts/vaults/NFTVault.sol#360-381):
	External calls:
	- jpegLocker.lockFor(msg.sender,_nftIndex,toLockJpeg) (contracts/vaults/NFTVault.sol#375)
	State variables written after the call(s):
	- pendingNFTValueETH[_nftIndex] = 0 (contracts/vaults/NFTVault.sol#380)
	NFTVault.pendingNFTValueETH (contracts/vaults/NFTVault.sol#112) can be used in cross function reentrancies:
	- NFTVault.finalizePendingNFTValueETH(uint256) (contracts/vaults/NFTVault.sol#360-381)
	- NFTVault.pendingNFTValueETH (contracts/vaults/NFTVault.sol#112)
	- NFTVault.setPendingNFTValueETH(uint256,uint256) (contracts/vaults/NFTVault.sol#347-353)
",uint256) (contracts/vaults/NFTVault.sol,360-381
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.liquidate(uint256) (contracts/vaults/NFTVault.sol#830-872):
	External calls:
	- stablecoin.burnFrom(msg.sender,debtAmount) (contracts/vaults/NFTVault.sol#851)
	State variables written after the call(s):
	- positionOwner[_nftIndex] = address(0) (contracts/vaults/NFTVault.sol#865)
	NFTVault.positionOwner (contracts/vaults/NFTVault.sol#107) can be used in cross function reentrancies:
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.positionOwner (contracts/vaults/NFTVault.sol#107)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.debtPortion = 0 (contracts/vaults/NFTVault.sol#856)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.debtAmountForRepurchase = debtAmount (contracts/vaults/NFTVault.sol#860)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.liquidatedAt = block.timestamp (contracts/vaults/NFTVault.sol#861)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.liquidator = msg.sender (contracts/vaults/NFTVault.sol#862)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- delete positions[_nftIndex] (contracts/vaults/NFTVault.sol#866)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- totalDebtAmount -= debtAmount (contracts/vaults/NFTVault.sol#855)
	NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95) can be used in cross function reentrancies:
	- NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596)
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.accrue() (contracts/vaults/NFTVault.sol#192-199)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95)
	- totalDebtPortion -= position.debtPortion (contracts/vaults/NFTVault.sol#854)
	NFTVault.totalDebtPortion (contracts/vaults/NFTVault.sol#99) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
",uint256) (contracts/vaults/NFTVault.sol,830-872
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.collect() (contracts/vaults/NFTVault.sol#944-948):
	External calls:
	- stablecoin.mint(msg.sender,totalFeeCollected) (contracts/vaults/NFTVault.sol#946)
	State variables written after the call(s):
	- totalFeeCollected = 0 (contracts/vaults/NFTVault.sol#947)
	NFTVault.totalFeeCollected (contracts/vaults/NFTVault.sol#98) can be used in cross function reentrancies:
	- NFTVault.accrue() (contracts/vaults/NFTVault.sol#192-199)
	- NFTVault.totalFeeCollected (contracts/vaults/NFTVault.sol#98)
",) (contracts/vaults/NFTVault.sol,944-948
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.borrow(uint256,uint256,bool) (contracts/vaults/NFTVault.sol#675-748):
	External calls:
	- _openPosition(msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#694)
		- nftContract.transferFrom(_owner,address(this),_nftIndex) (contracts/vaults/NFTVault.sol#560)
	State variables written after the call(s):
	- totalFeeCollected += feeAmount (contracts/vaults/NFTVault.sol#724)
	NFTVault.totalFeeCollected (contracts/vaults/NFTVault.sol#98) can be used in cross function reentrancies:
	- NFTVault.accrue() (contracts/vaults/NFTVault.sol#192-199)
	- NFTVault.totalFeeCollected (contracts/vaults/NFTVault.sol#98)
","uint256,uint256,bool) (contracts/vaults/NFTVault.sol",675-748
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.borrow(uint256,uint256,bool) (contracts/vaults/NFTVault.sol#675-748):
	External calls:
	- _openPosition(msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#694)
		- nftContract.transferFrom(_owner,address(this),_nftIndex) (contracts/vaults/NFTVault.sol#560)
	- stablecoin.mint(msg.sender,_amount - feeAmount) (contracts/vaults/NFTVault.sol#726)
	State variables written after the call(s):
	- position.debtPortion = _amount (contracts/vaults/NFTVault.sol#737)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.debtPortion += plusPortion (contracts/vaults/NFTVault.sol#742)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.borrowType = BorrowType.USE_INSURANCE (contracts/vaults/NFTVault.sol#729-731)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.borrowType = BorrowType.NON_INSURANCE (contracts/vaults/NFTVault.sol#729-731)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- totalDebtAmount += _amount (contracts/vaults/NFTVault.sol#745)
	NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95) can be used in cross function reentrancies:
	- NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596)
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.accrue() (contracts/vaults/NFTVault.sol#192-199)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95)
	- totalDebtPortion = _amount (contracts/vaults/NFTVault.sol#736)
	NFTVault.totalDebtPortion (contracts/vaults/NFTVault.sol#99) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- totalDebtPortion += plusPortion (contracts/vaults/NFTVault.sol#741)
	NFTVault.totalDebtPortion (contracts/vaults/NFTVault.sol#99) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
","uint256,uint256,bool) (contracts/vaults/NFTVault.sol",675-748
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913):
	External calls:
	- stablecoin.transferFrom(msg.sender,position.liquidator,debtAmount + penalty) (contracts/vaults/NFTVault.sol#899-903)
	State variables written after the call(s):
	- positionOwner[_nftIndex] = address(0) (contracts/vaults/NFTVault.sol#906)
	NFTVault.positionOwner (contracts/vaults/NFTVault.sol#107) can be used in cross function reentrancies:
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.positionOwner (contracts/vaults/NFTVault.sol#107)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- delete positions[_nftIndex] (contracts/vaults/NFTVault.sol#907)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
",uint256) (contracts/vaults/NFTVault.sol,879-913
reentrancy-no-eth,Medium,"Reentrancy in NFTVault.repay(uint256,uint256) (contracts/vaults/NFTVault.sol#756-794):
	External calls:
	- stablecoin.burnFrom(msg.sender,_amount) (contracts/vaults/NFTVault.sol#778)
	State variables written after the call(s):
	- position.debtPortion -= minusPortion (contracts/vaults/NFTVault.sol#789)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- position.debtPrincipal -= paidPrincipal (contracts/vaults/NFTVault.sol#790)
	NFTVault.positions (contracts/vaults/NFTVault.sol#106) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941)
	- NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818)
	- NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- totalDebtAmount -= _amount (contracts/vaults/NFTVault.sol#791)
	NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95) can be used in cross function reentrancies:
	- NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596)
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.accrue() (contracts/vaults/NFTVault.sol#192-199)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
	- NFTVault.totalDebtAmount (contracts/vaults/NFTVault.sol#95)
	- totalDebtPortion -= minusPortion (contracts/vaults/NFTVault.sol#788)
	NFTVault.totalDebtPortion (contracts/vaults/NFTVault.sol#99) can be used in cross function reentrancies:
	- NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540)
	- NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666)
","uint256,uint256) (contracts/vaults/NFTVault.sol",756-794
reentrancy-no-eth,Medium,"Reentrancy in LPFarming.deposit(uint256,uint256) (contracts/farming/LPFarming.sol#214-229):
	External calls:
	- pool.lpToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/farming/LPFarming.sol#225)
	State variables written after the call(s):
	- user.amount = user.amount + _amount (contracts/farming/LPFarming.sol#226)
	LPFarming.userInfo (contracts/farming/LPFarming.sol#64) can be used in cross function reentrancies:
	- LPFarming._withdrawReward(uint256) (contracts/farming/LPFarming.sol#315-327)
	- LPFarming.deposit(uint256,uint256) (contracts/farming/LPFarming.sol#214-229)
	- LPFarming.pendingReward(uint256,address) (contracts/farming/LPFarming.sol#179-208)
	- LPFarming.userInfo (contracts/farming/LPFarming.sol#64)
	- LPFarming.withdraw(uint256,uint256) (contracts/farming/LPFarming.sol#235-252)
","uint256,uint256) (contracts/farming/LPFarming.sol",214-229
reentrancy-no-eth,Medium,"Reentrancy in Controller.setStrategy(IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol#82-98):
	External calls:
	- _current.withdrawAll() (contracts/vaults/yVault/Controller.sol#94)
	- _current.withdraw(address(jpeg)) (contracts/vaults/yVault/Controller.sol#95)
	State variables written after the call(s):
	- strategies[_token] = _strategy (contracts/vaults/yVault/Controller.sol#97)
	Controller.strategies (contracts/vaults/yVault/Controller.sol#21) can be used in cross function reentrancies:
	- Controller.balanceOf(IERC20) (contracts/vaults/yVault/Controller.sol#111-113)
	- Controller.balanceOfJPEG(IERC20) (contracts/vaults/yVault/Controller.sol#117-119)
	- Controller.earn(IERC20,uint256) (contracts/vaults/yVault/Controller.sol#103-107)
	- Controller.setStrategy(IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol#82-98)
	- Controller.strategies (contracts/vaults/yVault/Controller.sol#21)
	- Controller.withdraw(IERC20,uint256) (contracts/vaults/yVault/Controller.sol#151-154)
	- Controller.withdrawAll(IERC20) (contracts/vaults/yVault/Controller.sol#124-126)
	- Controller.withdrawJPEG(IERC20,address) (contracts/vaults/yVault/Controller.sol#160-166)
","IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol",82-98
reentrancy-no-eth,Medium,"Reentrancy in LPFarming.claimAll() (contracts/farming/LPFarming.sol#347-360):
	External calls:
	- jpeg.safeTransfer(msg.sender,rewards) (contracts/farming/LPFarming.sol#356)
	State variables written after the call(s):
	- userRewards[msg.sender] = 0 (contracts/farming/LPFarming.sol#357)
	LPFarming.userRewards (contracts/farming/LPFarming.sol#70) can be used in cross function reentrancies:
	- LPFarming._withdrawReward(uint256) (contracts/farming/LPFarming.sol#315-327)
	- LPFarming.pendingReward(uint256,address) (contracts/farming/LPFarming.sol#179-208)
",) (contracts/farming/LPFarming.sol,347-360
reentrancy-no-eth,Medium,"Reentrancy in LPFarming.claim(uint256) (contracts/farming/LPFarming.sol#332-343):
	External calls:
	- jpeg.safeTransfer(msg.sender,rewards) (contracts/farming/LPFarming.sol#339)
	State variables written after the call(s):
	- userRewards[msg.sender] = 0 (contracts/farming/LPFarming.sol#340)
	LPFarming.userRewards (contracts/farming/LPFarming.sol#70) can be used in cross function reentrancies:
	- LPFarming._withdrawReward(uint256) (contracts/farming/LPFarming.sol#315-327)
	- LPFarming.pendingReward(uint256,address) (contracts/farming/LPFarming.sol#179-208)
",uint256) (contracts/farming/LPFarming.sol,332-343
reentrancy-no-eth,Medium,"Reentrancy in YVaultLPFarming.deposit(uint256) (contracts/farming/yVaultLPFarming.sol#100-112):
	External calls:
	- vault.safeTransferFrom(msg.sender,address(this),_amount) (contracts/farming/yVaultLPFarming.sol#106)
	State variables written after the call(s):
	- balanceOf[msg.sender] += _amount (contracts/farming/yVaultLPFarming.sol#108)
	YVaultLPFarming.balanceOf (contracts/farming/yVaultLPFarming.sol#31) can be used in cross function reentrancies:
	- YVaultLPFarming._withdrawReward(address) (contracts/farming/yVaultLPFarming.sol#177-186)
	- YVaultLPFarming.balanceOf (contracts/farming/yVaultLPFarming.sol#31)
	- YVaultLPFarming.deposit(uint256) (contracts/farming/yVaultLPFarming.sol#100-112)
	- YVaultLPFarming.pendingReward(address) (contracts/farming/yVaultLPFarming.sol#75-95)
	- YVaultLPFarming.withdraw(uint256) (contracts/farming/yVaultLPFarming.sol#117-130)
	- totalStaked += _amount (contracts/farming/yVaultLPFarming.sol#109)
	YVaultLPFarming.totalStaked (contracts/farming/yVaultLPFarming.sol#25) can be used in cross function reentrancies:
	- YVaultLPFarming._computeUpdate() (contracts/farming/yVaultLPFarming.sol#168-173)
	- YVaultLPFarming._update() (contracts/farming/yVaultLPFarming.sol#155-163)
	- YVaultLPFarming.deposit(uint256) (contracts/farming/yVaultLPFarming.sol#100-112)
	- YVaultLPFarming.pendingReward(address) (contracts/farming/yVaultLPFarming.sol#75-95)
	- YVaultLPFarming.totalStaked (contracts/farming/yVaultLPFarming.sol#25)
	- YVaultLPFarming.withdraw(uint256) (contracts/farming/yVaultLPFarming.sol#117-130)
",uint256) (contracts/farming/yVaultLPFarming.sol,100-112
unused-return,Medium,"EtherRocksHelper._transferFrom(address,address,uint256) (contracts/helpers/EtherRocksHelper.sol#65-92) ignores return value by (account,None,None,None) = rocks.getRockInfo(_idx) (contracts/helpers/EtherRocksHelper.sol#72)
","address,address,uint256) (contracts/helpers/EtherRocksHelper.sol",65-92
unused-return,Medium,"EtherRocksHelper.ownerOf(uint256) (contracts/helpers/EtherRocksHelper.sol#28-32) ignores return value by (account,None,None,None) = IEtherRocks(nftAddress).getRockInfo(_idx) (contracts/helpers/EtherRocksHelper.sol#29)
",uint256) (contracts/helpers/EtherRocksHelper.sol,28-32
unused-return,Medium,"EtherRocksHelper._transferFrom(address,address,uint256) (contracts/helpers/EtherRocksHelper.sol#65-92) ignores return value by (newOwner,None,None,None) = rocks.getRockInfo(_idx) (contracts/helpers/EtherRocksHelper.sol#79)
","address,address,uint256) (contracts/helpers/EtherRocksHelper.sol",65-92
unused-return,Medium,"NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818) ignores return value by positionIndexes.remove(_nftIndex) (contracts/vaults/NFTVault.sol#810)
",uint256) (contracts/vaults/NFTVault.sol,799-818
unused-return,Medium,"NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941) ignores return value by positionIndexes.remove(_nftIndex) (contracts/vaults/NFTVault.sol#936)
",uint256) (contracts/vaults/NFTVault.sol,919-941
unused-return,Medium,"NFTVault._openPosition(address,uint256) (contracts/vaults/NFTVault.sol#559-574) ignores return value by positionIndexes.add(_nftIndex) (contracts/vaults/NFTVault.sol#571)
","address,uint256) (contracts/vaults/NFTVault.sol",559-574
unused-return,Medium,"NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913) ignores return value by positionIndexes.remove(_nftIndex) (contracts/vaults/NFTVault.sol#908)
",uint256) (contracts/vaults/NFTVault.sol,879-913
unused-return,Medium,"NFTVault.liquidate(uint256) (contracts/vaults/NFTVault.sol#830-872) ignores return value by positionIndexes.remove(_nftIndex) (contracts/vaults/NFTVault.sol#867)
",uint256) (contracts/vaults/NFTVault.sol,830-872
unused-return,Medium,"AccessControlEnumerable.grantRole(bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#51-54) ignores return value by _roleMembers[role].add(account) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#53)
","bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",51-54
unused-return,Medium,"StrategyPUSDConvex.harvest(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#311-402) ignores return value by convexConfig.baseRewardPool.getReward(address(this),true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#312)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,311-402
unused-return,Medium,"StrategyPUSDConvex.withdrawJPEG(address) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#303-307) ignores return value by convexConfig.baseRewardPool.getReward(address(this),true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#305)
",address) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,303-307
unused-return,Medium,"Controller.setStrategy(IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol#82-98) ignores return value by _current.withdrawAll() (contracts/vaults/yVault/Controller.sol#94)
","IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol",82-98
unused-return,Medium,"Controller.withdrawAll(IERC20) (contracts/vaults/yVault/Controller.sol#124-126) ignores return value by strategies[_token].withdrawAll() (contracts/vaults/yVault/Controller.sol#125)
",IERC20) (contracts/vaults/yVault/Controller.sol,124-126
unused-return,Medium,"MockRewardPool.getReward(address,bool) (contracts/test/MockRewardPool.sol#37-49) ignores return value by IBaseRewardPool(extraRewards[i]).getReward(recipient,true) (contracts/test/MockRewardPool.sol#41-44)
","address,bool) (contracts/test/MockRewardPool.sol",37-49
unused-return,Medium,"StrategyPUSDConvex.deposit() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#249-254) ignores return value by convex.booster.depositAll(convex.pid,true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#253)
",) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,249-254
unused-return,Medium,"StrategyPUSDConvex.withdraw(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#273-286) ignores return value by convexConfig.baseRewardPool.withdrawAndUnwrap(_amount - balance,false) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#280-283)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,273-286
unused-return,Medium,"AccessControlEnumerable.renounceRole(bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#67-70) ignores return value by _roleMembers[role].remove(account) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#69)
","bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",67-70
unused-return,Medium,"AccessControlEnumerable._setupRole(bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#75-78) ignores return value by _roleMembers[role].add(account) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#77)
","bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",75-78
unused-return,Medium,"AccessControlEnumerable.revokeRole(bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#59-62) ignores return value by _roleMembers[role].remove(account) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#61)
","bytes32,address) (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol",59-62
unused-return,Medium,"StrategyPUSDConvex.harvest(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#311-402) ignores return value by dex.uniswapV3.exactInput(params) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#350)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,311-402
shadowing-local,Low,"ERC20PermitUpgradeable.__ERC20Permit_init_unchained(string).name (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#41) shadows:
	- ERC20Upgradeable.name() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#67-69) (function)
	- IERC20MetadataUpgradeable.name() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#16) (function)
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol,67-69
shadowing-local,Low,"NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings).initializer (contracts/vaults/NFTVault.sol#182) shadows:
	- Initializable.initializer() (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#31-45) (modifier)
",) (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol,31-45
shadowing-local,Low,"ERC20PermitUpgradeable.__ERC20Permit_init(string).name (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#35) shadows:
	- ERC20Upgradeable.name() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#67-69) (function)
	- IERC20MetadataUpgradeable.name() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#16) (function)
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol,67-69
shadowing-local,Low,"ERC20PresetMinterPauser.constructor(string,string).name (node_modules/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol#35) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#61-63) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,61-63
shadowing-local,Low,"ERC20Permit.constructor(string).name (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#35) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#61-63) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,61-63
shadowing-local,Low,"TestERC20.constructor(string,string).symbol (contracts/test/TestERC20.sol#9) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#69-71) (function)
	- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#21) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,69-71
shadowing-local,Low,"JPEG.constructor(uint256).totalSupply (contracts/tokens/JPEG.sol#12) shadows:
	- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#93-95) (function)
	- IERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#12) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,93-95
shadowing-local,Low,"ERC20PresetMinterPauser.constructor(string,string).symbol (node_modules/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol#35) shadows:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#69-71) (function)
	- IERC20Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#21) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,69-71
shadowing-local,Low,"TestERC20.constructor(string,string).name (contracts/test/TestERC20.sol#9) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#61-63) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#16) (function)
",) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol,61-63
events-maths,Low,"FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate) (contracts/vaults/FungibleAssetVaultForDAO.sol#66-88) should emit an event for: 
	- _collateralUnit = 1000000000000000000 (contracts/vaults/FungibleAssetVaultForDAO.sol#82) 
	- _collateralUnit = 10 ** IERC20Decimals(_collateralAsset).decimals() (contracts/vaults/FungibleAssetVaultForDAO.sol#84) 
","address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate) (contracts/vaults/FungibleAssetVaultForDAO.sol",66-88
events-maths,Low,"LPFarming.set(uint256,uint256) (contracts/farming/LPFarming.sol#159-167) should emit an event for: 
	- totalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint (contracts/farming/LPFarming.sol#165) 
","uint256,uint256) (contracts/farming/LPFarming.sol",159-167
events-maths,Low,"LPFarming.add(uint256,IERC20) (contracts/farming/LPFarming.sol#141-154) should emit an event for: 
	- totalAllocPoint = totalAllocPoint + _allocPoint (contracts/farming/LPFarming.sol#145) 
","uint256,IERC20) (contracts/farming/LPFarming.sol",141-154
missing-zero-check,Low,"FlashEscrow.constructor(address,bytes).target (contracts/escrow/NFTEscrow.sol#16) lacks a zero-check on :
		- (success,None) = target.call(payload) (contracts/escrow/NFTEscrow.sol#17)
",N/A,N/A
missing-zero-check,Low,"FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate)._collateralAsset (contracts/vaults/FungibleAssetVaultForDAO.sol#67) lacks a zero-check on :
		- collateralAsset = _collateralAsset (contracts/vaults/FungibleAssetVaultForDAO.sol#79)
",N/A,N/A
missing-zero-check,Low,"MockStrategy.constructor(address,address,address)._want (contracts/test/MockStrategy.sol#15) lacks a zero-check on :
		- want = _want (contracts/test/MockStrategy.sol#19)
",N/A,N/A
missing-zero-check,Low,"MockStrategy.constructor(address,address,address)._jpeg (contracts/test/MockStrategy.sol#16) lacks a zero-check on :
		- jpeg = _jpeg (contracts/test/MockStrategy.sol#20)
",N/A,N/A
missing-zero-check,Low,"MockRewardPool.constructor(IERC20,address,address[])._rewardToken (contracts/test/MockRewardPool.sol#15) lacks a zero-check on :
		- rewardToken = _rewardToken (contracts/test/MockRewardPool.sol#19)
",N/A,N/A
missing-zero-check,Low,"MockBooster.constructor(IERC20,address)._recipient (contracts/test/MockBooster.sol#12) lacks a zero-check on :
		- recipient = _recipient (contracts/test/MockBooster.sol#14)
",N/A,N/A
missing-zero-check,Low,"MockStrategy.constructor(address,address,address)._baseRewardPool (contracts/test/MockStrategy.sol#17) lacks a zero-check on :
		- baseRewardPool = _baseRewardPool (contracts/test/MockStrategy.sol#21)
",N/A,N/A
calls-loop,Low,"SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#59-66) has external calls inside a loop: newAllowance = token.allowance(address(this),spender) + value (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#64)
","IERC20,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",59-66
calls-loop,Low,"MockCurve.add_liquidity(uint256[4],uint256) (contracts/test/MockCurve.sol#17-27) has external calls inside a loop: tokens[i].transferFrom(msg.sender,address(this),amount) (contracts/test/MockCurve.sol#21)
","uint256[4],uint256) (contracts/test/MockCurve.sol",17-27
calls-loop,Low,"StrategyPUSDConvex.harvest(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#311-402) has external calls inside a loop: balance = rewardTokens[i].balanceOf(address(this)) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#320)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,311-402
calls-loop,Low,"StrategyPUSDConvex.balanceOfJPEG() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#226-241) has external calls inside a loop: extraReward = IBaseRewardPool(baseRewardPool.extraRewards(i)) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#232)
",) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,226-241
calls-loop,Low,"Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#122-133) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",122-133
calls-loop,Low,"StrategyPUSDConvex._swapUniswapV2(IUniswapV2Router,IERC20,IERC20,uint256,uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#410-430) has external calls inside a loop: router.swapExactTokensForTokens(amountIn,minOut,path,address(this),block.timestamp) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#423-429)
","IUniswapV2Router,IERC20,IERC20,uint256,uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol",410-430
calls-loop,Low,"LPFarming._updatePool(uint256) (contracts/farming/LPFarming.sol#288-311) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (contracts/farming/LPFarming.sol#300)
",uint256) (contracts/farming/LPFarming.sol,288-311
calls-loop,Low,"MockRewardPool.getReward(address,bool) (contracts/test/MockRewardPool.sol#37-49) has external calls inside a loop: IBaseRewardPool(extraRewards[i]).getReward(recipient,true) (contracts/test/MockRewardPool.sol#41-44)
","address,bool) (contracts/test/MockRewardPool.sol",37-49
calls-loop,Low,"StrategyPUSDConvex.balanceOfJPEG() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#226-241) has external calls inside a loop: address(jpeg) == extraReward.rewardToken() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#233)
",) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,226-241
calls-loop,Low,"StrategyPUSDConvex.balanceOfJPEG() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#226-241) has external calls inside a loop: availableBalance += extraReward.earned() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#234)
",) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,226-241
reentrancy-benign,Low,"Reentrancy in NFTVault.finalizePendingNFTValueETH(uint256) (contracts/vaults/NFTVault.sol#360-381):
	External calls:
	- jpegLocker.lockFor(msg.sender,_nftIndex,toLockJpeg) (contracts/vaults/NFTVault.sol#375)
	State variables written after the call(s):
	- nftTypes[_nftIndex] = CUSTOM_NFT_HASH (contracts/vaults/NFTVault.sol#377)
	- nftValueETH[_nftIndex] = pendingValue (contracts/vaults/NFTVault.sol#378)
",uint256) (contracts/vaults/NFTVault.sol,360-381
reentrancy-benign,Low,"Reentrancy in FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate) (contracts/vaults/FungibleAssetVaultForDAO.sol#66-88):
	External calls:
	- _collateralUnit = 10 ** IERC20Decimals(_collateralAsset).decimals() (contracts/vaults/FungibleAssetVaultForDAO.sol#84)
	State variables written after the call(s):
	- oracle = _oracle (contracts/vaults/FungibleAssetVaultForDAO.sol#87)
","address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate) (contracts/vaults/FungibleAssetVaultForDAO.sol",66-88
reentrancy-benign,Low,"Reentrancy in NFTVault._openPosition(address,uint256) (contracts/vaults/NFTVault.sol#559-574):
	External calls:
	- nftContract.transferFrom(_owner,address(this),_nftIndex) (contracts/vaults/NFTVault.sol#560)
	State variables written after the call(s):
	- positionOwner[_nftIndex] = _owner (contracts/vaults/NFTVault.sol#570)
	- positions[_nftIndex] = Position({borrowType:BorrowType.NOT_CONFIRMED,debtPrincipal:0,debtPortion:0,debtAmountForRepurchase:0,liquidatedAt:0,liquidator:address(0)}) (contracts/vaults/NFTVault.sol#562-569)
","address,uint256) (contracts/vaults/NFTVault.sol",559-574
reentrancy-benign,Low,"Reentrancy in FungibleAssetVaultForDAO.deposit(uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol#141-158):
	External calls:
	- IERC20Upgradeable(collateralAsset).safeTransferFrom(msg.sender,address(this),amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#148-152)
	State variables written after the call(s):
	- collateralAmount += amount (contracts/vaults/FungibleAssetVaultForDAO.sol#155)
",uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol,141-158
reentrancy-benign,Low,"Reentrancy in JPEGStaking.stake(uint256) (contracts/staking/JPEGStaking.sol#31-39):
	External calls:
	- jpeg.transferFrom(msg.sender,address(this),_amount) (contracts/staking/JPEGStaking.sol#34)
	State variables written after the call(s):
	- _mint(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#36)
		- _balances[account] += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#263)
	- _mint(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#36)
		- _totalSupply += amount (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#262)
",uint256) (contracts/staking/JPEGStaking.sol,31-39
reentrancy-benign,Low,"Reentrancy in JPEGLock.lockFor(address,uint256,uint256) (contracts/lock/JPEGLock.sol#49-63):
	External calls:
	- jpeg.safeTransferFrom(_account,address(this),_lockAmount) (contracts/lock/JPEGLock.sol#54)
	State variables written after the call(s):
	- positions[_nftIndex] = LockPosition({owner:_account,unlockAt:block.timestamp + lockTime,lockAmount:_lockAmount}) (contracts/lock/JPEGLock.sol#56-60)
","address,uint256,uint256) (contracts/lock/JPEGLock.sol",49-63
reentrancy-benign,Low,"Reentrancy in StrategyPUSDConvex.harvest(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#311-402):
	External calls:
	- convexConfig.baseRewardPool.getReward(address(this),true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#312)
	- _swapUniswapV2(dex.uniswapV2,rewardTokens[i],_weth,balance,0) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#324-330)
		- tokenIn.safeIncreaseAllowance(address(router),amountIn) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#417)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- router.swapExactTokensForTokens(amountIn,minOut,path,address(this),block.timestamp) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#423-429)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	- _weth.safeIncreaseAllowance(address(dex.uniswapV3),wethBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#338)
	- dex.uniswapV3.exactInput(params) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#350)
	- usdc.safeTransfer(strategy.controller.feeAddress(),fee) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#361)
	- usdc.safeIncreaseAllowance(address(strategy.usdcVault),usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#375-378)
	- strategy.usdcVault.deposit(usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#379)
	- strategy.usdcVault.borrow(toBorrow) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#384)
	- pusd.safeIncreaseAllowance(address(curve.curve),toBorrow) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#387)
	- usdc.safeIncreaseAllowance(address(curve.curve),usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#391)
	- curve.curve.add_liquidity(liquidityAmounts,minOutCurve) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#394)
	- deposit() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#398)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- want.safeIncreaseAllowance(address(convex.booster),balance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#252)
		- convex.booster.depositAll(convex.pid,true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#253)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	External calls sending eth:
	- _swapUniswapV2(dex.uniswapV2,rewardTokens[i],_weth,balance,0) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#324-330)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	- deposit() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#398)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	State variables written after the call(s):
	- earned += wantBalance (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#400)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,311-402
reentrancy-benign,Low,"Reentrancy in YVault.deposit(uint256) (contracts/vaults/yVault/yVault.sol#142-157):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/vaults/yVault/yVault.sol#145)
	State variables written after the call(s):
	- _mint(msg.sender,shares) (contracts/vaults/yVault/yVault.sol#154)
		- _balances[account] += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#257)
	- _mint(msg.sender,shares) (contracts/vaults/yVault/yVault.sol#154)
		- _totalSupply += amount (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#256)
",uint256) (contracts/vaults/yVault/yVault.sol,142-157
reentrancy-events,Low,"Reentrancy in JPEGStaking.stake(uint256) (contracts/staking/JPEGStaking.sol#31-39):
	External calls:
	- jpeg.transferFrom(msg.sender,address(this),_amount) (contracts/staking/JPEGStaking.sol#34)
	Event emitted after the call(s):
	- DelegateVotesChanged(src,oldWeight,newWeight) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#229)
		- _mint(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#36)
	- DelegateVotesChanged(dst,oldWeight_scope_0,newWeight_scope_1) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#234)
		- _mint(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#36)
	- Stake(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#38)
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#264)
		- _mint(msg.sender,_amount) (contracts/staking/JPEGStaking.sol#36)
",uint256) (contracts/staking/JPEGStaking.sol,31-39
reentrancy-events,Low,"Reentrancy in NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818):
	External calls:
	- nftContract.safeTransferFrom(address(this),msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#814)
	Event emitted after the call(s):
	- PositionClosed(msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#817)
",uint256) (contracts/vaults/NFTVault.sol,799-818
reentrancy-events,Low,"Reentrancy in FungibleAssetVaultForDAO.deposit(uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol#141-158):
	External calls:
	- IERC20Upgradeable(collateralAsset).safeTransferFrom(msg.sender,address(this),amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#148-152)
	Event emitted after the call(s):
	- Deposit(msg.sender,amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#157)
",uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol,141-158
reentrancy-events,Low,"Reentrancy in NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941):
	External calls:
	- nftContract.safeTransferFrom(address(this),msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#938)
	Event emitted after the call(s):
	- InsuranceExpired(owner,_nftIndex) (contracts/vaults/NFTVault.sol#940)
",uint256) (contracts/vaults/NFTVault.sol,919-941
reentrancy-events,Low,"Reentrancy in NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913):
	External calls:
	- stablecoin.transferFrom(msg.sender,position.liquidator,debtAmount + penalty) (contracts/vaults/NFTVault.sol#899-903)
	- nftContract.safeTransferFrom(address(this),msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#910)
	Event emitted after the call(s):
	- Repurchased(msg.sender,_nftIndex) (contracts/vaults/NFTVault.sol#912)
",uint256) (contracts/vaults/NFTVault.sol,879-913
reentrancy-events,Low,"Reentrancy in LPFarming.deposit(uint256,uint256) (contracts/farming/LPFarming.sol#214-229):
	External calls:
	- pool.lpToken.safeTransferFrom(msg.sender,address(this),_amount) (contracts/farming/LPFarming.sol#225)
	Event emitted after the call(s):
	- Deposit(msg.sender,_pid,_amount) (contracts/farming/LPFarming.sol#228)
","uint256,uint256) (contracts/farming/LPFarming.sol",214-229
reentrancy-events,Low,"Reentrancy in YVaultLPFarming.withdraw(uint256) (contracts/farming/yVaultLPFarming.sol#117-130):
	External calls:
	- vault.safeTransfer(msg.sender,_amount) (contracts/farming/yVaultLPFarming.sol#127)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_amount) (contracts/farming/yVaultLPFarming.sol#129)
",uint256) (contracts/farming/yVaultLPFarming.sol,117-130
reentrancy-events,Low,"Reentrancy in StrategyPUSDConvex.harvest(uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#311-402):
	External calls:
	- convexConfig.baseRewardPool.getReward(address(this),true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#312)
	- _swapUniswapV2(dex.uniswapV2,rewardTokens[i],_weth,balance,0) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#324-330)
		- tokenIn.safeIncreaseAllowance(address(router),amountIn) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#417)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- router.swapExactTokensForTokens(amountIn,minOut,path,address(this),block.timestamp) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#423-429)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	- _weth.safeIncreaseAllowance(address(dex.uniswapV3),wethBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#338)
	- dex.uniswapV3.exactInput(params) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#350)
	- usdc.safeTransfer(strategy.controller.feeAddress(),fee) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#361)
	- usdc.safeIncreaseAllowance(address(strategy.usdcVault),usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#375-378)
	- strategy.usdcVault.deposit(usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#379)
	- strategy.usdcVault.borrow(toBorrow) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#384)
	- pusd.safeIncreaseAllowance(address(curve.curve),toBorrow) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#387)
	- usdc.safeIncreaseAllowance(address(curve.curve),usdcBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#391)
	- curve.curve.add_liquidity(liquidityAmounts,minOutCurve) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#394)
	- deposit() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#398)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#92)
		- want.safeIncreaseAllowance(address(convex.booster),balance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#252)
		- convex.booster.depositAll(convex.pid,true) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#253)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	External calls sending eth:
	- _swapUniswapV2(dex.uniswapV2,rewardTokens[i],_weth,balance,0) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#324-330)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	- deposit() (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#398)
		- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
	Event emitted after the call(s):
	- Harvested(wantBalance) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#401)
",uint256) (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol,311-402
reentrancy-events,Low,"Reentrancy in YVault.deposit(uint256) (contracts/vaults/yVault/yVault.sol#142-157):
	External calls:
	- token.safeTransferFrom(msg.sender,address(this),_amount) (contracts/vaults/yVault/yVault.sol#145)
	Event emitted after the call(s):
	- Deposit(msg.sender,_amount) (contracts/vaults/yVault/yVault.sol#156)
	- Transfer(address(0),account,amount) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#258)
		- _mint(msg.sender,shares) (contracts/vaults/yVault/yVault.sol#154)
",uint256) (contracts/vaults/yVault/yVault.sol,142-157
reentrancy-events,Low,"Reentrancy in YVaultLPFarming.deposit(uint256) (contracts/farming/yVaultLPFarming.sol#100-112):
	External calls:
	- vault.safeTransferFrom(msg.sender,address(this),_amount) (contracts/farming/yVaultLPFarming.sol#106)
	Event emitted after the call(s):
	- Deposit(msg.sender,_amount) (contracts/farming/yVaultLPFarming.sol#111)
",uint256) (contracts/farming/yVaultLPFarming.sol,100-112
reentrancy-events,Low,"Reentrancy in YVault.withdraw(uint256) (contracts/vaults/yVault/yVault.sol#166-184):
	External calls:
	- controller.withdraw(address(token),toWithdraw) (contracts/vaults/yVault/yVault.sol#179)
	- token.safeTransfer(msg.sender,backingTokens) (contracts/vaults/yVault/yVault.sol#182)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,backingTokens) (contracts/vaults/yVault/yVault.sol#183)
",uint256) (contracts/vaults/yVault/yVault.sol,166-184
reentrancy-events,Low,"Reentrancy in LPFarming.withdraw(uint256,uint256) (contracts/farming/LPFarming.sol#235-252):
	External calls:
	- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/farming/LPFarming.sol#249)
	Event emitted after the call(s):
	- Withdraw(msg.sender,_pid,_amount) (contracts/farming/LPFarming.sol#251)
","uint256,uint256) (contracts/farming/LPFarming.sol",235-252
reentrancy-events,Low,"Reentrancy in YVaultLPFarming.claim() (contracts/farming/yVaultLPFarming.sol#134-152):
	External calls:
	- vault.withdrawJPEG() (contracts/farming/yVaultLPFarming.sol#147)
	- jpeg.safeTransfer(msg.sender,rewards) (contracts/farming/yVaultLPFarming.sol#149)
	Event emitted after the call(s):
	- Claim(msg.sender,rewards) (contracts/farming/yVaultLPFarming.sol#151)
",) (contracts/farming/yVaultLPFarming.sol,134-152
timestamp,Low,"NFTVault.showPosition(uint256) (contracts/vaults/NFTVault.sol#628-666) uses timestamp for comparisons
	Dangerous comparisons:
	- debtPrincipal > debtAmount (contracts/vaults/NFTVault.sol#649)
	- preview = PositionPreview({owner:posOwner,nftIndex:_nftIndex,nftType:nftTypes[_nftIndex],nftValueUSD:_getNFTValueUSD(_nftIndex),vaultSettings:settings,creditLimit:_getCreditLimit(_nftIndex),debtPrincipal:debtPrincipal,debtInterest:debtAmount - debtPrincipal,borrowType:positions[_nftIndex].borrowType,liquidatable:positions[_nftIndex].liquidatedAt == 0 && debtAmount >= _getLiquidationLimit(_nftIndex),liquidatedAt:positions[_nftIndex].liquidatedAt,liquidator:positions[_nftIndex].liquidator}) (contracts/vaults/NFTVault.sol#651-665)
",uint256) (contracts/vaults/NFTVault.sol,628-666
timestamp,Low,"NFTVault.repurchase(uint256) (contracts/vaults/NFTVault.sol#879-913) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(position.liquidatedAt + settings.insuraceRepurchaseTimeLimit >= block.timestamp,insurance_expired) (contracts/vaults/NFTVault.sol#887-891)
",uint256) (contracts/vaults/NFTVault.sol,879-913
timestamp,Low,"NFTVault._calculateDebt(uint256,uint256,uint256) (contracts/vaults/NFTVault.sol#547-553) uses timestamp for comparisons
	Dangerous comparisons:
	- totalPortion == 0 (contracts/vaults/NFTVault.sol#552)
","uint256,uint256,uint256) (contracts/vaults/NFTVault.sol",547-553
timestamp,Low,"NFTVault.claimExpiredInsuranceNFT(uint256) (contracts/vaults/NFTVault.sol#919-941) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(position.liquidatedAt + settings.insuraceRepurchaseTimeLimit < block.timestamp,insurance_not_expired) (contracts/vaults/NFTVault.sol#927-931)
",uint256) (contracts/vaults/NFTVault.sol,919-941
timestamp,Low,"NFTVault.repay(uint256,uint256) (contracts/vaults/NFTVault.sol#756-794) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_amount > 0,invalid_amount) (contracts/vaults/NFTVault.sol#764)
	- require(bool,string)(position.liquidatedAt == 0,liquidated) (contracts/vaults/NFTVault.sol#767)
	- require(bool,string)(debtAmount > 0,position_not_borrowed) (contracts/vaults/NFTVault.sol#770)
	- _amount > debtAmount (contracts/vaults/NFTVault.sol#775)
	- _amount > debtInterest (contracts/vaults/NFTVault.sol#780-782)
	- paidPrincipal == debtPrincipal (contracts/vaults/NFTVault.sol#784-786)
","uint256,uint256) (contracts/vaults/NFTVault.sol",756-794
timestamp,Low,"NFTVault._calculateAdditionalInterest() (contracts/vaults/NFTVault.sol#578-596) uses timestamp for comparisons
	Dangerous comparisons:
	- elapsedTime == 0 (contracts/vaults/NFTVault.sol#581)
	- totalDebtAmount == 0 (contracts/vaults/NFTVault.sol#585)
",) (contracts/vaults/NFTVault.sol,578-596
timestamp,Low,"NFTVault.closePosition(uint256) (contracts/vaults/NFTVault.sol#799-818) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_getDebtAmount(_nftIndex) == 0,position_not_repaid) (contracts/vaults/NFTVault.sol#806)
",uint256) (contracts/vaults/NFTVault.sol,799-818
timestamp,Low,"NFTVault.liquidate(uint256) (contracts/vaults/NFTVault.sol#830-872) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(position.liquidatedAt == 0,liquidated) (contracts/vaults/NFTVault.sol#842)
	- require(bool,string)(debtAmount >= _getLiquidationLimit(_nftIndex),position_not_liquidatable) (contracts/vaults/NFTVault.sol#845-848)
",uint256) (contracts/vaults/NFTVault.sol,830-872
timestamp,Low,"NFTVault._getDebtAmount(uint256) (contracts/vaults/NFTVault.sol#526-540) uses timestamp for comparisons
	Dangerous comparisons:
	- principal > calculatedDebt (contracts/vaults/NFTVault.sol#539)
",uint256) (contracts/vaults/NFTVault.sol,526-540
timestamp,Low,"ERC20PermitUpgradeable.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#47-66) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#56)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol",47-66
timestamp,Low,"ERC20VotesUpgradeable.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#146-163) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= expiry,ERC20Votes: signature expired) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#154)
","address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol",146-163
timestamp,Low,"NFTVault.borrow(uint256,uint256,bool) (contracts/vaults/NFTVault.sol#675-748) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(totalDebtAmount + _amount <= settings.borrowAmountCap,debt_cap) (contracts/vaults/NFTVault.sol#688-691)
	- require(bool,string)(position.liquidatedAt == 0,liquidated) (contracts/vaults/NFTVault.sol#698)
	- require(bool,string)(position.borrowType == BorrowType.NOT_CONFIRMED || (position.borrowType == BorrowType.USE_INSURANCE && _useInsurance) || (position.borrowType == BorrowType.NON_INSURANCE && ! _useInsurance),invalid_insurance_mode) (contracts/vaults/NFTVault.sol#699-706)
	- require(bool,string)(debtAmount + _amount <= creditLimit,insufficient_credit) (contracts/vaults/NFTVault.sol#710)
	- totalDebtPortion == 0 (contracts/vaults/NFTVault.sol#735)
","uint256,uint256,bool) (contracts/vaults/NFTVault.sol",675-748
timestamp,Low,"ERC20Votes.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#143-160) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= expiry,ERC20Votes: signature expired) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#151)
","address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol",143-160
timestamp,Low,"ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#40-59) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#49)
","address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",40-59
timestamp,Low,"JPEGLock.unlock(uint256) (contracts/lock/JPEGLock.sol#68-78) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(position.unlockAt <= block.timestamp,locked) (contracts/lock/JPEGLock.sol#71)
",uint256) (contracts/lock/JPEGLock.sol,68-78
assembly,Informational,"EnumerableSetUpgradeable.values(EnumerableSetUpgradeable.UintSet) (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#346-355) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#350-352)
",EnumerableSetUpgradeable.UintSet) (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol,346-355
assembly,Informational,"EnumerableSetUpgradeable.values(EnumerableSetUpgradeable.AddressSet) (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#273-282) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#277-279)
",EnumerableSetUpgradeable.AddressSet) (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol,273-282
assembly,Informational,"AddressUpgradeable.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#168-188) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#180-183)
","bool,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",168-188
assembly,Informational,"ECDSAUpgradeable.tryRecover(bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#112-124) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#119-122)
","bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol",112-124
assembly,Informational,"ECDSAUpgradeable.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#54-83) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#64-68)
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#75-78)
","bytes32,bytes) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol",54-83
assembly,Informational,"AddressUpgradeable.isContract(address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#26-36) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#32-34)
",address) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol,26-36
assembly,Informational,"ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#369-390) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#382-384)
","address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol",369-390
assembly,Informational,"ECDSA.tryRecover(bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#112-124) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#119-122)
","bytes32,bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",112-124
assembly,Informational,"EnumerableSet.values(EnumerableSet.UintSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#346-355) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#350-352)
",EnumerableSet.UintSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol,346-355
assembly,Informational,"Address.isContract(address) (node_modules/@openzeppelin/contracts/utils/Address.sol#26-36) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#32-34)
",address) (node_modules/@openzeppelin/contracts/utils/Address.sol,26-36
assembly,Informational,"Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#195-215) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#207-210)
","bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",195-215
assembly,Informational,"EnumerableSet.values(EnumerableSet.AddressSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#273-282) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#277-279)
",EnumerableSet.AddressSet) (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol,273-282
assembly,Informational,"ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#54-83) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#64-68)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#75-78)
","bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",54-83
boolean-equal,Informational,"Controller.setStrategy(IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol#82-98) compares to a boolean constant:
	-require(bool,string)(approvedStrategies[_token][_strategy] == true,STRATEGY_NOT_APPROVED) (contracts/vaults/yVault/Controller.sol#86-89)
","IERC20,IStrategy) (contracts/vaults/yVault/Controller.sol",82-98
boolean-equal,Informational,"EtherRock.buyRock(uint256) (contracts/test/EtherRocks.sol#55-72) compares to a boolean constant:
	-require(bool,string)(rocks[rockNumber].currentlyForSale == true,Not for sale) (contracts/test/EtherRocks.sol#56)
",uint256) (contracts/test/EtherRocks.sol,55-72
pragma,Informational,"2 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol#3)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#3)
		-^0.8.0 (contracts/escrow/NFTEscrow.sol#2)
		-^0.8.0 (contracts/helpers/CryptoPunksHelper.sol#2)
		-^0.8.0 (contracts/helpers/EtherRocksHelper.sol#2)
		-^0.8.0 (contracts/interfaces/IAggregatorV3Interface.sol#2)
		-^0.8.0 (contracts/interfaces/ICryptoPunks.sol#2)
		-^0.8.0 (contracts/interfaces/IERC20Decimals.sol#2)
		-^0.8.0 (contracts/interfaces/IJPEGLock.sol#2)
		-^0.8.0 (contracts/interfaces/IStableCoin.sol#2)
		-^0.8.0 (contracts/staking/JPEGStaking.sol#2)
		-^0.8.0 (contracts/test/MockAggregator.sol#2)
		-^0.8.0 (contracts/vaults/FungibleAssetVaultForDAO.sol#2)
		-^0.8.0 (contracts/vaults/NFTVault.sol#2)
	- Version constraint ^0.8 is used by:
		-^0.8 (contracts/interfaces/IEtherRocks.sol#2)
",N/A,N/A
costly-loop,Informational,"CryptoPunks.setInitialOwner(address,uint256) (contracts/test/CryptoPunks.sol#92-106) has costly operations inside a loop:
	- punksRemainingToAssign -- (contracts/test/CryptoPunks.sol#100)
","address,uint256) (contracts/test/CryptoPunks.sol",92-106
solc-version,Informational,"Version constraint ^0.8 is too complex.
It is used by:
	- ^0.8 (contracts/interfaces/IEtherRocks.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol#3)
	- ^0.8.0 (contracts/escrow/NFTEscrow.sol#2)
	- ^0.8.0 (contracts/helpers/CryptoPunksHelper.sol#2)
	- ^0.8.0 (contracts/helpers/EtherRocksHelper.sol#2)
	- ^0.8.0 (contracts/interfaces/IAggregatorV3Interface.sol#2)
	- ^0.8.0 (contracts/interfaces/ICryptoPunks.sol#2)
	- ^0.8.0 (contracts/interfaces/IERC20Decimals.sol#2)
	- ^0.8.0 (contracts/interfaces/IJPEGLock.sol#2)
	- ^0.8.0 (contracts/interfaces/IStableCoin.sol#2)
	- ^0.8.0 (contracts/staking/JPEGStaking.sol#2)
	- ^0.8.0 (contracts/test/MockAggregator.sol#2)
	- ^0.8.0 (contracts/vaults/FungibleAssetVaultForDAO.sol#2)
	- ^0.8.0 (contracts/vaults/NFTVault.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControlEnumerable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControlEnumerable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Address.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol#3)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol#3)
	- ^0.8.0 (contracts/farming/LPFarming.sol#2)
	- ^0.8.0 (contracts/farming/yVaultLPFarming.sol#2)
	- ^0.8.0 (contracts/interfaces/IBaseRewardPool.sol#2)
	- ^0.8.0 (contracts/interfaces/IBooster.sol#2)
	- ^0.8.0 (contracts/interfaces/IController.sol#2)
	- ^0.8.0 (contracts/interfaces/ICurve.sol#2)
	- ^0.8.0 (contracts/interfaces/IFungibleAssetVaultForDAO.sol#2)
	- ^0.8.0 (contracts/interfaces/IStrategy.sol#2)
	- ^0.8.0 (contracts/interfaces/ISwapRouter.sol#2)
	- ^0.8.0 (contracts/interfaces/IUniswapV2Router.sol#2)
	- ^0.8.0 (contracts/interfaces/IWETH.sol#1)
	- ^0.8.0 (contracts/interfaces/IYVault.sol#2)
	- ^0.8.0 (contracts/lock/JPEGLock.sol#2)
	- ^0.8.0 (contracts/test/MockBooster.sol#2)
	- ^0.8.0 (contracts/test/MockCurve.sol#2)
	- ^0.8.0 (contracts/test/MockRewardPool.sol#2)
	- ^0.8.0 (contracts/test/MockStrategy.sol#2)
	- ^0.8.0 (contracts/test/TestERC20.sol#2)
	- ^0.8.0 (contracts/test/TestERC721.sol#2)
	- ^0.8.0 (contracts/test/WETH.sol#2)
	- ^0.8.0 (contracts/tokens/JPEG.sol#2)
	- ^0.8.0 (contracts/tokens/StableCoin.sol#2)
	- ^0.8.0 (contracts/vaults/yVault/Controller.sol#2)
	- ^0.8.0 (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#2)
	- ^0.8.0 (contracts/vaults/yVault/yVault.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/interfaces/IFloorOracle.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/interfaces/IUniswapV2Factory.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/interfaces/IUniswapV2Pair.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/test/CryptoPunks.sol#2)
",N/A,N/A
solc-version,Informational,"Version constraint ^0.8 is too complex.
It is used by:
	- ^0.8 (contracts/test/EtherRocks.sol#2)
",N/A,N/A
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#151-160):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#158)
","address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",151-160
low-level-calls,Informational,"Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#122-133):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#131)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",122-133
low-level-calls,Informational,"Low level call in FlashEscrow.constructor(address,bytes) (contracts/escrow/NFTEscrow.sol#16-21):
	- (success,None) = target.call(payload) (contracts/escrow/NFTEscrow.sol#17)
","address,bytes) (contracts/escrow/NFTEscrow.sol",16-21
low-level-calls,Informational,"Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#54-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",54-59
low-level-calls,Informational,"Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#54-59):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#57)
","address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol",54-59
low-level-calls,Informational,"Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#151-160):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#158)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",151-160
low-level-calls,Informational,"Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#122-133):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#131)
","address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",122-133
low-level-calls,Informational,"Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#178-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
","address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol",178-187
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._timestamp (contracts/test/MockAggregator.sol#48) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateAnswer(int256)._answer (contracts/test/MockAggregator.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.claimExpiredInsuranceNFT(uint256)._nftIndex (contracts/vaults/NFTVault.sol#919) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20PermitUpgradeable.__ERC20Permit_init(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#35-39) is not in mixedCase
",string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol,35-39
naming-convention,Informational,"Parameter NFTVault.getNFTInfo(uint256)._nftIndex (contracts/vaults/NFTVault.sol#481) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.showPosition(uint256)._nftIndex (contracts/vaults/NFTVault.sol#628) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setCreditLimitRate(NFTVault.Rate)._creditLimitRate (contracts/vaults/NFTVault.sol#232) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IERC20PermitUpgradeable.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol#58) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.safeTransferFrom(address,address,uint256)._to (contracts/helpers/CryptoPunksHelper.sol#54) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._roundId (contracts/test/MockAggregator.sol#46) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable JPEGStaking.__gap (contracts/staking/JPEGStaking.sol#57) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.transferFrom(address,address,uint256)._idx (contracts/helpers/EtherRocksHelper.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._typeInitializers (contracts/vaults/NFTVault.sol#146) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function AccessControlUpgradeable.__AccessControl_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#56-57) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol,56-57
naming-convention,Informational,"Parameter NFTVault.borrow(uint256,uint256,bool)._amount (contracts/vaults/NFTVault.sol#677) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._stablecoin (contracts/vaults/NFTVault.sol#140) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._settings (contracts/vaults/NFTVault.sol#148) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate)._oracle (contracts/vaults/FungibleAssetVaultForDAO.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._startedAt (contracts/test/MockAggregator.sol#49) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setNFTType(uint256,bytes32)._nftIndex (contracts/vaults/NFTVault.sol#321) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712Upgradeable._HASHED_NAME (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#29) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function EIP712Upgradeable.__EIP712_init(string,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#47-49) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol",47-49
naming-convention,Informational,"Function ERC20VotesUpgradeable.__ERC20Votes_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#29-30) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol,29-30
naming-convention,Informational,"Parameter FungibleAssetVaultForDAO.setCreditLimitRate(FungibleAssetVaultForDAO.Rate)._creditLimitRate (contracts/vaults/FungibleAssetVaultForDAO.sol#92) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20PermitUpgradeable.__ERC20Permit_init_unchained(string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#41-42) is not in mixedCase
",string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol,41-42
naming-convention,Informational,"Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.borrow(uint256,uint256,bool)._nftIndex (contracts/vaults/NFTVault.sol#676) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setJPEGLockTime(uint256)._newLockTime (contracts/vaults/NFTVault.sol#271) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20PermitUpgradeable._PERMIT_TYPEHASH (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setBorrowAmountCap(uint256)._borrowAmountCap (contracts/vaults/NFTVault.sol#203) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#43-45) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol,43-45
naming-convention,Informational,"Parameter JPEGStaking.unstake(uint256)._amount (contracts/staking/JPEGStaking.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable AccessControlUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#219) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setInsuranceLiquidationPenaltyRate(NFTVault.Rate)._insuranceLiquidationPenaltyRate (contracts/vaults/NFTVault.sol#311) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTEscrow.__NFTEscrow_init(address)._nftAddress (contracts/escrow/NFTEscrow.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._jpegAggregator (contracts/vaults/NFTVault.sol#143) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#28-31) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,28-31
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._floorOracle (contracts/vaults/NFTVault.sol#144) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.closePosition(uint256)._nftIndex (contracts/vaults/NFTVault.sol#799) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.safeTransferFrom(address,address,uint256)._to (contracts/helpers/EtherRocksHelper.sol#54) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._nftContract (contracts/vaults/NFTVault.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setInsurancePurchaseRate(NFTVault.Rate)._insurancePurchaseRate (contracts/vaults/NFTVault.sol#300) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setLiquidationLimitRate(NFTVault.Rate)._liquidationLimitRate (contracts/vaults/NFTVault.sol#247) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#77) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._fallbackOracle (contracts/vaults/NFTVault.sol#145) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.transferFrom(address,address,uint256)._from (contracts/helpers/CryptoPunksHelper.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20VotesUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol#262) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGStaking.initialize(IERC20Upgradeable)._jpeg (contracts/staking/JPEGStaking.sol#21) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTEscrow.precompute(address,uint256)._owner (contracts/escrow/NFTEscrow.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init_unchained(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#59-62) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",59-62
naming-convention,Informational,"Function NFTEscrow.__NFTEscrow_init(address) (contracts/escrow/NFTEscrow.sol#37-39) is not in mixedCase
",address) (contracts/escrow/NFTEscrow.sol,37-39
naming-convention,Informational,"Parameter NFTVault.setPendingNFTValueETH(uint256,uint256)._nftIndex (contracts/vaults/NFTVault.sol#347) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.finalizePendingNFTValueETH(uint256)._nftIndex (contracts/vaults/NFTVault.sol#360) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.safeTransferFrom(address,address,uint256)._idx (contracts/helpers/EtherRocksHelper.sol#55) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.safeTransferFrom(address,address,uint256)._from (contracts/helpers/CryptoPunksHelper.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Upgradeable.__ERC20_init(string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#54-57) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",54-57
naming-convention,Informational,"Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#39-41) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol,39-41
naming-convention,Informational,"Variable ERC20PermitUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#93) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#27-28) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol,27-28
naming-convention,Informational,"Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,21-22
naming-convention,Informational,"Function EIP712Upgradeable._EIP712VersionHash() (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#108-110) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol,108-110
naming-convention,Informational,"Parameter FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate)._stablecoin (contracts/vaults/FungibleAssetVaultForDAO.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712Upgradeable._HASHED_VERSION (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setPendingNFTValueETH(uint256,uint256)._amountETH (contracts/vaults/NFTVault.sol#347) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol#361) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTEscrow.precompute(address,uint256)._idx (contracts/escrow/NFTEscrow.sol#81) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ReentrancyGuardUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#67) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.ownerOf(uint256)._idx (contracts/helpers/CryptoPunksHelper.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setNFTTypeValueETH(bytes32,uint256)._type (contracts/vaults/NFTVault.sol#336) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setDebtInterestApr(NFTVault.Rate)._debtInterestApr (contracts/vaults/NFTVault.sol#212) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function AccessControlUpgradeable.__AccessControl_init() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#50-54) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol,50-54
naming-convention,Informational,"Parameter NFTVault.setOrganizationFeeRate(NFTVault.Rate)._organizationFeeRate (contracts/vaults/NFTVault.sol#290) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.getRoundData(uint80)._roundId (contracts/test/MockAggregator.sol#59) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable NFTEscrow.__gap (contracts/escrow/NFTEscrow.sol#109) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable FungibleAssetVaultForDAO.__gap (contracts/vaults/FungibleAssetVaultForDAO.sol#208) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function EIP712Upgradeable._EIP712NameHash() (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#98-100) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol,98-100
naming-convention,Informational,"Parameter NFTVault.toggleFallbackOracle(bool)._useFallback (contracts/vaults/NFTVault.sol#262) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGStaking.stake(uint256)._amount (contracts/staking/JPEGStaking.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate)._creditLimitRate (contracts/vaults/FungibleAssetVaultForDAO.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.overrideFloor(uint256)._newFloor (contracts/vaults/NFTVault.sol#277) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter MockV3Aggregator.updateRoundData(uint80,int256,uint256,uint256)._answer (contracts/test/MockAggregator.sol#47) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC165Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#33-35) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol,33-35
naming-convention,Informational,"Parameter CryptoPunksHelper.transferFrom(address,address,uint256)._idx (contracts/helpers/CryptoPunksHelper.sol#41) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.borrow(uint256,uint256,bool)._useInsurance (contracts/vaults/NFTVault.sol#678) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setNFTType(uint256,bytes32)._type (contracts/vaults/NFTVault.sol#321) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setValueIncreaseLockRate(NFTVault.Rate)._valueIncreaseLockRate (contracts/vaults/NFTVault.sol#222) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.transferFrom(address,address,uint256)._to (contracts/helpers/EtherRocksHelper.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.repay(uint256,uint256)._nftIndex (contracts/vaults/NFTVault.sol#756) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.safeTransferFrom(address,address,uint256)._idx (contracts/helpers/CryptoPunksHelper.sol#55) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.ownerOf(uint256)._idx (contracts/helpers/EtherRocksHelper.sol#28) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter CryptoPunksHelper.transferFrom(address,address,uint256)._to (contracts/helpers/CryptoPunksHelper.sol#40) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRocksHelper.transferFrom(address,address,uint256)._from (contracts/helpers/EtherRocksHelper.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter FungibleAssetVaultForDAO.initialize(address,IStableCoin,IAggregatorV3Interface,FungibleAssetVaultForDAO.Rate)._collateralAsset (contracts/vaults/FungibleAssetVaultForDAO.sol#67) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.setNFTTypeValueETH(bytes32,uint256)._amountETH (contracts/vaults/NFTVault.sol#336) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._jpegLocker (contracts/vaults/NFTVault.sol#147) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20PermitUpgradeable.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol#79-81) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol,79-81
naming-convention,Informational,"Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#17-19) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol,17-19
naming-convention,Informational,"Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#23-25) is not in mixedCase
",) (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol,23-25
naming-convention,Informational,"Parameter EtherRocksHelper.safeTransferFrom(address,address,uint256)._from (contracts/helpers/EtherRocksHelper.sol#53) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable NFTVault.__gap (contracts/vaults/NFTVault.sol#950) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.repay(uint256,uint256)._amount (contracts/vaults/NFTVault.sol#756) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function EIP712Upgradeable.__EIP712_init_unchained(string,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol#51-56) is not in mixedCase
","string,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol",51-56
naming-convention,Informational,"Parameter NFTVault.initialize(IStableCoin,IERC721Upgradeable,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,IAggregatorV3Interface,NFTVault.NFTCategoryInitializer[],IJPEGLock,NFTVault.VaultSettings)._ethAggregator (contracts/vaults/NFTVault.sol#142) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.liquidate(uint256)._nftIndex (contracts/vaults/NFTVault.sol#830) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter NFTVault.repurchase(uint256)._nftIndex (contracts/vaults/NFTVault.sol#879) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.pendingReward(uint256,address)._user (contracts/farming/LPFarming.sol#179) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setVault(IERC20,address)._vault (contracts/vaults/yVault/Controller.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVaultLPFarming.deposit(uint256)._amount (contracts/farming/yVaultLPFarming.sol#100) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGLock.unlock(uint256)._nftIndex (contracts/lock/JPEGLock.sol#68) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ICurve.add_liquidity(uint256[4],uint256) (contracts/interfaces/ICurve.sol#5) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.revokeStrategy(IERC20,IStrategy)._strategy (contracts/vaults/yVault/Controller.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVaultLPFarming.pendingReward(address)._user (contracts/farming/yVaultLPFarming.sol#75) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVaultLPFarming.setContractWhitelisted(address,bool)._contract (contracts/farming/yVaultLPFarming.sol#65) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(IERC20,uint256)._token (contracts/vaults/yVault/Controller.sol#131) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyPUSDConvex.withdraw(uint256)._amount (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#273) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(IERC20,uint256)._amount (contracts/vaults/yVault/Controller.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.newEpoch(uint256,uint256,uint256)._rewardPerBlock (contracts/farming/LPFarming.sol#110) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseTokensGetStuck(IERC20,uint256)._amount (contracts/vaults/yVault/Controller.sol#131) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.setContractWhitelisted(address,bool)._isWhitelisted (contracts/vaults/yVault/yVault.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.setAvailableTokensRate(YVault.Rate)._rate (contracts/vaults/yVault/yVault.sol#98) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.setController(address)._controller (contracts/vaults/yVault/yVault.sol#108) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter ERC721.safeTransferFrom(address,address,uint256,bytes)._data (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#181) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGLock.lockFor(address,uint256,uint256)._account (contracts/lock/JPEGLock.sol#50) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVaultLPFarming.withdraw(uint256)._amount (contracts/farming/yVaultLPFarming.sol#117) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.deposit(uint256,uint256)._pid (contracts/farming/LPFarming.sol#214) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.deposit(uint256)._amount (contracts/vaults/yVault/yVault.sol#142) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.pendingReward(uint256,address)._pid (contracts/farming/LPFarming.sol#179) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setVault(IERC20,address)._token (contracts/vaults/yVault/Controller.sol#44) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.withdraw(uint256,uint256)._amount (contracts/farming/LPFarming.sol#235) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#35) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawAll(IERC20)._token (contracts/vaults/yVault/Controller.sol#124) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.withdraw(uint256)._shares (contracts/vaults/yVault/yVault.sol#166) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function MockCurve.add_liquidity(uint256[4],uint256) (contracts/test/MockCurve.sol#17-27) is not in mixedCase
","uint256[4],uint256) (contracts/test/MockCurve.sol",17-27
naming-convention,Informational,"Parameter StrategyPUSDConvex.setPerformanceFee(StrategyPUSDConvex.Rate)._performanceFee (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#177) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.setFarmingPool(address)._farm (contracts/vaults/yVault/yVault.sol#115) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setStrategy(IERC20,IStrategy)._strategy (contracts/vaults/yVault/Controller.sol#82) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable ERC20Permit._PERMIT_TYPEHASH (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#27-28) is not in mixedCase
",node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol,27-28
naming-convention,Informational,"Parameter Controller.inCaseStrategyTokensGetStuck(IStrategy,address)._token (contracts/vaults/yVault/Controller.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.approveStrategy(IERC20,IStrategy)._strategy (contracts/vaults/yVault/Controller.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#58) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyPUSDConvex.setController(address)._controller (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#191) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyPUSDConvex.withdrawJPEG(address)._to (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#303) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(IERC20,uint256)._amount (contracts/vaults/yVault/Controller.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.balanceOfJPEG(IERC20)._token (contracts/vaults/yVault/Controller.sol#117) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGLock.setLockTime(uint256)._newTime (contracts/lock/JPEGLock.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.setFeeAddress(address)._feeAddress (contracts/vaults/yVault/Controller.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#31) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.inCaseStrategyTokensGetStuck(IStrategy,address)._strategy (contracts/vaults/yVault/Controller.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.add(uint256,IERC20)._lpToken (contracts/farming/LPFarming.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function ERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#72-74) is not in mixedCase
",) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol,72-74
naming-convention,Informational,"Parameter Controller.setStrategy(IERC20,IStrategy)._token (contracts/vaults/yVault/Controller.sol#82) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVault.setContractWhitelisted(address,bool)._contract (contracts/vaults/yVault/yVault.sol#89) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.claim(uint256)._pid (contracts/farming/LPFarming.sol#332) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawJPEG(IERC20,address)._token (contracts/vaults/yVault/Controller.sol#161) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.set(uint256,uint256)._allocPoint (contracts/farming/LPFarming.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.newEpoch(uint256,uint256,uint256)._startBlock (contracts/farming/LPFarming.sol#108) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGLock.lockFor(address,uint256,uint256)._nftIndex (contracts/lock/JPEGLock.sol#51) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter YVaultLPFarming.setContractWhitelisted(address,bool)._isWhitelisted (contracts/farming/yVaultLPFarming.sol#65) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.revokeStrategy(IERC20,IStrategy)._token (contracts/vaults/yVault/Controller.sol#69) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.setContractWhitelisted(address,bool)._contract (contracts/farming/LPFarming.sol#96) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyPUSDConvex.withdraw(IERC20)._asset (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#257) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.withdraw(uint256,uint256)._pid (contracts/farming/LPFarming.sol#235) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.set(uint256,uint256)._pid (contracts/farming/LPFarming.sol#159) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#33) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.earn(IERC20,uint256)._token (contracts/vaults/yVault/Controller.sol#103) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdraw(IERC20,uint256)._token (contracts/vaults/yVault/Controller.sol#151) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.balanceOf(IERC20)._token (contracts/vaults/yVault/Controller.sol#111) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.newEpoch(uint256,uint256,uint256)._endBlock (contracts/farming/LPFarming.sol#109) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter JPEGLock.lockFor(address,uint256,uint256)._lockAmount (contracts/lock/JPEGLock.sol#52) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#30) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter StrategyPUSDConvex.setUSDCVault(address)._vault (contracts/vaults/yVault/strategies/StrategyPUSDConvex.sol#201) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.withdrawJPEG(IERC20,address)._to (contracts/vaults/yVault/Controller.sol#162) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.add(uint256,IERC20)._allocPoint (contracts/farming/LPFarming.sol#141) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#34) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter Controller.approveStrategy(IERC20,IStrategy)._token (contracts/vaults/yVault/Controller.sol#56) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.deposit(uint256,uint256)._amount (contracts/farming/LPFarming.sol#214) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter LPFarming.setContractWhitelisted(address,bool)._isWhitelisted (contracts/farming/LPFarming.sol#96) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IFloorOracle.floor_eth_18() (contracts/interfaces/IFloorOracle.sol#7) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IFloorOracle.last_update_remote() (contracts/interfaces/IFloorOracle.sol#11) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IFloorOracle.last_update_time() (contracts/interfaces/IFloorOracle.sol#9) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/interfaces/IUniswapV2Pair.sol#39) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/interfaces/IUniswapV2Pair.sol#70) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/interfaces/IUniswapV2Pair.sol#37) is not in mixedCase
",N/A,N/A
naming-convention,Informational,"Parameter EtherRock.rockOwningHistory(address)._address (contracts/test/EtherRocks.sol#47) is not in mixedCase
",N/A,N/A
reentrancy-unlimited-gas,Informational,"Reentrancy in FungibleAssetVaultForDAO.withdraw(uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol#193-206):
	External calls:
	- address(msg.sender).transfer(amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#201)
	Event emitted after the call(s):
	- Withdraw(msg.sender,amount) (contracts/vaults/FungibleAssetVaultForDAO.sol#205)
",uint256) (contracts/vaults/FungibleAssetVaultForDAO.sol,193-206
reentrancy-unlimited-gas,Informational,"Reentrancy in EtherRock.buyRock(uint256) (contracts/test/EtherRocks.sol#55-72):
	External calls:
	- address(rocks[rockNumber].owner).transfer(rocks[rockNumber].price) (contracts/test/EtherRocks.sol#61)
	State variables written after the call(s):
	- latestNewRockForSale ++ (contracts/test/EtherRocks.sol#67)
	- rockOwners[msg.sender].push(rockNumber) (contracts/test/EtherRocks.sol#64)
	- rocks[rockNumber].owner = msg.sender (contracts/test/EtherRocks.sol#63)
	- rocks[latestNewRockForSale].price = 0 (contracts/test/EtherRocks.sol#68)
	- rocks[latestNewRockForSale].currentlyForSale = true (contracts/test/EtherRocks.sol#69)
",uint256) (contracts/test/EtherRocks.sol,55-72
too-many-digits,Informational,"NFTEscrow._encodeFlashEscrow(uint256) (contracts/escrow/NFTEscrow.sol#44-54) uses literals with too many digits:
	- abi.encodePacked(type()(FlashEscrow).creationCode,abi.encode(nftAddress,_encodeFlashEscrowPayload(_idx))) (contracts/escrow/NFTEscrow.sol#49-53)
",uint256) (contracts/escrow/NFTEscrow.sol,44-54
unused-state,Informational,"JPEGStaking.__gap (contracts/staking/JPEGStaking.sol#57) is never used in JPEGStaking (contracts/staking/JPEGStaking.sol#11-58)
",contracts/staking/JPEGStaking.sol,11-58
unused-state,Informational,"NFTVault.__gap (contracts/vaults/NFTVault.sol#950) is never used in NFTVault (contracts/vaults/NFTVault.sol#19-951)
",contracts/vaults/NFTVault.sol,19-951
unused-state,Informational,"FungibleAssetVaultForDAO.__gap (contracts/vaults/FungibleAssetVaultForDAO.sol#208) is never used in FungibleAssetVaultForDAO (contracts/vaults/FungibleAssetVaultForDAO.sol#24-209)
",contracts/vaults/FungibleAssetVaultForDAO.sol,24-209
cache-array-length,Optimization,"Loop condition i < poolInfo.length (contracts/farming/LPFarming.sol#348) should use cached array length instead of referencing `length` member of the storage array.
 ",N/A,N/A
constable-states,Optimization,"CryptoPunks.standard (contracts/test/CryptoPunks.sol#11) should be constant 
",N/A,N/A
constable-states,Optimization,"CryptoPunks.nextPunkIndexToAssign (contracts/test/CryptoPunks.sol#17) should be constant 
",N/A,N/A
constable-states,Optimization,"CryptoPunks.imageHash (contracts/test/CryptoPunks.sol#6-7) should be constant 
",contracts/test/CryptoPunks.sol,6-7
constable-states,Optimization,"EtherRock.owner (contracts/test/EtherRocks.sol#18) should be constant 
",N/A,N/A
immutable-states,Optimization,"MockV3Aggregator.decimals (contracts/test/MockAggregator.sol#17) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockRewardPool.rewardToken (contracts/test/MockRewardPool.sol#10) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStrategy.baseRewardPool (contracts/test/MockStrategy.sol#12) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockBooster.poolToken (contracts/test/MockBooster.sol#9) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStrategy.want (contracts/test/MockStrategy.sol#10) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockRewardPool.poolToken (contracts/test/MockRewardPool.sol#9) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockBooster.recipient (contracts/test/MockBooster.sol#10) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockStrategy.jpeg (contracts/test/MockStrategy.sol#11) should be immutable 
",N/A,N/A
immutable-states,Optimization,"MockCurve.poolToken (contracts/test/MockCurve.sol#9) should be immutable 
",N/A,N/A
immutable-states,Optimization,"CryptoPunks.decimals (contracts/test/CryptoPunks.sol#14) should be immutable 
",N/A,N/A
immutable-states,Optimization,"CryptoPunks.totalSupply (contracts/test/CryptoPunks.sol#15) should be immutable 
",N/A,N/A
immutable-states,Optimization,"CryptoPunks.owner (contracts/test/CryptoPunks.sol#9) should be immutable 
",N/A,N/A
