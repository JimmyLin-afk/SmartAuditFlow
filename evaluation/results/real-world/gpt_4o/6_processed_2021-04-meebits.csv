nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP,APs
Beebots.sol,"pragma solidity 0.7.6;

interface IERC165 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

interface IERC721 is IERC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function approve(address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address operator);
    function setApprovalForAll(address operator, bool _approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

interface BetaToken {
    function tokenOwner(uint index) external view returns(address);
}

interface ERC721TokenReceiver
{
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);
}

library SafeMath {

    /**
    * @dev Multiplies two numbers, throws on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        assert(c / a == b);
        return c;
    }

    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        // uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return a / b;
    }

    /**
    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
    * @dev Adds two numbers, throws on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Beebots is IERC721 {

    using SafeMath for uint256;

    /**
     * Event emitted when minting a new NFT. ""createdVia"" is the index of the alhpa/beta token that was used to mint, or 0 if not applicable.
     */
    event Mint(uint indexed index, address indexed minter, uint createdVia);

    /**
     * Event emitted when a trade is executed.
     */
    event Trade(bytes32 indexed hash, address indexed maker, address taker, uint makerWei, uint[] makerIds, uint takerWei, uint[] takerIds);

    /**
     * Event emitted when ETH is deposited into the contract.
     */
    event Deposit(address indexed account, uint amount);

    /**
     * Event emitted when ETH is withdrawn from the contract.
     */
    event Withdraw(address indexed account, uint amount);

    /**
     * Event emitted when a trade offer is cancelled.
     */
    event OfferCancelled(bytes32 hash);

    /**
     * Event emitted when the public sale begins.
     */
    event SaleBegins();

    /**
     * Event emitted when the community grant period ends.
     */
    event CommunityGrantEnds();

    bytes4 internal constant MAGIC_ERC721_RECEIVED = 0x150b7a02;

    // Hash to the NFT content
    string public contentHash = ""todo"";

    uint public constant TOKEN_LIMIT = 30; // 30 for testing, 22k for prod
    uint public constant SALE_LIMIT = 20; // 20 for testing, ~9K for prod

    mapping (uint => address) private idToCreator;

    mapping(bytes4 => bool) internal supportedInterfaces;

    mapping (uint256 => address) internal idToOwner;

    mapping (uint256 => uint256) public idToCreatorNft;

    mapping (uint256 => uint256) public creatorNftMints;

    mapping (uint256 => address) internal idToApproval;

    mapping (address => mapping (address => bool)) internal ownerToOperators;

    mapping(address => uint256[]) internal ownerToIds;

    mapping(uint256 => uint256) internal idToOwnerIndex;

    string internal nftName = ""Beebots"";
    string internal nftSymbol = unicode""🐝"";

    uint internal numTokens = 0;
    uint internal numSales = 0;

    address internal beta;

    address internal alpha;

    address payable internal deployer;
    address payable internal beneficiary;
    bool public communityGrant = true;
    bool public publicSale = false;
    uint private price;
    uint public saleStartTime;
    uint public saleDuration;

    //// Random index assignment
    uint internal nonce = 0;
    uint[TOKEN_LIMIT] internal indices;

    //// Market
    bool public marketPaused;
    bool public contractSealed;
    mapping (address => uint256) public ethBalance;
    mapping (bytes32 => bool) public cancelledOffers;

    modifier onlyDeployer() {
        require(msg.sender == deployer, ""Only deployer."");
        _;
    }

    bool private reentrancyLock = false;

    /* Prevent a contract function from being reentrant-called. */
    modifier reentrancyGuard {
        if (reentrancyLock) {
            revert();
        }
        reentrancyLock = true;
        _;
        reentrancyLock = false;
    }

    modifier canOperate(uint256 _tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], ""Cannot operate."");
        _;
    }

    modifier canTransfer(uint256 _tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(
            tokenOwner == msg.sender
            || idToApproval[_tokenId] == msg.sender
            || ownerToOperators[tokenOwner][msg.sender], ""Cannot transfer.""
        );
        _;
    }

    modifier validNFToken(uint256 _tokenId) {
        require(idToOwner[_tokenId] != address(0), ""Invalid token."");
        _;
    }

    constructor(address _beta, address _alpha, address payable _beneficiary) {
        supportedInterfaces[0x01ffc9a7] = true; // ERC165
        supportedInterfaces[0x80ac58cd] = true; // ERC721
        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable
        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata
        deployer = msg.sender;
        beta = _beta;
        alpha = _alpha;
        beneficiary = _beneficiary;
    }

    function startSale(uint _price, uint _saleDuration) external onlyDeployer {
        require(!publicSale, ""Sale already started."");
        price = _price;
        saleDuration = _saleDuration;
        saleStartTime = block.timestamp;
        publicSale = true;
        emit SaleBegins();
    }

    function endCommunityGrant() external onlyDeployer {
        require(communityGrant, ""Grant period already ended."");
        communityGrant = false;
        emit CommunityGrantEnds();
    }

    function pauseMarket(bool _paused) external onlyDeployer {
        require(!contractSealed, ""Contract sealed."");
        marketPaused = _paused;
    }

    function sealContract() external onlyDeployer {
        contractSealed = true;
    }

    //////////////////////////
    //// ERC 721 and 165  ////
    //////////////////////////

    function isContract(address _addr) internal view returns (bool addressCheck) {
        uint256 size;
        assembly { size := extcodesize(_addr) } // solhint-disable-line
        addressCheck = size > 0;
    }

    function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {
        return supportedInterfaces[_interfaceID];
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external override {
        _safeTransferFrom(_from, _to, _tokenId, _data);
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {
        _safeTransferFrom(_from, _to, _tokenId, """");
    }

    function transferFrom(address _from, address _to, uint256 _tokenId) external override canTransfer(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == _from, ""Wrong from address."");
        require(_to != address(0), ""Cannot send to 0x0."");
        _transfer(_to, _tokenId);
    }

    function approve(address _approved, uint256 _tokenId) external override canOperate(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(_approved != tokenOwner);
        idToApproval[_tokenId] = _approved;
        emit Approval(tokenOwner, _approved, _tokenId);
    }

    function setApprovalForAll(address _operator, bool _approved) external override {
        ownerToOperators[msg.sender][_operator] = _approved;
        emit ApprovalForAll(msg.sender, _operator, _approved);
    }

    function balanceOf(address _owner) external view override returns (uint256) {
        require(_owner != address(0));
        return _getOwnerNFTCount(_owner);
    }

    function ownerOf(uint256 _tokenId) external view override returns (address _owner) {
        _owner = idToOwner[_tokenId];
    }

    function getApproved(uint256 _tokenId) external view override validNFToken(_tokenId) returns (address) {
        return idToApproval[_tokenId];
    }

    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {
        return ownerToOperators[_owner][_operator];
    }

    function _transfer(address _to, uint256 _tokenId) internal {
        address from = idToOwner[_tokenId];
        _clearApproval(_tokenId);

        _removeNFToken(from, _tokenId);
        _addNFToken(_to, _tokenId);

        emit Transfer(from, _to, _tokenId);
    }

    function randomIndex() internal returns (uint) {
        uint totalSize = TOKEN_LIMIT - numTokens;
        uint index = uint(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp))) % totalSize;
        uint value = 0;
        if (indices[index] != 0) {
            value = indices[index];
        } else {
            value = index;
        }

        // Move last value to selected position
        if (indices[totalSize - 1] == 0) {
            // Array position not initialized, so use position
            indices[index] = totalSize - 1;
        } else {
            // Array position holds a value so use that
            indices[index] = indices[totalSize - 1];
        }
        nonce.add(1);
        // Don't allow a zero index, start counting at 1
        return value.add(1);
    }

    // Calculate the mint price
    function getPrice() public view returns (uint) {
        require(publicSale, ""Sale not started."");
        uint elapsed = block.timestamp.sub(saleStartTime);
        if (elapsed > saleDuration) {
            return 0;
        } else {
            return saleDuration.sub(elapsed).mul(price).div(saleDuration);
        }
    }

    // The deployer can mint in bulk without paying
    function devMint(uint quantity, address recipient) external onlyDeployer {
        for (uint i = 0; i < quantity; i++) {
            _mint(recipient, 0);
        }
    }

    function mintsRemaining() external view returns (uint) {
        return SALE_LIMIT.sub(numSales);
    }

    /**
     * Community grant minting.
     */
    function mintWithAlphaOrBeta(uint _createVia) external reentrancyGuard returns (uint) {
        require(communityGrant);
        require(_createVia > 0 && _createVia <= 600, ""Invalid alpha/beta index."");
        require(creatorNftMints[_createVia] == 0, ""Already minted with this alpha/beta"");
        if (_createVia > 400) {
            // It's an alpha
            // Compute the alpha ID
            uint alphaId = _createVia.sub(400);
            // Make sure the sender owns the alpha
            require(IERC721(alpha).ownerOf(alphaId) == msg.sender, ""Not the owner of this alpha."");
        } else {
            // It's a beta
            // Compute the beta ID, 0-based
            uint betaId = _createVia.sub(1);
            // Make sure the sender owns the beta
            require(BetaToken(beta).tokenOwner(betaId) == msg.sender, ""Not the owner of this beta."");
        }
        creatorNftMints[_createVia]++;
        return _mint(msg.sender, _createVia);
    }

    /**
     * Public sale minting.
     */
    function mint() external payable reentrancyGuard returns (uint) {
        require(publicSale, ""Sale not started."");
        require(numSales < SALE_LIMIT, ""Sale limit reached."");
        uint salePrice = getPrice();
        require(msg.value >= salePrice, ""Insufficient funds to purchase."");
        if (msg.value > salePrice) {
            msg.sender.transfer(msg.value.sub(salePrice));
        }
        beneficiary.transfer(salePrice);
        numSales++;
        return _mint(msg.sender, 0);
    }

    function _mint(address _to, uint createdVia) internal returns (uint) {
        require(_to != address(0), ""Cannot mint to 0x0."");
        require(numTokens < TOKEN_LIMIT, ""Token limit reached."");
        uint id = randomIndex();

        idToCreator[id] = _to;
        idToCreatorNft[id] = createdVia;

        numTokens = numTokens + 1;
        _addNFToken(_to, id);

        emit Mint(id, _to, createdVia);
        emit Transfer(address(0), _to, id);
        return id;
    }

    function _addNFToken(address _to, uint256 _tokenId) internal {
        require(idToOwner[_tokenId] == address(0), ""Cannot add, already owned."");
        idToOwner[_tokenId] = _to;

        ownerToIds[_to].push(_tokenId);
        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);
    }

    function _removeNFToken(address _from, uint256 _tokenId) internal {
        require(idToOwner[_tokenId] == _from, ""Incorrect owner."");
        delete idToOwner[_tokenId];

        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];
        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);

        if (lastTokenIndex != tokenToRemoveIndex) {
            uint256 lastToken = ownerToIds[_from][lastTokenIndex];
            ownerToIds[_from][tokenToRemoveIndex] = lastToken;
            idToOwnerIndex[lastToken] = tokenToRemoveIndex;
        }

        ownerToIds[_from].pop();
    }

    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {
        return ownerToIds[_owner].length;
    }

    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == _from, ""Incorrect owner."");
        require(_to != address(0));

        _transfer(_to, _tokenId);

        if (isContract(_to)) {
            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);
            require(retval == MAGIC_ERC721_RECEIVED);
        }
    }

    function _clearApproval(uint256 _tokenId) private {
        if (idToApproval[_tokenId] != address(0)) {
            delete idToApproval[_tokenId];
        }
    }

    //// Enumerable

    function totalSupply() public view returns (uint256) {
        return numTokens;
    }

    function tokenByIndex(uint256 index) public pure returns (uint256) {
        require(index > 0 && index < TOKEN_LIMIT);
        return index;
    }

    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {
        require(_index < ownerToIds[_owner].length);
        return ownerToIds[_owner][_index];
    }

    //// Metadata

    /**
      * @dev Converts a `uint256` to its ASCII `string` representation.
      */
    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return ""0"";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        uint256 index = digits - 1;
        temp = value;
        while (temp != 0) {
            buffer[index--] = bytes1(uint8(48 + temp % 10));
            temp /= 10;
        }
        return string(buffer);
    }

    /**
      * @dev Returns a descriptive name for a collection of NFTokens.
      * @return _name Representing name.
      */
    function name() external view returns (string memory _name) {
        _name = nftName;
    }

    /**
     * @dev Returns an abbreviated name for NFTokens.
     * @return _symbol Representing symbol.
     */
    function symbol() external view returns (string memory _symbol) {
        _symbol = nftSymbol;
    }

    /**
     * @dev A distinct URI (RFC 3986) for a given NFT.
     * @param _tokenId Id for which we want uri.
     * @return _tokenId URI of _tokenId.
     */
    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {
        return string(abi.encodePacked(""https://todo/"", toString(_tokenId)));
    }

    //// MARKET

    struct Offer {
        address maker;
        address taker;
        uint256 makerWei;
        uint256[] makerIds;
        uint256 takerWei;
        uint256[] takerIds;
        uint256 expiry;
        uint256 salt;
    }

    function hashOffer(Offer memory offer) private pure returns (bytes32){
        return keccak256(abi.encode(
                    offer.maker,
                    offer.taker,
                    offer.makerWei,
                    keccak256(abi.encodePacked(offer.makerIds)),
                    offer.takerWei,
                    keccak256(abi.encodePacked(offer.takerIds)),
                    offer.expiry,
                    offer.salt
                ));
    }

    function hashToSign(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) public pure returns (bytes32) {
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        return hashOffer(offer);
    }

    function hashToVerify(Offer memory offer) private pure returns (bytes32) {
        return keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", hashOffer(offer)));
    }

    function verify(address signer, bytes32 hash, bytes memory signature) internal pure returns (bool) {
        require(signature.length == 65);

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        if (v < 27) {
            v += 27;
        }

        require(v == 27 || v == 28);

        return signer == ecrecover(hash, v, r, s);
    }

    function tradeValid(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) view public returns (bool) {
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        // Check for cancellation
        bytes32 hash = hashOffer(offer);
        require(cancelledOffers[hash] == false, ""Trade offer was cancelled."");
        // Verify signature
        bytes32 verifyHash = hashToVerify(offer);
        require(verify(offer.maker, verifyHash, signature), ""Signature not valid."");
        // Check for expiry
        require(block.timestamp < offer.expiry, ""Trade offer expired."");
        // Only one side should ever have to pay, not both
        require(makerWei == 0 || takerWei == 0, ""Only one side of trade must pay."");
        // At least one side should offer tokens
        require(makerIds.length > 0 || takerIds.length > 0, ""One side must offer tokens."");
        // Make sure the maker has funded the trade
        require(ethBalance[offer.maker] >= offer.makerWei, ""Maker does not have sufficient balance."");
        // Ensure the maker owns the maker tokens
        for (uint i = 0; i < offer.makerIds.length; i++) {
            require(idToOwner[offer.makerIds[i]] == offer.maker, ""At least one maker token doesn't belong to maker."");
        }
        // If the taker can be anybody, then there can be no taker tokens
        if (offer.taker == address(0)) {
            // If taker not specified, then can't specify IDs
            require(offer.takerIds.length == 0, ""If trade is offered to anybody, cannot specify tokens from taker."");
        } else {
            // Ensure the taker owns the taker tokens
            for (uint i = 0; i < offer.takerIds.length; i++) {
                require(idToOwner[offer.takerIds[i]] == offer.taker, ""At least one taker token doesn't belong to taker."");
            }
        }
        return true;
    }

    function cancelOffer(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) external {
        require(maker == msg.sender, ""Only the maker can cancel this offer."");
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        bytes32 hash = hashOffer(offer);
        cancelledOffers[hash] = true;
        emit OfferCancelled(hash);
    }

    function acceptTrade(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) external payable reentrancyGuard {
        require(!marketPaused, ""Market is paused."");
        require(msg.sender != maker, ""Can't accept ones own trade."");
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        ethBalance[msg.sender] += msg.value;
        if (msg.value > 0) {
            emit Deposit(msg.sender, msg.value);
        }
        require(offer.taker == address(0) || offer.taker == msg.sender, ""Not the recipient of this offer."");
        require(tradeValid(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt, signature), ""Trade not valid."");
        require(ethBalance[msg.sender] >= offer.takerWei, ""Insufficient funds to execute trade."");
        // Transfer ETH
        ethBalance[offer.maker] = ethBalance[offer.maker].sub(offer.makerWei);
        ethBalance[msg.sender] = ethBalance[msg.sender].add(offer.makerWei);
        ethBalance[msg.sender] = ethBalance[msg.sender].sub(offer.takerWei);
        ethBalance[offer.maker] = ethBalance[offer.maker].add(offer.takerWei);
        // Transfer maker ids to taker (msg.sender)
        for (uint i = 0; i < makerIds.length; i++) {
            _transfer(msg.sender, makerIds[i]);
        }
        // Transfer taker ids to maker
        for (uint i = 0; i < takerIds.length; i++) {
            _transfer(maker, takerIds[i]);
        }
        // Prevent a replay attack on this offer
        bytes32 hash = hashOffer(offer);
        cancelledOffers[hash] = true;
        emit Trade(hash, offer.maker, msg.sender, offer.makerWei, offer.makerIds, offer.takerWei, offer.takerIds);
    }

    function withdraw(uint amount) external {
        require(amount <= ethBalance[msg.sender]);
        ethBalance[msg.sender] = ethBalance[msg.sender].sub(amount);
        msg.sender.transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    function deposit() external payable {
        ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);
        emit Deposit(msg.sender, msg.value);
    }

}",5608,661,"[H-01] Signature malleability of EVM's ecrecover in `verify()`
EVM's `ecrecover` is susceptible to signature malleability, which allows replay attacks, but that is mitigated here by tracking accepted offers and canceling them (on L645) specifically to prevent replays. However, if any application logic changes, it might make signature malleability a risk for replay attacks.   [H-02] Arbitrary Transfer of Unowned NFTs
Due to how the market functions are structured, it is possible to arbitrarily transfer any NFT that is not owned by any address.
The function in question is the `tradeValid` function invoked by `acceptTrade` before the trade is performed. It, in turn, validates the signature of a trade via `verify`, which does not account for the behavior of `ecrecover`.
When `ecrecover` is invoked with an invalid signature, the zero-address is returned by it, meaning that `verify` will yield `true` for the zero-address as long as the signature provided is invalid. This can be exploited to transfer any NFT whose idToOwner is zero, including NFTs that have not been minted yet.   [H-03] `Beebots.TradeValid()` Will Erroneously Return True When Maker Is Set To `Address(0)` and makerIds Are Set To The `TokenIds` of Unminted Beebot NFTs Beebots.TradeValid() will erroneously return true when maker is set to address(0) and makerIds are set to the tokenIds of unminted beebot NFTs.
Beebots.verify() returns true no matter what signature is given when signer is set to address(0). This means that BeeBots.tradeValid() will erroneously return true when maker is set to address(0).
Finally, before an NFT has even been minted at all, it is assumed to have an owner of address(0) due to the idToOwner mapping being initialized to zero for all uninitialized slots, so an attacker can call tradeValid() with maker set to address(0) and makerIds set to the tokenIds of any unminted nftIds, and tradeValid() will erroneously return true.   [H-04] function `tokenByIndex` treats last index as invalid
NFT indexes start from 0:
So if there are 30 tokens, indexes would be 1-30. However, function tokenByIndex sets such boundaries:
require(index > 0 && index < TOKEN_LIMIT);   [H-05] NFT can be minted for free after sale ended
The getPrice() function returned 0 after the sale ended and (SALE_LIMIT - numSales) NFT can be minted for free.
Without documentation, it's not clear if this is the expected behavior or not. If it's unexpected, it is recommended to revert instead of returning 0. If it's expected behavior, it's possible to create a smart contract and claim all the remaining NFT front-running the regular users.
 
[M-00] Legacy Function Usage
The withdraw function utilizes the transfer invocation, which has a fixed gas stipend and can fail, especially beyond the Berlin fork, which increased the gas costs for first-time invocations of a transfer.

 [M-01] `randomIndex` is not truly random - possibility of predictably minting a specific token Id
`randomIndex' is not random. Any miner has access to these values:
“uint index = uint(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp))) % totalSize;”
Non-miner attackers could also test the minting random condition until they get the ID they are looking to access.
The internal variable indices seems to be used to avoid this type of collision.
  [M-02] instead of `call()` , `transfer()` is used to withdraw the ether To withdraw ETH, it uses transfer(), this transaction will fail inevitably when:
The withdrawer smart contract does not implement a payable function.
Withdrawer smart contract does implement a payable fallback which uses more than 2300 gas unit.
The withdrawer smart contract implements a payable fallback function that needs less than 2300 gas units but is called through proxy, raising the call's gas usage above 2300.",8,"pragma solidity 0.7.6;

interface IERC165 {
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

interface IERC721 is IERC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function transferFrom(address from, address to, uint256 tokenId) external;
    function approve(address to, uint256 tokenId) external;
    function getApproved(uint256 tokenId) external view returns (address operator);
    function setApprovalForAll(address operator, bool _approved) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}

interface BetaToken {
    function tokenOwner(uint index) external view returns(address);
}

interface ERC721TokenReceiver
{
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);
}

library SafeMath {

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) {
            return 0;
        }
        c = a * b;
        assert(c / a == b);
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        return a / b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Beebots is IERC721 {

    using SafeMath for uint256;

    
    event Mint(uint indexed index, address indexed minter, uint createdVia);

    
    event Trade(bytes32 indexed hash, address indexed maker, address taker, uint makerWei, uint[] makerIds, uint takerWei, uint[] takerIds);

    
    event Deposit(address indexed account, uint amount);

    
    event Withdraw(address indexed account, uint amount);

    
    event OfferCancelled(bytes32 hash);

    
    event SaleBegins();

    
    event CommunityGrantEnds();

    bytes4 internal constant MAGIC_ERC721_RECEIVED = 0x150b7a02;

    
    string public contentHash = ""todo"";

    uint public constant TOKEN_LIMIT = 30; 
    uint public constant SALE_LIMIT = 20; 

    mapping (uint => address) private idToCreator;

    mapping(bytes4 => bool) internal supportedInterfaces;

    mapping (uint256 => address) internal idToOwner;

    mapping (uint256 => uint256) public idToCreatorNft;

    mapping (uint256 => uint256) public creatorNftMints;

    mapping (uint256 => address) internal idToApproval;

    mapping (address => mapping (address => bool)) internal ownerToOperators;

    mapping(address => uint256[]) internal ownerToIds;

    mapping(uint256 => uint256) internal idToOwnerIndex;

    string internal nftName = ""Beebots"";
    string internal nftSymbol = unicode""🐝"";

    uint internal numTokens = 0;
    uint internal numSales = 0;

    address internal beta;

    address internal alpha;

    address payable internal deployer;
    address payable internal beneficiary;
    bool public communityGrant = true;
    bool public publicSale = false;
    uint private price;
    uint public saleStartTime;
    uint public saleDuration;

    
    uint internal nonce = 0;
    uint[TOKEN_LIMIT] internal indices;

    
    bool public marketPaused;
    bool public contractSealed;
    mapping (address => uint256) public ethBalance;
    mapping (bytes32 => bool) public cancelledOffers;

    modifier onlyDeployer() {
        require(msg.sender == deployer, ""Only deployer."");
        _;
    }

    bool private reentrancyLock = false;

    
    modifier reentrancyGuard {
        if (reentrancyLock) {
            revert();
        }
        reentrancyLock = true;
        _;
        reentrancyLock = false;
    }

    modifier canOperate(uint256 _tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender], ""Cannot operate."");
        _;
    }

    modifier canTransfer(uint256 _tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(
            tokenOwner == msg.sender
            || idToApproval[_tokenId] == msg.sender
            || ownerToOperators[tokenOwner][msg.sender], ""Cannot transfer.""
        );
        _;
    }

    modifier validNFToken(uint256 _tokenId) {
        require(idToOwner[_tokenId] != address(0), ""Invalid token."");
        _;
    }

    constructor(address _beta, address _alpha, address payable _beneficiary) {
        supportedInterfaces[0x01ffc9a7] = true; 
        supportedInterfaces[0x80ac58cd] = true; 
        supportedInterfaces[0x780e9d63] = true; 
        supportedInterfaces[0x5b5e139f] = true; 
        deployer = msg.sender;
        beta = _beta;
        alpha = _alpha;
        beneficiary = _beneficiary;
    }

    function startSale(uint _price, uint _saleDuration) external onlyDeployer {
        require(!publicSale, ""Sale already started."");
        price = _price;
        saleDuration = _saleDuration;
        saleStartTime = block.timestamp;
        publicSale = true;
        emit SaleBegins();
    }

    function endCommunityGrant() external onlyDeployer {
        require(communityGrant, ""Grant period already ended."");
        communityGrant = false;
        emit CommunityGrantEnds();
    }

    function pauseMarket(bool _paused) external onlyDeployer {
        require(!contractSealed, ""Contract sealed."");
        marketPaused = _paused;
    }

    function sealContract() external onlyDeployer {
        contractSealed = true;
    }

    
    
    

    function isContract(address _addr) internal view returns (bool addressCheck) {
        uint256 size;
        assembly { size := extcodesize(_addr) } 
        addressCheck = size > 0;
    }

    function supportsInterface(bytes4 _interfaceID) external view override returns (bool) {
        return supportedInterfaces[_interfaceID];
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external override {
        _safeTransferFrom(_from, _to, _tokenId, _data);
    }

    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override {
        _safeTransferFrom(_from, _to, _tokenId, """");
    }

    function transferFrom(address _from, address _to, uint256 _tokenId) external override canTransfer(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == _from, ""Wrong from address."");
        require(_to != address(0), ""Cannot send to 0x0."");
        _transfer(_to, _tokenId);
    }

    function approve(address _approved, uint256 _tokenId) external override canOperate(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(_approved != tokenOwner);
        idToApproval[_tokenId] = _approved;
        emit Approval(tokenOwner, _approved, _tokenId);
    }

    function setApprovalForAll(address _operator, bool _approved) external override {
        ownerToOperators[msg.sender][_operator] = _approved;
        emit ApprovalForAll(msg.sender, _operator, _approved);
    }

    function balanceOf(address _owner) external view override returns (uint256) {
        require(_owner != address(0));
        return _getOwnerNFTCount(_owner);
    }

    function ownerOf(uint256 _tokenId) external view override returns (address _owner) {
        _owner = idToOwner[_tokenId];
    }

    function getApproved(uint256 _tokenId) external view override validNFToken(_tokenId) returns (address) {
        return idToApproval[_tokenId];
    }

    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {
        return ownerToOperators[_owner][_operator];
    }

    function _transfer(address _to, uint256 _tokenId) internal {
        address from = idToOwner[_tokenId];
        _clearApproval(_tokenId);

        _removeNFToken(from, _tokenId);
        _addNFToken(_to, _tokenId);

        emit Transfer(from, _to, _tokenId);
    }

    function randomIndex() internal returns (uint) {
        uint totalSize = TOKEN_LIMIT - numTokens;
        uint index = uint(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp))) % totalSize;
        uint value = 0;
        if (indices[index] != 0) {
            value = indices[index];
        } else {
            value = index;
        }

        
        if (indices[totalSize - 1] == 0) {
            
            indices[index] = totalSize - 1;
        } else {
            
            indices[index] = indices[totalSize - 1];
        }
        nonce.add(1);
        
        return value.add(1);
    }

    
    function getPrice() public view returns (uint) {
        require(publicSale, ""Sale not started."");
        uint elapsed = block.timestamp.sub(saleStartTime);
        if (elapsed > saleDuration) {
            return 0;
        } else {
            return saleDuration.sub(elapsed).mul(price).div(saleDuration);
        }
    }

    
    function devMint(uint quantity, address recipient) external onlyDeployer {
        for (uint i = 0; i < quantity; i++) {
            _mint(recipient, 0);
        }
    }

    function mintsRemaining() external view returns (uint) {
        return SALE_LIMIT.sub(numSales);
    }

    
    function mintWithAlphaOrBeta(uint _createVia) external reentrancyGuard returns (uint) {
        require(communityGrant);
        require(_createVia > 0 && _createVia <= 600, ""Invalid alpha/beta index."");
        require(creatorNftMints[_createVia] == 0, ""Already minted with this alpha/beta"");
        if (_createVia > 400) {
            
            
            uint alphaId = _createVia.sub(400);
            
            require(IERC721(alpha).ownerOf(alphaId) == msg.sender, ""Not the owner of this alpha."");
        } else {
            
            
            uint betaId = _createVia.sub(1);
            
            require(BetaToken(beta).tokenOwner(betaId) == msg.sender, ""Not the owner of this beta."");
        }
        creatorNftMints[_createVia]++;
        return _mint(msg.sender, _createVia);
    }

    
    function mint() external payable reentrancyGuard returns (uint) {
        require(publicSale, ""Sale not started."");
        require(numSales < SALE_LIMIT, ""Sale limit reached."");
        uint salePrice = getPrice();
        require(msg.value >= salePrice, ""Insufficient funds to purchase."");
        if (msg.value > salePrice) {
            msg.sender.transfer(msg.value.sub(salePrice));
        }
        beneficiary.transfer(salePrice);
        numSales++;
        return _mint(msg.sender, 0);
    }

    function _mint(address _to, uint createdVia) internal returns (uint) {
        require(_to != address(0), ""Cannot mint to 0x0."");
        require(numTokens < TOKEN_LIMIT, ""Token limit reached."");
        uint id = randomIndex();

        idToCreator[id] = _to;
        idToCreatorNft[id] = createdVia;

        numTokens = numTokens + 1;
        _addNFToken(_to, id);

        emit Mint(id, _to, createdVia);
        emit Transfer(address(0), _to, id);
        return id;
    }

    function _addNFToken(address _to, uint256 _tokenId) internal {
        require(idToOwner[_tokenId] == address(0), ""Cannot add, already owned."");
        idToOwner[_tokenId] = _to;

        ownerToIds[_to].push(_tokenId);
        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);
    }

    function _removeNFToken(address _from, uint256 _tokenId) internal {
        require(idToOwner[_tokenId] == _from, ""Incorrect owner."");
        delete idToOwner[_tokenId];

        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];
        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);

        if (lastTokenIndex != tokenToRemoveIndex) {
            uint256 lastToken = ownerToIds[_from][lastTokenIndex];
            ownerToIds[_from][tokenToRemoveIndex] = lastToken;
            idToOwnerIndex[lastToken] = tokenToRemoveIndex;
        }

        ownerToIds[_from].pop();
    }

    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {
        return ownerToIds[_owner].length;
    }

    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {
        address tokenOwner = idToOwner[_tokenId];
        require(tokenOwner == _from, ""Incorrect owner."");
        require(_to != address(0));

        _transfer(_to, _tokenId);

        if (isContract(_to)) {
            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);
            require(retval == MAGIC_ERC721_RECEIVED);
        }
    }

    function _clearApproval(uint256 _tokenId) private {
        if (idToApproval[_tokenId] != address(0)) {
            delete idToApproval[_tokenId];
        }
    }

    

    function totalSupply() public view returns (uint256) {
        return numTokens;
    }

    function tokenByIndex(uint256 index) public pure returns (uint256) {
        require(index > 0 && index < TOKEN_LIMIT);
        return index;
    }

    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {
        require(_index < ownerToIds[_owner].length);
        return ownerToIds[_owner][_index];
    }

    

    
    function toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return ""0"";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        uint256 index = digits - 1;
        temp = value;
        while (temp != 0) {
            buffer[index--] = bytes1(uint8(48 + temp % 10));
            temp /= 10;
        }
        return string(buffer);
    }

    
    function name() external view returns (string memory _name) {
        _name = nftName;
    }

    
    function symbol() external view returns (string memory _symbol) {
        _symbol = nftSymbol;
    }

    
    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {
        return string(abi.encodePacked(""https:
    }

    

    struct Offer {
        address maker;
        address taker;
        uint256 makerWei;
        uint256[] makerIds;
        uint256 takerWei;
        uint256[] takerIds;
        uint256 expiry;
        uint256 salt;
    }

    function hashOffer(Offer memory offer) private pure returns (bytes32){
        return keccak256(abi.encode(
                    offer.maker,
                    offer.taker,
                    offer.makerWei,
                    keccak256(abi.encodePacked(offer.makerIds)),
                    offer.takerWei,
                    keccak256(abi.encodePacked(offer.takerIds)),
                    offer.expiry,
                    offer.salt
                ));
    }

    function hashToSign(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) public pure returns (bytes32) {
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        return hashOffer(offer);
    }

    function hashToVerify(Offer memory offer) private pure returns (bytes32) {
        return keccak256(abi.encodePacked(""\x19Ethereum Signed Message:\n32"", hashOffer(offer)));
    }

    function verify(address signer, bytes32 hash, bytes memory signature) internal pure returns (bool) {
        require(signature.length == 65);

        bytes32 r;
        bytes32 s;
        uint8 v;

        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        if (v < 27) {
            v += 27;
        }

        require(v == 27 || v == 28);

        return signer == ecrecover(hash, v, r, s);
    }

    function tradeValid(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) view public returns (bool) {
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        
        bytes32 hash = hashOffer(offer);
        require(cancelledOffers[hash] == false, ""Trade offer was cancelled."");
        
        bytes32 verifyHash = hashToVerify(offer);
        require(verify(offer.maker, verifyHash, signature), ""Signature not valid."");
        
        require(block.timestamp < offer.expiry, ""Trade offer expired."");
        
        require(makerWei == 0 || takerWei == 0, ""Only one side of trade must pay."");
        
        require(makerIds.length > 0 || takerIds.length > 0, ""One side must offer tokens."");
        
        require(ethBalance[offer.maker] >= offer.makerWei, ""Maker does not have sufficient balance."");
        
        for (uint i = 0; i < offer.makerIds.length; i++) {
            require(idToOwner[offer.makerIds[i]] == offer.maker, ""At least one maker token doesn't belong to maker."");
        }
        
        if (offer.taker == address(0)) {
            
            require(offer.takerIds.length == 0, ""If trade is offered to anybody, cannot specify tokens from taker."");
        } else {
            
            for (uint i = 0; i < offer.takerIds.length; i++) {
                require(idToOwner[offer.takerIds[i]] == offer.taker, ""At least one taker token doesn't belong to taker."");
            }
        }
        return true;
    }

    function cancelOffer(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt) external {
        require(maker == msg.sender, ""Only the maker can cancel this offer."");
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        bytes32 hash = hashOffer(offer);
        cancelledOffers[hash] = true;
        emit OfferCancelled(hash);
    }

    function acceptTrade(address maker, address taker, uint256 makerWei, uint256[] memory makerIds, uint256 takerWei, uint256[] memory takerIds, uint256 expiry, uint256 salt, bytes memory signature) external payable reentrancyGuard {
        require(!marketPaused, ""Market is paused."");
        require(msg.sender != maker, ""Can't accept ones own trade."");
        Offer memory offer = Offer(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt);
        ethBalance[msg.sender] += msg.value;
        if (msg.value > 0) {
            emit Deposit(msg.sender, msg.value);
        }
        require(offer.taker == address(0) || offer.taker == msg.sender, ""Not the recipient of this offer."");
        require(tradeValid(maker, taker, makerWei, makerIds, takerWei, takerIds, expiry, salt, signature), ""Trade not valid."");
        require(ethBalance[msg.sender] >= offer.takerWei, ""Insufficient funds to execute trade."");
        
        ethBalance[offer.maker] = ethBalance[offer.maker].sub(offer.makerWei);
        ethBalance[msg.sender] = ethBalance[msg.sender].add(offer.makerWei);
        ethBalance[msg.sender] = ethBalance[msg.sender].sub(offer.takerWei);
        ethBalance[offer.maker] = ethBalance[offer.maker].add(offer.takerWei);
        
        for (uint i = 0; i < makerIds.length; i++) {
            _transfer(msg.sender, makerIds[i]);
        }
        
        for (uint i = 0; i < takerIds.length; i++) {
            _transfer(maker, takerIds[i]);
        }
        
        bytes32 hash = hashOffer(offer);
        cancelledOffers[hash] = true;
        emit Trade(hash, offer.maker, msg.sender, offer.makerWei, offer.makerIds, offer.takerWei, offer.takerIds);
    }

    function withdraw(uint amount) external {
        require(amount <= ethBalance[msg.sender]);
        ethBalance[msg.sender] = ethBalance[msg.sender].sub(amount);
        msg.sender.transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    function deposit() external payable {
        ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);
        emit Deposit(msg.sender, msg.value);
    }

}",4868,5,3,"The provided Solidity smart contract has several potential vulnerabilities and risks, including:

---

### **1. Lack of Proper Input Validation**
- **Function: `mintWithAlphaOrBeta`**
  - The `_createVia` parameter is not validated to ensure it refers to a correct token owned by the caller, beyond checking the range and ownership. E.g., edge cases like `_createVia == 401` or `_createVia == 0` may lead to unexpected behavior.
  - The `require` checks for `_createVia` are sufficient for the current implementation, but future modifications may inadvertently introduce vulnerabilities if this value is misused elsewhere.

---

### **2. Randomness Vulnerability**
- **Function: `randomIndex`**
  - The pseudo-randomness generated using `keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp))` is predictable:
    - Miners can manipulate `block.timestamp` and `block.difficulty` to their advantage.
    - Malicious actors can repeatedly call functions or construct transactions to attempt to control `msg.sender` or `nonce`.
    - This allows potential exploits to mint specific NFTs or disrupt fairness during minting.

---

### **3. Missing Access Control on Sensitive Operations**
- **Function: `sealContract`**
  - Once the `sealContract` function is called by the deployer, it permanently locks certain features, such as pausing the market. This may prevent future upgrades or fixes for critical bugs.
  - If the deployer account is compromised, the attacker can prematurely call this function to restrict functionality.

- **Function: `pauseMarket`**
  - The function can pause the market indefinitely, which could lead to Denial of Service (DoS) for ongoing trades or operations.

---

### **4. Re-Entrancy Risks**
- **Functions**: 
  - In some scenarios (e.g., `mint` or `acceptTrade`), Ether is transferred to external users via `msg.sender.transfer()`:
    - **`mint`**: Refunds excess Ether to the user by directly transferring it.
    - **`withdraw`**: Allows the withdrawal of user balances with no safeguards against reentrancy other than the `reentrancyGuard` modifier.
    - **`acceptTrade`**: Handles Ether management but is exposed to potential misuses.

   While `reentrancyGuard` is implemented here, it must be carefully reviewed for all external calls, as future modifications or omissions of this modifier could inadvertently introduce vulnerabilities.

---

### **5. Insufficient Permission Checks**
- **Function: `mintWithAlphaOrBeta`**
  - Token ownership checks (`IERC721(alpha).ownerOf(alphaId)` or `BetaToken(beta).tokenOwner(betaId)`) are trusted but rely on external contracts' implementations that may change or introduce vulnerabilities.

---

### **6. Integer Overflow/Underflow Risks**
- The contract uses `SafeMath` for arithmetic, mitigating risks of classic integer overflows/underflows. However:
  - Solidity >=0.8.0 handles overflows natively, making `SafeMath` unnecessary. The use of it here creates redundant complexity.

---

### **7. Centralized Control**
- **Deployer Privileges**:
  - The deployer holds significant privileges, such as ending the community grant, starting/stopping sales, pausing the market, and sealing the contract.
  - A malicious or compromised deployer could abuse these privileges to disrupt the system or harm users.
  - There's no governance or multi-signature mechanism to ensure fair decision-making.

---

### **8. Lack of Proper Expiry Handling for Offers**
- **Function: `acceptTrade`**
  - While the function ensures that the offer expires (`require(block.timestamp < offer.expiry)`), there is no enforcement mechanism to clean up expired offers.
  - It may result in expired offers staying active in the system until explicitly canceled by the maker.

---

### **9. No Cap on Deposits**
- **Function: `deposit`**
  - Users can deposit an unlimited amount of ETH into the contract. The contract relies on balances being properly managed in its logic, but if storage reaches high values, gas costs for operations may become prohibitive.

---

### **10. Reliance on `block.timestamp`**
- Many functions, such as `getPrice`, rely on `block.timestamp` for time-sensitive operations. Miners can manipulate the `timestamp` of a block within reasonable bounds, enabling potential exploits:
  - Manipulating NFT mint prices by advancing or delaying timestamps during the public sale.
  - Gaining an unfair advantage in time-dependent transactions.

---

### **11. Trade Validity Checks**
- **Function: `tradeValid`**
  - There is a lack of stringent validations for token ownership during trades. If external contracts (e.g., BetaToken or AlphaToken) are not atomic or if ownership changes mid-trade, this can lead to logical errors or exploits.

---

### **12. Signature Verification**
- **Function: `verify`**
  - Only EOA signatures are supported as it relies on `ecrecover`. This excludes compatibility with contracts or smart wallets (e.g., Gnosis Safe).

---

### **13. Lack of Upgradeability**
- The contract is not upgradeable. Bugs or vulnerabilities discovered in the future cannot be patched without deploying a new contract and migrating all assets/funds.

---

### **14. Hardcoded Values**
- The use of hardcoded constants, like `TOKEN_LIMIT`, `SALE_LIMIT`, or `MAGIC_ERC721_RECEIVED`, can lead to issues if the contract needs to accommodate changing requirements.
- For example, the `TOKEN_LIMIT` being hardcoded to 30 prevents scaling beyond this value without redeploying the contract.

---

### **15. Insufficient Event Logging**
- Events for critical functions like `_transfer` or `mintWithAlphaOrBeta` are limited, meaning users and developers may lack insight into specific state changes, such as creator mints or token transfers.

---

### **16. Gas-Intensive Operations**
- **Function: `_removeNFToken`**
  - The function performs multiple storage operations (e.g., modifying arrays, updating mappings), which are gas-expensive, especially when removing elements from the middle of an array.
  - For large arrays, this could result in significant costs.

---

### **17. Lack of Fallback/Receive Function**
- The contract does not explicitly implement a fallback or receive function. Accidental Ether sent directly to the contract (not through `deposit()`) is likely to be permanently locked.

---

### **18. Missing URI Management**
- **Function: `tokenURI`**
  - The implementation relies on a fixed-base URI concatenated with token IDs.
  - There is no mechanism for updating the token metadata or handling upgrades in metadata hosting services.

---

### **19. Price Calculation Precision**
- **Function: `getPrice`**
  - Price reductions during the sale are calculated using `block.timestamp.sub(saleStartTime)` and may result in imprecise rounding errors, especially for large duration or price values.

---

### **20. Unsupported Future Interfaces**
- The contract assumes all supported interfaces (`supportedInterfaces`) will remain unchanged. However, if standards like ERC-721 evolve, the contract may fail to maintain backward compatibility.

---

### **21. Missing Withdraw Limitation**
- **Function: `withdraw`**
  - There's no limit or lock mechanism to protect users from draining their balance during ongoing trades.

---

This contract should be carefully modified to mitigate these issues before being deployed to ensure security, scalability, and user trust.","**Analysis of Alignment Between Issue Report and Response List**

---

### **Issue Analysis and Validation**

---

**[H-01] Signature malleability of EVM's ecrecover in `verify()`**

**Report Description**:  
The `verify()` function relies on `ecrecover`, which is vulnerable to signature malleability, potentially leading to replay attacks. This issue is mitigated by tracking accepted offers and cancellations but poses a risk if logic changes.

**Match in Response List**:  
**Match Found** under **""Signature Verification"" (Response 12)**.  

**Validation**:  
**Partially Correct**. The response mentions that `ecrecover` supports only EOA signatures and excludes contract wallets, which aligns with the issue's context. However, it does not explicitly address signature malleability or its implications, which could leave the concern insufficiently mitigated.  

**Suggestions**:  
- Include explicit reference to signature malleability and suggest using EIP-712 or similar mechanisms to prevent replay attacks.

---

**[H-02] Arbitrary Transfer of Unowned NFTs**

**Report Description**:  
The `tradeValid` function allows transferring unowned NFTs if `ecrecover` with an invalid signature returns a zero-address.  

**Match in Response List**:  
**Match Found** under **""Trade Validity Checks"" (Response 11)**.  

**Validation**:  
**Partially Correct**. The response highlights insufficient validations in `tradeValid`, particularly concerning token ownership. However, it does not specifically address the zero-address vulnerability or recommend fixes for invalid signatures.  

**Suggestions**:  
- Recommend explicit checks to reject the zero-address as a valid result from `verify()`.  
- Highlight the need for additional safeguards against unminted token transfers.

---

**[H-03] `Beebots.TradeValid()` Returns True Erroneously**

**Report Description**:  
`BeeBots.tradeValid()` allows trades where `maker` is the zero-address, due to improper signature validation by `verify()`.

**Match in Response List**:  
**No Match Found.**

**Validation**:  
**Unaddressed**. The response list does not cover this critical logical error in `tradeValid`.  

**Suggestions**:  
- Include a response explicitly addressing erroneous validation of `maker` as the zero-address.  

---

**[H-04] Function `tokenByIndex` Treats Last Index as Invalid**

**Report Description**:  
The function `tokenByIndex` mishandles boundaries, rejecting valid indexes at the end of the token range.

**Match in Response List**:  
**No Match Found.**

**Validation**:  
**Unaddressed**. The response list does not cover this boundary issue in `tokenByIndex`.

**Suggestions**:  
- Add validation logic to ensure all valid indexes are handled, including the upper boundary.

---

**[H-05] NFT Can Be Minted for Free After Sale Ends**

**Report Description**:  
After the sale ends, the `getPrice()` function returns 0, enabling minting without payment.  

**Match in Response List**:  
**No Match Found.**

**Validation**:  
**Unaddressed**. This significant exploit is absent from the response list.  

**Suggestions**:  
- Recommend adding a condition to revert transactions when the price is zero.  
- Clarify the intended behavior of `getPrice()` post-sale in the documentation.

---

**[M-00] Legacy Function Usage**

**Report Description**:  
The use of `transfer` for Ether withdrawal risks failures due to gas stipend limitations.

**Match in Response List**:  
**Match Found** under **""Re-Entrancy Risks"" (Response 4)**.

**Validation**:  
**Correct**. The response correctly identifies issues with using `transfer`, noting potential failures and the need for safeguards like `reentrancyGuard`.

**Suggestions**:  
No additional suggestions. The response adequately covers the issue.

---

**[M-01] `randomIndex` Is Not Truly Random**

**Report Description**:  
The pseudo-randomness in `randomIndex` can be manipulated by miners or attackers to predict outcomes.

**Match in Response List**:  
**Match Found** under **""Randomness Vulnerability"" (Response 2)**.

**Validation**:  
**Correct**. The response provides a thorough explanation of the vulnerabilities and potential exploit vectors in `randomIndex`.

**Suggestions**:  
No additional suggestions. The response is sufficient.

---

**[M-02] Use of `transfer()` Instead of `call()` for Ether Withdrawal**

**Report Description**:  
`transfer()` is unsuitable for withdrawing Ether due to gas stipend limitations and possible failures with fallback functions.

**Match in Response List**:  
**Match Found** under **""Missing Withdraw Limitation"" (Response 21)**.

**Validation**:  
**Correct**. The response discusses risks associated with `transfer()` and proposes using `call()` for better flexibility and compatibility.

**Suggestions**:  
No additional suggestions.

---

### **GPT-Generated Potential Issues (May Be Incorrect)**

---

**[Response 3] Missing Access Control on `sealContract` and `pauseMarket`**

**Response Description**:  
Highlights risks of insufficient access controls for critical functions like `sealContract` and `pauseMarket`.

**Assessment**:  
**Valid Concern**. While not explicitly mentioned in the issue report, this highlights governance risks and potential misuse of deployer privileges.  

**Recommendations**:  
- Suggest implementing multi-signature authorization or governance for sensitive functions.

---

**[Response 10] Reliance on `block.timestamp`**

**Response Description**:  
Identifies issues with `block.timestamp` manipulation in time-sensitive functions like `getPrice`.

**Assessment**:  
**Valid Concern**. While this was not detailed in the issue report, reliance on `block.timestamp` is a recognized vulnerability in Solidity.

**Recommendations**:  
- Propose using block numbers or a time oracle for more reliable time-based operations.

---

### **Summary of Matches and Gaps**

---

**Correct Matches**:  
- [M-00] Legacy Function Usage  
- [M-01] `randomIndex` Is Not Truly Random  
- [M-02] Use of `transfer()` Instead of `call()`  

**Partially Correct Matches**:  
- [H-01] Signature malleability of EVM's ecrecover in `verify()`  
- [H-02] Arbitrary Transfer of Unowned NFTs  

**Missed Issues from Issue Report**:  
- [H-03] `Beebots.TradeValid()` Returns True Erroneously  
- [H-04] Function `tokenByIndex` Treats Last Index as Invalid  
- [H-05] NFT Can Be Minted for Free After Sale Ends  

**GPT-Generated Potential Issues (May Be Incorrect)**:  
- Missing Access Control on `sealContract` and `pauseMarket`.  
- Reliance on `block.timestamp`.  

--- 

Let me know if you need further clarifications or a detailed implementation guide!",3,2,3,21,"```
1. Legacy Function Usage
2. Randomness Vulnerability
3. Missing Withdraw Limitation
```","To calculate the **Average Precision (AP)**, we follow these steps:

1. **Identify the ranks of the true positives**:
   - ""Legacy Function Usage"" does not appear in the ranked list of predictions.
   - ""Randomness Vulnerability"" appears at rank 2.
   - ""Missing Withdraw Limitation"" appears at rank 21.

2. **Calculate the precision at each rank**:
   - For ""Randomness Vulnerability"" at rank 2: \( P@2 = \frac{1}{2} = 0.5 \)
   - For ""Missing Withdraw Limitation"" at rank 21: \( P@21 = \frac{2}{21} \approx 0.095 \)

3. **Average the precision values**:
   - AP = \( \frac{0.5 + 0.095}{2} = \frac{0.595}{2} = 0.2975 \)

**Average Precision (AP)**: 0.2975",0.2975