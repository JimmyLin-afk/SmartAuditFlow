nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct,Partially,Not Matched,LLM-generated,matchList,MAP
swap.sol,"pragma solidity ^0.8.0;

import ""../governance/EmergencyPausable.sol"";
import ""../utils/Math.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@openzeppelin/contracts/utils/math/SafeMath.sol"";

contract Swap is EmergencyPausable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Math for uint256;

    /// @notice An address to receive swap fees. The 0 address prevents fee
    ///         withdrawal.
    address payable public feeRecipient;
    /// @notice divide by the SWAP_FEE_DIVISOR to get the fee ratio, deducted
    ///         from the proceeds of each swap.
    uint256 public swapFee;
    uint256 public constant SWAP_FEE_DIVISOR = 100_000;

    event SwappedTokens(
        address tokenSold,
        address tokenBought,
        uint256 amountSold,
        uint256 amountBought,
        uint256 amountBoughtFee
    );

    event NewSwapFee(
        uint256 newSwapFee
    );

    event NewFeeRecipient(
        address newFeeRecipient
    );

    event FeesSwept(
        address token,
        uint256 amount,
        address recipient
    );

    /// @param owner_ A new contract owner, expected to implement
    ///               TimelockGovernorWithEmergencyGovernance.
    /// @param feeRecipient_ A payable address to receive swap fees. Setting the
    ///        0 address prevents fee withdrawal, and can be set later by
    ///        governance.
    /// @param swapFee_ A fee, which divided by SWAP_FEE_DIVISOR sets the fee
    ///                 ratio charged for each swap.
    constructor(address owner_, address payable feeRecipient_, uint256 swapFee_) {
        require(owner_ != address(0), ""Swap::constructor: Owner must not be 0"");
        transferOwnership(owner_);
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    /// @notice Set the fee taken from each swap's proceeds.
    /// @dev Only timelocked governance can set the swap fee.
    /// @param swapFee_ A fee, which divided by SWAP_FEE_DIVISOR sets the fee ratio.
    function setSwapFee(uint256 swapFee_) external onlyTimelock {
        require(swapFee_ < SWAP_FEE_DIVISOR, ""Swap::setSwapFee: Swap fee must not exceed 100%"");
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    /// @notice Set the address permitted to receive swap fees.
    /// @dev Only timelocked governance can set the fee recipient.
    /// @param feeRecipient_ A payable address to receive swap fees. Setting the
    ///        0 address prevents fee withdrawal.
    function setFeeRecipient(address payable feeRecipient_) external onlyTimelock {
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
    }

    /// @notice Swap by filling a 0x quote.
    /// @dev Execute a swap by filling a 0x quote, as provided by the 0x API.
    ///      Charges a governable swap fee that comes out of the bought asset,
    ///      be it token or ETH. Unfortunately, the fee is also charged on any
    ///      refunded ETH from 0x protocol fees due to an implementation oddity.
    ///      This behavior shouldn't impact most users.
    ///
    ///      Learn more about the 0x API and quotes at https://0x.org/docs/api
    /// @param zrxSellTokenAddress The contract address of the token to be sold,
    ///        as returned by the 0x `/swap/v1/quote` API endpoint. If selling
    ///        unwrapped ETH included via msg.value, this should be address(0)
    /// @param amountToSell Amount of token to sell, with the same precision as
    ///        zrxSellTokenAddress. This information is also encoded in zrxData.
    ///        If selling unwrapped ETH via msg.value, this should be 0.
    /// @param zrxBuyTokenAddress The contract address of the token to be bought,
    ///        as returned by the 0x `/swap/v1/quote` API endpoint. To buy
    ///        unwrapped ETH, use `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`
    /// @param minimumAmountReceived The minimum amount expected to be received
    ///        from filling the quote, before the swap fee is deducted, in
    ///        zrxBuyTokenAddress. Reverts if not met
    /// @param zrxAllowanceTarget Contract address that needs to be approved for
    ///        zrxSellTokenAddress, as returned by the 0x `/swap/v1/quote` API
    ///        endpoint. Should be address(0) for purchases uses unwrapped ETH
    /// @param zrxTo Contract to fill the 0x quote, as returned by the 0x
    ///        `/swap/v1/quote` API endpoint
    /// @param zrxData Data encoding the 0x quote, as returned by the 0x
    ///        `/swap/v1/quote` API endpoint
    /// @param deadline Timestamp after which the swap will be reverted.
    function swapByQuote(
        address zrxSellTokenAddress,
        uint256 amountToSell,
        address zrxBuyTokenAddress,
        uint256 minimumAmountReceived,
        address zrxAllowanceTarget,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 deadline
    ) external payable whenNotPaused nonReentrant {
        require(
            block.timestamp <= deadline,
            ""Swap::swapByQuote: Deadline exceeded""
        );
        require(
            !signifiesETHOrZero(zrxSellTokenAddress) || msg.value > 0,
            ""Swap::swapByQuote: Unwrapped ETH must be swapped via msg.value""
        );

        // if zrxAllowanceTarget is 0, this is an ETH sale
        if (zrxAllowanceTarget != address(0)) {
            // transfer tokens to this contract
            IERC20(zrxSellTokenAddress).safeTransferFrom(msg.sender, address(this), amountToSell);
            // approve token transfer to 0x contracts
            // TODO (handle approval special cases like USDT, KNC, etc)
            IERC20(zrxSellTokenAddress).safeIncreaseAllowance(zrxAllowanceTarget, amountToSell);
        }

        // execute 0x quote
        (uint256 boughtERC20Amount, uint256 boughtETHAmount) = fillZrxQuote(
            IERC20(zrxBuyTokenAddress),
            zrxTo,
            zrxData,
            msg.value
        );

        require(
            (
                !signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtERC20Amount >= minimumAmountReceived
            ) ||
            (
                signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtETHAmount >= minimumAmountReceived
            ),
            ""Swap::swapByQuote: Minimum swap proceeds requirement not met""
        );
        if (boughtERC20Amount > 0) {
            // take the swap fee from the ERC20 proceeds and return the rest
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);
            IERC20(zrxBuyTokenAddress).safeTransfer(msg.sender, toTransfer);
            // return any refunded ETH
            payable(msg.sender).transfer(boughtETHAmount);

            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtERC20Amount,
                boughtERC20Amount.sub(toTransfer)
            );
        } else {

            // take the swap fee from the ETH proceeds and return the rest. Note
            // that if any 0x protocol fee is refunded in ETH, it also suffers
            // the swap fee tax
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtETHAmount).div(SWAP_FEE_DIVISOR);
            payable(msg.sender).transfer(toTransfer);
            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtETHAmount,
                boughtETHAmount.sub(toTransfer)
            );
        }
        if (zrxAllowanceTarget != address(0)) {
            // remove any dangling token allowance
            IERC20(zrxSellTokenAddress).safeApprove(zrxAllowanceTarget, 0);
        }
    }

    /// @notice Fill a 0x quote as provided by the API, and return any ETH or
    ///         ERC20 proceeds.
    /// @dev Learn more at https://0x.org/docs/api
    /// @param zrxBuyTokenAddress The contract address of the token to be bought,
    ///        as provided by the 0x API. `0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee`
    ///        signifies the user is buying unwrapped ETH.
    /// @param zrxTo Contract to fill the 0x quote, as provided by the 0x API
    /// @param zrxData Data encoding the 0x quote, as provided by the 0x API
    /// @param ethAmount The amount of ETH required to fill the quote, including
    ///        any ETH being traded as well as protocol fees
    /// @return any positive `zrxBuyTokenAddress` ERC20 balance change, as well
    ///         as any positive ETH balance change
    function fillZrxQuote(
        IERC20 zrxBuyTokenAddress,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 ethAmount
    ) internal returns (uint256, uint256) {
        uint256 originalERC20Balance = 0;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
        }
        uint256 originalETHBalance = address(this).balance;

        (bool success,) = zrxTo.call{value: ethAmount}(zrxData);
        require(success, ""Swap::fillZrxQuote: Failed to fill quote"");

        uint256 ethDelta = address(this).balance.subOrZero(originalETHBalance);
        uint256 erc20Delta;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            erc20Delta = zrxBuyTokenAddress.balanceOf(address(this)).subOrZero(originalERC20Balance);
            require(erc20Delta > 0, ""Swap::fillZrxQuote: Didn't receive bought token"");
        } else {
            require(ethDelta > 0, ""Swap::fillZrxQuote: Didn't receive bought ETH"");
        }

        return (erc20Delta, ethDelta);
    }

    /// @notice Test whether an address is zero, or the magic address the 0x
    ///         platform uses to signify ""unwrapped ETH"" rather than an ERC20.
    /// @param tokenAddress An address that might point toward an ERC-20.
    function signifiesETHOrZero(address tokenAddress) internal pure returns (bool) {
        return (
            tokenAddress == address(0) ||
            tokenAddress == address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
        );
    }

    /// @notice Sweeps accrued ETH and ERC20 swap fees to the pre-established
    ///         fee recipient address.
    /// @dev Fees are tracked based on the contract's balances, rather than
    ///      using any additional bookkeeping. If there are bugs in swap
    ///      accounting, this function could jeopardize funds.
    /// @param tokens An array of ERC20 contracts to withdraw token fees
    function sweepFees(
        address[] calldata tokens
    ) external nonReentrant {
        require(
            feeRecipient != address(0),
            ""Swap::withdrawAccruedFees: feeRecipient is not initialized""
        );
        for (uint8 i = 0; i<tokens.length; i++) {
            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));
            if (balance > 0) {
                IERC20(tokens[i]).safeTransfer(feeRecipient, balance);
                emit FeesSwept(tokens[i], balance, feeRecipient);
            }
        }
        feeRecipient.transfer(address(this).balance);
        emit FeesSwept(address(0), address(this).balance, feeRecipient);
    }

    fallback() external payable {}
    receive() external payable {}
}",2733,263,"[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets

Submitted by WatchPug
Swap.sol L200-L212
function fillZrxQuote(
    IERC20 zrxBuyTokenAddress,
    address payable zrxTo,
    bytes calldata zrxData,
    uint256 ethAmount
) internal returns (uint256, uint256) {
    uint256 originalERC20Balance = 0;
    if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
        originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
    }
    uint256 originalETHBalance = address(this).balance;

    (bool success,) = zrxTo.call{value: ethAmount}(zrxData);

A call to an arbitrary contract with custom calldata is made in fillZrxQuote(), which means the contract can be an ERC20 token, and the calldata can be transferFrom a previously approved user.
  [H-02] Wrong calculation of erc20Delta and ethDelta

Submitted by WatchPug, also found by harleythedog
Swap.sol L200-L225
function fillZrxQuote(
    IERC20 zrxBuyTokenAddress,
    address payable zrxTo,
    bytes calldata zrxData,
    uint256 ethAmount
) internal returns (uint256, uint256) {
    uint256 originalERC20Balance = 0;
    if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
        originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
    }
    uint256 originalETHBalance = address(this).balance;

    (bool success,) = zrxTo.call{value: ethAmount}(zrxData);
    require(success, ""Swap::fillZrxQuote: Failed to fill quote"");

    uint256 ethDelta = address(this).balance.subOrZero(originalETHBalance);
    uint256 erc20Delta;
    if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
        erc20Delta = zrxBuyTokenAddress.balanceOf(address(this)).subOrZero(originalERC20Balance);
        require(erc20Delta > 0, ""Swap::fillZrxQuote: Didn't receive bought token"");
    } else {
        require(ethDelta > 0, ""Swap::fillZrxQuote: Didn't receive bought ETH"");
    }

    return (erc20Delta, ethDelta);
}

When a user tries to swap unwrapped ETH to ERC20, even if there is a certain amount of ETH refunded, at L215, ethDelta will always be 0.
That's because originalETHBalance already includes the msg.value sent by the caller.
Let's say the ETH balance of the contract is 1 ETH before the swap.
A user swaps 10 ETH to USDC;
originalETHBalance will be 11 ETH;
If there is 1 ETH of refund;
ethDelta will be 0 as the new balance is 2 ETH and subOrZero(2, 11) is 0.
Similarly, erc20Delta is also computed wrong.
Consider a special case of a user trying to arbitrage from WBTC to WBTC, the originalERC20Balance already includes the input amount, erc20Delta will always be much lower than the actual delta amount.
For example, for an arb swap from 1 WBTC to 1.1 WBTC, the ethDelta will be 0.1 WBTC while it should be 1.1 WBTC.
 [M-01] Swap.sol implements potentially dangerous transfer


The use of `transfer()` in  Swap.sol may have unintended outcomes on the eth being sent to the receiver. Eth may be irretrievable or undelivered if the msg.sender or feeRecipient is a smart contract. Funds can potentially be lost if;
The smart contract fails to implement the payable fallback function
The fallback function uses more than 2300 gas units
The latter situation may occur in the instance of gas cost changes. The impact would mean that any contracts receiving funds would potentially be unable to retrieve funds from the swap.   [M-02] Unused ERC20 tokens are not refunded

Submitted by WatchPug
Based on the context and comments in the code, we assume that it's possible that there will be some leftover sell tokens, not only when users are selling unwrapped ETH but also for ERC20 tokens.
However, in the current implementation, only refunded ETH is returned (L158).
Because of this, the leftover tkoens may be left in the contract unintentionally.
 
[M-03] Users can avoid paying fees for ETH swaps

Users can call `Swap.swapByQuote()` to execute an ETH swap (where they receive ETH) without paying swap fee for the gained ETH. They can trick the system by setting zrxBuyTokenAddress to an address of a malicious contract and making it think they have executed an ERC20 swap when they have actually executed an ETH swap. In this case, the system will give them the ETH they got from the swap (boughtETHAmount) without charging any swap fees for it, because the systems consideres this ETH as ""refunded ETH"" that wasn't part of the ""ERC20"" swap.",5,,"pragma solidity ^0.8.0;

import ""../governance/EmergencyPausable.sol"";
import ""../utils/Math.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@openzeppelin/contracts/utils/math/SafeMath.sol"";

contract Swap is EmergencyPausable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Math for uint256;

    
    
    address payable public feeRecipient;
    
    
    uint256 public swapFee;
    uint256 public constant SWAP_FEE_DIVISOR = 100_000;

    event SwappedTokens(
        address tokenSold,
        address tokenBought,
        uint256 amountSold,
        uint256 amountBought,
        uint256 amountBoughtFee
    );

    event NewSwapFee(
        uint256 newSwapFee
    );

    event NewFeeRecipient(
        address newFeeRecipient
    );

    event FeesSwept(
        address token,
        uint256 amount,
        address recipient
    );

    
    
    
    
    
    
    
    constructor(address owner_, address payable feeRecipient_, uint256 swapFee_) {
        require(owner_ != address(0), ""Swap::constructor: Owner must not be 0"");
        transferOwnership(owner_);
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    
    
    
    function setSwapFee(uint256 swapFee_) external onlyTimelock {
        require(swapFee_ < SWAP_FEE_DIVISOR, ""Swap::setSwapFee: Swap fee must not exceed 100%"");
        swapFee = swapFee_;
        emit NewSwapFee(swapFee);
    }

    
    
    
    
    function setFeeRecipient(address payable feeRecipient_) external onlyTimelock {
        feeRecipient = feeRecipient_;
        emit NewFeeRecipient(feeRecipient);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    function swapByQuote(
        address zrxSellTokenAddress,
        uint256 amountToSell,
        address zrxBuyTokenAddress,
        uint256 minimumAmountReceived,
        address zrxAllowanceTarget,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 deadline
    ) external payable whenNotPaused nonReentrant {
        require(
            block.timestamp <= deadline,
            ""Swap::swapByQuote: Deadline exceeded""
        );
        require(
            !signifiesETHOrZero(zrxSellTokenAddress) || msg.value > 0,
            ""Swap::swapByQuote: Unwrapped ETH must be swapped via msg.value""
        );

        
        if (zrxAllowanceTarget != address(0)) {
            
            IERC20(zrxSellTokenAddress).safeTransferFrom(msg.sender, address(this), amountToSell);
            
            
            IERC20(zrxSellTokenAddress).safeIncreaseAllowance(zrxAllowanceTarget, amountToSell);
        }

        
        (uint256 boughtERC20Amount, uint256 boughtETHAmount) = fillZrxQuote(
            IERC20(zrxBuyTokenAddress),
            zrxTo,
            zrxData,
            msg.value
        );

        require(
            (
                !signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtERC20Amount >= minimumAmountReceived
            ) ||
            (
                signifiesETHOrZero(zrxBuyTokenAddress) &&
                boughtETHAmount >= minimumAmountReceived
            ),
            ""Swap::swapByQuote: Minimum swap proceeds requirement not met""
        );
        if (boughtERC20Amount > 0) {
            
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);
            IERC20(zrxBuyTokenAddress).safeTransfer(msg.sender, toTransfer);
            
            payable(msg.sender).transfer(boughtETHAmount);

            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtERC20Amount,
                boughtERC20Amount.sub(toTransfer)
            );
        } else {

            
            
            
            uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtETHAmount).div(SWAP_FEE_DIVISOR);
            payable(msg.sender).transfer(toTransfer);
            emit SwappedTokens(
                zrxSellTokenAddress,
                zrxBuyTokenAddress,
                amountToSell,
                boughtETHAmount,
                boughtETHAmount.sub(toTransfer)
            );
        }
        if (zrxAllowanceTarget != address(0)) {
            
            IERC20(zrxSellTokenAddress).safeApprove(zrxAllowanceTarget, 0);
        }
    }

    
    
    
    
    
    
    
    
    
    
    
    
    function fillZrxQuote(
        IERC20 zrxBuyTokenAddress,
        address payable zrxTo,
        bytes calldata zrxData,
        uint256 ethAmount
    ) internal returns (uint256, uint256) {
        uint256 originalERC20Balance = 0;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            originalERC20Balance = zrxBuyTokenAddress.balanceOf(address(this));
        }
        uint256 originalETHBalance = address(this).balance;

        (bool success,) = zrxTo.call{value: ethAmount}(zrxData);
        require(success, ""Swap::fillZrxQuote: Failed to fill quote"");

        uint256 ethDelta = address(this).balance.subOrZero(originalETHBalance);
        uint256 erc20Delta;
        if(!signifiesETHOrZero(address(zrxBuyTokenAddress))) {
            erc20Delta = zrxBuyTokenAddress.balanceOf(address(this)).subOrZero(originalERC20Balance);
            require(erc20Delta > 0, ""Swap::fillZrxQuote: Didn't receive bought token"");
        } else {
            require(ethDelta > 0, ""Swap::fillZrxQuote: Didn't receive bought ETH"");
        }

        return (erc20Delta, ethDelta);
    }

    
    
    
    function signifiesETHOrZero(address tokenAddress) internal pure returns (bool) {
        return (
            tokenAddress == address(0) ||
            tokenAddress == address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)
        );
    }

    
    
    
    
    
    
    function sweepFees(
        address[] calldata tokens
    ) external nonReentrant {
        require(
            feeRecipient != address(0),
            ""Swap::withdrawAccruedFees: feeRecipient is not initialized""
        );
        for (uint8 i = 0; i<tokens.length; i++) {
            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));
            if (balance > 0) {
                IERC20(tokens[i]).safeTransfer(feeRecipient, balance);
                emit FeesSwept(tokens[i], balance, feeRecipient);
            }
        }
        feeRecipient.transfer(address(this).balance);
        emit FeesSwept(address(0), address(this).balance, feeRecipient);
    }

    fallback() external payable {}
    receive() external payable {}
}",1505,2,3,"Here is a list of vulnerabilities and potential issues in the provided smart contract:

---

### 1. **Incorrect Fee Calculation for ETH Transfers**
   - In the `swapByQuote` function, the fee calculation for ETH transfers (`boughtETHAmount`) is incorrect. The fee is deducted from `boughtETHAmount` but is not sent to the `feeRecipient`. This results in a loss of fees for the protocol.
   - **Example**: `uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtETHAmount).div(SWAP_FEE_DIVISOR);` calculates the amount to transfer to the user but does not handle the fee portion.

---

### 2. **Unhandled ETH Transfers in `fillZrxQuote`**
   - The `fillZrxQuote` function does not handle ETH transfers properly. If the `zrxBuyTokenAddress` signifies ETH (i.e., `signifiesETHOrZero` returns `true`), the function does not ensure that the `ethAmount` is correctly transferred or accounted for.
   - **Risk**: ETH could be lost or mishandled during the swap process.

---

### 3. **Lack of Validation for `zrxTo` Address**
   - The `fillZrxQuote` function does not validate the `zrxTo` address before making an external call. If `zrxTo` is a malicious contract or an invalid address, it could lead to loss of funds or unexpected behavior.
   - **Risk**: Reentrancy or funds loss due to invalid or malicious `zrxTo`.

---

### 4. **Unbounded Loop in `sweepFees`**
   - The `sweepFees` function uses a loop to iterate over an array of tokens (`tokens`). If the array is too large, it could exceed the gas limit, causing the transaction to fail.
   - **Risk**: Denial of service (DoS) or inability to sweep fees for a large number of tokens.

---

### 5. **Incorrect ETH Handling in `sweepFees`**
   - The `sweepFees` function transfers the contract's entire ETH balance to the `feeRecipient` without considering whether the ETH balance is part of the fees or other funds.
   - **Risk**: Accidental transfer of ETH not intended as fees.

---

### 6. **Missing Validation for `feeRecipient`**
   - The `setFeeRecipient` function does not validate the `feeRecipient_` address. If `feeRecipient_` is set to `address(0)`, it could lead to loss of fees.
   - **Risk**: Fees could be lost if `feeRecipient` is set to an invalid address.

---

### 7. **Insufficient Validation for `swapFee`**
   - The `setSwapFee` function only checks that `swapFee_` is less than `SWAP_FEE_DIVISOR`. However, it does not ensure that `swapFee_` is a reasonable value (e.g., non-zero or within a specific range).
   - **Risk**: A zero or excessively high swap fee could break the contract's functionality.

---

### 8. **Potential Reentrancy in `swapByQuote`**
   - Although the contract uses `ReentrancyGuard`, the `fillZrxQuote` function makes an external call (`zrxTo.call`) that could potentially re-enter the contract if the `zrxTo` address is malicious.
   - **Risk**: Reentrancy attack if `zrxTo` is a malicious contract.

---

### 9. **Incorrect Handling of Allowances**
   - In the `swapByQuote` function, the allowance for `zrxSellTokenAddress` is increased but not properly reset after the swap. This could leave the contract vulnerable to unauthorized transfers.
   - **Risk**: Unauthorized transfers if the allowance is not reset.

---

### 10. **Unused Imports**
   - The contract imports `Math.sol` and `SafeMath.sol`, but these libraries are not used in the contract. This increases the contract's size and deployment cost unnecessarily.
   - **Risk**: Increased gas costs and unnecessary complexity.

---

### 11. **Incorrect Fee Deduction for ERC20 Tokens**
   - In the `swapByQuote` function, the fee is deducted from `boughtERC20Amount` but is not sent to the `feeRecipient`. This results in a loss of fees for the protocol.
   - **Example**: `uint256 toTransfer = SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR);` calculates the amount to transfer to the user but does not handle the fee portion.

---

### 12. **Lack of Validation for `zrxData`**
   - The `fillZrxQuote` function does not validate the `zrxData` parameter. If `zrxData` contains malicious instructions, it could lead to unexpected behavior or loss of funds.
   - **Risk**: Malicious `zrxData` could exploit the contract.

---

### 13. **Potential Division Precision Loss**
   - The contract uses division in fee calculations (e.g., `SWAP_FEE_DIVISOR.sub(swapFee).mul(boughtERC20Amount).div(SWAP_FEE_DIVISOR)`). This could lead to precision loss, especially for small amounts.
   - **Risk**: Incorrect fee calculations due to precision loss.

---

### 14. **Incorrect Event Emission**
   - The `SwappedTokens` event emits `boughtERC20Amount.sub(toTransfer)` as the fee amount, but this calculation is incorrect because `toTransfer` already includes the fee deduction.
   - **Risk**: Incorrect fee reporting in events.

---

### 15. **Unnecessary `transfer` in `swapByQuote`**
   - The `swapByQuote` function calls `payable(msg.sender).transfer(boughtETHAmount)` even when `boughtERC20Amount > 0`. This is unnecessary and could lead to unexpected behavior.
   - **Risk**: Unintended ETH transfers.

---

### 16. **No Validation for `deadline`**
   - The `swapByQuote` function checks that `block.timestamp <= deadline` but does not validate that `deadline` is a reasonable value (e.g., not too far in the future).
   - **Risk**: Long or invalid deadlines could lead to stale transactions.

---

### 17. **Incorrect ETH Balance Handling**
   - The `fillZrxQuote` function calculates the `ethDelta` as `address(this).balance.subOrZero(originalETHBalance)`, but this does not account for potential ETH transfers during the external call.
   - **Risk**: Incorrect ETH balance calculations.

---

### 18. **No Validation for `zrxBuyTokenAddress`**
   - The `fillZrxQuote` function does not validate the `zrxBuyTokenAddress` parameter. If `zrxBuyTokenAddress` is invalid or malicious, it could lead to unexpected behavior.
   - **Risk**: Invalid or malicious `zrxBuyTokenAddress` could exploit the contract.

---

### 19. **Incorrect Use of `subOrZero`**
   - The `subOrZero` function is used in `fillZrxQuote` to calculate `ethDelta` and `erc20Delta`, but this could mask errors if the balance decreases unexpectedly.
   - **Risk**: Masked errors or incorrect balance calculations.

---

### 20. **Unclear Purpose of `Math.sol`**
   - The `Math.sol` library is imported but not used in the contract. This could indicate unused or redundant code.
   - **Risk**: Increased gas costs and unnecessary complexity.

---

These vulnerabilities and issues should be addressed to ensure the contract's security and functionality.","### **[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets**

**Report Description**:
The `fillZrxQuote` function in `Swap.sol` makes an arbitrary contract call with custom calldata (`zrxData`). This allows an attacker to specify a malicious contract and calldata, such as a `transferFrom` call, to steal ERC20 tokens from users' wallets if the user has previously approved the contract. This is a critical vulnerability as it can lead to direct loss of user funds.

**Match in Response List**:
Matches with the issue titled **""Lack of Validation for `zrxTo` Address""** and **""Potential Reentrancy in `swapByQuote`""**.

**Validation**:
**Partially Correct**. The response identifies the risk of an unvalidated `zrxTo` address and the potential for reentrancy, which are related to the issue. However, it does not explicitly address the core problem of arbitrary calldata (`zrxData`) being used to steal ERC20 tokens. The response misses the critical detail that the calldata can be manipulated to execute malicious actions like `transferFrom`.

---

### **[H-02] Wrong calculation of `erc20Delta` and `ethDelta`**

**Report Description**:
The `fillZrxQuote` function incorrectly calculates `erc20Delta` and `ethDelta`. For ETH swaps, `ethDelta` is always `0` because `originalETHBalance` includes the `msg.value` sent by the caller. Similarly, for ERC20 swaps, `erc20Delta` is miscalculated because `originalERC20Balance` includes the input amount. This leads to incorrect accounting of token balances, potentially allowing users to exploit the contract for arbitrage or other unintended behaviors.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The miscalculation of `erc20Delta` and `ethDelta` is a critical vulnerability that could lead to incorrect token accounting and potential exploitation, but it is not covered in the response list.

---

### **[M-01] Swap.sol implements potentially dangerous transfer**

**Report Description**:
The use of `transfer()` in `Swap.sol` may lead to unintended outcomes when sending ETH to smart contracts. If the recipient is a contract that does not implement a payable fallback function or uses more than 2300 gas units, the ETH transfer may fail, resulting in irretrievable or undelivered funds. This could lead to loss of funds, especially in scenarios where gas costs change.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of using `transfer()` for ETH transfers, which is a known vulnerability in Solidity. The risk of funds being lost due to gas limitations or non-payable fallback functions is not covered.

---

### **[M-02] Unused ERC20 tokens are not refunded**

**Report Description**:
The current implementation of `Swap.sol` does not refund unused ERC20 tokens to users. While refunded ETH is returned, leftover ERC20 tokens remain in the contract, potentially leading to unintended token accumulation. This could result in loss of funds for users who expect their unused tokens to be returned.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of unused ERC20 tokens not being refunded. This is a medium-severity issue that could lead to loss of user funds, but it is not covered in the response list.

---

### **[M-03] Users can avoid paying fees for ETH swaps**

**Report Description**:
Users can exploit the `Swap.swapByQuote()` function to execute ETH swaps without paying swap fees. By setting `zrxBuyTokenAddress` to a malicious contract, users can trick the system into treating the ETH swap as an ERC20 swap, allowing them to receive ETH without paying the required fees. This could lead to loss of revenue for the protocol.

**Match in Response List**:
Matches with the issue titled **""Incorrect Fee Calculation for ETH Transfers""**.

**Validation**:
**Correct**. The response accurately identifies the issue with incorrect fee calculation for ETH transfers. It correctly explains the risk of users avoiding swap fees, which aligns with the reported issue.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[M-03] Users can avoid paying fees for ETH swaps**

**Partially Correct Matches**:

- **[H-01] Arbitrary contract call allows attackers to steal ERC20 from users' wallets**

**Missed Issues from Issue Report**:

- **[H-02] Wrong calculation of `erc20Delta` and `ethDelta`**
- **[M-01] Swap.sol implements potentially dangerous transfer**
- **[M-02] Unused ERC20 tokens are not refunded**

---

The response list covers some issues but misses critical vulnerabilities like the miscalculation of `erc20Delta` and `ethDelta`, the risks of using `transfer()`, and the failure to refund unused ERC20 tokens. These gaps should be addressed to ensure comprehensive security coverage.",1,1,3,20,"```
1. Incorrect Fee Calculation for ETH Transfers
```",1.0
