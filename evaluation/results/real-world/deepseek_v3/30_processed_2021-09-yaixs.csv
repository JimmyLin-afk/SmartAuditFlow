nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,Findings,matchList,MAP
Controller.sol,"// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""../interfaces/IController.sol"";
import ""../interfaces/IConverter.sol"";
import ""../interfaces/IVault.sol"";
import ""../interfaces/IHarvester.sol"";
import ""../interfaces/IStrategy.sol"";
import ""../interfaces/IManager.sol"";

/**
 * @title Controller
 * @notice This controller allows multiple strategies to be used
 * for a single vault supporting multiple tokens.
 */
contract Controller is IController {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    IManager public immutable override manager;

    bool public globalInvestEnabled;
    uint256 public maxStrategies;

    struct VaultDetail {
        address converter;
        uint256 balance;
        address[] strategies;
        mapping(address => uint256) balances;
        mapping(address => uint256) index;
        mapping(address => uint256) caps;
    }

    // vault => Vault
    mapping(address => VaultDetail) internal _vaultDetails;
    // strategy => vault
    mapping(address => address) internal _vaultStrategies;

    /**
     * @notice Logged when harvest is called for a strategy
     */
    event Harvest(address indexed strategy);

    /**
     * @notice Logged when a strategy is added for a vault
     */
    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);

    /**
     * @notice Logged when a strategy is removed for a vault
     */
    event StrategyRemoved(address indexed vault, address indexed strategy);

    /**
     * @notice Logged when strategies are reordered for a vault
     */
    event StrategiesReordered(
        address indexed vault,
        address indexed strategy1,
        address indexed strategy2
    );

    /**
     * @param _manager The address of the manager
     */
    constructor(
        address _manager
    )
        public
    {
        manager = IManager(_manager);
        globalInvestEnabled = true;
        maxStrategies = 10;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Adds a strategy for a given vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _cap The cap of the strategy
     * @param _timeout The timeout between harvests
     */
    function addStrategy(
        address _vault,
        address _strategy,
        uint256 _cap,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultDetails[_vault].converter != address(0), ""!converter"");
        // checking if strategy is already added
        require(_vaultStrategies[_strategy] == address(0), ""Strategy is already added""); 
        // get the index of the newly added strategy
        uint256 index = _vaultDetails[_vault].strategies.length;
        // ensure we haven't added too many strategies already
        require(index < maxStrategies, ""!maxStrategies"");
        // push the strategy to the array of strategies
        _vaultDetails[_vault].strategies.push(_strategy);
        // set the cap
        _vaultDetails[_vault].caps[_strategy] = _cap;
        // set the index
        _vaultDetails[_vault].index[_strategy] = index;
        // store the mapping of strategy to the vault
        _vaultStrategies[_strategy] = _vault;
        if (_timeout > 0) {
            // add it to the harvester
            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);
        }
        emit StrategyAdded(_vault, _strategy, _cap);
    }

    /**
     * @notice Withdraws token from a strategy to the treasury address as returned by the manager
     * @param _strategy The address of the strategy
     * @param _token The address of the token
     */
    function inCaseStrategyGetStuck(
        address _strategy,
        address _token
    )
        external
        onlyStrategist
    {
        IStrategy(_strategy).withdraw(_token);
        IERC20(_token).safeTransfer(
            manager.treasury(),
            IERC20(_token).balanceOf(address(this))
        );
    }

    /**
     * @notice Withdraws token from the controller to the treasury
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function inCaseTokensGetStuck(
        address _token,
        uint256 _amount
    )
        external
        onlyStrategist
    {
        IERC20(_token).safeTransfer(manager.treasury(), _amount);
    }

    /**
     * @notice Removes a strategy for a given token
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _timeout The timeout between harvests
     */
    function removeStrategy(
        address _vault,
        address _strategy,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        // get the index of the strategy to remove
        uint256 index = vaultDetail.index[_strategy];
        // get the index of the last strategy
        uint256 tail = vaultDetail.strategies.length.sub(1);
        // get the address of the last strategy
        address replace = vaultDetail.strategies[tail];
        // replace the removed strategy with the tail
        vaultDetail.strategies[index] = replace;
        // set the new index for the replaced strategy
        vaultDetail.index[replace] = index;
        // remove the duplicate replaced strategy
        vaultDetail.strategies.pop();
        // remove the strategy's index
        delete vaultDetail.index[_strategy];
        // remove the strategy's cap
        delete vaultDetail.caps[_strategy];
        // remove the strategy's balance
        delete vaultDetail.balances[_strategy];
        // remove the mapping of strategy to the vault
        delete _vaultStrategies[_strategy];
        // pull funds from the removed strategy to the vault
        IStrategy(_strategy).withdrawAll();
        // remove the strategy from the harvester
        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);
        emit StrategyRemoved(_vault, _strategy);
    }

    /**
     * @notice Reorders two strategies for a given vault
     * @param _vault The address of the vault
     * @param _strategy1 The address of the first strategy
     * @param _strategy2 The address of the second strategy
     */
    function reorderStrategies(
        address _vault,
        address _strategy1,
        address _strategy2
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultStrategies[_strategy1] == _vault, ""!_strategy1"");
        require(_vaultStrategies[_strategy2] == _vault, ""!_strategy2"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        // get the indexes of the strategies
        uint256 index1 = vaultDetail.index[_strategy1];
        uint256 index2 = vaultDetail.index[_strategy2];
        // set the new addresses at their indexes
        vaultDetail.strategies[index1] = _strategy2;
        vaultDetail.strategies[index2] = _strategy1;
        // update indexes
        vaultDetail.index[_strategy1] = index2;
        vaultDetail.index[_strategy2] = index1;
        emit StrategiesReordered(_vault, _strategy1, _strategy2);
    }

    /**
     * @notice Sets/updates the cap of a strategy for a vault
     * @dev If the balance of the strategy is greater than the new cap (except if
     * the cap is 0), then withdraw the difference from the strategy to the vault.
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _cap The new cap of the strategy
     */
    function setCap(
        address _vault,
        address _strategy,
        uint256 _cap,
        address _convert
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        _vaultDetails[_vault].caps[_strategy] = _cap;
        uint256 _balance = IStrategy(_strategy).balanceOf();
        // send excess funds (over cap) back to the vault
        if (_balance > _cap && _cap != 0) {
            uint256 _diff = _balance.sub(_cap);
            IStrategy(_strategy).withdraw(_diff);
            updateBalance(_vault, _strategy);
            _balance = IStrategy(_strategy).balanceOf();
            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);
            address _want = IStrategy(_strategy).want();
            _balance = IERC20(_want).balanceOf(address(this));
            if (_convert != address(0)) {
                IConverter _converter = IConverter(_vaultDetails[_vault].converter);
                IERC20(_want).safeTransfer(address(_converter), _balance);
                _balance = _converter.convert(_want, _convert, _balance, 1);
                IERC20(_convert).safeTransfer(_vault, _balance);
            } else {
                IERC20(_want).safeTransfer(_vault, _balance);
            }
        }
    }

    /**
     * @notice Sets/updates the converter for a given vault
     * @param _vault The address of the vault
     * @param _converter The address of the converter
     */
    function setConverter(
        address _vault,
        address _converter
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedConverters(_converter), ""!allowedConverters"");
        _vaultDetails[_vault].converter = _converter;
    }

    /**
     * @notice Sets/updates the global invest enabled flag
     * @param _investEnabled The new bool of the invest enabled flag
     */
    function setInvestEnabled(
        bool _investEnabled
    )
        external
        notHalted
        onlyStrategist
    {
        globalInvestEnabled = _investEnabled;
    }

    /**
     * @notice Sets/updates the maximum number of strategies for a vault
     * @param _maxStrategies The new value of the maximum strategies
     */
    function setMaxStrategies(
        uint256 _maxStrategies
    )
        external
        notHalted
        onlyStrategist
    {
        maxStrategies = _maxStrategies;
    }

    function skim(
        address _strategy
    )
        external
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).skim();
        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));
    }

    /**
     * @notice Withdraws all funds from a strategy
     * @param _strategy The address of the strategy
     * @param _convert The token address to convert to
     */
    function withdrawAll(
        address _strategy,
        address _convert
    )
        external
        override
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).withdrawAll();
        uint256 _amount = IERC20(_want).balanceOf(address(this));
        address _vault = _vaultStrategies[_strategy];
        updateBalance(_vault, _strategy);
        if (_convert != address(0)) {
            IConverter _converter = IConverter(_vaultDetails[_vault].converter);
            IERC20(_want).safeTransfer(address(_converter), _amount);
            _amount = _converter.convert(_want, _convert, _amount, 1);
            IERC20(_convert).safeTransfer(_vault, _amount);
        } else {
            IERC20(_want).safeTransfer(_vault, _amount);
        }
        uint256 _balance = _vaultDetails[_vault].balance;
        if (_balance >= _amount) {
            _vaultDetails[_vault].balance = _balance.sub(_amount);
        } else {
            _vaultDetails[_vault].balance = 0;
        }
    }

    /**
     * HARVESTER-ONLY FUNCTIONS
     */

    /**
     * @notice Harvests the specified strategy
     * @param _strategy The address of the strategy
     */
    function harvestStrategy(
        address _strategy,
        uint256 _estimatedWETH,
        uint256 _estimatedYAXIS
    )
        external
        override
        notHalted
        onlyHarvester
        onlyStrategy(_strategy)
    {
        uint256 _before = IStrategy(_strategy).balanceOf();
        IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);
        uint256 _after = IStrategy(_strategy).balanceOf();
        address _vault = _vaultStrategies[_strategy];
        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));
        _vaultDetails[_vault].balances[_strategy] = _after;
        emit Harvest(_strategy);
    }

    /**
     * VAULT-ONLY FUNCTIONS
     */

    /**
     * @notice Invests funds into a strategy
     * @param _strategy The address of the strategy
     * @param _token The address of the token
     * @param _amount The amount that will be invested
     */
    function earn(
        address _strategy,
        address _token,
        uint256 _amount
    )
        external
        override
        notHalted
        onlyStrategy(_strategy)
        onlyVault(_token)
    {
        // get the want token of the strategy
        address _want = IStrategy(_strategy).want();
        if (_want != _token) {
            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);
            IERC20(_token).safeTransfer(address(_converter), _amount);
            // TODO: do estimation for received
            _amount = _converter.convert(_token, _want, _amount, 1);
            IERC20(_want).safeTransfer(_strategy, _amount);
        } else {
            IERC20(_token).safeTransfer(_strategy, _amount);
        }
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);
        // call the strategy deposit function
        IStrategy(_strategy).deposit();
        updateBalance(msg.sender, _strategy);
    }

    /**
     * @notice Withdraws funds from a strategy
     * @dev If the withdraw amount is greater than the first strategy given
     * by getBestStrategyWithdraw, this function will loop over strategies
     * until the requested amount is met.
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function withdraw(
        address _token,
        uint256 _amount
    )
        external
        override
        onlyVault(_token)
    {
        (
            address[] memory _strategies,
            uint256[] memory _amounts
        ) = getBestStrategyWithdraw(_token, _amount);
        for (uint i = 0; i < _strategies.length; i++) {
            // getBestStrategyWithdraw will return arrays larger than needed
            // if this happens, simply exit the loop
            if (_strategies[i] == address(0)) {
                break;
            }
            IStrategy(_strategies[i]).withdraw(_amounts[i]);
            updateBalance(msg.sender, _strategies[i]);
            address _want = IStrategy(_strategies[i]).want();
            if (_want != _token) {
                address _converter = _vaultDetails[msg.sender].converter;
                IERC20(_want).safeTransfer(_converter, _amounts[i]);
                // TODO: do estimation for received
                IConverter(_converter).convert(_want, _token, _amounts[i], 1);
            }
        }
        _amount = IERC20(_token).balanceOf(address(this));
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);
        IERC20(_token).safeTransfer(msg.sender, _amount);
    }

    /**
     * EXTERNAL VIEW FUNCTIONS
     */

    /**
     * @notice Returns the rough balance of the sum of all strategies for a given vault
     * @dev This function is optimized to prevent looping over all strategy balances,
     * and instead the controller tracks the earn, withdraw, and harvest amounts.
     */
    function balanceOf()
        external
        view
        override
        returns (uint256 _balance)
    {
        return _vaultDetails[msg.sender].balance;
    }

    /**
     * @notice Returns the converter assigned for the given vault
     * @param _vault Address of the vault
     */
    function converter(
        address _vault
    )
        external
        view
        override
        returns (address)
    {
        return _vaultDetails[_vault].converter;
    }

    /**
     * @notice Returns the cap of a strategy for a given vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     */
    function getCap(
        address _vault,
        address _strategy
    )
        external
        view
        returns (uint256)
    {
        return _vaultDetails[_vault].caps[_strategy];
    }

    /**
     * @notice Returns whether investing is enabled for the calling vault
     * @dev Should be called by the vault
     */
    function investEnabled()
        external
        view
        override
        returns (bool)
    {
        if (globalInvestEnabled) {
            return _vaultDetails[msg.sender].strategies.length > 0;
        }
        return false;
    }

    /**
     * @notice Returns all the strategies for a given vault
     * @param _vault The address of the vault
     */
    function strategies(
        address _vault
    )
        external
        view
        returns (address[] memory)
    {
        return _vaultDetails[_vault].strategies;
    }

    /**
     * @notice Returns the length of the strategies of the calling vault
     * @dev This function is expected to be called by a vault
     */
    function strategies()
        external
        view
        override
        returns (uint256)
    {
        return _vaultDetails[msg.sender].strategies.length;
    }

    /**
     * INTERNAL FUNCTIONS
     */

    /**
     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from
     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays
     * from this function will always be the same length as the amount of strategies for
     * a token. Check that _strategies[i] != address(0) when consuming to know when to
     * break out of the loop.
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function getBestStrategyWithdraw(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (
            address[] memory _strategies,
            uint256[] memory _amounts
        )
    {
        // get the length of strategies for a single token
        address _vault = manager.vaults(_token);
        uint256 k = _vaultDetails[_vault].strategies.length;
        // initialize fixed-length memory arrays
        _strategies = new address[](k);
        _amounts = new uint256[](k);
        address _strategy;
        uint256 _balance;
        // scan forward from the the beginning of strategies
        for (uint i = 0; i < k; i++) {
            _strategy = _vaultDetails[_vault].strategies[i];
            _strategies[i] = _strategy;
            // get the balance of the strategy
            _balance = _vaultDetails[_vault].balances[_strategy];
            // if the strategy doesn't have the balance to cover the withdraw
            if (_balance < _amount) {
                // withdraw what we can and add to the _amounts
                _amounts[i] = _balance;
                _amount = _amount.sub(_balance);
            } else {
                // stop scanning if the balance is more than the withdraw amount
                _amounts[i] = _amount;
                break;
            }
        }
    }

    /**
     * @notice Updates the stored balance of a given strategy for a vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     */
    function updateBalance(
        address _vault,
        address _strategy
    )
        internal
    {
        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();
    }

    /**
     * MODIFIERS
     */

    /**
     * @notice Reverts if the protocol is halted
     */
    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    /**
     * @notice Reverts if the caller is not governance
     */
    modifier onlyGovernance() {
        require(msg.sender == manager.governance(), ""!governance"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the strategist
     */
    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }

    /**
     * @notice Reverts if the strategy is not allowed in the manager
     */
    modifier onlyStrategy(address _strategy) {
        require(manager.allowedStrategies(_strategy), ""!allowedStrategy"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the harvester
     */
    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the vault for the given token
     */
    modifier onlyVault(address _token) {
        require(msg.sender == manager.vaults(_token), ""!vault"");
        _;
    }
}",4847.0,684.0,"[H-01] Controller.setCap sets wrong vault balance
The `Controller.setCap` function sets a cap for a strategy and withdraws any excess amounts (_diff). The vault balance is decreased by the entire strategy balance instead of by this _diff: ```
// @audit why not sub _diff?
_vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_balance);
``` The `_vaultDetails[_vault].balance` variable does not correctly track the actual vault balances anymore, it will usually underestimate the vault balance. This variable is used in `Controller.balanceOf()`, which in turn is used in `Vault.balance()`, which in turn is used to determine how many shares to mint / amount to receive when redeeming shares. If the value is less, users will lose money as they can redeem fewer tokens. Also, an attacker can deposit and will receive more shares than they should receive. They can then wait until the balance is correctly updated again and withdraw their shares for a higher amount than they deposited. This leads to the vault losing tokens.   [H-02] set cap breaks vault's Balance
In controller.sol's function setCap, the contract wrongly handles _vaultDetails[_vault].balance. While the balance should be decreased by the difference of strategies balance, it subtracts the remaining balance of the strategy. See Controller.sol L262-L278. `_vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_balance);`
This would result in vaultDetails[_vault].balance being far smaller than the strategy's value. A user would trigger the assertion at Controller.sol#475 and the fund would be locked in the strategy.
Though setCap is a permission function that only the operator can call, it's likely to be called and the fund would be locked in the contract. I consider this a high severity issue.
  [H-04] Controller does not raise an error when there's insufficient liquidity
When a user tries to withdraw the token from the vault, the vault would withdraw the token from the controller if there's insufficient liquidity in the vault. However, the controller does not raise an error when there's insufficient liquidity in the controller/ strategies. The user would lose his shares while getting nothing.
An MEV searcher could apply this attack on any withdrawal. When an attacker found an unconfirmed tx that tries to withdraw 1M dai, he can do such sandwich attack.
- Deposits USDC into the vault.
- Withdraw all dai left in the vault/controller/strategy.
- Place the vitims tx here. The victim would get zero dai while burning 1 M share. This would pump the share price.
- Withdraw all liquidity.
All users would be vulnerable to MEV attackers. I consider this is a high-risk issue.   [H-09] `removeToken` would break the vault/protocol.
There's no safety check in Manager.sol's `removeToken`. Manager.sol#L454-L487`
(1) The token would be locked in the original vault. Given the current design, the vault would keep a ratio of total amount to save the gas. Once the token is removed at manager contract, these token would lost.
(2) Controller’s `balanceOf` would no longer reflects the real value. Controller.sol#L488-L495 While `_vaultDetails[msg.sender].balance;` remains the same, user can nolonger withdraw those amount.
(3) Share price in the vault would decrease drastically. The share price is calculated as `totalValue / totalSupply` Vault.sol#L217. While the totalSupply of the share remains the same, the total balance has drastically decreased.
Calling removeToken way would almost break the whole protocol if the vault has already started. I consider this is a high-risk issue.
 
[M-08] Controller.inCaseStrategyGetStuck does not update balance
The `Controller.inCaseStrategyGetStuck` withdraws from a strategy but does not call `updateBalance(_vault, _strategy)` afterwards.
The `_vaultDetails[_vault].balances[_strategy`] variable does not correctly track the actual strategy balance anymore. I'm not sure what exactly this field is used for besides getting the withdraw amounts per strategy in getBestStrategyWithdraw. As the strategy contains a lower amount than stored in the field, Controller.withdraw will attempt to withdraw too much.",5.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""../interfaces/IController.sol"";
import ""../interfaces/IConverter.sol"";
import ""../interfaces/IVault.sol"";
import ""../interfaces/IHarvester.sol"";
import ""../interfaces/IStrategy.sol"";
import ""../interfaces/IManager.sol"";


contract Controller is IController {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    IManager public immutable override manager;

    bool public globalInvestEnabled;
    uint256 public maxStrategies;

    struct VaultDetail {
        address converter;
        uint256 balance;
        address[] strategies;
        mapping(address => uint256) balances;
        mapping(address => uint256) index;
        mapping(address => uint256) caps;
    }

    
    mapping(address => VaultDetail) internal _vaultDetails;
    
    mapping(address => address) internal _vaultStrategies;

    
    event Harvest(address indexed strategy);

    
    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);

    
    event StrategyRemoved(address indexed vault, address indexed strategy);

    
    event StrategiesReordered(
        address indexed vault,
        address indexed strategy1,
        address indexed strategy2
    );

    
    constructor(
        address _manager
    )
        public
    {
        manager = IManager(_manager);
        globalInvestEnabled = true;
        maxStrategies = 10;
    }

    

    
    function addStrategy(
        address _vault,
        address _strategy,
        uint256 _cap,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultDetails[_vault].converter != address(0), ""!converter"");
        
        require(_vaultStrategies[_strategy] == address(0), ""Strategy is already added""); 
        
        uint256 index = _vaultDetails[_vault].strategies.length;
        
        require(index < maxStrategies, ""!maxStrategies"");
        
        _vaultDetails[_vault].strategies.push(_strategy);
        
        _vaultDetails[_vault].caps[_strategy] = _cap;
        
        _vaultDetails[_vault].index[_strategy] = index;
        
        _vaultStrategies[_strategy] = _vault;
        if (_timeout > 0) {
            
            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);
        }
        emit StrategyAdded(_vault, _strategy, _cap);
    }

    
    function inCaseStrategyGetStuck(
        address _strategy,
        address _token
    )
        external
        onlyStrategist
    {
        IStrategy(_strategy).withdraw(_token);
        IERC20(_token).safeTransfer(
            manager.treasury(),
            IERC20(_token).balanceOf(address(this))
        );
    }

    
    function inCaseTokensGetStuck(
        address _token,
        uint256 _amount
    )
        external
        onlyStrategist
    {
        IERC20(_token).safeTransfer(manager.treasury(), _amount);
    }

    
    function removeStrategy(
        address _vault,
        address _strategy,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        
        uint256 index = vaultDetail.index[_strategy];
        
        uint256 tail = vaultDetail.strategies.length.sub(1);
        
        address replace = vaultDetail.strategies[tail];
        
        vaultDetail.strategies[index] = replace;
        
        vaultDetail.index[replace] = index;
        
        vaultDetail.strategies.pop();
        
        delete vaultDetail.index[_strategy];
        
        delete vaultDetail.caps[_strategy];
        
        delete vaultDetail.balances[_strategy];
        
        delete _vaultStrategies[_strategy];
        
        IStrategy(_strategy).withdrawAll();
        
        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);
        emit StrategyRemoved(_vault, _strategy);
    }

    
    function reorderStrategies(
        address _vault,
        address _strategy1,
        address _strategy2
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultStrategies[_strategy1] == _vault, ""!_strategy1"");
        require(_vaultStrategies[_strategy2] == _vault, ""!_strategy2"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        
        uint256 index1 = vaultDetail.index[_strategy1];
        uint256 index2 = vaultDetail.index[_strategy2];
        
        vaultDetail.strategies[index1] = _strategy2;
        vaultDetail.strategies[index2] = _strategy1;
        
        vaultDetail.index[_strategy1] = index2;
        vaultDetail.index[_strategy2] = index1;
        emit StrategiesReordered(_vault, _strategy1, _strategy2);
    }

    
    function setCap(
        address _vault,
        address _strategy,
        uint256 _cap,
        address _convert
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        _vaultDetails[_vault].caps[_strategy] = _cap;
        uint256 _balance = IStrategy(_strategy).balanceOf();
        
        if (_balance > _cap && _cap != 0) {
            uint256 _diff = _balance.sub(_cap);
            IStrategy(_strategy).withdraw(_diff);
            updateBalance(_vault, _strategy);
            _balance = IStrategy(_strategy).balanceOf();
            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);
            address _want = IStrategy(_strategy).want();
            _balance = IERC20(_want).balanceOf(address(this));
            if (_convert != address(0)) {
                IConverter _converter = IConverter(_vaultDetails[_vault].converter);
                IERC20(_want).safeTransfer(address(_converter), _balance);
                _balance = _converter.convert(_want, _convert, _balance, 1);
                IERC20(_convert).safeTransfer(_vault, _balance);
            } else {
                IERC20(_want).safeTransfer(_vault, _balance);
            }
        }
    }

    
    function setConverter(
        address _vault,
        address _converter
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedConverters(_converter), ""!allowedConverters"");
        _vaultDetails[_vault].converter = _converter;
    }

    
    function setInvestEnabled(
        bool _investEnabled
    )
        external
        notHalted
        onlyStrategist
    {
        globalInvestEnabled = _investEnabled;
    }

    
    function setMaxStrategies(
        uint256 _maxStrategies
    )
        external
        notHalted
        onlyStrategist
    {
        maxStrategies = _maxStrategies;
    }

    function skim(
        address _strategy
    )
        external
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).skim();
        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));
    }

    
    function withdrawAll(
        address _strategy,
        address _convert
    )
        external
        override
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).withdrawAll();
        uint256 _amount = IERC20(_want).balanceOf(address(this));
        address _vault = _vaultStrategies[_strategy];
        updateBalance(_vault, _strategy);
        if (_convert != address(0)) {
            IConverter _converter = IConverter(_vaultDetails[_vault].converter);
            IERC20(_want).safeTransfer(address(_converter), _amount);
            _amount = _converter.convert(_want, _convert, _amount, 1);
            IERC20(_convert).safeTransfer(_vault, _amount);
        } else {
            IERC20(_want).safeTransfer(_vault, _amount);
        }
        uint256 _balance = _vaultDetails[_vault].balance;
        if (_balance >= _amount) {
            _vaultDetails[_vault].balance = _balance.sub(_amount);
        } else {
            _vaultDetails[_vault].balance = 0;
        }
    }

    

    
    function harvestStrategy(
        address _strategy,
        uint256 _estimatedWETH,
        uint256 _estimatedYAXIS
    )
        external
        override
        notHalted
        onlyHarvester
        onlyStrategy(_strategy)
    {
        uint256 _before = IStrategy(_strategy).balanceOf();
        IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);
        uint256 _after = IStrategy(_strategy).balanceOf();
        address _vault = _vaultStrategies[_strategy];
        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));
        _vaultDetails[_vault].balances[_strategy] = _after;
        emit Harvest(_strategy);
    }

    

    
    function earn(
        address _strategy,
        address _token,
        uint256 _amount
    )
        external
        override
        notHalted
        onlyStrategy(_strategy)
        onlyVault(_token)
    {
        
        address _want = IStrategy(_strategy).want();
        if (_want != _token) {
            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);
            IERC20(_token).safeTransfer(address(_converter), _amount);
            
            _amount = _converter.convert(_token, _want, _amount, 1);
            IERC20(_want).safeTransfer(_strategy, _amount);
        } else {
            IERC20(_token).safeTransfer(_strategy, _amount);
        }
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);
        
        IStrategy(_strategy).deposit();
        updateBalance(msg.sender, _strategy);
    }

    
    function withdraw(
        address _token,
        uint256 _amount
    )
        external
        override
        onlyVault(_token)
    {
        (
            address[] memory _strategies,
            uint256[] memory _amounts
        ) = getBestStrategyWithdraw(_token, _amount);
        for (uint i = 0; i < _strategies.length; i++) {
            
            
            if (_strategies[i] == address(0)) {
                break;
            }
            IStrategy(_strategies[i]).withdraw(_amounts[i]);
            updateBalance(msg.sender, _strategies[i]);
            address _want = IStrategy(_strategies[i]).want();
            if (_want != _token) {
                address _converter = _vaultDetails[msg.sender].converter;
                IERC20(_want).safeTransfer(_converter, _amounts[i]);
                
                IConverter(_converter).convert(_want, _token, _amounts[i], 1);
            }
        }
        _amount = IERC20(_token).balanceOf(address(this));
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);
        IERC20(_token).safeTransfer(msg.sender, _amount);
    }

    

    
    function balanceOf()
        external
        view
        override
        returns (uint256 _balance)
    {
        return _vaultDetails[msg.sender].balance;
    }

    
    function converter(
        address _vault
    )
        external
        view
        override
        returns (address)
    {
        return _vaultDetails[_vault].converter;
    }

    
    function getCap(
        address _vault,
        address _strategy
    )
        external
        view
        returns (uint256)
    {
        return _vaultDetails[_vault].caps[_strategy];
    }

    
    function investEnabled()
        external
        view
        override
        returns (bool)
    {
        if (globalInvestEnabled) {
            return _vaultDetails[msg.sender].strategies.length > 0;
        }
        return false;
    }

    
    function strategies(
        address _vault
    )
        external
        view
        returns (address[] memory)
    {
        return _vaultDetails[_vault].strategies;
    }

    
    function strategies()
        external
        view
        override
        returns (uint256)
    {
        return _vaultDetails[msg.sender].strategies.length;
    }

    

    
    function getBestStrategyWithdraw(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (
            address[] memory _strategies,
            uint256[] memory _amounts
        )
    {
        
        address _vault = manager.vaults(_token);
        uint256 k = _vaultDetails[_vault].strategies.length;
        
        _strategies = new address[](k);
        _amounts = new uint256[](k);
        address _strategy;
        uint256 _balance;
        
        for (uint i = 0; i < k; i++) {
            _strategy = _vaultDetails[_vault].strategies[i];
            _strategies[i] = _strategy;
            
            _balance = _vaultDetails[_vault].balances[_strategy];
            
            if (_balance < _amount) {
                
                _amounts[i] = _balance;
                _amount = _amount.sub(_balance);
            } else {
                
                _amounts[i] = _amount;
                break;
            }
        }
    }

    
    function updateBalance(
        address _vault,
        address _strategy
    )
        internal
    {
        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();
    }

    

    
    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    
    modifier onlyGovernance() {
        require(msg.sender == manager.governance(), ""!governance"");
        _;
    }

    
    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }

    
    modifier onlyStrategy(address _strategy) {
        require(manager.allowedStrategies(_strategy), ""!allowedStrategy"");
        _;
    }

    
    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    
    modifier onlyVault(address _token) {
        require(msg.sender == manager.vaults(_token), ""!vault"");
        _;
    }
}",3187.0,4,1,"### **[H-01] Controller.setCap sets wrong vault balance**

**Report Description**:  
The `Controller.setCap` function sets a cap for a strategy and withdraws any excess amounts (`_diff`). However, the vault balance is decreased by the entire strategy balance instead of by `_diff`. This results in `_vaultDetails[_vault].balance` underestimating the actual vault balance. This incorrect balance is used in `Controller.balanceOf()`, which affects `Vault.balance()`, leading to incorrect share minting and redemption. Users may lose money, and attackers can exploit this by depositing to receive more shares than they should, then withdrawing for a higher amount, causing the vault to lose tokens.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the specific issue of incorrect balance updates in `Controller.setCap`. While it mentions ""Inconsistent State Updates"" and ""Incorrect Balance Updates,"" these are general and do not cover the specific vulnerability described in the issue.

---

### **[H-02] set cap breaks vault's Balance**

**Report Description**:  
In `Controller.setCap`, the contract incorrectly handles `_vaultDetails[_vault].balance`. Instead of decreasing the balance by the difference of the strategy's balance, it subtracts the entire strategy balance. This results in `vaultDetails[_vault].balance` being much smaller than the actual strategy value. A user could trigger an assertion at `Controller.sol#475`, locking funds in the strategy. Although `setCap` is a permissioned function, its misuse could lead to high-severity issues.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the specific issue of incorrect balance handling in `Controller.setCap`. While it mentions ""Inconsistent State Updates,"" it does not cover the specific scenario described in the issue.

---

### **[H-04] Controller does not raise an error when there's insufficient liquidity**

**Report Description**:  
When a user withdraws tokens from the vault, the vault withdraws from the controller if there's insufficient liquidity. However, the controller does not raise an error when there's insufficient liquidity in the controller/strategies. This allows users to lose shares without receiving tokens. An MEV searcher could exploit this by sandwiching a victim's withdrawal transaction, causing the victim to receive nothing while burning shares, leading to a pump in share price and potential losses for all users.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the specific issue of insufficient liquidity handling in the controller. While it mentions ""Potential Denial of Service (DoS)"" and ""Unclear Error Handling,"" these are general and do not cover the specific vulnerability described in the issue.

---

### **[H-09] `removeToken` would break the vault/protocol**

**Report Description**:  
The `removeToken` function in `Manager.sol` lacks safety checks. Removing a token would lock it in the original vault, as the vault keeps a ratio of the total amount to save gas. The token would be lost, and `Controller.balanceOf` would no longer reflect the real value. Additionally, the share price in the vault would decrease drastically, as it is calculated as `totalValue / totalSupply`. This could break the entire protocol if the vault has already started.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the specific issue of `removeToken` breaking the vault/protocol. While it mentions ""Lack of Input Validation"" and ""Dependence on External Contracts,"" these are general and do not cover the specific vulnerability described in the issue.

---

### **[M-08] Controller.inCaseStrategyGetStuck does not update balance**

**Report Description**:  
The `Controller.inCaseStrategyGetStuck` function withdraws from a strategy but does not call `updateBalance(_vault, _strategy)` afterward. This results in `_vaultDetails[_vault].balances[_strategy]` not correctly tracking the actual strategy balance. This could lead to incorrect withdrawal amounts in `Controller.withdraw`, as the strategy contains a lower amount than stored in the field.

**Match in Response List**:  
Matches with the issue titled **""Inconsistent State Updates""**.

**Validation**:  
**Partially Correct**. The response identifies the issue of inconsistent state updates but does not specifically address the failure to call `updateBalance` in `Controller.inCaseStrategyGetStuck`. The response is too general and misses critical details about the specific vulnerability.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- **[M-08] Controller.inCaseStrategyGetStuck does not update balance**

**Missed Issues from Issue Report**:  
- **[H-01] Controller.setCap sets wrong vault balance**  
- **[H-02] set cap breaks vault's Balance**  
- **[H-04] Controller does not raise an error when there's insufficient liquidity**  
- **[H-09] `removeToken` would break the vault/protocol**  

---

The response list fails to address most of the specific vulnerabilities described in the issue report. While it covers general categories of vulnerabilities, it lacks the depth and specificity needed to accurately match and address the issues.",0,1,4,20,"The provided smart contract contains several potential vulnerabilities and risks. Below is a list of identified issues:

---

### 1. **Lack of Input Validation**
   - **Description**: Several functions do not validate inputs properly, which could lead to unexpected behavior or vulnerabilities.
     - Example: `addStrategy`, `removeStrategy`, `setCap`, and `setConverter` do not check if the `_vault` or `_strategy` addresses are valid (e.g., non-zero addresses).
   - **Impact**: Malicious or accidental use of invalid addresses could lead to loss of funds or contract malfunction.

---

### 2. **Reentrancy Risk**
   - **Description**: Functions like `withdraw`, `withdrawAll`, and `inCaseStrategyGetStuck` transfer tokens to external addresses before updating internal state. This could allow reentrancy attacks if the recipient is a malicious contract.
   - **Impact**: An attacker could exploit this to drain funds or manipulate contract state.

---

### 3. **Unbounded Loops**
   - **Description**: Functions like `getBestStrategyWithdraw` and `withdraw` use loops that iterate over the `strategies` array. If the array grows too large, it could exceed the gas limit, causing transactions to fail.
   - **Impact**: Denial of service (DoS) for legitimate users or inability to withdraw funds.

---

### 4. **Lack of Access Control for Sensitive Functions**
   - **Description**: Some functions, such as `setInvestEnabled` and `setMaxStrategies`, are protected by the `onlyStrategist` modifier. However, if the `strategist` role is compromised, these functions could be misused.
   - **Impact**: Malicious or compromised strategist could disable investments or manipulate strategy limits.

---

### 5. **Inconsistent State Updates**
   - **Description**: In functions like `removeStrategy` and `withdrawAll`, state updates (e.g., deleting mappings or updating balances) are performed after external calls. If these calls fail or are exploited, the contract state could be left inconsistent.
   - **Impact**: Contract state could become corrupted, leading to incorrect behavior or loss of funds.

---

### 6. **Unchecked Return Values**
   - **Description**: External calls to `IConverter.convert` and `IStrategy` methods do not check return values. If these calls fail silently, the contract could proceed with incorrect assumptions.
   - **Impact**: Loss of funds or incorrect state updates.

---

### 7. **Potential Front-Running**
   - **Description**: Functions like `addStrategy` and `reorderStrategies` are susceptible to front-running, where an attacker could manipulate the order or timing of transactions to their advantage.
   - **Impact**: Unfair manipulation of strategy order or caps.

---

### 8. **Uninitialized Storage**
   - **Description**: The `VaultDetail` struct contains mappings (e.g., `balances`, `index`, `caps`) that are not explicitly initialized. If accessed before being set, they could return unexpected values.
   - **Impact**: Incorrect behavior or calculations based on uninitialized data.

---

### 9. **Overflow/Underflow Risks**
   - **Description**: The contract uses `SafeMath` for arithmetic operations, but some calculations (e.g., in `getBestStrategyWithdraw`) could still be vulnerable to overflow/underflow if `SafeMath` is not used consistently.
   - **Impact**: Incorrect calculations or unexpected behavior.

---

### 10. **Dependence on External Contracts**
   - **Description**: The contract relies heavily on external contracts (e.g., `IManager`, `IConverter`, `IStrategy`). If these contracts are malicious, buggy, or upgraded improperly, it could compromise the functionality of this contract.
   - **Impact**: Loss of funds or contract malfunction.

---

### 11. **Missing Event Emissions**
   - **Description**: Some state-changing functions (e.g., `setInvestEnabled`, `setMaxStrategies`) do not emit events, making it difficult to track changes or detect suspicious activity.
   - **Impact**: Reduced transparency and auditability.

---

### 12. **Potential Denial of Service (DoS)**
   - **Description**: Functions like `harvestStrategy` and `earn` involve external calls that could fail or consume excessive gas, causing transactions to revert.
   - **Impact**: Legitimate users could be unable to execute transactions.

---

### 13. **Incorrect Balance Updates**
   - **Description**: In functions like `withdrawAll`, the balance is updated after transferring tokens. If the transfer fails, the balance could be incorrectly reduced.
   - **Impact**: Incorrect accounting or loss of funds.

---

### 14. **Unprotected `skim` Function**
   - **Description**: The `skim` function allows the strategist to transfer tokens from the strategy to the vault without proper checks or restrictions.
   - **Impact**: Potential misuse or loss of funds.

---

### 15. **Unclear Error Handling**
   - **Description**: The contract does not handle errors or edge cases explicitly (e.g., what happens if a strategy fails to withdraw or deposit funds?).
   - **Impact**: Unpredictable behavior or loss of funds.

---

### 16. **Gas Inefficiency**
   - **Description**: Functions like `getBestStrategyWithdraw` and `withdraw` involve multiple external calls and loops, which could lead to high gas costs.
   - **Impact**: Users may avoid interacting with the contract due to high transaction costs.

---

### 17. **Lack of Upgradeability**
   - **Description**: The contract does not include any mechanism for upgrading or fixing bugs after deployment.
   - **Impact**: Bugs or vulnerabilities cannot be patched without deploying a new contract.

---

### 18. **Potential for Griefing**
   - **Description**: A malicious user could add a large number of strategies to a vault, causing the `strategies` array to grow excessively and making it difficult to manage or withdraw funds.
   - **Impact**: Denial of service or increased gas costs.

---

### 19. **Insufficient Testing for Edge Cases**
   - **Description**: The contract does not appear to handle edge cases, such as zero-value transfers, empty strategy arrays, or invalid conversions.
   - **Impact**: Unexpected behavior or vulnerabilities in edge cases.

---

### 20. **Dependence on `manager` Contract**
   - **Description**: The contract relies on the `manager` contract for critical checks (e.g., `allowedVaults`, `allowedStrategies`). If the `manager` contract is compromised or behaves unexpectedly, this contract could be exploited.
   - **Impact**: Loss of funds or contract malfunction.

---

This list highlights the key vulnerabilities and risks in the provided smart contract. Addressing these issues would require careful review and mitigation strategies.","```
None.
```",0.0
Vault.sol,"// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/utils/Address.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/GSN/Context.sol"";

import ""./VaultToken.sol"";

import ""./interfaces/IManager.sol"";
import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/ExtendedIERC20.sol"";

/**
 * @title Vault
 * @notice The vault is where users deposit and withdraw
 * like-kind assets that have been added by governance.
 */
contract Vault is VaultToken, IVault {
    using Address for address;
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant MAX = 10000;

    IManager public immutable override manager;

    // Strategist-updated variables
    address public override gauge;
    uint256 public min;
    uint256 public totalDepositCap;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);
    event Earn(address indexed token, uint256 amount);

    /**
     * @param _name The name of the vault token for depositors
     * @param _symbol The symbol of the vault token for depositors
     * @param _manager The address of the vault manager contract
     */
    constructor(
        string memory _name,
        string memory _symbol,
        address _manager
    )
        public
        VaultToken(_name, _symbol)
    {
        manager = IManager(_manager);
        min = 9500;
        totalDepositCap = 10000000 ether;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Sets the value of this vault's gauge
     * @dev Allow to be unset with the zero address
     * @param _gauge The address of the gauge
     */
    function setGauge(
        address _gauge
    )
        external
        notHalted
        onlyStrategist
    {
        gauge = _gauge;
    }

    /**
     * @notice Sets the value for min
     * @dev min is the minimum percent of funds to keep small withdrawals cheap
     * @param _min The new min value
     */
    function setMin(
        uint256 _min
    )
        external
        notHalted
        onlyStrategist
    {
        require(_min <= MAX, ""!_min"");
        min = _min;
    }

    /**
     * @notice Sets the value for the totalDepositCap
     * @dev totalDepositCap is the maximum amount of value that can be deposited
     * to the metavault at a time
     * @param _totalDepositCap The new totalDepositCap value
     */
    function setTotalDepositCap(
        uint256 _totalDepositCap
    )
        external
        notHalted
        onlyStrategist
    {
        totalDepositCap = _totalDepositCap;
    }

    /**
     * @notice Swaps tokens held within the vault
     * @param _token0 The token address to swap out
     * @param _token1 The token address to to
     * @param _expectedAmount The expected amount of _token1 to receive
     */
    function swap(
        address _token0,
        address _token1,
        uint256 _expectedAmount
    )
        external
        override
        notHalted
        onlyStrategist
        returns (uint256 _balance)
    {
        IConverter _converter = IConverter(IController(manager.controllers(address(this))).converter(address(this)));
        _balance = IERC20(_token0).balanceOf(address(this));
        IERC20(_token0).safeTransfer(address(_converter), _balance);
        _balance = _converter.convert(_token0, _token1, _balance, _expectedAmount);
    }

    /**
     * HARVESTER-ONLY FUNCTIONS
     */

    /**
     * @notice Sends accrued 3CRV tokens on the metavault to the controller to be deposited to strategies
     */
    function earn(
        address _token,
        address _strategy
    )
        external
        override
        checkToken(_token)
        notHalted
        onlyHarvester
    {
        require(manager.allowedStrategies(_strategy), ""!_strategy"");
        IController _controller = IController(manager.controllers(address(this)));
        if (_controller.investEnabled()) {
            uint256 _balance = available(_token);
            IERC20(_token).safeTransfer(address(_controller), _balance);
            _controller.earn(_strategy, _token, _balance);
            emit Earn(_token, _balance);
        }
    }

    /**
     * USER-FACING FUNCTIONS
     */

    /**
     * @notice Deposits the given token into the vault
     * @param _token The address of the token
     * @param _amount The amount of tokens to deposit
     */
     function deposit(
        address _token,
        uint256 _amount
     )
        public
        override
        checkToken(_token)
        notHalted
        returns (uint256 _shares)
    {
        require(_amount > 0, ""!_amount"");

        uint256 _balance = balance();

        uint256 _before = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        _amount = IERC20(_token).balanceOf(address(this)).sub(_before);

        if (_amount > 0) {
            _amount = _normalizeDecimals(_token, _amount);

            if (totalSupply() > 0) {
                _amount = (_amount.mul(totalSupply())).div(_balance);
            }

            _shares = _amount;
        }

        if (_shares > 0) {
            _mint(msg.sender, _shares);
            require(totalSupply() <= totalDepositCap, "">totalDepositCap"");
            emit Deposit(msg.sender, _shares);
        }
    }

    /**
     * @notice Deposits multiple tokens simultaneously to the vault
     * @dev Users must approve the vault to spend their stablecoin
     * @param _tokens The addresses of each token being deposited
     * @param _amounts The amounts of each token being deposited
     */
    function depositMultiple(
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
        override
        returns (uint256 _shares)
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i; i < _amounts.length; i++) {
            _shares = _shares.add(deposit(_tokens[i], _amounts[i]));
        }
    }

    /**
     * @notice Withdraws an amount of shares to a given output token
     * @param _shares The amount of shares to withdraw
     * @param _output The address of the token to receive
     */
    function withdraw(
        uint256 _shares,
        address _output
    )
        public
        override
        checkToken(_output)
    {
        uint256 _amount = (balance().mul(_shares)).div(totalSupply());
        _burn(msg.sender, _shares);

        uint256 _withdrawalProtectionFee = manager.withdrawalProtectionFee();
        if (_withdrawalProtectionFee > 0) {
            uint256 _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX);
            _amount = _amount.sub(_withdrawalProtection);
        }

        uint256 _balance = IERC20(_output).balanceOf(address(this));
        if (_balance < _amount) {
            IController _controller = IController(manager.controllers(address(this)));
            uint256 _toWithdraw = _amount.sub(_balance);
            if (_controller.strategies() > 0) {
                _controller.withdraw(_output, _toWithdraw);
            }
            uint256 _after = IERC20(_output).balanceOf(address(this));
            uint256 _diff = _after.sub(_balance);
            if (_diff < _toWithdraw) {
                _amount = _after;
            }
        }

        IERC20(_output).safeTransfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    /**
     * @notice Withdraw the entire balance for an account
     * @param _output The address of the desired token to receive
     */
    function withdrawAll(
        address _output
    )
        external
        override
    {
        withdraw(balanceOf(msg.sender), _output);
    }

    /**
     * VIEWS
     */

    /**
     * @notice Returns the amount of tokens available to be sent to strategies
     * @dev Custom logic in here for how much the vault allows to be borrowed
     * @dev Sets minimum required on-hand to keep small withdrawals cheap
     * @param _token The address of the token
     */
    function available(
        address _token
    )
        public
        view
        override
        returns (uint256)
    {
        return IERC20(_token).balanceOf(address(this)).mul(min).div(MAX);
    }

    /**
     * @notice Returns the total balance of the vault, including strategies
     */
    function balance()
        public
        view
        override
        returns (uint256 _balance)
    {
        return balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf());
    }

    /**
     * @notice Returns the balance of allowed tokens present on the vault only
     */
    function balanceOfThis()
        public
        view
        returns (uint256 _balance)
    {
        address[] memory _tokens = manager.getTokens(address(this));
        for (uint8 i; i < _tokens.length; i++) {
            address _token = _tokens[i];
            _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
        }
    }

    /**
     * @notice Returns the rate of vault shares
     */
    function getPricePerFullShare()
        external
        view
        override
        returns (uint256)
    {
        if (totalSupply() > 0) {
            return balance().mul(1e18).div(totalSupply());
        } else {
            return balance();
        }
    }

    /**
     * @notice Returns an array of the tokens for this vault
     */
    function getTokens()
        external
        view
        override
        returns (address[] memory)
    {
        return manager.getTokens(address(this));
    }

    /**
     * @notice Returns the fee for withdrawing the given amount
     * @param _amount The amount to withdraw
     */
    function withdrawFee(
        uint256 _amount
    )
        external
        view
        override
        returns (uint256)
    {
        return manager.withdrawalProtectionFee().mul(_amount).div(MAX);
    }

    function _normalizeDecimals(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (uint256)
    {
        uint256 _decimals = uint256(ExtendedIERC20(_token).decimals());
        if (_decimals < 18) {
            _amount = _amount.mul(10**(18-_decimals));
        }
        return _amount;
    }

    /**
     * MODIFIERS
     */

    modifier checkToken(address _token) {
        require(manager.allowedTokens(_token) && manager.vaults(_token) == address(this), ""!_token"");
        _;
    }

    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }
}",2561.0,408.0,"[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities.
The v3 vault treats all valid tokens exactly the same. Depositing 1M DAI would get the same share as depositing 1M USDT. User can withdraw their share in another token. Though there's withdrawalProtectionFee (0.1 percent), the vault is still a no slippage stable coin exchange.
Also, I notice that 3crv_token is added to the vault in the test. Treating 3crv_token and all other stable coins the same would make the vault vulnerable to flashloan attack. 3crv_token is an lp token and at the point of writing, the price of it is 1.01. The arbitrage space is about 0.8 percent and makes the vault vulnerable to flashloan attacks.
Though the team may not add crv_token and dai to the same vault, its design makes the vault vulnerable. Strategies need to be designed with super caution or the vault would be vulnerable to attackers.
Given the possibility of a flashloan attack, I consider this a high-risk issue.
  [H-06] earn results in decreasing share price
For a dai vault that pairs with `NativeStrategyCurve3Crv`, every time `earn()` is called, shareholders would lose money. (about 2%)
There are two issues involved. The Vault contract and the `controller` contract doesn't handle the price difference between the want token and other tokens.
At Vault.sol L293, when a vault calculates its value, it sums up all tokens balance. However, when the controller calculates vaults' value (at Controller.sol L410-L436), it only adds the amount of strategy.want it received. (in this case, it's t3crv).
Under the current design, users who deposit dai to the vault would not get yield. Instead, they would keep losing money.
  [H-07] Vault.balance() mixes normalized and standard amounts
Loops
The `Vault.balance` function uses the balanceOfThis function which scales (""normalizes"") all balances to 18 decimals.
“for (uint8 i; i < _tokens.length; i++) {
    address _token = _tokens[i];
    // everything is padded to 18 decimals
    _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
}”
Note that balance()'s second term IController(manager.controllers(address(this))).balanceOf() is not normalized. The code is adding a non-normalized amount (for example 6 decimals only for USDC) to a normalized (18 decimals).
  [H-08] Vault.withdraw mixes normalized and standard amounts The `Vault.balance` function uses the balanceOfThis function which scales (""normalizes"") all balances to 18 decimals.
for (uint8 i; i < _tokens.length; i++) {
    address _token = _tokens[i];
    // everything is padded to 18 decimals
    _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
}
Note that balance()'s second term IController(manager.controllers(address(this))).balanceOf() is not normalized, but it must be.
This leads to many issues through the contracts that use balance but don't treat these values as normalized values. For example, in Vault.withdraw, the computed _amount value is normalized (in 18 decimals). But the uint256 _balance = IERC20(_output).balanceOf(address(this)); value is not normalized but compared to the normalized _amount and even subtracted:
// @audit compares unnormalzied output to normalized output
if (_balance < _amount) {
    IController _controller = IController(manager.controllers(address(this)));
    // @audit cannot directly subtract unnormalized
    uint256 _toWithdraw = _amount.sub(_balance);
    if (_controller.strategies() > 0) {
        _controller.withdraw(_output, _toWithdraw);
    }
    uint256 _after = IERC20(_output).balanceOf(address(this));
    uint256 _diff = _after.sub(_balance);
    if (_diff < _toWithdraw) {
        _amount = _balance.add(_diff);
    }
}
  [M-03] `Vault.withdraw` sometimes burns too many shares
The `Vault.withdraw` function attempts to withdraw funds from the controller if there are not enough in the vault already. In the case the controller could not withdraw enough, i.e., where _diff < _toWithdraw, the user will receive less output tokens than their fair share would entitle them to (the initial _amount).
if (_diff < _toWithdraw) {
    // @audit burns too many shares for a below fair-share amount
    _amount = _balance.add(_diff);
}
The withdrawer receives fewer output tokens than they were entitled to.",5.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/utils/Address.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/GSN/Context.sol"";

import ""./VaultToken.sol"";

import ""./interfaces/IManager.sol"";
import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/ExtendedIERC20.sol"";


contract Vault is VaultToken, IVault {
    using Address for address;
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant MAX = 10000;

    IManager public immutable override manager;

    
    address public override gauge;
    uint256 public min;
    uint256 public totalDepositCap;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);
    event Earn(address indexed token, uint256 amount);

    
    constructor(
        string memory _name,
        string memory _symbol,
        address _manager
    )
        public
        VaultToken(_name, _symbol)
    {
        manager = IManager(_manager);
        min = 9500;
        totalDepositCap = 10000000 ether;
    }

    

    
    function setGauge(
        address _gauge
    )
        external
        notHalted
        onlyStrategist
    {
        gauge = _gauge;
    }

    
    function setMin(
        uint256 _min
    )
        external
        notHalted
        onlyStrategist
    {
        require(_min <= MAX, ""!_min"");
        min = _min;
    }

    
    function setTotalDepositCap(
        uint256 _totalDepositCap
    )
        external
        notHalted
        onlyStrategist
    {
        totalDepositCap = _totalDepositCap;
    }

    
    function swap(
        address _token0,
        address _token1,
        uint256 _expectedAmount
    )
        external
        override
        notHalted
        onlyStrategist
        returns (uint256 _balance)
    {
        IConverter _converter = IConverter(IController(manager.controllers(address(this))).converter(address(this)));
        _balance = IERC20(_token0).balanceOf(address(this));
        IERC20(_token0).safeTransfer(address(_converter), _balance);
        _balance = _converter.convert(_token0, _token1, _balance, _expectedAmount);
    }

    

    
    function earn(
        address _token,
        address _strategy
    )
        external
        override
        checkToken(_token)
        notHalted
        onlyHarvester
    {
        require(manager.allowedStrategies(_strategy), ""!_strategy"");
        IController _controller = IController(manager.controllers(address(this)));
        if (_controller.investEnabled()) {
            uint256 _balance = available(_token);
            IERC20(_token).safeTransfer(address(_controller), _balance);
            _controller.earn(_strategy, _token, _balance);
            emit Earn(_token, _balance);
        }
    }

    

    
     function deposit(
        address _token,
        uint256 _amount
     )
        public
        override
        checkToken(_token)
        notHalted
        returns (uint256 _shares)
    {
        require(_amount > 0, ""!_amount"");

        uint256 _balance = balance();

        uint256 _before = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        _amount = IERC20(_token).balanceOf(address(this)).sub(_before);

        if (_amount > 0) {
            _amount = _normalizeDecimals(_token, _amount);

            if (totalSupply() > 0) {
                _amount = (_amount.mul(totalSupply())).div(_balance);
            }

            _shares = _amount;
        }

        if (_shares > 0) {
            _mint(msg.sender, _shares);
            require(totalSupply() <= totalDepositCap, "">totalDepositCap"");
            emit Deposit(msg.sender, _shares);
        }
    }

    
    function depositMultiple(
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
        override
        returns (uint256 _shares)
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i; i < _amounts.length; i++) {
            _shares = _shares.add(deposit(_tokens[i], _amounts[i]));
        }
    }

    
    function withdraw(
        uint256 _shares,
        address _output
    )
        public
        override
        checkToken(_output)
    {
        uint256 _amount = (balance().mul(_shares)).div(totalSupply());
        _burn(msg.sender, _shares);

        uint256 _withdrawalProtectionFee = manager.withdrawalProtectionFee();
        if (_withdrawalProtectionFee > 0) {
            uint256 _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX);
            _amount = _amount.sub(_withdrawalProtection);
        }

        uint256 _balance = IERC20(_output).balanceOf(address(this));
        if (_balance < _amount) {
            IController _controller = IController(manager.controllers(address(this)));
            uint256 _toWithdraw = _amount.sub(_balance);
            if (_controller.strategies() > 0) {
                _controller.withdraw(_output, _toWithdraw);
            }
            uint256 _after = IERC20(_output).balanceOf(address(this));
            uint256 _diff = _after.sub(_balance);
            if (_diff < _toWithdraw) {
                _amount = _after;
            }
        }

        IERC20(_output).safeTransfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    
    function withdrawAll(
        address _output
    )
        external
        override
    {
        withdraw(balanceOf(msg.sender), _output);
    }

    

    
    function available(
        address _token
    )
        public
        view
        override
        returns (uint256)
    {
        return IERC20(_token).balanceOf(address(this)).mul(min).div(MAX);
    }

    
    function balance()
        public
        view
        override
        returns (uint256 _balance)
    {
        return balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf());
    }

    
    function balanceOfThis()
        public
        view
        returns (uint256 _balance)
    {
        address[] memory _tokens = manager.getTokens(address(this));
        for (uint8 i; i < _tokens.length; i++) {
            address _token = _tokens[i];
            _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
        }
    }

    
    function getPricePerFullShare()
        external
        view
        override
        returns (uint256)
    {
        if (totalSupply() > 0) {
            return balance().mul(1e18).div(totalSupply());
        } else {
            return balance();
        }
    }

    
    function getTokens()
        external
        view
        override
        returns (address[] memory)
    {
        return manager.getTokens(address(this));
    }

    
    function withdrawFee(
        uint256 _amount
    )
        external
        view
        override
        returns (uint256)
    {
        return manager.withdrawalProtectionFee().mul(_amount).div(MAX);
    }

    function _normalizeDecimals(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (uint256)
    {
        uint256 _decimals = uint256(ExtendedIERC20(_token).decimals());
        if (_decimals < 18) {
            _amount = _amount.mul(10**(18-_decimals));
        }
        return _amount;
    }

    

    modifier checkToken(address _token) {
        require(manager.allowedTokens(_token) && manager.vaults(_token) == address(this), ""!_token"");
        _;
    }

    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }
}",1853.0,4,1,"### **[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities**

**Report Description**:
The v3 vault treats all valid tokens exactly the same, allowing users to deposit one token and withdraw another. This creates arbitrage opportunities, especially when dealing with tokens like `3crv_token`, which is an LP token with a price of 1.01 at the time of writing. The arbitrage space of about 0.8% makes the vault vulnerable to flashloan attacks. The design of the vault, which treats all tokens equally, is inherently risky and could be exploited by attackers.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the specific issue of arbitrage opportunities created by treating all tokens equally, especially LP tokens like `3crv_token`. This is a high-risk issue that is not covered in the response list.

---

### **[H-06] earn results in decreasing share price**

**Report Description**:
When `earn()` is called in a DAI vault paired with `NativeStrategyCurve3Crv`, shareholders lose about 2% of their value. This is due to the Vault contract and the Controller contract not handling the price difference between the want token and other tokens. The Vault sums up all token balances, while the Controller only adds the amount of `strategy.want` (t3crv in this case). This discrepancy results in users losing money instead of earning yield.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of decreasing share price due to the mismatch in how the Vault and Controller calculate values. This is a critical issue that is not covered in the response list.

---

### **[H-07] Vault.balance() mixes normalized and standard amounts**

**Report Description**:
The `Vault.balance` function uses the `balanceOfThis` function, which normalizes all balances to 18 decimals. However, the second term `IController(manager.controllers(address(this))).balanceOf()` is not normalized. This leads to incorrect calculations when adding normalized and non-normalized amounts, causing issues throughout the contract.

**Match in Response List**:
**Matches with the issue titled ""Token Decimal Handling""**.

**Validation**:
**Partially Correct**. The response identifies the issue of token decimal handling but does not specifically address the problem of mixing normalized and non-normalized amounts in the `Vault.balance` function. The response is partially correct but misses critical details.

---

### **[H-08] Vault.withdraw mixes normalized and standard amounts**

**Report Description**:
The `Vault.withdraw` function compares a normalized `_amount` with a non-normalized `_balance`, leading to incorrect calculations. This issue is similar to [H-07] but specifically affects the withdrawal process, potentially causing users to receive fewer tokens than they are entitled to.

**Match in Response List**:
**Matches with the issue titled ""Token Decimal Handling""**.

**Validation**:
**Partially Correct**. The response identifies the issue of token decimal handling but does not specifically address the problem of mixing normalized and non-normalized amounts in the `Vault.withdraw` function. The response is partially correct but misses critical details.

---

### **[M-03] Vault.withdraw sometimes burns too many shares**

**Report Description**:
The `Vault.withdraw` function burns too many shares when the Controller cannot withdraw enough tokens. In cases where `_diff < _toWithdraw`, the user receives fewer output tokens than they are entitled to, but the shares burned are based on the initial `_amount`. This results in users losing more shares than they should.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of burning too many shares during the withdrawal process. This is a medium-risk issue that is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- **[H-07] Vault.balance() mixes normalized and standard amounts**
- **[H-08] Vault.withdraw mixes normalized and standard amounts**

**Missed Issues from Issue Report**:
- **[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities**
- **[H-06] earn results in decreasing share price**
- **[M-03] Vault.withdraw sometimes burns too many shares**

---

The response list covers some general issues but misses several critical vulnerabilities identified in the issue report. The partially correct matches address token decimal handling but fail to fully capture the specific problems in the `Vault.balance` and `Vault.withdraw` functions. The high-risk issues related to arbitrage opportunities and decreasing share price are entirely missed.",0,2,3,20,"The provided smart contract has several vulnerabilities and potential issues. Below is a list of identified vulnerabilities:

---

### 1. **Reentrancy Risk**
   - The `withdraw` function transfers tokens to the user (`IERC20(_output).safeTransfer(msg.sender, _amount)`) before updating the state. If `_output` is a malicious ERC20 token that calls back into the contract, it could lead to reentrancy attacks.
   - The `deposit` function also transfers tokens from the user (`IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount)`), which could be exploited if the token is malicious.

---

### 2. **Integer Overflow/Underflow**
   - The contract uses `SafeMath` for arithmetic operations, which mitigates this risk. However, older versions of Solidity (like 0.6.12) are more prone to such issues if `SafeMath` is not used consistently. Ensure all arithmetic operations are protected.

---

### 3. **Lack of Input Validation**
   - The `setMin` function does not validate that `_min` is greater than 0, which could lead to unexpected behavior if `_min` is set to 0.
   - The `setGauge` function does not validate that `_gauge` is a non-zero address.
   - The `swap` function does not validate that `_token0` and `_token1` are valid ERC20 tokens.

---

### 4. **Access Control Issues**
   - The `onlyHarvester` and `onlyStrategist` modifiers restrict access to specific roles, but there is no mechanism to revoke or update these roles. If the harvester or strategist keys are compromised, the contract could be exploited.
   - The `notHalted` modifier prevents certain functions from being called when the manager is halted, but there is no mechanism to ensure the manager's state is secure.

---

### 5. **Insufficient Event Logging**
   - The `setGauge`, `setMin`, and `setTotalDepositCap` functions do not emit events, making it difficult to track changes to these critical parameters.

---

### 6. **Potential Front-Running**
   - The `deposit` function calculates shares based on the current balance, which could be manipulated by front-running transactions to alter the balance before the deposit is processed.

---

### 7. **Token Decimal Handling**
   - The `_normalizeDecimals` function assumes that tokens have decimals between 0 and 18. If a token has more than 18 decimals, the normalization will fail or produce incorrect results.

---

### 8. **Dependency on External Contracts**
   - The contract relies heavily on external contracts (`IManager`, `IController`, `IConverter`, etc.). If any of these contracts are compromised or behave unexpectedly, it could lead to vulnerabilities in the Vault contract.
   - The `swap` function interacts with an external `IConverter` contract, which could be malicious or buggy.

---

### 9. **Withdrawal Protection Fee Calculation**
   - The `withdraw` function calculates a withdrawal protection fee, but the fee is deducted after the shares are burned. This could lead to incorrect fee calculations if the balance changes during the withdrawal process.

---

### 10. **Gas Limit Issues**
   - The `depositMultiple` function iterates over an array of tokens and amounts, which could exceed the gas limit if the array is too large.

---

### 11. **Lack of Error Handling**
   - The `swap` function does not handle the case where the `IConverter` contract fails to return the expected amount of tokens.
   - The `withdraw` function does not handle the case where the `IController` fails to withdraw the required amount of tokens.

---

### 12. **Potential Denial of Service**
   - The `deposit` function reverts if `totalSupply() > totalDepositCap`. An attacker could exploit this by making a small deposit to reach the cap, preventing other users from depositing.

---

### 13. **Uninitialized Variables**
   - The `gauge` variable is not initialized in the constructor, which could lead to unexpected behavior if it is accessed before being set.

---

### 14. **Lack of Token Whitelisting**
   - The `checkToken` modifier ensures that only allowed tokens can be used, but there is no mechanism to prevent the same token from being used in multiple vaults, which could lead to confusion or exploits.

---

### 15. **Inconsistent Return Values**
   - The `swap` function returns `_balance`, but it is unclear whether this value is meaningful or useful to the caller.

---

### 16. **Potential Precision Loss**
   - The `getPricePerFullShare` function multiplies by `1e18` and then divides by `totalSupply()`. If `totalSupply()` is very small, this could lead to precision loss.

---

### 17. **Lack of Pausability**
   - The contract does not have a pause mechanism, which could be useful in case of an emergency or exploit.

---

### 18. **Unchecked External Calls**
   - The `earn` function transfers tokens to the `IController` contract without checking the return value of `safeTransfer`. If the transfer fails, the function will not revert, leading to inconsistent state.

---

### 19. **Potential Griefing**
   - An attacker could call the `deposit` function with a very small amount to increase the total supply, making it harder for other users to deposit due to the `totalDepositCap` check.

---

### 20. **Lack of Token Recovery Mechanism**
   - If tokens are accidentally sent to the contract (e.g., via a direct transfer), there is no way to recover them.

---

These vulnerabilities highlight the need for careful review and testing of the contract before deployment.","```
None.
```",0.0
VaultHelper.sol,"// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";

import ""./interfaces/ILiquidityGaugeV2.sol"";
import ""./interfaces/IVault.sol"";

/**
 * @title VaultHelper
 * @notice The VaultHelper acts as a single contract that users may set
 * token approvals on for any token of any vault.
 * @dev This contract has no state and could be deployed by anyone if
 * they didn't trust the original deployer.
 */
contract VaultHelper {
    using SafeERC20 for IERC20;

    /**
     * @notice Deposits the given token into the specified vault
     * @dev Users must approve the vault helper to spend their token
     * @param _vault The address of the vault
     * @param _token The address of the token
     * @param _amount The amount of tokens to deposit
     */
    function depositVault(
        address _vault,
        address _token,
        uint256 _amount
    )
        external
    {
        require(_amount > 0, ""!_amount"");
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        IERC20(_token).safeApprove(_vault, 0);
        IERC20(_token).safeApprove(_vault, _amount);
        uint256 _shares = IVault(_vault).deposit(_token, _amount);
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_vault).safeApprove(_gauge, 0);
            IERC20(_vault).safeApprove(_gauge, _shares);
            ILiquidityGaugeV2(_gauge).deposit(_shares);
            IERC20(_gauge).safeTransfer(msg.sender, _shares);
        } else {
            IERC20(_vault).safeTransfer(msg.sender, _shares);
        }
    }

    /**
     * @notice Deposits multiple tokens simultaneously to the specified vault
     * @dev Users must approve the vault helper to spend their tokens
     * @param _vault The address of the vault
     * @param _tokens The addresses of each token being deposited
     * @param _amounts The amounts of each token being deposited
     */
    function depositMultipleVault(
        address _vault,
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i = 0; i < _amounts.length; i++) {
            require(_amounts[i] > 0, ""!_amounts"");
            IERC20(_tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);
            IERC20(_tokens[i]).safeApprove(_vault, 0);
            IERC20(_tokens[i]).safeApprove(_vault, _amounts[i]);
        }
        uint256 _shares = IVault(_vault).depositMultiple(_tokens, _amounts);
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_vault).safeApprove(_gauge, 0);
            IERC20(_vault).safeApprove(_gauge, _shares);
            ILiquidityGaugeV2(_gauge).deposit(_shares);
            IERC20(_gauge).safeTransfer(msg.sender, _shares);
        } else {
            IERC20(_vault).safeTransfer(msg.sender, _shares);
        }
    }

    function withdrawVault(
        address _vault,
        address _toToken,
        uint256 _amount
    )
        external
    {
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_gauge).safeTransferFrom(msg.sender, address(this), _amount);
            ILiquidityGaugeV2(_gauge).withdraw(_amount);
            IVault(_vault).withdraw(IERC20(_vault).balanceOf(address(this)), _toToken);
            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));
        } else {
            IERC20(_vault).safeTransferFrom(msg.sender, address(this), _amount);
            IVault(_vault).withdraw(_amount, _toToken);
            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));
        }
    }
}",997.0,106.0,"[M-01] VaultHelper deposits don't work with fee-on transfer tokens
There are ERC20 tokens that may make certain customizations to their ERC20 contracts. One type of these tokens is deflationary tokens that charge a certain fee for every `transfer()` or `transferFrom()`. Others are rebasing tokens that increase in value over time like Aave's aTokens (balanceOf changes over time).
The VaultHelper's `depositVault()` and `depositMultipleVault` functions transfer `_amount` to `this` contract using `IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);`. This could have a fee, and less than _amount ends up in the contract. The next actual vault deposit using `IVault(_vault).deposit(_token, _amount);` will then try to transfer more than the this contract actually has and will revert the transaction.",1.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";

import ""./interfaces/ILiquidityGaugeV2.sol"";
import ""./interfaces/IVault.sol"";


contract VaultHelper {
    using SafeERC20 for IERC20;

    
    function depositVault(
        address _vault,
        address _token,
        uint256 _amount
    )
        external
    {
        require(_amount > 0, ""!_amount"");
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        IERC20(_token).safeApprove(_vault, 0);
        IERC20(_token).safeApprove(_vault, _amount);
        uint256 _shares = IVault(_vault).deposit(_token, _amount);
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_vault).safeApprove(_gauge, 0);
            IERC20(_vault).safeApprove(_gauge, _shares);
            ILiquidityGaugeV2(_gauge).deposit(_shares);
            IERC20(_gauge).safeTransfer(msg.sender, _shares);
        } else {
            IERC20(_vault).safeTransfer(msg.sender, _shares);
        }
    }

    
    function depositMultipleVault(
        address _vault,
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i = 0; i < _amounts.length; i++) {
            require(_amounts[i] > 0, ""!_amounts"");
            IERC20(_tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);
            IERC20(_tokens[i]).safeApprove(_vault, 0);
            IERC20(_tokens[i]).safeApprove(_vault, _amounts[i]);
        }
        uint256 _shares = IVault(_vault).depositMultiple(_tokens, _amounts);
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_vault).safeApprove(_gauge, 0);
            IERC20(_vault).safeApprove(_gauge, _shares);
            ILiquidityGaugeV2(_gauge).deposit(_shares);
            IERC20(_gauge).safeTransfer(msg.sender, _shares);
        } else {
            IERC20(_vault).safeTransfer(msg.sender, _shares);
        }
    }

    function withdrawVault(
        address _vault,
        address _toToken,
        uint256 _amount
    )
        external
    {
        address _gauge = IVault(_vault).gauge();
        if (_gauge != address(0)) {
            IERC20(_gauge).safeTransferFrom(msg.sender, address(this), _amount);
            ILiquidityGaugeV2(_gauge).withdraw(_amount);
            IVault(_vault).withdraw(IERC20(_vault).balanceOf(address(this)), _toToken);
            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));
        } else {
            IERC20(_vault).safeTransferFrom(msg.sender, address(this), _amount);
            IVault(_vault).withdraw(_amount, _toToken);
            IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)));
        }
    }
}",787.0,0,0,"### **[M-01] VaultHelper deposits don't work with fee-on transfer tokens**

**Report Description**:
The `VaultHelper` contract's `depositVault()` and `depositMultipleVault()` functions transfer `_amount` of tokens to the contract using `IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);`. However, some ERC20 tokens, such as fee-on-transfer tokens, deduct a fee during the transfer, resulting in less than `_amount` being received by the contract. When the contract subsequently calls `IVault(_vault).deposit(_token, _amount);`, it attempts to deposit the full `_amount`, which may exceed the actual balance in the contract, causing the transaction to revert. This issue can lead to failed transactions and user frustration, especially when interacting with fee-on-transfer tokens.

**Match in Response List**:
Matches with the issue titled **""Token Balance Assumptions""**.

**Validation**:
**Correct**. The response accurately identifies the issue with token balance assumptions, specifically mentioning fee-on-transfer tokens. It correctly explains that the contract assumes the token balance after transfer will match the expected amount, which is not true for fee-on-transfer tokens. This aligns with the issue described in the report and highlights the need for handling such tokens appropriately.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[M-01] VaultHelper deposits don't work with fee-on transfer tokens**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- *None*

---

The response list effectively covers the issue related to fee-on-transfer tokens, demonstrating a good understanding of the risks associated with token balance assumptions in Solidity smart contracts.",1,0,0,12,"Here is a list of vulnerabilities and potential issues in the provided smart contract:

---

### 1. **Reentrancy Risk**
   - The contract interacts with external contracts (e.g., `IVault`, `ILiquidityGaugeV2`) and transfers tokens using `safeTransfer` and `safeTransferFrom`. These functions call external contracts, which could potentially execute malicious code and re-enter the contract.
   - Example: In `withdrawVault`, the contract transfers tokens to `msg.sender` after interacting with external contracts, which could allow for reentrancy attacks.

---

### 2. **Uninitialized External Calls**
   - The contract does not validate the addresses of `_vault`, `_gauge`, or `_token` before interacting with them. If these addresses are malicious or uninitialized, the contract could behave unexpectedly or lose funds.
   - Example: In `depositVault`, `IVault(_vault).deposit(_token, _amount)` is called without verifying that `_vault` is a valid contract.

---

### 3. **Approval Race Condition**
   - The contract uses `safeApprove` with a zero approval before setting a new approval. While this mitigates some issues with the ERC20 `approve` function, it does not fully eliminate the risk of race conditions if the `approve` function is called multiple times in quick succession.
   - Example: In `depositVault`, `IERC20(_token).safeApprove(_vault, 0)` followed by `IERC20(_token).safeApprove(_vault, _amount)` could still be vulnerable to race conditions.

---

### 4. **Lack of Input Validation**
   - The contract does not validate the lengths of arrays in `depositMultipleVault`. While the `require` statement ensures `_tokens.length == _amounts.length`, it does not check if the arrays are empty or if the tokens are valid.
   - Example: If `_tokens` or `_amounts` are empty arrays, the contract will still proceed, potentially leading to unexpected behavior.

---

### 5. **Integer Overflow/Underflow**
   - The contract uses `uint256` for amounts but does not explicitly handle potential overflow/underflow issues. While Solidity 0.8.x introduced built-in overflow/underflow checks, this contract uses Solidity 0.6.12, which does not have these protections.
   - Example: In `depositMultipleVault`, if `_amounts[i]` is extremely large, it could lead to overflow issues during calculations.

---

### 6. **Unchecked Return Values**
   - The contract assumes that external calls (e.g., `IVault.deposit`, `ILiquidityGaugeV2.deposit`) will succeed. If these calls fail or return unexpected values, the contract could behave incorrectly.
   - Example: In `depositVault`, the return value of `IVault(_vault).deposit(_token, _amount)` is not checked for errors.

---

### 7. **Token Locking**
   - The contract does not handle cases where tokens might be locked in the contract due to failed transactions or unexpected behavior. For example, if an external call fails, tokens could remain in the contract indefinitely.
   - Example: In `withdrawVault`, if `IVault(_vault).withdraw` fails, the tokens could be locked in the contract.

---

### 8. **Gas Limit Issues**
   - The `depositMultipleVault` function iterates over arrays of tokens and amounts. If the arrays are too large, the function could exceed the gas limit, causing the transaction to fail.
   - Example: If `_tokens.length` is very large, the loop in `depositMultipleVault` could consume excessive gas.

---

### 9. **Improper Token Transfer**
   - The contract transfers tokens to `msg.sender` without ensuring that the recipient can handle the tokens. If `msg.sender` is a contract that does not implement the ERC20 `transfer` function correctly, the transfer could fail.
   - Example: In `withdrawVault`, `IERC20(_toToken).safeTransfer(msg.sender, IERC20(_toToken).balanceOf(address(this)))` assumes that `msg.sender` can receive tokens.

---

### 10. **Lack of Access Control**
   - The contract does not implement any access control mechanisms. Any user can call the functions, which could lead to misuse or exploitation.
   - Example: Any user can call `depositVault` or `withdrawVault` without restrictions.

---

### 11. **Inconsistent Gauge Handling**
   - The contract checks if `_gauge` is `address(0)` but does not handle cases where `_gauge` is a non-zero address but not a valid gauge contract. This could lead to unexpected behavior or errors.
   - Example: In `depositVault`, if `_gauge` is a non-zero address but not a valid gauge, the call to `ILiquidityGaugeV2(_gauge).deposit(_shares)` could fail.

---

### 12. **Token Balance Assumptions**
   - The contract assumes that the token balances after transfers and deposits will match the expected amounts. However, some tokens (e.g., fee-on-transfer tokens) could have different balances than expected.
   - Example: In `withdrawVault`, the contract assumes that `IERC20(_toToken).balanceOf(address(this))` will match the expected withdrawal amount, which may not be true for fee-on-transfer tokens.

---

These vulnerabilities highlight the need for careful validation, error handling, and security practices in smart contract development.","```
1. Token Balance Assumptions
```",0.0833
Manger.sol,"// SPDX-License-Identifier: MIT
// solhint-disable max-states-count
// solhint-disable var-name-mixedcase

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IHarvester.sol"";
import ""./interfaces/IManager.sol"";
import ""./interfaces/IStrategy.sol"";
import ""./interfaces/IVault.sol"";

/**
 * @title Manager
 * @notice This contract serves as the central point for governance-voted
 * variables. Fees and permissioned addresses are stored and referenced in
 * this contract only.
 */
contract Manager is IManager {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant PENDING_STRATEGIST_TIMELOCK = 7 days;
    uint256 public constant MAX_TOKENS = 256;

    address public immutable override yaxis;

    bool public override halted;

    address public override governance;
    address public override harvester;
    address public override insurancePool;
    address public override stakingPool;
    address public override strategist;
    address public override pendingStrategist;
    address public override treasury;

    // The following fees are all mutable.
    // They are updated by governance (community vote).
    uint256 public override insuranceFee;
    uint256 public override insurancePoolFee;
    uint256 public override stakingPoolShareFee;
    uint256 public override treasuryFee;
    uint256 public override withdrawalProtectionFee;


    uint256 private setPendingStrategistTime;

    // Governance must first allow the following properties before
    // the strategist can make use of them
    mapping(address => bool) public override allowedControllers;
    mapping(address => bool) public override allowedConverters;
    mapping(address => bool) public override allowedStrategies;
    mapping(address => bool) public override allowedTokens;
    mapping(address => bool) public override allowedVaults;

    // vault => controller
    mapping(address => address) public override controllers;
    // vault => tokens[]
    mapping(address => address[]) public override tokens;
    // token => vault
    mapping(address => address) public override vaults;

    event AllowedController(
        address indexed _controller,
        bool _allowed
    );
    event AllowedConverter(
        address indexed _converter,
        bool _allowed
    );
    event AllowedStrategy(
        address indexed _strategy,
        bool _allowed
    );
    event AllowedToken(
        address indexed _token,
        bool _allowed
    );
    event AllowedVault(
        address indexed _vault,
        bool _allowed
    );
    event Halted();
    event SetController(
        address indexed _vault,
        address indexed _controller
    );
    event SetGovernance(
        address indexed _governance
    );
    event SetPendingStrategist(
        address indexed _strategist
    );
    event SetStrategist(
        address indexed _strategist
    );
    event TokenAdded(
        address indexed _vault,
        address indexed _token
    );
    event TokenRemoved(
        address indexed _vault,
        address indexed _token
    );

    /**
     * @param _yaxis The address of the YAX token
     */
    constructor(
        address _yaxis
    )
        public
    {
        require(_yaxis != address(0), ""!_yaxis"");
        yaxis = _yaxis;
        governance = msg.sender;
        strategist = msg.sender;
        harvester = msg.sender;
        treasury = msg.sender;
        stakingPoolShareFee = 2000;
        treasuryFee = 500;
        withdrawalProtectionFee = 10;
    }

    /**
     * GOVERNANCE-ONLY FUNCTIONS
     */

    /**
     * @notice Sets the permission for the given controller
     * @param _controller The address of the controller
     * @param _allowed The status of if it is allowed
     */
    function setAllowedController(
        address _controller,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IController(_controller).manager()) == address(this), ""!manager"");
        allowedControllers[_controller] = _allowed;
        emit AllowedController(_controller, _allowed);
    }

    /**
     * @notice Sets the permission for the given converter
     * @param _converter The address of the converter
     * @param _allowed The status of if it is allowed
     */
    function setAllowedConverter(
        address _converter,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IConverter(_converter).manager()) == address(this), ""!manager"");
        allowedConverters[_converter] = _allowed;
        emit AllowedConverter(_converter, _allowed);
    }

    /**
     * @notice Sets the permission for the given strategy
     * @param _strategy The address of the strategy
     * @param _allowed The status of if it is allowed
     */
    function setAllowedStrategy(
        address _strategy,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IStrategy(_strategy).manager()) == address(this), ""!manager"");
        allowedStrategies[_strategy] = _allowed;
        emit AllowedStrategy(_strategy, _allowed);
    }

    /**
     * @notice Sets the permission for the given token
     * @param _token The address of the token
     * @param _allowed The status of if it is allowed
     */
    function setAllowedToken(
        address _token,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        allowedTokens[_token] = _allowed;
        emit AllowedToken(_token, _allowed);
    }

    /**
     * @notice Sets the permission for the given vault
     * @param _vault The address of the vault
     * @param _allowed The status of if it is allowed
     */
    function setAllowedVault(
        address _vault,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IVault(_vault).manager()) == address(this), ""!manager"");
        allowedVaults[_vault] = _allowed;
        emit AllowedVault(_vault, _allowed);
    }

    /**
     * @notice Sets the governance address
     * @param _governance The address of the governance
     */
    function setGovernance(
        address _governance
    )
        external
        notHalted
        onlyGovernance
    {
        governance = _governance;
        emit SetGovernance(_governance);
    }

    /**
     * @notice Sets the harvester address
     * @param _harvester The address of the harvester
     */
    function setHarvester(
        address _harvester
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IHarvester(_harvester).manager()) == address(this), ""!manager"");
        harvester = _harvester;
    }

    /**
     * @notice Sets the insurance fee
     * @dev Throws if setting fee over 1%
     * @param _insuranceFee The value for the insurance fee
     */
    function setInsuranceFee(
        uint256 _insuranceFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insuranceFee <= 100, ""_insuranceFee over 1%"");
        insuranceFee = _insuranceFee;
    }

    /**
     * @notice Sets the insurance pool address
     * @param _insurancePool The address of the insurance pool
     */
    function setInsurancePool(
        address _insurancePool
    )
        external
        notHalted
        onlyGovernance
    {
        insurancePool = _insurancePool;
    }

    /**
     * @notice Sets the insurance pool fee
     * @dev Throws if setting fee over 20%
     * @param _insurancePoolFee The value for the insurance pool fee
     */
    function setInsurancePoolFee(
        uint256 _insurancePoolFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insurancePoolFee <= 2000, ""_insurancePoolFee over 20%"");
        insurancePoolFee = _insurancePoolFee;
    }

    /**
     * @notice Sets the staking pool address
     * @param _stakingPool The address of the staking pool
     */
    function setStakingPool(
        address _stakingPool
    )
        external
        notHalted
        onlyGovernance
    {
        stakingPool = _stakingPool;
    }

    /**
     * @notice Sets the staking pool share fee
     * @dev Throws if setting fee over 50%
     * @param _stakingPoolShareFee The value for the staking pool fee
     */
    function setStakingPoolShareFee(
        uint256 _stakingPoolShareFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_stakingPoolShareFee <= 5000, ""_stakingPoolShareFee over 50%"");
        stakingPoolShareFee = _stakingPoolShareFee;
    }

    /**
     * @notice Sets the pending strategist and the timestamp
     * @param _strategist The address of the strategist
     */
    function setStrategist(
        address _strategist
    )
        external
        notHalted
        onlyGovernance
    {
        require(_strategist != address(0), ""!_strategist"");
        pendingStrategist = _strategist;
        // solhint-disable-next-line not-rely-on-time
        setPendingStrategistTime = block.timestamp;
        emit SetPendingStrategist(_strategist);
    }

    /**
     * @notice Sets the treasury address
     * @param _treasury The address of the treasury
     */
    function setTreasury(
        address _treasury
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasury != address(0), ""!_treasury"");
        treasury = _treasury;
    }

    /**
     * @notice Sets the treasury fee
     * @dev Throws if setting fee over 20%
     * @param _treasuryFee The value for the treasury fee
     */
    function setTreasuryFee(
        uint256 _treasuryFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasuryFee <= 2000, ""_treasuryFee over 20%"");
        treasuryFee = _treasuryFee;
    }

    /**
     * @notice Sets the withdrawal protection fee
     * @dev Throws if setting fee over 1%
     * @param _withdrawalProtectionFee The value for the withdrawal protection fee
     */
    function setWithdrawalProtectionFee(
        uint256 _withdrawalProtectionFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_withdrawalProtectionFee <= 100, ""_withdrawalProtectionFee over 1%"");
        withdrawalProtectionFee = _withdrawalProtectionFee;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Updates the strategist to the pending strategist
     * @dev This can only be called after the pending strategist timelock (7 days)
     */
    function acceptStrategist()
        external
        notHalted
    {
        require(msg.sender == pendingStrategist, ""!pendingStrategist"");
        // solhint-disable-next-line not-rely-on-time
        require(block.timestamp > setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK), ""PENDING_STRATEGIST_TIMELOCK"");
        delete pendingStrategist;
        delete setPendingStrategistTime;
        strategist = msg.sender;
        emit SetStrategist(msg.sender);
    }

    /**
     * @notice Adds a token to be able to be deposited for a given vault
     * @param _vault The address of the vault
     * @param _token The address of the token
     */
    function addToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        require(allowedTokens[_token], ""!allowedTokens"");
        require(allowedVaults[_vault], ""!allowedVaults"");
        require(tokens[_vault].length < MAX_TOKENS, "">tokens"");
        require(vaults[_token] == address(0), ""!_token"");
        vaults[_token] = _vault;
        tokens[_vault].push(_token);
        emit TokenAdded(_vault, _token);
    }

    /**
     * @notice Allows the strategist to pull tokens out of this contract
     * @dev This contract should never hold tokens
     * @param _token The address of the token
     * @param _amount The amount to withdraw
     * @param _to The address to send to
     */
    function recoverToken(
        IERC20 _token,
        uint256 _amount,
        address _to
    )
        external
        notHalted
        onlyStrategist
    {
        _token.safeTransfer(_to, _amount);
    }

    /**
     * @notice Removes a token from being able to be deposited for a given vault
     * @param _vault The address of the vault
     * @param _token The address of the token
     */
    function removeToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        uint256 k = tokens[_vault].length;
        uint256 index;
        bool found;

        for (uint i = 0; i < k; i++) {
            if (tokens[_vault][i] == _token) {
                index = i;
                found = true;
                break;
            }
        }

        // TODO: Verify added check
        if (found) {
            tokens[_vault][index] = tokens[_vault][k-1];
            tokens[_vault].pop();
            delete vaults[_token];
            emit TokenRemoved(_vault, _token);
        }
    }

    /**
     * @notice Sets the vault address for a controller
     * @param _vault The address of the vault
     * @param _controller The address of the controller
     */
    function setController(
        address _vault,
        address _controller
    )
        external
        notHalted
        onlyStrategist
    {
        require(allowedVaults[_vault], ""!_vault"");
        require(allowedControllers[_controller], ""!_controller"");
        controllers[_vault] = _controller;
        emit SetController(_vault, _controller);
    }

    /**
     * @notice Sets the protocol as halted, disallowing all deposits forever
     * @dev Withdraws will still work, allowing users to exit the protocol
     */
    function setHalted()
        external
        notHalted
        onlyStrategist
    {
        halted = true;
        emit Halted();
    }

    /**
     * EXTERNAL VIEW FUNCTIONS
     */

    /**
     * @notice Returns an array of token addresses for a given vault
     * @param _vault The address of the vault
     */
    function getTokens(
        address _vault
    )
        external
        view
        override
        returns (address[] memory)
    {
        return tokens[_vault];
    }

    /**
     * @notice Returns a tuple of:
     *     YAXIS token address,
     *     Treasury address,
     *     Treasury fee
     */
    function getHarvestFeeInfo()
        external
        view
        override
        returns (
            address,
            address,
            uint256
        )
    {
        return (
            yaxis,
            treasury,
            treasuryFee
        );
    }

    modifier notHalted() {
        require(!halted, ""halted"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""!governance"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == strategist, ""!strategist"");
        _;
    }
}",3492.0,583.0,"[M-02] ERC20 return values not checked
The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return `false` instead.
The `Manager.recoverToken` function does not check the return value of this function.
Tokens that don't actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.
  [M-09] token -> vault mapping can be overwritten
One vault can have many tokens, but each token should only be assigned to a single vault. The Manager contract keeps a mapping of tokens to vaults in the `vaults[_token] => _vault` map, and a mapping of vault to tokens in tokens[vault] => token[].
The `addToken` function can assign any token to a single vault and allows overwriting an existing vaults[_token] map entry with a different vault. This indirectly disassociates the previous vault for the token. Note that the previous vault's tokens[_previousVault] map still contains the token.
  [M-13] `manager.allowedVaults` check missing for add/remove strategy
The `manager.allowedVaults` check is missing for add/remove strategy like how it is used in reorderStrategies(). This will allow a strategist to accidentally/maliciously add/remove strategies on unauthorized vaults.
Given the critical access control that is missing on vaults here, this is classified as medium severity.",3.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IHarvester.sol"";
import ""./interfaces/IManager.sol"";
import ""./interfaces/IStrategy.sol"";
import ""./interfaces/IVault.sol"";


contract Manager is IManager {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant PENDING_STRATEGIST_TIMELOCK = 7 days;
    uint256 public constant MAX_TOKENS = 256;

    address public immutable override yaxis;

    bool public override halted;

    address public override governance;
    address public override harvester;
    address public override insurancePool;
    address public override stakingPool;
    address public override strategist;
    address public override pendingStrategist;
    address public override treasury;

    
    
    uint256 public override insuranceFee;
    uint256 public override insurancePoolFee;
    uint256 public override stakingPoolShareFee;
    uint256 public override treasuryFee;
    uint256 public override withdrawalProtectionFee;


    uint256 private setPendingStrategistTime;

    
    
    mapping(address => bool) public override allowedControllers;
    mapping(address => bool) public override allowedConverters;
    mapping(address => bool) public override allowedStrategies;
    mapping(address => bool) public override allowedTokens;
    mapping(address => bool) public override allowedVaults;

    
    mapping(address => address) public override controllers;
    
    mapping(address => address[]) public override tokens;
    
    mapping(address => address) public override vaults;

    event AllowedController(
        address indexed _controller,
        bool _allowed
    );
    event AllowedConverter(
        address indexed _converter,
        bool _allowed
    );
    event AllowedStrategy(
        address indexed _strategy,
        bool _allowed
    );
    event AllowedToken(
        address indexed _token,
        bool _allowed
    );
    event AllowedVault(
        address indexed _vault,
        bool _allowed
    );
    event Halted();
    event SetController(
        address indexed _vault,
        address indexed _controller
    );
    event SetGovernance(
        address indexed _governance
    );
    event SetPendingStrategist(
        address indexed _strategist
    );
    event SetStrategist(
        address indexed _strategist
    );
    event TokenAdded(
        address indexed _vault,
        address indexed _token
    );
    event TokenRemoved(
        address indexed _vault,
        address indexed _token
    );

    
    constructor(
        address _yaxis
    )
        public
    {
        require(_yaxis != address(0), ""!_yaxis"");
        yaxis = _yaxis;
        governance = msg.sender;
        strategist = msg.sender;
        harvester = msg.sender;
        treasury = msg.sender;
        stakingPoolShareFee = 2000;
        treasuryFee = 500;
        withdrawalProtectionFee = 10;
    }

    

    
    function setAllowedController(
        address _controller,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IController(_controller).manager()) == address(this), ""!manager"");
        allowedControllers[_controller] = _allowed;
        emit AllowedController(_controller, _allowed);
    }

    
    function setAllowedConverter(
        address _converter,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IConverter(_converter).manager()) == address(this), ""!manager"");
        allowedConverters[_converter] = _allowed;
        emit AllowedConverter(_converter, _allowed);
    }

    
    function setAllowedStrategy(
        address _strategy,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IStrategy(_strategy).manager()) == address(this), ""!manager"");
        allowedStrategies[_strategy] = _allowed;
        emit AllowedStrategy(_strategy, _allowed);
    }

    
    function setAllowedToken(
        address _token,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        allowedTokens[_token] = _allowed;
        emit AllowedToken(_token, _allowed);
    }

    
    function setAllowedVault(
        address _vault,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IVault(_vault).manager()) == address(this), ""!manager"");
        allowedVaults[_vault] = _allowed;
        emit AllowedVault(_vault, _allowed);
    }

    
    function setGovernance(
        address _governance
    )
        external
        notHalted
        onlyGovernance
    {
        governance = _governance;
        emit SetGovernance(_governance);
    }

    
    function setHarvester(
        address _harvester
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IHarvester(_harvester).manager()) == address(this), ""!manager"");
        harvester = _harvester;
    }

    
    function setInsuranceFee(
        uint256 _insuranceFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insuranceFee <= 100, ""_insuranceFee over 1%"");
        insuranceFee = _insuranceFee;
    }

    
    function setInsurancePool(
        address _insurancePool
    )
        external
        notHalted
        onlyGovernance
    {
        insurancePool = _insurancePool;
    }

    
    function setInsurancePoolFee(
        uint256 _insurancePoolFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insurancePoolFee <= 2000, ""_insurancePoolFee over 20%"");
        insurancePoolFee = _insurancePoolFee;
    }

    
    function setStakingPool(
        address _stakingPool
    )
        external
        notHalted
        onlyGovernance
    {
        stakingPool = _stakingPool;
    }

    
    function setStakingPoolShareFee(
        uint256 _stakingPoolShareFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_stakingPoolShareFee <= 5000, ""_stakingPoolShareFee over 50%"");
        stakingPoolShareFee = _stakingPoolShareFee;
    }

    
    function setStrategist(
        address _strategist
    )
        external
        notHalted
        onlyGovernance
    {
        require(_strategist != address(0), ""!_strategist"");
        pendingStrategist = _strategist;
        
        setPendingStrategistTime = block.timestamp;
        emit SetPendingStrategist(_strategist);
    }

    
    function setTreasury(
        address _treasury
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasury != address(0), ""!_treasury"");
        treasury = _treasury;
    }

    
    function setTreasuryFee(
        uint256 _treasuryFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasuryFee <= 2000, ""_treasuryFee over 20%"");
        treasuryFee = _treasuryFee;
    }

    
    function setWithdrawalProtectionFee(
        uint256 _withdrawalProtectionFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_withdrawalProtectionFee <= 100, ""_withdrawalProtectionFee over 1%"");
        withdrawalProtectionFee = _withdrawalProtectionFee;
    }

    

    
    function acceptStrategist()
        external
        notHalted
    {
        require(msg.sender == pendingStrategist, ""!pendingStrategist"");
        
        require(block.timestamp > setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK), ""PENDING_STRATEGIST_TIMELOCK"");
        delete pendingStrategist;
        delete setPendingStrategistTime;
        strategist = msg.sender;
        emit SetStrategist(msg.sender);
    }

    
    function addToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        require(allowedTokens[_token], ""!allowedTokens"");
        require(allowedVaults[_vault], ""!allowedVaults"");
        require(tokens[_vault].length < MAX_TOKENS, "">tokens"");
        require(vaults[_token] == address(0), ""!_token"");
        vaults[_token] = _vault;
        tokens[_vault].push(_token);
        emit TokenAdded(_vault, _token);
    }

    
    function recoverToken(
        IERC20 _token,
        uint256 _amount,
        address _to
    )
        external
        notHalted
        onlyStrategist
    {
        _token.safeTransfer(_to, _amount);
    }

    
    function removeToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        uint256 k = tokens[_vault].length;
        uint256 index;
        bool found;

        for (uint i = 0; i < k; i++) {
            if (tokens[_vault][i] == _token) {
                index = i;
                found = true;
                break;
            }
        }

        
        if (found) {
            tokens[_vault][index] = tokens[_vault][k-1];
            tokens[_vault].pop();
            delete vaults[_token];
            emit TokenRemoved(_vault, _token);
        }
    }

    
    function setController(
        address _vault,
        address _controller
    )
        external
        notHalted
        onlyStrategist
    {
        require(allowedVaults[_vault], ""!_vault"");
        require(allowedControllers[_controller], ""!_controller"");
        controllers[_vault] = _controller;
        emit SetController(_vault, _controller);
    }

    
    function setHalted()
        external
        notHalted
        onlyStrategist
    {
        halted = true;
        emit Halted();
    }

    

    
    function getTokens(
        address _vault
    )
        external
        view
        override
        returns (address[] memory)
    {
        return tokens[_vault];
    }

    
    function getHarvestFeeInfo()
        external
        view
        override
        returns (
            address,
            address,
            uint256
        )
    {
        return (
            yaxis,
            treasury,
            treasuryFee
        );
    }

    modifier notHalted() {
        require(!halted, ""halted"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""!governance"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == strategist, ""!strategist"");
        _;
    }
}",2388.0,0,3,"### **Output**

---

#### **[M-02] ERC20 return values not checked**

**Report Description**:
The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer fails but return `false` instead. The `Manager.recoverToken` function does not check the return value of this function. Tokens that don't actually perform the transfer and return `false` are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.

**Match in Response List**:
Matches with the issue titled **""Unchecked External Calls""**.

**Validation**:
**Correct**. The response accurately identifies the issue with unchecked external calls in the `recoverToken` function. It correctly explains the risks associated with not validating return values from external `transfer` calls, which aligns with Solidity best practices for secure contract interactions.

---

#### **[M-09] token -> vault mapping can be overwritten**

**Report Description**:
One vault can have many tokens, but each token should only be assigned to a single vault. The `Manager` contract keeps a mapping of tokens to vaults in the `vaults[_token] => _vault` map, and a mapping of vault to tokens in `tokens[vault] => token[]`. The `addToken` function can assign any token to a single vault and allows overwriting an existing `vaults[_token]` map entry with a different vault. This indirectly disassociates the previous vault for the token. Note that the previous vault's `tokens[_previousVault]` map still contains the token.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of token-to-vault mapping overwrites. This is a critical oversight, as it could lead to inconsistent state management and potential security vulnerabilities.

---

#### **[M-13] `manager.allowedVaults` check missing for add/remove strategy**

**Report Description**:
The `manager.allowedVaults` check is missing for add/remove strategy like how it is used in `reorderStrategies()`. This will allow a strategist to accidentally/maliciously add/remove strategies on unauthorized vaults. Given the critical access control that is missing on vaults here, this is classified as medium severity.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the missing `allowedVaults` check for add/remove strategy functions. This is a significant access control issue that could lead to unauthorized modifications to vault strategies.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[M-02] ERC20 return values not checked**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[M-09] token -> vault mapping can be overwritten**
- **[M-13] `manager.allowedVaults` check missing for add/remove strategy**

---

### **Conclusion**

The response list covers some critical vulnerabilities, such as unchecked external calls, but misses other significant issues like token-to-vault mapping overwrites and missing access control checks. Addressing these gaps would improve the overall security and robustness of the smart contract.",1,0,2,20,"Here is a list of vulnerabilities and potential issues in the provided smart contract:

---

### 1. **Lack of Input Validation**
   - **Issue**: Some functions do not validate input parameters properly, which could lead to unexpected behavior.
     - Example: `setGovernance`, `setHarvester`, `setInsurancePool`, `setStakingPool`, and `setTreasury` do not check if the input address is `address(0)`.
     - Example: `addToken` does not verify if `_vault` and `_token` are valid addresses.
   - **Impact**: Invalid or malicious addresses could be set, leading to potential loss of funds or control.

---

### 2. **Reentrancy Risk**
   - **Issue**: The `recoverToken` function transfers tokens to an external address without using the `checks-effects-interactions` pattern.
   - **Impact**: If the `_to` address is a malicious contract, it could reenter the `recoverToken` function and potentially exploit the contract.

---

### 3. **Unbounded Loops**
   - **Issue**: The `removeToken` function iterates over the `tokens[_vault]` array, which could grow up to `MAX_TOKENS` (256). This could lead to high gas costs or out-of-gas errors.
   - **Impact**: If the array becomes too large, transactions could fail, making it impossible to remove tokens.

---

### 4. **Pending Strategist Timelock Bypass**
   - **Issue**: The `acceptStrategist` function does not prevent the pending strategist from calling the function multiple times if the timelock condition is met.
   - **Impact**: A malicious pending strategist could potentially exploit this to gain control multiple times.

---

### 5. **Missing Event Emission**
   - **Issue**: The `setHarvester` function does not emit an event after updating the `harvester` address.
   - **Impact**: Lack of transparency and difficulty in tracking changes to the contract state.

---

### 6. **Centralization Risks**
   - **Issue**: The contract relies heavily on the `governance` and `strategist` roles, which have significant control over the contract.
     - Example: `governance` can change `governance`, `strategist`, `harvester`, `insurancePool`, `stakingPool`, and `treasury`.
     - Example: `strategist` can halt the contract, recover tokens, and manage vaults and controllers.
   - **Impact**: If these roles are compromised, the entire contract could be controlled by an attacker.

---

### 7. **Uninitialized Variables**
   - **Issue**: The `insuranceFee` and `insurancePoolFee` variables are not initialized in the constructor, but they are used in the contract.
   - **Impact**: These variables could have unexpected values, leading to incorrect fee calculations.

---

### 8. **Lack of Access Control for Key Functions**
   - **Issue**: Some critical functions, such as `setHalted`, are only accessible by the `strategist` role, which could be a single point of failure.
   - **Impact**: If the `strategist` is compromised, the contract could be halted, disrupting operations.

---

### 9. **Potential Front-Running**
   - **Issue**: Functions like `setStrategist` and `acceptStrategist` are susceptible to front-running attacks.
     - Example: A malicious actor could monitor the mempool and front-run the `acceptStrategist` transaction to take control of the `strategist` role.
   - **Impact**: Loss of control over the `strategist` role.

---

### 10. **Fee Validation Issues**
   - **Issue**: The fee-setting functions (e.g., `setInsuranceFee`, `setTreasuryFee`) do not enforce a minimum fee, only a maximum.
   - **Impact**: Fees could be set to zero, potentially reducing revenue or incentives.

---

### 11. **Token Recovery Risks**
   - **Issue**: The `recoverToken` function allows the `strategist` to transfer any ERC20 token to any address without restrictions.
   - **Impact**: A malicious or compromised `strategist` could drain the contract of its tokens.

---

### 12. **Lack of Fallback Mechanism**
   - **Issue**: If the `governance` or `strategist` roles are lost or compromised, there is no mechanism to recover them.
   - **Impact**: Permanent loss of control over the contract.

---

### 13. **Unchecked External Calls**
   - **Issue**: The contract makes external calls to interfaces (e.g., `IController`, `IConverter`, `IStrategy`, `IVault`, `IHarvester`) without checking if the call succeeded.
   - **Impact**: If the external call fails, the contract could enter an inconsistent state.

---

### 14. **Storage Collision Risk**
   - **Issue**: The contract uses multiple mappings and arrays, which could lead to storage collisions if not managed carefully.
   - **Impact**: Unexpected behavior or data corruption.

---

### 15. **Gas Limit Issues**
   - **Issue**: Functions like `addToken` and `removeToken` could run out of gas if the `tokens[_vault]` array becomes too large.
   - **Impact**: Transactions could fail, making it impossible to manage tokens.

---

### 16. **Inconsistent State Management**
   - **Issue**: The `removeToken` function does not check if the `_token` exists in the `tokens[_vault]` array before attempting to remove it.
   - **Impact**: If the token is not found, the function will still emit a `TokenRemoved` event, leading to inconsistent state tracking.

---

### 17. **Missing Functionality**
   - **Issue**: The contract does not include functionality to remove controllers, converters, strategies, or vaults once they are allowed.
   - **Impact**: If a malicious or faulty contract is allowed, it cannot be removed, leading to potential vulnerabilities.

---

### 18. **No Emergency Stop Mechanism**
   - **Issue**: The `setHalted` function is the only way to halt the contract, and it is irreversible.
   - **Impact**: If the contract is halted accidentally or maliciously, it cannot be resumed.

---

### 19. **Potential Integer Overflow**
   - **Issue**: The contract uses `SafeMath`, but some calculations (e.g., `setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK)`) could still lead to overflow if not handled properly.
   - **Impact**: Unexpected behavior or vulnerabilities in time-based logic.

---

### 20. **Lack of Upgradeability**
   - **Issue**: The contract does not include any upgradeability mechanism, making it impossible to fix bugs or add new features.
   - **Impact**: If a vulnerability is discovered, the contract cannot be patched without deploying a new version.

---

These vulnerabilities highlight potential risks in the contract's design and implementation. Addressing these issues would improve the contract's security and robustness.","```
1. Unchecked External Calls
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the rank of the true positive**:
   - The true positive is ""Unchecked External Calls"".
   - In the ranked list of predictions, ""Unchecked External Calls"" appears at rank **13**.

2. **Calculate the precision at rank 13 (\( P@13 \))**:
   - Precision at rank \( k \) is calculated as the number of true positives up to rank \( k \) divided by \( k \).
   - Since there is only one true positive up to rank 13, \( P@13 = \frac{1}{13} \approx 0.0769 \).

3. **Compute the Average Precision (AP)**:
   - Since there is only one true positive, the AP is simply the precision at the rank where the true positive appears.
   - Therefore, \( AP = 0.0769 \).

**Output**:
```
0.0769
```"
,,,,,,,,8,5,,2,3,9,72,,,
