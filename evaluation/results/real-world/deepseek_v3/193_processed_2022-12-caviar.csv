nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
Pair.sol,"// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import ""solmate/tokens/ERC20.sol"";
import ""solmate/tokens/ERC721.sol"";
import ""solmate/utils/MerkleProofLib.sol"";
import ""solmate/utils/SafeTransferLib.sol"";
import ""openzeppelin/utils/math/Math.sol"";

import ""./LpToken.sol"";
import ""./Caviar.sol"";

/// @title Pair
/// @author out.eth (@outdoteth)
/// @notice A pair of an NFT and a base token that can be used to create and trade fractionalized NFTs.
contract Pair is ERC20, ERC721TokenReceiver {
    using SafeTransferLib for address;
    using SafeTransferLib for ERC20;

    uint256 public constant ONE = 1e18;
    uint256 public constant CLOSE_GRACE_PERIOD = 7 days;

    address public immutable nft;
    address public immutable baseToken; // address(0) for ETH
    bytes32 public immutable merkleRoot;
    LpToken public immutable lpToken;
    Caviar public immutable caviar;
    uint256 public closeTimestamp;

    event Add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);
    event Remove(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);
    event Buy(uint256 inputAmount, uint256 outputAmount);
    event Sell(uint256 inputAmount, uint256 outputAmount);
    event Wrap(uint256[] tokenIds);
    event Unwrap(uint256[] tokenIds);
    event Close(uint256 closeTimestamp);
    event Withdraw(uint256 tokenId);

    constructor(
        address _nft,
        address _baseToken,
        bytes32 _merkleRoot,
        string memory pairSymbol,
        string memory nftName,
        string memory nftSymbol
    ) ERC20(string.concat(nftName, "" fractional token""), string.concat(""f"", nftSymbol), 18) {
        nft = _nft;
        baseToken = _baseToken; // use address(0) for native ETH
        merkleRoot = _merkleRoot;
        lpToken = new LpToken(pairSymbol);
        caviar = Caviar(msg.sender);
    }

    // ************************ //
    //      Core AMM logic      //
    // ***********************  //

    /// @notice Adds liquidity to the pair.
    /// @param baseTokenAmount The amount of base tokens to add.
    /// @param fractionalTokenAmount The amount of fractional tokens to add.
    /// @param minLpTokenAmount The minimum amount of LP tokens to mint.
    /// @return lpTokenAmount The amount of LP tokens minted.
    function add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 minLpTokenAmount)
        public
        payable
        returns (uint256 lpTokenAmount)
    {
        // *** Checks *** //

        // check the token amount inputs are not zero
        require(baseTokenAmount > 0 && fractionalTokenAmount > 0, ""Input token amount is zero"");

        // check that correct eth input was sent - if the baseToken equals address(0) then native ETH is used
        require(baseToken == address(0) ? msg.value == baseTokenAmount : msg.value == 0, ""Invalid ether input"");

        // calculate the lp token shares to mint
        lpTokenAmount = addQuote(baseTokenAmount, fractionalTokenAmount);

        // check that the amount of lp tokens outputted is greater than the min amount
        require(lpTokenAmount >= minLpTokenAmount, ""Slippage: lp token amount out"");

        // *** Effects *** //

        // transfer fractional tokens in
        _transferFrom(msg.sender, address(this), fractionalTokenAmount);

        // *** Interactions *** //

        // mint lp tokens to sender
        lpToken.mint(msg.sender, lpTokenAmount);

        // transfer base tokens in if the base token is not ETH
        if (baseToken != address(0)) {
            // transfer base tokens in
            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), baseTokenAmount);
        }

        emit Add(baseTokenAmount, fractionalTokenAmount, lpTokenAmount);
    }

    /// @notice Removes liquidity from the pair.
    /// @param lpTokenAmount The amount of LP tokens to burn.
    /// @param minBaseTokenOutputAmount The minimum amount of base tokens to receive.
    /// @param minFractionalTokenOutputAmount The minimum amount of fractional tokens to receive.
    /// @return baseTokenOutputAmount The amount of base tokens received.
    /// @return fractionalTokenOutputAmount The amount of fractional tokens received.
    function remove(uint256 lpTokenAmount, uint256 minBaseTokenOutputAmount, uint256 minFractionalTokenOutputAmount)
        public
        returns (uint256 baseTokenOutputAmount, uint256 fractionalTokenOutputAmount)
    {
        // *** Checks *** //

        // calculate the output amounts
        (baseTokenOutputAmount, fractionalTokenOutputAmount) = removeQuote(lpTokenAmount);

        // check that the base token output amount is greater than the min amount
        require(baseTokenOutputAmount >= minBaseTokenOutputAmount, ""Slippage: base token amount out"");

        // check that the fractional token output amount is greater than the min amount
        require(fractionalTokenOutputAmount >= minFractionalTokenOutputAmount, ""Slippage: fractional token out"");

        // *** Effects *** //

        // transfer fractional tokens to sender
        _transferFrom(address(this), msg.sender, fractionalTokenOutputAmount);

        // *** Interactions *** //

        // burn lp tokens from sender
        lpToken.burn(msg.sender, lpTokenAmount);

        if (baseToken == address(0)) {
            // if base token is native ETH then send ether to sender
            msg.sender.safeTransferETH(baseTokenOutputAmount);
        } else {
            // transfer base tokens to sender
            ERC20(baseToken).safeTransfer(msg.sender, baseTokenOutputAmount);
        }

        emit Remove(baseTokenOutputAmount, fractionalTokenOutputAmount, lpTokenAmount);
    }

    /// @notice Buys fractional tokens from the pair.
    /// @param outputAmount The amount of fractional tokens to buy.
    /// @param maxInputAmount The maximum amount of base tokens to spend.
    /// @return inputAmount The amount of base tokens spent.
    function buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {
        // *** Checks *** //

        // check that correct eth input was sent - if the baseToken equals address(0) then native ETH is used
        require(baseToken == address(0) ? msg.value == maxInputAmount : msg.value == 0, ""Invalid ether input"");

        // calculate required input amount using xyk invariant
        inputAmount = buyQuote(outputAmount);

        // check that the required amount of base tokens is less than the max amount
        require(inputAmount <= maxInputAmount, ""Slippage: amount in"");

        // *** Effects *** //

        // transfer fractional tokens to sender
        _transferFrom(address(this), msg.sender, outputAmount);

        // *** Interactions *** //

        if (baseToken == address(0)) {
            // refund surplus eth
            uint256 refundAmount = maxInputAmount - inputAmount;
            if (refundAmount > 0) msg.sender.safeTransferETH(refundAmount);
        } else {
            // transfer base tokens in
            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);
        }

        emit Buy(inputAmount, outputAmount);
    }

    /// @notice Sells fractional tokens to the pair.
    /// @param inputAmount The amount of fractional tokens to sell.
    /// @param minOutputAmount The minimum amount of base tokens to receive.
    /// @return outputAmount The amount of base tokens received.
    function sell(uint256 inputAmount, uint256 minOutputAmount) public returns (uint256 outputAmount) {
        // *** Checks *** //

        // calculate output amount using xyk invariant
        outputAmount = sellQuote(inputAmount);

        // check that the outputted amount of fractional tokens is greater than the min amount
        require(outputAmount >= minOutputAmount, ""Slippage: amount out"");

        // *** Effects *** //

        // transfer fractional tokens from sender
        _transferFrom(msg.sender, address(this), inputAmount);

        // *** Interactions *** //

        if (baseToken == address(0)) {
            // transfer ether out
            msg.sender.safeTransferETH(outputAmount);
        } else {
            // transfer base tokens out
            ERC20(baseToken).safeTransfer(msg.sender, outputAmount);
        }

        emit Sell(inputAmount, outputAmount);
    }

    // ******************** //
    //      Wrap logic      //
    // ******************** //

    /// @notice Wraps NFTs into fractional tokens.
    /// @param tokenIds The ids of the NFTs to wrap.
    /// @param proofs The merkle proofs for the NFTs proving that they can be used in the pair.
    /// @return fractionalTokenAmount The amount of fractional tokens minted.
    function wrap(uint256[] calldata tokenIds, bytes32[][] calldata proofs)
        public
        returns (uint256 fractionalTokenAmount)
    {
        // *** Checks *** //

        // check that wrapping is not closed
        require(closeTimestamp == 0, ""Wrap: closed"");

        // check the tokens exist in the merkle root
        _validateTokenIds(tokenIds, proofs);

        // *** Effects *** //

        // mint fractional tokens to sender
        fractionalTokenAmount = tokenIds.length * ONE;
        _mint(msg.sender, fractionalTokenAmount);

        // *** Interactions *** //

        // transfer nfts from sender
        for (uint256 i = 0; i < tokenIds.length; i++) {
            ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);
        }

        emit Wrap(tokenIds);
    }

    /// @notice Unwraps fractional tokens into NFTs.
    /// @param tokenIds The ids of the NFTs to unwrap.
    /// @return fractionalTokenAmount The amount of fractional tokens burned.
    function unwrap(uint256[] calldata tokenIds) public returns (uint256 fractionalTokenAmount) {
        // *** Effects *** //

        // burn fractional tokens from sender
        fractionalTokenAmount = tokenIds.length * ONE;
        _burn(msg.sender, fractionalTokenAmount);

        // *** Interactions *** //

        // transfer nfts to sender
        for (uint256 i = 0; i < tokenIds.length; i++) {
            ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenIds[i]);
        }

        emit Unwrap(tokenIds);
    }

    // *********************** //
    //      NFT AMM logic      //
    // *********************** //

    /// @notice nftAdd Adds liquidity to the pair using NFTs.
    /// @param baseTokenAmount The amount of base tokens to add.
    /// @param tokenIds The ids of the NFTs to add.
    /// @param minLpTokenAmount The minimum amount of lp tokens to receive.
    /// @param proofs The merkle proofs for the NFTs.
    /// @return lpTokenAmount The amount of lp tokens minted.
    function nftAdd(
        uint256 baseTokenAmount,
        uint256[] calldata tokenIds,
        uint256 minLpTokenAmount,
        bytes32[][] calldata proofs
    ) public payable returns (uint256 lpTokenAmount) {
        // wrap the incoming NFTs into fractional tokens
        uint256 fractionalTokenAmount = wrap(tokenIds, proofs);

        // add liquidity using the fractional tokens and base tokens
        lpTokenAmount = add(baseTokenAmount, fractionalTokenAmount, minLpTokenAmount);
    }

    /// @notice Removes liquidity from the pair using NFTs.
    /// @param lpTokenAmount The amount of lp tokens to remove.
    /// @param minBaseTokenOutputAmount The minimum amount of base tokens to receive.
    /// @param tokenIds The ids of the NFTs to remove.
    /// @return baseTokenOutputAmount The amount of base tokens received.
    /// @return fractionalTokenOutputAmount The amount of fractional tokens received.
    function nftRemove(uint256 lpTokenAmount, uint256 minBaseTokenOutputAmount, uint256[] calldata tokenIds)
        public
        returns (uint256 baseTokenOutputAmount, uint256 fractionalTokenOutputAmount)
    {
        // remove liquidity and send fractional tokens and base tokens to sender
        (baseTokenOutputAmount, fractionalTokenOutputAmount) =
            remove(lpTokenAmount, minBaseTokenOutputAmount, tokenIds.length * ONE);

        // unwrap the fractional tokens into NFTs and send to sender
        unwrap(tokenIds);
    }

    /// @notice Buys NFTs from the pair using base tokens.
    /// @param tokenIds The ids of the NFTs to buy.
    /// @param maxInputAmount The maximum amount of base tokens to spend.
    /// @return inputAmount The amount of base tokens spent.
    function nftBuy(uint256[] calldata tokenIds, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {
        // buy fractional tokens using base tokens
        inputAmount = buy(tokenIds.length * ONE, maxInputAmount);

        // unwrap the fractional tokens into NFTs and send to sender
        unwrap(tokenIds);
    }

    /// @notice Sells NFTs to the pair for base tokens.
    /// @param tokenIds The ids of the NFTs to sell.
    /// @param minOutputAmount The minimum amount of base tokens to receive.
    /// @param proofs The merkle proofs for the NFTs.
    /// @return outputAmount The amount of base tokens received.
    function nftSell(uint256[] calldata tokenIds, uint256 minOutputAmount, bytes32[][] calldata proofs)
        public
        returns (uint256 outputAmount)
    {
        // wrap the incoming NFTs into fractional tokens
        uint256 inputAmount = wrap(tokenIds, proofs);

        // sell fractional tokens for base tokens
        outputAmount = sell(inputAmount, minOutputAmount);
    }

    // ****************************** //
    //      Emergency exit logic      //
    // ****************************** //

    /// @notice Closes the pair to new wraps.
    /// @dev Can only be called by the caviar owner. This is used as an emergency exit in case
    ///      the caviar owner suspects that the pair has been compromised.
    function close() public {
        // check that the sender is the caviar owner
        require(caviar.owner() == msg.sender, ""Close: not owner"");

        // set the close timestamp with a grace period
        closeTimestamp = block.timestamp + CLOSE_GRACE_PERIOD;

        // remove the pair from the Caviar contract
        caviar.destroy(nft, baseToken, merkleRoot);

        emit Close(closeTimestamp);
    }

    /// @notice Withdraws a particular NFT from the pair.
    /// @dev Can only be called by the caviar owner after the close grace period has passed. This
    ///      is used to auction off the NFTs in the pair in case NFTs get stuck due to liquidity
    ///      imbalances. Proceeds from the auction should be distributed pro rata to fractional
    ///      token holders. See documentation for more details.
    function withdraw(uint256 tokenId) public {
        // check that the sender is the caviar owner
        require(caviar.owner() == msg.sender, ""Withdraw: not owner"");

        // check that the close period has been set
        require(closeTimestamp != 0, ""Withdraw not initiated"");

        // check that the close grace period has passed
        require(block.timestamp >= closeTimestamp, ""Not withdrawable yet"");

        // transfer the nft to the caviar owner
        ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenId);

        emit Withdraw(tokenId);
    }

    // ***************** //
    //      Getters      //
    // ***************** //

    function baseTokenReserves() public view returns (uint256) {
        return _baseTokenReserves();
    }

    function fractionalTokenReserves() public view returns (uint256) {
        return balanceOf[address(this)];
    }

    /// @notice The current price of one fractional token in base tokens with 18 decimals of precision.
    /// @dev Calculated by dividing the base token reserves by the fractional token reserves.
    /// @return price The price of one fractional token in base tokens * 1e18.
    function price() public view returns (uint256) {
        return (_baseTokenReserves() * ONE) / fractionalTokenReserves();
    }

    /// @notice The amount of base tokens required to buy a given amount of fractional tokens.
    /// @dev Calculated using the xyk invariant and a 30bps fee.
    /// @param outputAmount The amount of fractional tokens to buy.
    /// @return inputAmount The amount of base tokens required.
    function buyQuote(uint256 outputAmount) public view returns (uint256) {
        return (outputAmount * 1000 * baseTokenReserves()) / ((fractionalTokenReserves() - outputAmount) * 997);
    }

    /// @notice The amount of base tokens received for selling a given amount of fractional tokens.
    /// @dev Calculated using the xyk invariant and a 30bps fee.
    /// @param inputAmount The amount of fractional tokens to sell.
    /// @return outputAmount The amount of base tokens received.
    function sellQuote(uint256 inputAmount) public view returns (uint256) {
        uint256 inputAmountWithFee = inputAmount * 997;
        return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);
    }

    /// @notice The amount of lp tokens received for adding a given amount of base tokens and fractional tokens.
    /// @dev Calculated as a share of existing deposits. If there are no existing deposits, then initializes to
    ///      sqrt(baseTokenAmount * fractionalTokenAmount).
    /// @param baseTokenAmount The amount of base tokens to add.
    /// @param fractionalTokenAmount The amount of fractional tokens to add.
    /// @return lpTokenAmount The amount of lp tokens received.
    function addQuote(uint256 baseTokenAmount, uint256 fractionalTokenAmount) public view returns (uint256) {
        uint256 lpTokenSupply = lpToken.totalSupply();
        if (lpTokenSupply > 0) {
            // calculate amount of lp tokens as a fraction of existing reserves
            uint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();
            uint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();
            return Math.min(baseTokenShare, fractionalTokenShare);
        } else {
            // if there is no liquidity then init
            return Math.sqrt(baseTokenAmount * fractionalTokenAmount);
        }
    }

    /// @notice The amount of base tokens and fractional tokens received for burning a given amount of lp tokens.
    /// @dev Calculated as a share of existing deposits.
    /// @param lpTokenAmount The amount of lp tokens to burn.
    /// @return baseTokenAmount The amount of base tokens received.
    /// @return fractionalTokenAmount The amount of fractional tokens received.
    function removeQuote(uint256 lpTokenAmount) public view returns (uint256, uint256) {
        uint256 lpTokenSupply = lpToken.totalSupply();
        uint256 baseTokenOutputAmount = (baseTokenReserves() * lpTokenAmount) / lpTokenSupply;
        uint256 fractionalTokenOutputAmount = (fractionalTokenReserves() * lpTokenAmount) / lpTokenSupply;

        return (baseTokenOutputAmount, fractionalTokenOutputAmount);
    }

    // ************************ //
    //      Internal utils      //
    // ************************ //

    function _transferFrom(address from, address to, uint256 amount) internal returns (bool) {
        balanceOf[from] -= amount;

        // Cannot overflow because the sum of all user
        // balances can't exceed the max uint256 value.
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(from, to, amount);

        return true;
    }

    /// @dev Validates that the given tokenIds are valid for the contract's merkle root. Reverts
    ///      if any of the tokenId proofs are invalid.
    function _validateTokenIds(uint256[] calldata tokenIds, bytes32[][] calldata proofs) internal view {
        // if merkle root is not set then all tokens are valid
        if (merkleRoot == bytes23(0)) return;

        // validate merkle proofs against merkle root
        for (uint256 i = 0; i < tokenIds.length; i++) {
            bool isValid = MerkleProofLib.verify(proofs[i], merkleRoot, keccak256(abi.encodePacked(tokenIds[i])));
            require(isValid, ""Invalid merkle proof"");
        }
    }

    /// @dev Returns the current base token reserves. If the base token is ETH then it ignores
    ///      the msg.value that is being sent in the current call context - this is to ensure the
    ///      xyk math is correct in the buy() and add() functions.
    function _baseTokenReserves() internal view returns (uint256) {
        return baseToken == address(0)
            ? address(this).balance - msg.value // subtract the msg.value if the base token is ETH
            : ERC20(baseToken).balanceOf(address(this));
    }
}",4582,482,"[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount
  [H-02] Liquidity providers may lose funds when adding liquidity
Liquidity providers may lose a portion of provided liquidity in either of the pair tokens. While the `minLpTokenAmount protects from slippage when adding liquidity, it doesn't protect from providing liquidity at different K.
In the `add` function, consider calculating optimal token amounts based on the amounts specified by user, current pool reserves, and the minimal LP tokens amount specified by user.    [H-03] First depositor can break minting of shares
  [M-01] Missing deadline checks allow pending transactions to be maliciously executed
The Pair contract does not allow users to submit a deadline for their action. This missing feature enables pending transactions to be maliciously executed at a later point  [M-02] Price will not always be 18 decimals, as expected and outlined in the comments
The `price()` function is expected to return the price of one fractional tokens, represented in base tokens, to 18 decimals of precision.   [M-03] Rounding error in buyQuote might result in free tokens
The function `buyQuote()` calculates the amount of base tokens required to buy a given amount of fractional tokens. However, this function rounds down the required amount, which is in favor of the buyer (i.e. he/she has to provide less base tokens for the amount of receiving fractional tokens.
  [M-04] It's possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids
Users can `wrap()` their NFT tokens (which id is whitelisted) and receive 1e18 fractional token or they can pay 1e18 fractional token and unwrap NFT token.    [M-05] Pair price may be manipulated by direct transfers
An attacker may manipulate the price of a pair by transferring tokens directly to the pair. Since the Pair contract exposes the `price` function, it maybe be used as a price oracle in third-party integrations. Manipulating the price of a pair may allow an attacker to steal funds from such integrations.",8,"pragma solidity ^0.8.17;

import ""solmate/tokens/ERC20.sol"";
import ""solmate/tokens/ERC721.sol"";
import ""solmate/utils/MerkleProofLib.sol"";
import ""solmate/utils/SafeTransferLib.sol"";
import ""openzeppelin/utils/math/Math.sol"";

import ""./LpToken.sol"";
import ""./Caviar.sol"";




contract Pair is ERC20, ERC721TokenReceiver {
    using SafeTransferLib for address;
    using SafeTransferLib for ERC20;

    uint256 public constant ONE = 1e18;
    uint256 public constant CLOSE_GRACE_PERIOD = 7 days;

    address public immutable nft;
    address public immutable baseToken; 
    bytes32 public immutable merkleRoot;
    LpToken public immutable lpToken;
    Caviar public immutable caviar;
    uint256 public closeTimestamp;

    event Add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);
    event Remove(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);
    event Buy(uint256 inputAmount, uint256 outputAmount);
    event Sell(uint256 inputAmount, uint256 outputAmount);
    event Wrap(uint256[] tokenIds);
    event Unwrap(uint256[] tokenIds);
    event Close(uint256 closeTimestamp);
    event Withdraw(uint256 tokenId);

    constructor(
        address _nft,
        address _baseToken,
        bytes32 _merkleRoot,
        string memory pairSymbol,
        string memory nftName,
        string memory nftSymbol
    ) ERC20(string.concat(nftName, "" fractional token""), string.concat(""f"", nftSymbol), 18) {
        nft = _nft;
        baseToken = _baseToken; 
        merkleRoot = _merkleRoot;
        lpToken = new LpToken(pairSymbol);
        caviar = Caviar(msg.sender);
    }

    
    
    

    
    
    
    
    
    function add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 minLpTokenAmount)
        public
        payable
        returns (uint256 lpTokenAmount)
    {
        

        
        require(baseTokenAmount > 0 && fractionalTokenAmount > 0, ""Input token amount is zero"");

        
        require(baseToken == address(0) ? msg.value == baseTokenAmount : msg.value == 0, ""Invalid ether input"");

        
        lpTokenAmount = addQuote(baseTokenAmount, fractionalTokenAmount);

        
        require(lpTokenAmount >= minLpTokenAmount, ""Slippage: lp token amount out"");

        

        
        _transferFrom(msg.sender, address(this), fractionalTokenAmount);

        

        
        lpToken.mint(msg.sender, lpTokenAmount);

        
        if (baseToken != address(0)) {
            
            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), baseTokenAmount);
        }

        emit Add(baseTokenAmount, fractionalTokenAmount, lpTokenAmount);
    }

    
    
    
    
    
    
    function remove(uint256 lpTokenAmount, uint256 minBaseTokenOutputAmount, uint256 minFractionalTokenOutputAmount)
        public
        returns (uint256 baseTokenOutputAmount, uint256 fractionalTokenOutputAmount)
    {
        

        
        (baseTokenOutputAmount, fractionalTokenOutputAmount) = removeQuote(lpTokenAmount);

        
        require(baseTokenOutputAmount >= minBaseTokenOutputAmount, ""Slippage: base token amount out"");

        
        require(fractionalTokenOutputAmount >= minFractionalTokenOutputAmount, ""Slippage: fractional token out"");

        

        
        _transferFrom(address(this), msg.sender, fractionalTokenOutputAmount);

        

        
        lpToken.burn(msg.sender, lpTokenAmount);

        if (baseToken == address(0)) {
            
            msg.sender.safeTransferETH(baseTokenOutputAmount);
        } else {
            
            ERC20(baseToken).safeTransfer(msg.sender, baseTokenOutputAmount);
        }

        emit Remove(baseTokenOutputAmount, fractionalTokenOutputAmount, lpTokenAmount);
    }

    
    
    
    
    function buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {
        

        
        require(baseToken == address(0) ? msg.value == maxInputAmount : msg.value == 0, ""Invalid ether input"");

        
        inputAmount = buyQuote(outputAmount);

        
        require(inputAmount <= maxInputAmount, ""Slippage: amount in"");

        

        
        _transferFrom(address(this), msg.sender, outputAmount);

        

        if (baseToken == address(0)) {
            
            uint256 refundAmount = maxInputAmount - inputAmount;
            if (refundAmount > 0) msg.sender.safeTransferETH(refundAmount);
        } else {
            
            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);
        }

        emit Buy(inputAmount, outputAmount);
    }

    
    
    
    
    function sell(uint256 inputAmount, uint256 minOutputAmount) public returns (uint256 outputAmount) {
        

        
        outputAmount = sellQuote(inputAmount);

        
        require(outputAmount >= minOutputAmount, ""Slippage: amount out"");

        

        
        _transferFrom(msg.sender, address(this), inputAmount);

        

        if (baseToken == address(0)) {
            
            msg.sender.safeTransferETH(outputAmount);
        } else {
            
            ERC20(baseToken).safeTransfer(msg.sender, outputAmount);
        }

        emit Sell(inputAmount, outputAmount);
    }

    
    
    

    
    
    
    
    function wrap(uint256[] calldata tokenIds, bytes32[][] calldata proofs)
        public
        returns (uint256 fractionalTokenAmount)
    {
        

        
        require(closeTimestamp == 0, ""Wrap: closed"");

        
        _validateTokenIds(tokenIds, proofs);

        

        
        fractionalTokenAmount = tokenIds.length * ONE;
        _mint(msg.sender, fractionalTokenAmount);

        

        
        for (uint256 i = 0; i < tokenIds.length; i++) {
            ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);
        }

        emit Wrap(tokenIds);
    }

    
    
    
    function unwrap(uint256[] calldata tokenIds) public returns (uint256 fractionalTokenAmount) {
        

        
        fractionalTokenAmount = tokenIds.length * ONE;
        _burn(msg.sender, fractionalTokenAmount);

        

        
        for (uint256 i = 0; i < tokenIds.length; i++) {
            ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenIds[i]);
        }

        emit Unwrap(tokenIds);
    }

    
    
    

    
    
    
    
    
    
    function nftAdd(
        uint256 baseTokenAmount,
        uint256[] calldata tokenIds,
        uint256 minLpTokenAmount,
        bytes32[][] calldata proofs
    ) public payable returns (uint256 lpTokenAmount) {
        
        uint256 fractionalTokenAmount = wrap(tokenIds, proofs);

        
        lpTokenAmount = add(baseTokenAmount, fractionalTokenAmount, minLpTokenAmount);
    }

    
    
    
    
    
    
    function nftRemove(uint256 lpTokenAmount, uint256 minBaseTokenOutputAmount, uint256[] calldata tokenIds)
        public
        returns (uint256 baseTokenOutputAmount, uint256 fractionalTokenOutputAmount)
    {
        
        (baseTokenOutputAmount, fractionalTokenOutputAmount) =
            remove(lpTokenAmount, minBaseTokenOutputAmount, tokenIds.length * ONE);

        
        unwrap(tokenIds);
    }

    
    
    
    
    function nftBuy(uint256[] calldata tokenIds, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {
        
        inputAmount = buy(tokenIds.length * ONE, maxInputAmount);

        
        unwrap(tokenIds);
    }

    
    
    
    
    
    function nftSell(uint256[] calldata tokenIds, uint256 minOutputAmount, bytes32[][] calldata proofs)
        public
        returns (uint256 outputAmount)
    {
        
        uint256 inputAmount = wrap(tokenIds, proofs);

        
        outputAmount = sell(inputAmount, minOutputAmount);
    }

    
    
    

    
    
    
    function close() public {
        
        require(caviar.owner() == msg.sender, ""Close: not owner"");

        
        closeTimestamp = block.timestamp + CLOSE_GRACE_PERIOD;

        
        caviar.destroy(nft, baseToken, merkleRoot);

        emit Close(closeTimestamp);
    }

    
    
    
    
    
    function withdraw(uint256 tokenId) public {
        
        require(caviar.owner() == msg.sender, ""Withdraw: not owner"");

        
        require(closeTimestamp != 0, ""Withdraw not initiated"");

        
        require(block.timestamp >= closeTimestamp, ""Not withdrawable yet"");

        
        ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenId);

        emit Withdraw(tokenId);
    }

    
    
    

    function baseTokenReserves() public view returns (uint256) {
        return _baseTokenReserves();
    }

    function fractionalTokenReserves() public view returns (uint256) {
        return balanceOf[address(this)];
    }

    
    
    
    function price() public view returns (uint256) {
        return (_baseTokenReserves() * ONE) / fractionalTokenReserves();
    }

    
    
    
    
    function buyQuote(uint256 outputAmount) public view returns (uint256) {
        return (outputAmount * 1000 * baseTokenReserves()) / ((fractionalTokenReserves() - outputAmount) * 997);
    }

    
    
    
    
    function sellQuote(uint256 inputAmount) public view returns (uint256) {
        uint256 inputAmountWithFee = inputAmount * 997;
        return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);
    }

    
    
    
    
    
    
    function addQuote(uint256 baseTokenAmount, uint256 fractionalTokenAmount) public view returns (uint256) {
        uint256 lpTokenSupply = lpToken.totalSupply();
        if (lpTokenSupply > 0) {
            
            uint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();
            uint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();
            return Math.min(baseTokenShare, fractionalTokenShare);
        } else {
            
            return Math.sqrt(baseTokenAmount * fractionalTokenAmount);
        }
    }

    
    
    
    
    
    function removeQuote(uint256 lpTokenAmount) public view returns (uint256, uint256) {
        uint256 lpTokenSupply = lpToken.totalSupply();
        uint256 baseTokenOutputAmount = (baseTokenReserves() * lpTokenAmount) / lpTokenSupply;
        uint256 fractionalTokenOutputAmount = (fractionalTokenReserves() * lpTokenAmount) / lpTokenSupply;

        return (baseTokenOutputAmount, fractionalTokenOutputAmount);
    }

    
    
    

    function _transferFrom(address from, address to, uint256 amount) internal returns (bool) {
        balanceOf[from] -= amount;

        
        
        unchecked {
            balanceOf[to] += amount;
        }

        emit Transfer(from, to, amount);

        return true;
    }

    
    
    function _validateTokenIds(uint256[] calldata tokenIds, bytes32[][] calldata proofs) internal view {
        
        if (merkleRoot == bytes23(0)) return;

        
        for (uint256 i = 0; i < tokenIds.length; i++) {
            bool isValid = MerkleProofLib.verify(proofs[i], merkleRoot, keccak256(abi.encodePacked(tokenIds[i])));
            require(isValid, ""Invalid merkle proof"");
        }
    }

    
    
    
    function _baseTokenReserves() internal view returns (uint256) {
        return baseToken == address(0)
            ? address(this).balance - msg.value 
            : ERC20(baseToken).balanceOf(address(this));
    }
}",2469,3,5,"The provided smart contract has several potential vulnerabilities and risks. Below is a list of the identified issues:

---

### 1. **Reentrancy Risk**
   - The contract uses `safeTransferETH` and `safeTransfer` in functions like `remove`, `buy`, and `sell`. These functions could be exploited if the recipient is a malicious contract that re-enters the function before the state is updated.
   - Example: In the `remove` function, `msg.sender.safeTransferETH(baseTokenOutputAmount)` could trigger a reentrant call.

---

### 2. **Lack of Input Validation**
   - The `wrap` function does not validate the length of the `tokenIds` array against the `proofs` array. This could lead to mismatched arrays and unexpected behavior.
   - Example: If `tokenIds.length != proofs.length`, the function could fail or behave incorrectly.

---

### 3. **Incorrect Merkle Root Check**
   - In `_validateTokenIds`, the check `merkleRoot == bytes23(0)` is incorrect. The correct comparison should be `merkleRoot == bytes32(0)`.
   - This could lead to unintended behavior when validating token IDs.

---

### 4. **Potential Integer Overflow/Underflow**
   - The contract uses unchecked arithmetic in `_transferFrom`. While Solidity 0.8.x prevents overflow/underflow by default, the use of `unchecked` could reintroduce this risk if not handled carefully.
   - Example: In `_transferFrom`, `balanceOf[to] += amount` is unchecked, which could lead to overflow if `balanceOf[to]` is close to the maximum value.

---

### 5. **Incorrect ETH Handling**
   - The contract does not properly handle ETH in some functions. For example, in the `add` function, if `baseToken` is `address(0)`, it requires `msg.value == baseTokenAmount`. However, it does not account for cases where `msg.value` could be greater than `baseTokenAmount`.
   - Example: A user could send more ETH than required, and the excess ETH would remain in the contract without being refunded.

---

### 6. **Insufficient Slippage Protection**
   - The slippage checks in functions like `add`, `remove`, `buy`, and `sell` rely on user-provided minimum/maximum values. If these values are not set correctly, users could suffer significant losses due to price fluctuations.
   - Example: In the `buy` function, `require(inputAmount <= maxInputAmount, ""Slippage: amount in"")` does not account for sudden price changes.

---

### 7. **Lack of Access Control**
   - The `close` and `withdraw` functions are only restricted to the `caviar.owner()`. If the `caviar` contract is compromised or the owner's private key is leaked, an attacker could close the contract or withdraw assets.
   - Example: An attacker could call `close` to initiate the grace period and then `withdraw` to steal NFTs.

---

### 8. **Potential Division by Zero**
   - The `price` function divides `_baseTokenReserves()` by `fractionalTokenReserves()`. If `fractionalTokenReserves()` is zero, this would result in a division by zero error.
   - Example: If no fractional tokens are in the contract, calling `price()` would revert.

---

### 9. **Unsafe Use of `safeTransferFrom`**
   - The `wrap` and `unwrap` functions use `ERC721(nft).safeTransferFrom` without checking if the NFT contract supports the `ERC721` interface. If the `nft` address is not a valid ERC721 contract, the function could fail or behave unexpectedly.
   - Example: If `nft` is a malicious contract, it could exploit the `safeTransferFrom` call.

---

### 10. **Potential Front-Running**
   - Functions like `add`, `remove`, `buy`, and `sell` are susceptible to front-running attacks. An attacker could observe a pending transaction and submit their own transaction with a higher gas fee to manipulate the outcome.
   - Example: An attacker could front-run a `buy` transaction to increase the price before the user's transaction is executed.

---

### 11. **Incorrect Refund Logic**
   - In the `buy` function, the refund logic for excess ETH (`msg.sender.safeTransferETH(refundAmount)`) is executed after transferring the output tokens. If the refund fails (e.g., due to a gas limit), the user could lose their excess ETH.
   - Example: If the recipient is a contract with a fallback function that reverts, the refund would fail.

---

### 12. **Incorrect Handling of Zero Values**
   - The `add` function requires `baseTokenAmount > 0 && fractionalTokenAmount > 0`, but it does not explicitly handle cases where `lpTokenAmount` could be zero due to rounding errors in `addQuote`.
   - Example: If `addQuote` returns zero due to rounding, the function would still proceed, potentially minting zero LP tokens.

---

### 13. **Incorrect `msg.value` Handling**
   - The contract does not consistently handle `msg.value` across functions. For example, in the `buy` function, `msg.value` is checked but not used if `baseToken` is not `address(0)`.
   - Example: If `baseToken` is not `address(0)` and `msg.value > 0`, the ETH sent would remain in the contract without being refunded.

---

### 14. **Potential Loss of Funds in `close` Function**
   - The `close` function does not ensure that all assets (base tokens, fractional tokens, and NFTs) are withdrawn before closing the contract. This could lead to assets being locked in the contract permanently.
   - Example: If the contract is closed while it still holds NFTs or tokens, those assets would be inaccessible.

---

### 15. **Incorrect `lpToken` Minting/Burning**
   - The `add` and `remove` functions mint and burn LP tokens directly without validating the state of the reserves. This could lead to inconsistencies between the LP token supply and the actual reserves.
   - Example: If the reserves are manipulated, the LP token supply could become incorrect.

---

### 16. **Potential Griefing Attack in `wrap` Function**
   - The `wrap` function allows anyone to wrap NFTs, even if they are not the owner. This could be exploited to grief the contract by wrapping invalid or unwanted NFTs.
   - Example: An attacker could wrap NFTs that are not part of the intended collection, polluting the contract's state.

---

### 17. **Incorrect `withdraw` Function Logic**
   - The `withdraw` function does not validate if the `tokenId` exists in the contract. This could lead to attempts to withdraw non-existent tokens, wasting gas.
   - Example: If a user tries to withdraw a token that is not in the contract, the transaction would revert.

---

### 18. **Potential Oracle Manipulation**
   - The `price`, `buyQuote`, and `sellQuote` functions rely on the current reserves to calculate prices. An attacker could manipulate these reserves by performing large trades, affecting the price calculations.
   - Example: An attacker could artificially inflate the price by adding a large amount of base tokens.

---

### 19. **Incorrect `merkleRoot` Handling**
   - The `_validateTokenIds` function skips validation if `merkleRoot == bytes23(0)`. This could allow invalid tokens to be wrapped if the `merkleRoot` is not properly set.
   - Example: If the `merkleRoot` is accidentally set to zero, all token IDs would bypass validation.

---

### 20. **Potential Denial of Service (DoS)**
   - The `wrap` and `unwrap` functions loop over the `tokenIds` array. If the array is too large, the function could exceed the gas limit, causing it to revert.
   - Example: A user could submit a large `tokenIds` array to intentionally cause the function to fail.

---

These vulnerabilities highlight the need for careful review and testing of the smart contract before deployment.","### **[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount**

**Report Description**:
The `buy` function is vulnerable to reentrancy attacks when interacting with ERC777 tokens. An attacker could exploit this by re-entering the function before the state is updated, allowing them to buy funds at a significant discount. This could lead to substantial financial losses for the contract and its users.

**Match in Response List**:
Matches with the issue titled **""Reentrancy Risk""**.

**Validation**:
**Correct**. The response accurately identifies the reentrancy risk in functions like `buy`, which aligns with the issue described. The response also correctly explains the potential for reentrant calls when using `safeTransferETH` and `safeTransfer`, which is relevant to the ERC777 token interaction described in the issue.

---

### **[H-02] Liquidity providers may lose funds when adding liquidity**

**Report Description**:
Liquidity providers may lose a portion of their provided liquidity due to the `add` function not calculating optimal token amounts based on the current pool reserves and the minimal LP token amount specified by the user. This could result in providing liquidity at different K values, leading to financial losses.

**Match in Response List**:
Matches with the issue titled **""Insufficient Slippage Protection""**.

**Validation**:
**Partially Correct**. The response identifies the issue of insufficient slippage protection, which is related to the problem of liquidity providers losing funds. However, the response does not specifically address the need for calculating optimal token amounts based on current reserves and user-specified minimums, which is a critical aspect of the issue.

---

### **[H-03] First depositor can break minting of shares**

**Report Description**:
The first depositor can manipulate the minting of shares by depositing a minimal amount of tokens, which could lead to an unfair distribution of shares and potential financial losses for subsequent depositors.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of the first depositor breaking the minting of shares, which is a significant vulnerability.

---

### **[M-01] Missing deadline checks allow pending transactions to be maliciously executed**

**Report Description**:
The `Pair` contract does not include deadline checks, allowing pending transactions to be maliciously executed at a later point. This could lead to unfavorable trade executions for users.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of missing deadline checks, which is a critical security concern.

---

### **[M-02] Price will not always be 18 decimals, as expected and outlined in the comments**

**Report Description**:
The `price()` function is expected to return the price of one fractional token in base tokens to 18 decimals of precision. However, this expectation is not always met, leading to potential inaccuracies in price calculations.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of incorrect decimal precision in the `price()` function.

---

### **[M-03] Rounding error in `buyQuote` might result in free tokens**

**Report Description**:
The `buyQuote()` function rounds down the required amount of base tokens, favoring the buyer. This could result in users receiving fractional tokens without providing the full amount of base tokens, leading to potential financial losses for the contract.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of rounding errors in the `buyQuote()` function.

---

### **[M-04] It's possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids**

**Report Description**:
Users can `wrap()` their NFT tokens and receive `1e18` fractional tokens or pay `1e18` fractional tokens to `unwrap` NFT tokens. This functionality can be exploited to swap NFT token IDs without paying fees and to steal airdrops associated with those token IDs.

**Match in Response List**:
Matches with the issue titled **""Potential Griefing Attack in `wrap` Function""**.

**Validation**:
**Partially Correct**. The response identifies the potential for griefing attacks in the `wrap` function, which is related to the issue. However, the response does not specifically address the ability to swap NFT token IDs without fees or the potential for stealing airdrops, which are critical aspects of the issue.

---

### **[M-05] Pair price may be manipulated by direct transfers**

**Report Description**:
An attacker can manipulate the price of a pair by transferring tokens directly to the pair contract. Since the `Pair` contract exposes the `price` function, it may be used as a price oracle in third-party integrations. Manipulating the price could allow an attacker to steal funds from these integrations.

**Match in Response List**:
Matches with the issue titled **""Potential Oracle Manipulation""**.

**Validation**:
**Correct**. The response accurately identifies the risk of oracle manipulation by manipulating the reserves, which aligns with the issue described. The response correctly explains how an attacker could affect price calculations by performing large trades, which is relevant to the issue of direct transfers.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount**
- **[M-05] Pair price may be manipulated by direct transfers**

**Partially Correct Matches**:

- **[H-02] Liquidity providers may lose funds when adding liquidity**
- **[M-04] It's possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids**

**Missed Issues from Issue Report**:

- **[H-03] First depositor can break minting of shares**
- **[M-01] Missing deadline checks allow pending transactions to be maliciously executed**
- **[M-02] Price will not always be 18 decimals, as expected and outlined in the comments**
- **[M-03] Rounding error in `buyQuote` might result in free tokens**

--- 

The response list covers some of the issues but misses several critical vulnerabilities, particularly those related to the first depositor, deadline checks, decimal precision, and rounding errors. Additionally, some responses are only partially correct, as they do not fully address the specific details of the issues.",2,2,4,20,"```
1. Reentrancy Risk
2. Potential Oracle Manipulation
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks of the true positives**:
   - ""Reentrancy Risk"" appears at rank 1.
   - ""Potential Oracle Manipulation"" appears at rank 18.

2. **Calculate the precision at each rank**:
   - For ""Reentrancy Risk"" at rank 1: \( P@1 = \frac{1}{1} = 1.0 \)
   - For ""Potential Oracle Manipulation"" at rank 18: \( P@18 = \frac{2}{18} \approx 0.1111 \)

3. **Compute the Average Precision (AP)**:
   - AP = \( \frac{1.0 + 0.1111}{2} = \frac{1.1111}{2} \approx 0.5556 \)

**Output**:
```
0.5556
```"
