nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
TwabRewards.sol,"// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";

/**
 * @title PoolTogether V4 TwabRewards
 * @author PoolTogether Inc Team
 * @notice Contract to distribute rewards to depositors in a pool.
 * This contract supports the creation of several promotions that can run simultaneously.
 * In order to calculate user rewards, we use the TWAB (Time-Weighted Average Balance) from the Ticket contract.
 * This way, users simply need to hold their tickets to be eligible to claim rewards.
 * Rewards are calculated based on the average amount of tickets they hold during the epoch duration.
 */
contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    /* ============ Global Variables ============ */

    /// @notice Settings of each promotion.
    mapping(uint256 => Promotion) internal _promotions;

    /// @notice Latest recorded promotion id.
    /// @dev Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.
    uint256 internal _latestPromotionId;

    /// @notice Keeps track of claimed rewards per user.
    /// @dev _claimedEpochs[promotionId][user] => claimedEpochs
    /// @dev We pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    /* ============ Events ============ */

    /**
        @notice Emitted when a promotion is created.
        @param promotionId Id of the newly created promotion
    */
    event PromotionCreated(uint256 indexed promotionId);

    /**
        @notice Emitted when a promotion is cancelled.
        @param promotionId Id of the promotion being cancelled
        @param amount Amount of tokens transferred to the promotion creator
    */
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    /**
        @notice Emitted when a promotion is extended.
        @param promotionId Id of the promotion being extended
        @param numberOfEpochs Number of epochs the promotion has been extended by
    */
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    /**
        @notice Emitted when rewards have been claimed.
        @param promotionId Id of the promotion for which epoch rewards were claimed
        @param epochIds Ids of the epochs being claimed
        @param user Address of the user for which the rewards were claimed
        @param amount Amount of tokens transferred to the recipient address
    */
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    /* ============ Modifiers ============ */

    /// @dev Ensure that the caller is the creator of the promotion.
    /// @param _promotionId Id of the promotion to check
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    /* ============ External Functions ============ */

    /// @inheritdoc ITwabRewards
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    /// @inheritdoc ITwabRewards
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    /// @inheritdoc ITwabRewards
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    /// @inheritdoc ITwabRewards
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    /* ============ Internal Functions ============ */

    /**
    @notice Determine if address passed is actually a ticket.
    @param _ticket Address to check
   */
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    /**
        @notice Determine if a promotion is active.
        @param _promotion Promotion to check
    */
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    /**
        @notice Get settings for a specific promotion.
        @dev Will revert if the promotion does not exist.
        @param _promotionId Promotion id to get settings for
        @return Promotion settings
     */
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    /**
        @notice Get the current epoch id of a promotion.
        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.
        @param _promotion Promotion to get current epoch for
        @return Epoch id
     */
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        // elapsedTimestamp / epochDurationTimestamp
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    /**
        @notice Get reward amount for a specific user.
        @dev Rewards can only be claimed once the epoch is over.
        @param _user User to get reward amount for
        @param _promotion Promotion from which the epoch is
        @param _epochId Epoch id to get reward amount for
        @return Reward amount
     */
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    /**
        @notice Get the total amount of tokens left to be rewarded.
        @param _promotion Promotion to get the total amount of tokens left to be rewarded for
        @return Amount of tokens left to be rewarded
     */
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        // _tokensPerEpoch * _numberOfEpochsLeft
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    /**
        @notice Set boolean value for a specific epoch.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0011
        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.
        We get: 0000 0001 << 2 = 0000 0100
        We then OR the mask with the word to set the value.
        We get: 0110 0011 | 0000 0100 = 0110 0111
        @param _userClaimedEpochs Tightly packed epoch ids with their boolean values
        @param _epochId Id of the epoch to set the boolean for
        @return Tightly packed epoch ids with the newly boolean value set
    */
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    /**
        @notice Check if rewards of an epoch for a given promotion have already been claimed by the user.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0111
        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.
        We get: 0110 0111 >> 2 = 0001 1001
        We then get the value of the last bit by masking with 1.
        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1
        We then return the boolean value true since the last bit is 1.
        @param _userClaimedEpochs Record of epochs already claimed by the user
        @param _epochId Epoch id to check
        @return true if the rewards have already been claimed for the given epoch, false otherwise
     */
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",3228,378,"[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds
In the current implementation of `createPromotion()`, `_epochDuration` is allowed to be `0`.
However, when `_epochDuration = 0`, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it.
 
[H-02] Backdated `_startTimestamp` can lead to loss of funds
Function `createPromotion()`
This can lead to loss of funds as there is no recovery function of funds stuck like this
  [H-03] Continue claiming reqrds after numberOfEpochs are over
When claiming rewards via `claimRewards()`, the function `_calculateRewardAmount()` is called. The function `_calculateRewardAmount()` has a check to make sure the epoch is over
  “require(block.timestamp > _epochEndTimestamp, “TwabRewards/epoch-not-over"");"" 
However neither functions check if the `_epochId` is within the range of the reward epochs. Ergo it is possible to continue claiming rewards after the reward period is over. This only works as long as there are enough tokens in the contract. But this is the case when not everyone has claimed, or other rewards use the same token.
  [H-04] cancelPromotion is too rigorous
When you cancel a promotion with `cancelPromotion()` then the promotion is complete deleted. This means no-one can claim any rewards anymore, because `_promotions[_promotionId]` no longer exists.
It also means all the unclaimed tokens (of the previous epochs) will stay locked in the contract.
  [H-05] Malicious tickets can lead to the loss of all tokens It allows an attacker to retrieve all the tokens of each promotions.
Anyone can create a new promotion using `createPromotion()`. An attacker can create a new malicious promotion with the following parameters:
- the address of a malicious ticket smart contract
- the token address from the targeted promotion(s)
- optionally, `_numberOfEpochs` equal to 0 to create this promotion for free
The only verification made on the ticket address given by `_requireTicket()` is that the smart contract must implement the `ITicket` interface.
  [H-06] Rewards can be claimed multiple times
An attacker can claim its reward 256 * `epochDuration` seconds after the timestamp at which the promotion started. The vulnerability allows him to claim a reward several times to retrieve all the tokens associated to the promotion.
The function `claimRewards()` claim rewards for a given promotion and epoch. In order to prevent a user from claiming a reward multiple times, the mapping _claimedEpochs keeps track of claimed rewards per user:
  [H-07] Contract does not work with fee-on transfer tokens
Function `_calculateRewardAmount()`
There exist ERC20 tokens that charge a fee for every transfer.
This kind of token does not work correctly with the `TwabRewards` contract as the rewards calculation for an user is based on `promotion.tokensPerEpoch`.
However, the actual amount of tokens the contract holds could be less than `promotion.tokensPerEpoch * promotion.numberOfEpochs` leading to not claimable rewards for users claiming later than others.
  [M-01] `cancelPromotion()` Unable to cancel unstarted promotions
For unstarted promotions, `cancelPromotion()` will revert at `block.timestamp - _promotion.startTimestamp` in `_getCurrentEpochId()`.
Call stack: `cancelPromotion()` -> `_getRemainingRewards()` -> `_getCurrentEpochId()`.
  [M-02] `getRewardsAmount` doesn't check epochs haven't been claimed
In ITwabRewards.sol, it is claimed that `getRewardsAmount` should account for epochs that have already been claimed, and not include these epochs in the total amount (indeed, there is a line that says @dev Will be 0 if user has already claimed rewards for the epoch.)
However, no such check is done in the implementation of getRewardsAmount. This means that users will be shown rewardAmounts that are higher than they should be, and users will be confused when they are transferred fewer tokens than they are told they will. This would cause confusion, and people may begin to mistrust the contract since they think they are being transferred fewer tokens than they are owed.
  [M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account
Users who have a small claim on rewards for various promotions, may not feasibly be able to claim these rewards as gas costs could outweigh the sum they receive in return. Hence, it is likely that a dust balance accrues overtime for tokens allocated for various promotions. Additionally, the `_calculateRewardAmount` calculation may result in truncated results, leading to further accrual of a dust balance. Therefore, it is useful that these funds do not go to waste
  [M-04] Unsafe uint64 casting may overflow
The `_calculateRewardAmount` function casts epoch timestamps from uint256 to uint64 and these may overflow. The epochStartTimestamp value is a function of the user-supplied `_epochId` value, which could be extremely large (up to 2**255 – 1). While Solidity 0.8.x checks for overflows on arithmetic operations, it does not do so for casting – the OpenZeppelin SafeCast library offers this. The overflow condition could cause `_epochStartTimestamp` > `_epochEndTimestamp`, which the Ticket.sol getAverageBalanceBetween may not be expected to handle. The `_epochStartTimestamp` could overflow to have a value before the actual start of the promotion, also impacting the rewards calculation.
  [M-05] Missing Check When Transferring Tokens Out For A Given Promotion
The claimRewards function is called upon by ticket holders who parse a set of `_epochIds` they wish to claim rewards on. An internal call is made to _calculateRewardAmount to calculate the correct reward amount owed to the user. Subsequently, the _updateClaimedEpoch function will set the epoch bit of the tracked _claimedEpochs mapping, ensuring an epochId cannot be claimed twice for a given promotion.
However, there may be inaccuracies in the `_calculateRewardAmount` function, which results in more tokens being sent out than allocated by a promotion creator. This severely impacts the ability for users to claim their owed tokens on other promotions.",12,"pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";


contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    

    
    mapping(uint256 => Promotion) internal _promotions;

    
    
    uint256 internal _latestPromotionId;

    
    
    
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    

    
    event PromotionCreated(uint256 indexed promotionId);

    
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    

    
    
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    

    
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    

    
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",1979,7,5,"The smart contract provided has several potential vulnerabilities and issues. Below is a list of the vulnerabilities identified:

---

### 1. **Reentrancy in `claimRewards`**
   - The `claimRewards` function transfers tokens to the user (`_promotion.token.safeTransfer(_user, _rewardsAmount)`) after calculating the rewards. Although `safeTransfer` is used, there is no reentrancy guard in place. If the token being transferred is a malicious contract, it could re-enter the `claimRewards` function, potentially leading to unexpected behavior or double-spending.

---

### 2. **Lack of Input Validation**
   - **`createPromotion`**: The function does not validate the `_startTimestamp` to ensure it is in the future or the `_epochDuration` to ensure it is greater than zero. This could lead to invalid or non-functional promotions.
   - **`extendPromotion`**: The function does not validate the `_numberOfEpochs` parameter. If `_numberOfEpochs` is zero, it could lead to unintended behavior or waste of gas.
   - **`cancelPromotion`**: The function does not validate if the promotion exists before attempting to cancel it, which could lead to errors or wasted gas.

---

### 3. **Integer Overflow/Underflow**
   - Although Solidity 0.8.x has built-in overflow/underflow protection, some calculations could still lead to unexpected behavior:
     - In `extendPromotion`, `_promotion.numberOfEpochs + _numberOfEpochs` could overflow if `_numberOfEpochs` is too large.
     - In `_getRemainingRewards`, `_promotion.numberOfEpochs - _getCurrentEpochId(_promotion)` could underflow if `_getCurrentEpochId(_promotion)` is greater than `_promotion.numberOfEpochs`.

---

### 4. **Unbounded Loops**
   - **`claimRewards`**: The function iterates over the `_epochIds` array, which could be arbitrarily large. This could lead to gas exhaustion and failed transactions.
   - **`getRewardsAmount`**: Similarly, this function iterates over the `_epochIds` array, which could also cause gas exhaustion.

---

### 5. **Potential Front-Running in `claimRewards`**
   - The `claimRewards` function allows any caller to claim rewards on behalf of another user (`_user`). This could lead to front-running attacks where a malicious actor claims rewards before the intended user.

---

### 6. **Incorrect Epoch Calculation**
   - In `_getCurrentEpochId`, the calculation `(block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration` could result in an incorrect epoch ID if `_promotion.startTimestamp` is greater than `block.timestamp`. This could lead to invalid reward claims.

---

### 7. **Lack of Access Control**
   - The `extendPromotion` function does not have the `onlyPromotionCreator` modifier, meaning anyone can extend a promotion. This could lead to unauthorized extensions and potential abuse.

---

### 8. **Incorrect Handling of Zero Values**
   - In `_calculateRewardAmount`, if `_averageTotalSupplies[0]` is zero, the function returns zero. This could lead to incorrect reward calculations if the total supply is zero for a valid epoch.

---

### 9. **Uninitialized Storage**
   - The `_latestPromotionId` variable is not initialized, which could lead to unintended behavior if the contract is deployed without setting an initial value.

---

### 10. **Potential Division by Zero**
   - In `_calculateRewardAmount`, if `_averageTotalSupplies[0]` is zero, the division `(_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0]` would result in a division by zero error. Although Solidity 0.8.x reverts on division by zero, this could still lead to unexpected behavior.

---

### 11. **Incorrect Event Emission**
   - In `extendPromotion`, the event `PromotionExtended` is emitted before the token transfer is completed. If the transfer fails, the event would still be emitted, leading to inconsistencies.

---

### 12. **Lack of Promotion Existence Check**
   - Functions like `cancelPromotion`, `extendPromotion`, and `claimRewards` do not check if the promotion exists before performing operations. This could lead to errors or wasted gas.

---

### 13. **Incorrect Use of `safeTransferFrom`**
   - In `createPromotion`, `_token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs)` is called without checking if the transfer was successful. Although `safeTransferFrom` reverts on failure, this could still lead to unexpected behavior if the token contract behaves unexpectedly.

---

### 14. **Incorrect Bitmasking Logic**
   - In `_updateClaimedEpoch` and `_isClaimedEpoch`, the bitmasking logic assumes that `_epochId` is within the range of 256. If `_epochId` is greater than 255, the bitmasking logic will fail, leading to incorrect behavior.

---

### 15. **Lack of Error Messages**
   - Some `require` statements lack descriptive error messages, making it difficult to debug issues when they occur.

---

### 16. **Potential Race Conditions**
   - The `extendPromotion` function does not have a lock mechanism, which could lead to race conditions if multiple users attempt to extend the same promotion simultaneously.

---

### 17. **Incorrect Token Transfer Logic**
   - In `cancelPromotion`, the function transfers the remaining rewards to the `_to` address without checking if the transfer was successful. Although `safeTransfer` is used, this could still lead to unexpected behavior if the token contract behaves unexpectedly.

---

### 18. **Incorrect Event Emission in `cancelPromotion`**
   - The event `PromotionCancelled` is emitted before the token transfer is completed. If the transfer fails, the event would still be emitted, leading to inconsistencies.

---

### 19. **Incorrect Use of `staticcall`**
   - In `_requireTicket`, the `staticcall` is used to check if the ticket is valid. However, the `staticcall` does not revert on failure, which could lead to incorrect behavior if the call fails.

---

### 20. **Incorrect Handling of Zero Address**
   - In `cancelPromotion`, the `require` statement checks if `_to` is not the zero address, but this check is not present in other functions like `createPromotion` or `extendPromotion`.

---

These vulnerabilities highlight potential risks in the contract's logic, security, and functionality.","### **Comparison of Issue Report and Response List**

---

#### **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**

**Report Description**:
The `createPromotion()` function allows `_epochDuration` to be `0`, which makes it impossible for users to claim rewards and prevents the promotion creator from canceling the promotion. This could lead to the freezing of the creator's funds.

**Match in Response List**:
Matches with the issue titled **""Lack of Input Validation""** under the `createPromotion` function.

**Validation**:
**Correct**. The response accurately identifies the lack of input validation for `_epochDuration` in `createPromotion()`. It correctly highlights the risk of invalid or non-functional promotions due to missing validation, which aligns with the issue described in the report.

---

#### **[H-02] Backdated `_startTimestamp` can lead to loss of funds**

**Report Description**:
The `createPromotion()` function does not validate `_startTimestamp`, allowing it to be backdated. This could result in funds being stuck in the contract with no recovery mechanism, leading to a loss of funds.

**Match in Response List**:
Matches with the issue titled **""Lack of Input Validation""** under the `createPromotion` function.

**Validation**:
**Correct**. The response correctly identifies the lack of validation for `_startTimestamp` in `createPromotion()`. It highlights the risk of invalid promotions due to missing validation, which aligns with the issue described in the report.

---

#### **[H-03] Continue claiming rewards after `numberOfEpochs` are over**

**Report Description**:
The `claimRewards()` function does not check if `_epochId` is within the range of reward epochs. This allows users to continue claiming rewards after the reward period is over, as long as there are enough tokens in the contract.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The lack of validation for `_epochId` in `claimRewards()` is a critical vulnerability that is not covered in the response list.

---

#### **[H-04] `cancelPromotion` is too rigorous**

**Report Description**:
The `cancelPromotion()` function deletes the promotion entirely, preventing users from claiming rewards for previous epochs. This also locks unclaimed tokens in the contract.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The rigorous deletion of promotions and the resulting locked tokens are not covered in the response list.

---

#### **[H-05] Malicious tickets can lead to the loss of all tokens**

**Report Description**:
An attacker can create a malicious promotion using a malicious ticket contract and the token address of a targeted promotion. This allows the attacker to retrieve all tokens from the targeted promotions.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The risk of malicious tickets leading to the loss of tokens is not covered in the response list.

---

#### **[H-06] Rewards can be claimed multiple times**

**Report Description**:
An attacker can claim rewards multiple times for the same epoch by exploiting the `_claimedEpochs` mapping. This allows the attacker to retrieve all tokens associated with the promotion.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The vulnerability allowing multiple claims of rewards is not covered in the response list.

---

#### **[H-07] Contract does not work with fee-on-transfer tokens**

**Report Description**:
The contract does not account for fee-on-transfer tokens, leading to discrepancies in the actual token balance and the calculated rewards. This could result in unclaimable rewards for users.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The incompatibility with fee-on-transfer tokens is not covered in the response list.

---

#### **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**

**Report Description**:
The `cancelPromotion()` function reverts when attempting to cancel unstarted promotions due to an incorrect timestamp calculation in `_getCurrentEpochId()`.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The inability to cancel unstarted promotions is not covered in the response list.

---

#### **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**

**Report Description**:
The `getRewardsAmount` function does not account for epochs that have already been claimed, leading to incorrect reward amounts being displayed to users.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The lack of validation for claimed epochs in `getRewardsAmount` is not covered in the response list.

---

#### **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**

**Report Description**:
Small token balances (dust) cannot be claimed by an admin account, leading to the accumulation of unclaimed tokens over time.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The inability to claim dust token balances is not covered in the response list.

---

#### **[M-04] Unsafe uint64 casting may overflow**

**Report Description**:
The `_calculateRewardAmount` function casts epoch timestamps from `uint256` to `uint64`, which could overflow and lead to incorrect reward calculations.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The risk of overflow due to unsafe casting is not covered in the response list.

---

#### **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

**Report Description**:
The `claimRewards` function does not validate the accuracy of the `_calculateRewardAmount` function, potentially leading to more tokens being sent out than allocated.

**Match in Response List**:
No match found.

**Validation**:
**Missed Issue**. The response list does not address this issue. The lack of validation in token transfers is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**
- **[H-02] Backdated `_startTimestamp` can lead to loss of funds**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-03] Continue claiming rewards after `numberOfEpochs` are over**
- **[H-04] `cancelPromotion` is too rigorous**
- **[H-05] Malicious tickets can lead to the loss of all tokens**
- **[H-06] Rewards can be claimed multiple times**
- **[H-07] Contract does not work with fee-on-transfer tokens**
- **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**
- **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**
- **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**
- **[M-04] Unsafe uint64 casting may overflow**
- **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

---

### **Conclusion**

The response list covers some of the issues in the issue report, particularly those related to input validation in `createPromotion()`. However, it misses several critical vulnerabilities, including issues related to malicious tickets, multiple reward claims, fee-on-transfer tokens, and unsafe casting. These gaps indicate that the response list is incomplete and does not fully address the security risks identified in the issue report.",2,0,10,20,"```
1. Lack of Input Validation
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks at which the true positives appear in the ranked list of predictions**:
   - The true positive is ""Lack of Input Validation"".
   - In the ranked list of predictions, ""Lack of Input Validation"" appears at rank **2**.

2. **Calculate the precision at that rank**:
   - Precision at rank 2 (\( P@2 \)) is calculated as the number of true positives up to rank 2 divided by the rank.
   - Number of true positives up to rank 2: 1 (since ""Lack of Input Validation"" is the only true positive).
   - \( P@2 = \frac{1}{2} = 0.5 \).

3. **Average the precision values for all true positives**:
   - Since there is only one true positive, the average precision (AP) is simply the precision at rank 2.
   - \( AP = 0.5 \).

**Output**:
```
0.5
```"
