nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Thought,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
DelegatedStaking.sol,"//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;
import ""@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import ""@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"";
import ""@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"";
import ""@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";

contract DelegatedStaking is OwnableUpgradeable{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    uint256 constant divider = 10**18; // 18 decimals used for scaling the rates
    uint128 validatorCoolDown; // how many epochs until validator unstaking is unlocked
    uint128 delegatorCoolDown; // how many epochs until delegator unstaking is unlocked
    uint128 maxCapMultiplier;
    uint128 validatorMinStakedRequired; // minimum # of tokens validator is required to have staked
    uint128 allocatedTokensPerEpoch; // # of tokens per epoch to be distributed
    uint128 rewardsLocked; // # of tokens the owner sent to the contract
    uint128 endEpoch; // the epoch when the contract will be out of allocated reward tokens
    uint128 totalGlobalShares; // global shares
    uint128 lastUpdateEpoch; // block # when the global exchange rate was updated last
    uint128 globalExchangeRate;
    uint128 validatorsN; // number of validators, used to get validator ids
    mapping(uint128 => Validator) validators; // id -> validator instance
    IERC20Upgradeable constant CQT = IERC20Upgradeable(0xD417144312DbF50465b1C641d016962017Ef6240);

    struct Staking {
        uint128 staked; // initial CQT amount staked
        uint128 shares; // # of validator shares that delegate owns
    }
    struct Unstaking {
        uint128 coolDownEnd; // epoch when unstaking can be redeemed
        uint128 amount;
    }
    struct Validator {
        address _address;
        address operator;
        uint128 commissionRate; // validator commission rate
        uint128 disabledEpoch; // epoch when validator got disabled, if set to 0, validator is enabled
        uint128 globalShares; // total number of global shares under a validator
        uint128 lastUpdateGlobalRate; // global exchange rate when the validator was updated the last time
        uint128 totalShares; // total number of validator shares
        uint128 delegated; // total number of tokens originally staked/delegated to the validator, this does not include interest
        uint128 exchangeRate; // validator exchange rate
        uint128 commissionAvailableToRedeem; // # of CQTs paid to the validator
        mapping(address => Staking) stakings;
        mapping(address => Unstaking[]) unstakings;
    }
    event RewardTokensDeposited(uint128 amount);
    event ValidatorAdded(uint128 indexed id, address indexed validator, address indexed operator);
    event ValidatorDisabled(uint128 indexed id);
    event Staked(uint128 indexed validatorId, address delegator, uint128 amount);
    event Unstaked(uint128 indexed validatorId, address indexed delegator, uint128 amount);
    event RecoveredUnstake(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakingId);
    event UnstakeRedeemed(uint128 indexed validatorId, address indexed delegator, uint128 amount);
    event RewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);
    event CommissionRewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);
    event AllocatedTokensTaken(uint128 amount);
    event MaxCapMultiplierChanged(uint128 amount);
    event TransferredUnstake(uint128 indexed oldValidatorId, uint128 indexed newValidatorId, address indexed delegator, uint128 amount, uint128 unstakingId);
    event EmissionRateChanged(uint128 newRate);
    event ValidatorCommissionRateChanged(uint128 indexed validatorId, uint128 newRate);
    event ValidatorMinStakedRequiredChanged(uint128 amount);
    event Initialized(uint128 minStakedRequired, uint128 validatorCoolDown, uint128 delegatorCoolDown, uint128 maxCapMultiplier, uint128 allocatedTokensPerEpoch, uint128 globalExchangeRate);

    // this is used to have the contract upgradeable
    function initialize(uint128 minStakedRequired) public initializer {
        __Ownable_init();
        validatorMinStakedRequired = minStakedRequired;
        validatorCoolDown = 180*6646; // ~ 6 months
        delegatorCoolDown = 28*6646; // ~ 28 days
        maxCapMultiplier = 10;
        allocatedTokensPerEpoch = 1*10**18; // should never be 0
        globalExchangeRate = 10**18; // 1 to 1
        emit Initialized(minStakedRequired, validatorCoolDown, delegatorCoolDown, maxCapMultiplier, allocatedTokensPerEpoch, globalExchangeRate);
    }

    // used to transfer CQT from delegators, validators and the owner to the contract
    function _transferToContract(address from, uint128 amount) internal {
        CQT.safeTransferFrom(from, address(this), amount);
    }

    // used to transfer CQT from contract, for rewards redemption or transferring out unstaked
    function _transferFromContract(address to, uint128 amount) internal {
        CQT.safeTransfer(to, amount);
    }

    // transfer CQT from the owner to the contract for rewards allocation, must change end epoch
    function depositRewardTokens(uint128 amount) public onlyOwner {
        require(amount >= allocatedTokensPerEpoch, ""Does not cover least 1 epoch"");
        require(amount % allocatedTokensPerEpoch == 0, ""Not multiple"");
        if (endEpoch != 0) {
            unchecked { endEpoch += amount / allocatedTokensPerEpoch; }
        }
        else{
            unchecked { rewardsLocked += amount; }
        }
        _transferToContract(msg.sender, amount);
        emit RewardTokensDeposited(amount);
    }

    // transfer reward CQT from the contract to the owner, must change end epoch and not allow transfer from the past
    function takeOutRewardTokens(uint128 amount) public onlyOwner {
        require(amount > 0, ""Amount is 0"");
        require(amount % allocatedTokensPerEpoch == 0, ""Not multiple"");
        if (endEpoch != 0){
            uint128 currentEpoch = uint128(block.number);
            uint128 epochs = amount / allocatedTokensPerEpoch;
            require(endEpoch - epochs > currentEpoch, ""Cannot takeout rewards from past"");
            unchecked { endEpoch = endEpoch - epochs; }
        }
        else{
            require(rewardsLocked >= amount, ""Amount is greater than available"");
            unchecked { rewardsLocked -= amount; }
        }
        _transferFromContract(msg.sender, amount);
        emit AllocatedTokensTaken(amount);
    }

    // update global exchange rate
    function _updateGlobalExchangeRate() internal {
        uint128 currentBlock = uint128(block.number);
        // if the program ended, set update epoch to the end epoch
        uint128 currentEpoch = currentBlock < endEpoch? currentBlock : endEpoch;
        if (currentEpoch != lastUpdateEpoch){
            // when no one has staked anything, do not update the rate
            if(totalGlobalShares > 0)
            {
                unchecked { globalExchangeRate += uint128(uint256(allocatedTokensPerEpoch) * divider * uint256(currentEpoch - lastUpdateEpoch)/uint256(totalGlobalShares)) ; }
            }
            lastUpdateEpoch = currentEpoch;
        }
    }

    // update validator exchange rate
    function _updateValidator(Validator storage v) internal {
        // if validator is disabled, we do not update it since it was updated during disabling transaction
        if(v.disabledEpoch == 0){
            if (v.totalShares == 0){
                // when validator stakes the first time, the exchange rate must be equal to the current global exchange rate
                v.exchangeRate = globalExchangeRate;
            }
            else {
                // the growth of global exchange rate since the validator was updated the last time
                uint128 rateDifference;
                unchecked { rateDifference = globalExchangeRate - v.lastUpdateGlobalRate; }
                // tokens given to the validator and its delegators since last update
                uint128 tokensGivenToValidator = _sharesToTokens(v.globalShares, rateDifference);
                // commission paid out of the tokens
                uint128 commissionPaid = uint128(uint256(tokensGivenToValidator) * uint256(v.commissionRate) /  divider);
                // increase validator exchange rate by distributing the leftover tokens through the validator shares
                v.exchangeRate += uint128(uint256(tokensGivenToValidator - commissionPaid) * divider / v.totalShares);
                // give commission tokens to the validator
                unchecked { v.commissionAvailableToRedeem += commissionPaid; }
            }
            // set the last update global rate to the current one
            v.lastUpdateGlobalRate = globalExchangeRate;
        }
    }
    // used to convert global shares or validator shares to CQT
    function _sharesToTokens(uint128 sharesN, uint128 rate) internal view returns(uint128){
        return uint128(uint256(sharesN) * uint256(rate) / divider);
    }
    // used to convert CQT to global shares or validator shares
    function _tokensToShares(uint128 amount, uint128 rate) internal view returns(uint128){
        return uint128(uint256(amount) * divider / uint256(rate));
    }

    function stake(uint128 validatorId, uint128 amount) public {
        _stake(validatorId, amount, true);
    }
    // need to update global exchange rate, validator data and then delegator instance
    // withTransfer set to false when delegators recover unstake, because the tokens are already in the contract
    function _stake(uint128 validatorId, uint128 amount, bool withTransfer) internal {
        require(amount >= divider, ""Amount must be at least 1 token"");
        require(validatorId < validatorsN, ""Invalid validator"");
        Validator storage v = validators[validatorId];
        require(v.disabledEpoch == 0, ""Validator is disabled"");
        // if this is the first stake, then set the end epoch
        if (endEpoch == 0){
            unchecked { endEpoch = uint128(block.number) + rewardsLocked / allocatedTokensPerEpoch; }
            rewardsLocked = 0; // no longer used and saves a bit of gas
        }
        require(endEpoch > block.number, ""Program ended"");
        _updateGlobalExchangeRate();
        _updateValidator(v);
        // if staker is validator who self delegates
        if (msg.sender == v._address){
            require(amount + v.stakings[msg.sender].staked >= validatorMinStakedRequired, ""Amount < min staked required"");
        }
        else {
            // otherwise need to check for max cap
            uint128 validatorStaked = v.stakings[v._address].staked;
            uint128 validatorMaxCap = validatorStaked * maxCapMultiplier;
            uint128 newDelegated = v.delegated - validatorStaked + amount;
            require(newDelegated <= validatorMaxCap, ""Validator max capacity exceeded"");
        }
        // it is set to true when there is a stake
        // it is set to false when we recover delegation from unstaking
        if (withTransfer)
            _transferToContract(msg.sender, amount);
        Staking storage s = v.stakings[msg.sender];

        // update global shares #
        uint128 globalSharesToAdd = _tokensToShares(amount, globalExchangeRate);
        unchecked { totalGlobalShares += globalSharesToAdd; }
        unchecked { v.globalShares += globalSharesToAdd; }

        // update validator shares #
        uint128 newDelegatorSharesN = _tokensToShares(amount, v.exchangeRate);
        unchecked { v.totalShares += newDelegatorSharesN; }
        unchecked { s.shares += newDelegatorSharesN; }
        unchecked { v.delegated += amount; }
        unchecked { s.staked += amount; }
        emit Staked(validatorId, msg.sender, amount);
    }

    // need to update global exchange rate, validator data and then delegator instance
    function unstake(uint128 validatorId, uint128 amount) public {
        require(validatorId < validatorsN, ""Invalid validator"");
        Validator storage v = validators[validatorId];
        Staking storage s = v.stakings[msg.sender];
        require(s.staked >= amount, ""Staked < amount provided"");
        bool isValidator = msg.sender == v._address;
        _updateGlobalExchangeRate();
        _updateValidator(v);
        // only update if the validator is enabled, otherwise the global shares were already excluded during disableValidator call and the rest does not matter anymore
        uint128 validatorSharesRemove = _tokensToShares(amount, v.exchangeRate);
        require(validatorSharesRemove > 0, ""Unstake amount is too small"");
        if (v.disabledEpoch == 0){
            // if validator is enabled and the program has not ended -> check for unstaking beyond max cap or min stake required
            if (isValidator && endEpoch > block.number){
                uint128 newValidatorStaked = s.staked - amount;
                uint128 newValidatorMaxCap = newValidatorStaked * maxCapMultiplier;
                uint128 delegated = v.delegated - s.staked;
                require(delegated <= newValidatorMaxCap, ""Cannot unstake beyond max cap"");
                require(newValidatorStaked >= validatorMinStakedRequired, ""Unstake > min staked required"");
            }

            // update global shares #
            uint128 globalSharesRemove = _tokensToShares(amount, globalExchangeRate);
            require(globalSharesRemove > 0, ""Unstake amount is too small"");
            unchecked { totalGlobalShares -= globalSharesRemove;}
            unchecked { v.globalShares -= globalSharesRemove; }

            // update validator shares #
            unchecked { v.totalShares -= validatorSharesRemove; }
            unchecked { v.delegated -= amount; }
        }
        unchecked { s.shares -= validatorSharesRemove; }
        unchecked { s.staked -= amount; }

        // create unstaking instance
        uint128 coolDownEnd = v.disabledEpoch != 0 ? v.disabledEpoch : uint128(block.number);
        unchecked { coolDownEnd += (isValidator ? validatorCoolDown : delegatorCoolDown); }
        v.unstakings[msg.sender].push(Unstaking( coolDownEnd, amount));
        emit Unstaked(validatorId, msg.sender, amount);
    }

    // restake unstaked tokens
    function recoverUnstaking(uint128 amount, uint128 validatorId, uint128 unstakingId) public{
        Unstaking storage us = validators[validatorId].unstakings[msg.sender][unstakingId];
        require(us.amount >= amount, ""Unstaking has less tokens"");
        _stake(validatorId, amount, false);
        us.amount -= amount;
        // set cool down end to 0 to release gas if new unstaking amount is 0
        if(us.amount == 0)
            us.coolDownEnd = 0;
        emit RecoveredUnstake(validatorId, msg.sender, amount, unstakingId);
    }

    // if amount is 0 then redeem all
    function _redeemRewards( uint128 validatorId, address beneficiary, uint128 amount) internal {
        require(beneficiary!=address(0x0), ""Invalid beneficiary"");
        _updateGlobalExchangeRate();
        Validator storage v = validators[validatorId];
        _updateValidator(v);
        Staking storage s = v.stakings[msg.sender];

        uint128 rewards = _sharesToTokens(s.shares, v.exchangeRate) - s.staked;
        if(msg.sender == v._address){
            if(amount == 0){
                unchecked { amount = rewards + v.commissionAvailableToRedeem; }
            }
            require(rewards + v.commissionAvailableToRedeem >= amount, ""Redeem amount > available"");
            // first redeem rewards from commission
            uint128 commissionLeftOver = amount < v.commissionAvailableToRedeem ? v.commissionAvailableToRedeem - amount : 0;
            // if there is more, redeem  it from regular rewards
            if (commissionLeftOver == 0){
                uint128 validatorSharesRemove = _tokensToShares(amount - v.commissionAvailableToRedeem, v.exchangeRate);
                unchecked { s.shares -= validatorSharesRemove; }
                unchecked { v.totalShares -= validatorSharesRemove; }
            }
            emit CommissionRewardRedeemed(validatorId, beneficiary, v.commissionAvailableToRedeem - commissionLeftOver);
            v.commissionAvailableToRedeem = commissionLeftOver;
        }
        else {
            if(amount == 0){
                amount = rewards;
            }
            require(rewards >= amount, ""Redeem amount > available"");
            uint128 validatorSharesRemove = _tokensToShares(amount, v.exchangeRate);
            unchecked { s.shares -= validatorSharesRemove; }
            unchecked { v.totalShares -= validatorSharesRemove; }
        }
        _transferFromContract(beneficiary, amount);

        // update global shares #
        // this includes commission and rewards earned
        // only update if the validator is enabled, otherwise the shares were already excluded during disableValidator call
        if (v.disabledEpoch == 0){
            uint128 globalSharesRemove = _tokensToShares(amount, globalExchangeRate);
            unchecked { totalGlobalShares -= globalSharesRemove; }
            unchecked { v.globalShares -= globalSharesRemove; }
        }
        emit RewardRedeemed(validatorId, beneficiary, amount);
    }

    // redeem all available rewards
    function redeemAllRewards( uint128 validatorId, address beneficiary) external {
        _redeemRewards(validatorId, beneficiary, 0);
    }

    // if validator calls redeem rewards, first tokens paid from comissions will be redeemed and then regular rewards
    function redeemRewards( uint128 validatorId, address beneficiary, uint128 amount) external {
        require(amount > 0, ""Amount is 0"");
        _redeemRewards(validatorId, beneficiary, amount);
    }

    // add new validator instance
    function addValidator(address validator, address operator, uint128 commissionRate) public onlyOwner {
        require(commissionRate < divider, ""Rate must be less than 100%"");
        uint128 N = validatorsN;
        validators[N]._address = validator;
        validators[N].operator = operator;
        validators[N].commissionRate = commissionRate;
        emit ValidatorAdded(N, validator, operator);
        unchecked { validatorsN += 1; }
    }

    // can only be called by the owner or the validator, disabling will allow validator to fully unstake
    // validator instance can only be disabled once and can never be reenabled
    function disableValidator(uint128 validatorId) public {
        Validator storage v = validators[validatorId];
        require(v.disabledEpoch == 0, ""Validator is already disabled"");
        require(v._address == msg.sender || msg.sender == owner(), ""Caller is not owner or validator"");
        _updateGlobalExchangeRate();
        _updateValidator(v);
        v.disabledEpoch = uint128(block.number) < endEpoch? uint128(block.number) : endEpoch;
        unchecked { totalGlobalShares -= v.globalShares; }
        emit ValidatorDisabled(validatorId);
    }

    // change emission rate, should reset end epoch
    function setAllocatedTokensPerEpoch(uint128 amount) public onlyOwner {
        require(amount > 0, ""Amount is 0"");
        uint128 toTransfer;
        if (endEpoch != 0){
            _updateGlobalExchangeRate();
            // get number of epochs from now to the end epoch
            uint128 epochs = endEpoch > uint128(block.number) ? endEpoch - uint128(block.number) : 0;
            // calculate how much rewards would be distributed with the old emission rate
            uint128 futureRewards = allocatedTokensPerEpoch * epochs;
            // calculate how many epochs will be covered
            uint128 addEpochs = futureRewards / amount;
            toTransfer = futureRewards % amount;
            require(addEpochs != 0, ""This amount will end the program"");
            unchecked { endEpoch = uint128(block.number) + addEpochs; }
        }
        else {
          toTransfer = rewardsLocked % amount;
        }
        allocatedTokensPerEpoch = amount;
        emit EmissionRateChanged(amount);
        if(toTransfer > 0)
            _transferFromContract(msg.sender, toTransfer);

    }

    // we assume that we will never set it to less than what is staked already
    function setMaxCapMultiplier(uint128 amount) public onlyOwner {
        require(amount > 0, ""Must be greater than 0"");
        maxCapMultiplier = amount;
        emit MaxCapMultiplierChanged(amount);
    }

    // only owner can change commission rate
    function setValidatorCommissionRate(uint128 amount, uint128 validatorId) public onlyOwner {
        require(amount < divider, ""Rate must be less than 100%"");
        _updateGlobalExchangeRate();
        _updateValidator(validators[validatorId]);
        validators[validatorId].commissionRate = amount;
        emit ValidatorCommissionRateChanged(validatorId, amount);
    }

    // we are assuming there will never be a case when the owner sets the value to something extremely big and if that happens accidentally, we will just recall the function
    function setValidatorMinStakedRequired(uint128 amount) public onlyOwner {
        validatorMinStakedRequired = amount;
        emit ValidatorMinStakedRequiredChanged(amount);
    }

    // if a validator gets disabled, delegators can redelegate their tokens to another validator
    // first they need to unstake
    function redelegateUnstaked(uint128 amount, uint128 oldValidatorId, uint128 newValidatorId, uint128 unstakingId) public {
        require(validators[oldValidatorId].disabledEpoch != 0, ""Validator is not disabled"");
        require(validators[oldValidatorId]._address != msg.sender, ""Validator cannot redelegate"");
        Unstaking storage us = validators[oldValidatorId].unstakings[msg.sender][unstakingId];
        require(us.amount >= amount, ""Unstaking has less tokens"");
        _stake(newValidatorId, amount, false);
        unchecked { us.amount -= amount; }
        // set cool down end to 0 to release gas if new unstaking amount is 0
        if(us.amount == 0)
            us.coolDownEnd = 0;
        emit TransferredUnstake(oldValidatorId, newValidatorId, msg.sender, amount, unstakingId);
    }

    // transfer out unlocked unstaked tokens back to the delegator
    function transferUnstakedOut(uint128 amount, uint128 validatorId, uint128 unstakingId) public {
        Unstaking storage us = validators[validatorId].unstakings[msg.sender][unstakingId];
        require( uint128(block.number) > us.coolDownEnd, ""Cooldown period has not ended"" );
        require(us.amount >= amount, ""Amount is too high"");
        _transferFromContract(msg.sender, amount);
        unchecked { us.amount -= amount; }
        // set cool down end to 0 to release gas if new unstaking amount is 0
        if (us.amount == 0)
            us.coolDownEnd = 0;
        emit UnstakeRedeemed(validatorId, msg.sender, amount);
    }

    // returns details of each validator
    // array index is id
    function getValidatorsDetails() public view returns (uint128[] memory commissionRates, uint128[] memory delegated) {
        commissionRates = new uint128[](validatorsN);
        delegated = new uint128[](validatorsN);
        for (uint128 i = 0; i < validatorsN; ++i){
            Validator storage v = validators[i];
            commissionRates[i] = v.commissionRate;
            delegated[i] = v.delegated - v.stakings[v._address].staked;
        }
        return (commissionRates, delegated);
    }

    // this follows the same logic as _updateGlobalExchangeRate and _updateValidator
    // array index is id of validator
    function getDelegatorDetails(address delegator) public view returns( uint128[] memory delegated,  uint128[] memory rewardsAvailable, uint128[] memory commissionRewards) {
       delegated = new uint128[](validatorsN);
       rewardsAvailable = new uint128[](validatorsN);
       commissionRewards = new uint128[](validatorsN);
       uint256 currentEpoch = block.number < endEpoch? block.number: endEpoch;
       uint128 newGlobalExchangeRate = uint128((uint256(allocatedTokensPerEpoch) * divider/totalGlobalShares)*(currentEpoch - lastUpdateEpoch)) + globalExchangeRate;
       Validator storage v;
       Staking storage s;
        for (uint128 i = 0; i < validatorsN; ++i){
            v = validators[i];
            s = v.stakings[delegator];
            delegated[i] = s.staked;
            if (v.disabledEpoch == 0){
                uint128 newTokensGiven = _sharesToTokens(v.globalShares, newGlobalExchangeRate - v.lastUpdateGlobalRate);
                uint128 commissionPaid = uint128(uint256(newTokensGiven) * uint256(v.commissionRate) /  divider);
                uint128 rateIncrease = uint128(uint256(newTokensGiven - commissionPaid) * divider / v.totalShares);
                rewardsAvailable[i] = _sharesToTokens(s.shares, v.exchangeRate + rateIncrease) - s.staked;
                if(delegator == v._address)
                    commissionRewards[i] = v.commissionAvailableToRedeem + commissionPaid;
            }
            else {
                rewardsAvailable[i] = _sharesToTokens(s.shares, v.exchangeRate) - s.staked;
                if(delegator == v._address)
                    commissionRewards[i] = v.commissionAvailableToRedeem;
            }
        }
        return (delegated, rewardsAvailable, commissionRewards);
    }

    function getMetadata() public view returns(uint128,  uint128, uint128, uint128, uint128 ){
        uint128 totalStaked = uint128(uint256(totalGlobalShares) * uint256(globalExchangeRate) / divider);
        return (allocatedTokensPerEpoch, endEpoch, maxCapMultiplier, totalStaked, validatorsN);
    }
}",5629,477,"[H-01] Usage of an incorrect version of Ownbale library can potentially malfunction all onlyOwner functions
Based on the context and comments in the code, the DelegatedStaking.sol contract is designed to be deployed as an upgradeable proxy contract.
However, the current implementation is using an non-upgradeable version of the Ownbale library: @openzeppelin/contracts/access/Ownable.sol instead of the upgradeable version: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol.
A regular, non-upgradeable `Ownbale` library will make the deployer the default owner in the constructor. Due to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts. Therefore, there will be no owner when the contract is deployed as a proxy contract.
As a result, all the `onlyOwner` functions will be inaccessible.
  [H-02] unstake should update exchange rates first
The unstake function does not immediately update the exchange rates. It first computes the `validatorSharesRemove = tokensToShares(amount, v.exchangeRate)` with the old exchange rate.
Only afterwards, it updates the exchange rates (if the validator is not disabled):
  [M-01] reward tokens could get lost due to rounding down
The function `depositRewardTokens` divides the ""amount"" of tokens by `allocatedTokensPerEpoch` to calculate the `endEpoch`. When ""amount"" isn't a multiple of `allocatedTokensPerEpoch` the result of the division will be rounded down, effectively losing a number of tokens for the rewards.
For example if allocatedTokensPerEpoch is set to 3e18 and ""amount"" is 100e18 then endEpoch will be increased with 33e18 and the last 1e18 tokens are lost.
A similar problem occurs here:
- in `setAllocatedTokensPerEpoch()`, with the recalculation of `endEpoch`
- in `takeOutRewardTokens()`, with the retrieval of tokens
- in `_stake()`, when initializing `endEpoch` (e.g. when endEpoch==0)


[M-02] Incorrect updateGlobalExchangeRate implementation
function `_UpdateGlobalExchangeRate` has incorrect implementation when `totalGlobalShares` is zero.
If any user didn't start stake, `totalGlobalShares` is 0, and every stake it will increase. but there is possibility that `totalGlobalShares` can be 0 amount later by unstake or disable validator.
  [M-03] Validator can fail to receive commission reward in `redeemAllRewards`
Validator can fail to receive commission reward by calling redeemAllRewards. There's a check in `redeemAllRewards`
“uint128 rewards = sharesToTokens(s.shares, v.exchangeRate) - s.staked;”
“require(rewards > 0, ""Nothing to redeem”);""
The validator's tx might be reverted here even if he got some commission reward to receive.",5,"pragma solidity ^0.8.0;
import ""@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import ""@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol"";
import ""@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"";
import ""@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";

contract DelegatedStaking is OwnableUpgradeable{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    uint256 constant divider = 10**18; 
    uint128 validatorCoolDown; 
    uint128 delegatorCoolDown; 
    uint128 maxCapMultiplier;
    uint128 validatorMinStakedRequired; 
    uint128 allocatedTokensPerEpoch; 
    uint128 rewardsLocked; 
    uint128 endEpoch; 
    uint128 totalGlobalShares; 
    uint128 lastUpdateEpoch; 
    uint128 globalExchangeRate;
    uint128 validatorsN; 
    mapping(uint128 => Validator) validators; 
    IERC20Upgradeable constant CQT = IERC20Upgradeable(0xD417144312DbF50465b1C641d016962017Ef6240);

    struct Staking {
        uint128 staked; 
        uint128 shares; 
    }
    struct Unstaking {
        uint128 coolDownEnd; 
        uint128 amount;
    }
    struct Validator {
        address _address;
        address operator;
        uint128 commissionRate; 
        uint128 disabledEpoch; 
        uint128 globalShares; 
        uint128 lastUpdateGlobalRate; 
        uint128 totalShares; 
        uint128 delegated; 
        uint128 exchangeRate; 
        uint128 commissionAvailableToRedeem; 
        mapping(address => Staking) stakings;
        mapping(address => Unstaking[]) unstakings;
    }
    event RewardTokensDeposited(uint128 amount);
    event ValidatorAdded(uint128 indexed id, address indexed validator, address indexed operator);
    event ValidatorDisabled(uint128 indexed id);
    event Staked(uint128 indexed validatorId, address delegator, uint128 amount);
    event Unstaked(uint128 indexed validatorId, address indexed delegator, uint128 amount);
    event RecoveredUnstake(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakingId);
    event UnstakeRedeemed(uint128 indexed validatorId, address indexed delegator, uint128 amount);
    event RewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);
    event CommissionRewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);
    event AllocatedTokensTaken(uint128 amount);
    event MaxCapMultiplierChanged(uint128 amount);
    event TransferredUnstake(uint128 indexed oldValidatorId, uint128 indexed newValidatorId, address indexed delegator, uint128 amount, uint128 unstakingId);
    event EmissionRateChanged(uint128 newRate);
    event ValidatorCommissionRateChanged(uint128 indexed validatorId, uint128 newRate);
    event ValidatorMinStakedRequiredChanged(uint128 amount);
    event Initialized(uint128 minStakedRequired, uint128 validatorCoolDown, uint128 delegatorCoolDown, uint128 maxCapMultiplier, uint128 allocatedTokensPerEpoch, uint128 globalExchangeRate);

    
    function initialize(uint128 minStakedRequired) public initializer {
        __Ownable_init();
        validatorMinStakedRequired = minStakedRequired;
        validatorCoolDown = 180*6646; 
        delegatorCoolDown = 28*6646; 
        maxCapMultiplier = 10;
        allocatedTokensPerEpoch = 1*10**18; 
        globalExchangeRate = 10**18; 
        emit Initialized(minStakedRequired, validatorCoolDown, delegatorCoolDown, maxCapMultiplier, allocatedTokensPerEpoch, globalExchangeRate);
    }

    
    function _transferToContract(address from, uint128 amount) internal {
        CQT.safeTransferFrom(from, address(this), amount);
    }

    
    function _transferFromContract(address to, uint128 amount) internal {
        CQT.safeTransfer(to, amount);
    }

    
    function depositRewardTokens(uint128 amount) public onlyOwner {
        require(amount >= allocatedTokensPerEpoch, ""Does not cover least 1 epoch"");
        require(amount % allocatedTokensPerEpoch == 0, ""Not multiple"");
        if (endEpoch != 0) {
            unchecked { endEpoch += amount / allocatedTokensPerEpoch; }
        }
        else{
            unchecked { rewardsLocked += amount; }
        }
        _transferToContract(msg.sender, amount);
        emit RewardTokensDeposited(amount);
    }

    
    function takeOutRewardTokens(uint128 amount) public onlyOwner {
        require(amount > 0, ""Amount is 0"");
        require(amount % allocatedTokensPerEpoch == 0, ""Not multiple"");
        if (endEpoch != 0){
            uint128 currentEpoch = uint128(block.number);
            uint128 epochs = amount / allocatedTokensPerEpoch;
            require(endEpoch - epochs > currentEpoch, ""Cannot takeout rewards from past"");
            unchecked { endEpoch = endEpoch - epochs; }
        }
        else{
            require(rewardsLocked >= amount, ""Amount is greater than available"");
            unchecked { rewardsLocked -= amount; }
        }
        _transferFromContract(msg.sender, amount);
        emit AllocatedTokensTaken(amount);
    }

    
    function _updateGlobalExchangeRate() internal {
        uint128 currentBlock = uint128(block.number);
        
        uint128 currentEpoch = currentBlock < endEpoch? currentBlock : endEpoch;
        if (currentEpoch != lastUpdateEpoch){
            
            if(totalGlobalShares > 0)
            {
                unchecked { globalExchangeRate += uint128(uint256(allocatedTokensPerEpoch) * divider * uint256(currentEpoch - lastUpdateEpoch)/uint256(totalGlobalShares)) ; }
            }
            lastUpdateEpoch = currentEpoch;
        }
    }

    
    function _updateValidator(Validator storage v) internal {
        
        if(v.disabledEpoch == 0){
            if (v.totalShares == 0){
                
                v.exchangeRate = globalExchangeRate;
            }
            else {
                
                uint128 rateDifference;
                unchecked { rateDifference = globalExchangeRate - v.lastUpdateGlobalRate; }
                
                uint128 tokensGivenToValidator = _sharesToTokens(v.globalShares, rateDifference);
                
                uint128 commissionPaid = uint128(uint256(tokensGivenToValidator) * uint256(v.commissionRate) /  divider);
                
                v.exchangeRate += uint128(uint256(tokensGivenToValidator - commissionPaid) * divider / v.totalShares);
                
                unchecked { v.commissionAvailableToRedeem += commissionPaid; }
            }
            
            v.lastUpdateGlobalRate = globalExchangeRate;
        }
    }
    
    function _sharesToTokens(uint128 sharesN, uint128 rate) internal view returns(uint128){
        return uint128(uint256(sharesN) * uint256(rate) / divider);
    }
    
    function _tokensToShares(uint128 amount, uint128 rate) internal view returns(uint128){
        return uint128(uint256(amount) * divider / uint256(rate));
    }

    function stake(uint128 validatorId, uint128 amount) public {
        _stake(validatorId, amount, true);
    }
    
    
    function _stake(uint128 validatorId, uint128 amount, bool withTransfer) internal {
        require(amount >= divider, ""Amount must be at least 1 token"");
        require(validatorId < validatorsN, ""Invalid validator"");
        Validator storage v = validators[validatorId];
        require(v.disabledEpoch == 0, ""Validator is disabled"");
        
        if (endEpoch == 0){
            unchecked { endEpoch = uint128(block.number) + rewardsLocked / allocatedTokensPerEpoch; }
            rewardsLocked = 0; 
        }
        require(endEpoch > block.number, ""Program ended"");
        _updateGlobalExchangeRate();
        _updateValidator(v);
        
        if (msg.sender == v._address){
            require(amount + v.stakings[msg.sender].staked >= validatorMinStakedRequired, ""Amount < min staked required"");
        }
        else {
            
            uint128 validatorStaked = v.stakings[v._address].staked;
            uint128 validatorMaxCap = validatorStaked * maxCapMultiplier;
            uint128 newDelegated = v.delegated - validatorStaked + amount;
            require(newDelegated <= validatorMaxCap, ""Validator max capacity exceeded"");
        }
        
        
        if (withTransfer)
            _transferToContract(msg.sender, amount);
        Staking storage s = v.stakings[msg.sender];

        
        uint128 globalSharesToAdd = _tokensToShares(amount, globalExchangeRate);
        unchecked { totalGlobalShares += globalSharesToAdd; }
        unchecked { v.globalShares += globalSharesToAdd; }

        
        uint128 newDelegatorSharesN = _tokensToShares(amount, v.exchangeRate);
        unchecked { v.totalShares += newDelegatorSharesN; }
        unchecked { s.shares += newDelegatorSharesN; }
        unchecked { v.delegated += amount; }
        unchecked { s.staked += amount; }
        emit Staked(validatorId, msg.sender, amount);
    }

    
    function unstake(uint128 validatorId, uint128 amount) public {
        require(validatorId < validatorsN, ""Invalid validator"");
        Validator storage v = validators[validatorId];
        Staking storage s = v.stakings[msg.sender];
        require(s.staked >= amount, ""Staked < amount provided"");
        bool isValidator = msg.sender == v._address;
        _updateGlobalExchangeRate();
        _updateValidator(v);
        
        uint128 validatorSharesRemove = _tokensToShares(amount, v.exchangeRate);
        require(validatorSharesRemove > 0, ""Unstake amount is too small"");
        if (v.disabledEpoch == 0){
            
            if (isValidator && endEpoch > block.number){
                uint128 newValidatorStaked = s.staked - amount;
                uint128 newValidatorMaxCap = newValidatorStaked * maxCapMultiplier;
                uint128 delegated = v.delegated - s.staked;
                require(delegated <= newValidatorMaxCap, ""Cannot unstake beyond max cap"");
                require(newValidatorStaked >= validatorMinStakedRequired, ""Unstake > min staked required"");
            }

            
            uint128 globalSharesRemove = _tokensToShares(amount, globalExchangeRate);
            require(globalSharesRemove > 0, ""Unstake amount is too small"");
            unchecked { totalGlobalShares -= globalSharesRemove;}
            unchecked { v.globalShares -= globalSharesRemove; }

            
            unchecked { v.totalShares -= validatorSharesRemove; }
            unchecked { v.delegated -= amount; }
        }
        unchecked { s.shares -= validatorSharesRemove; }
        unchecked { s.staked -= amount; }

        
        uint128 coolDownEnd = v.disabledEpoch != 0 ? v.disabledEpoch : uint128(block.number);
        unchecked { coolDownEnd += (isValidator ? validatorCoolDown : delegatorCoolDown); }
        v.unstakings[msg.sender].push(Unstaking( coolDownEnd, amount));
        emit Unstaked(validatorId, msg.sender, amount);
    }

    
    function recoverUnstaking(uint128 amount, uint128 validatorId, uint128 unstakingId) public{
        Unstaking storage us = validators[validatorId].unstakings[msg.sender][unstakingId];
        require(us.amount >= amount, ""Unstaking has less tokens"");
        _stake(validatorId, amount, false);
        us.amount -= amount;
        
        if(us.amount == 0)
            us.coolDownEnd = 0;
        emit RecoveredUnstake(validatorId, msg.sender, amount, unstakingId);
    }

    
    function _redeemRewards( uint128 validatorId, address beneficiary, uint128 amount) internal {
        require(beneficiary!=address(0x0), ""Invalid beneficiary"");
        _updateGlobalExchangeRate();
        Validator storage v = validators[validatorId];
        _updateValidator(v);
        Staking storage s = v.stakings[msg.sender];

        uint128 rewards = _sharesToTokens(s.shares, v.exchangeRate) - s.staked;
        if(msg.sender == v._address){
            if(amount == 0){
                unchecked { amount = rewards + v.commissionAvailableToRedeem; }
            }
            require(rewards + v.commissionAvailableToRedeem >= amount, ""Redeem amount > available"");
            
            uint128 commissionLeftOver = amount < v.commissionAvailableToRedeem ? v.commissionAvailableToRedeem - amount : 0;
            
            if (commissionLeftOver == 0){
                uint128 validatorSharesRemove = _tokensToShares(amount - v.commissionAvailableToRedeem, v.exchangeRate);
                unchecked { s.shares -= validatorSharesRemove; }
                unchecked { v.totalShares -= validatorSharesRemove; }
            }
            emit CommissionRewardRedeemed(validatorId, beneficiary, v.commissionAvailableToRedeem - commissionLeftOver);
            v.commissionAvailableToRedeem = commissionLeftOver;
        }
        else {
            if(amount == 0){
                amount = rewards;
            }
            require(rewards >= amount, ""Redeem amount > available"");
            uint128 validatorSharesRemove = _tokensToShares(amount, v.exchangeRate);
            unchecked { s.shares -= validatorSharesRemove; }
            unchecked { v.totalShares -= validatorSharesRemove; }
        }
        _transferFromContract(beneficiary, amount);

        
        
        
        if (v.disabledEpoch == 0){
            uint128 globalSharesRemove = _tokensToShares(amount, globalExchangeRate);
            unchecked { totalGlobalShares -= globalSharesRemove; }
            unchecked { v.globalShares -= globalSharesRemove; }
        }
        emit RewardRedeemed(validatorId, beneficiary, amount);
    }

    
    function redeemAllRewards( uint128 validatorId, address beneficiary) external {
        _redeemRewards(validatorId, beneficiary, 0);
    }

    
    function redeemRewards( uint128 validatorId, address beneficiary, uint128 amount) external {
        require(amount > 0, ""Amount is 0"");
        _redeemRewards(validatorId, beneficiary, amount);
    }

    
    function addValidator(address validator, address operator, uint128 commissionRate) public onlyOwner {
        require(commissionRate < divider, ""Rate must be less than 100%"");
        uint128 N = validatorsN;
        validators[N]._address = validator;
        validators[N].operator = operator;
        validators[N].commissionRate = commissionRate;
        emit ValidatorAdded(N, validator, operator);
        unchecked { validatorsN += 1; }
    }

    
    
    function disableValidator(uint128 validatorId) public {
        Validator storage v = validators[validatorId];
        require(v.disabledEpoch == 0, ""Validator is already disabled"");
        require(v._address == msg.sender || msg.sender == owner(), ""Caller is not owner or validator"");
        _updateGlobalExchangeRate();
        _updateValidator(v);
        v.disabledEpoch = uint128(block.number) < endEpoch? uint128(block.number) : endEpoch;
        unchecked { totalGlobalShares -= v.globalShares; }
        emit ValidatorDisabled(validatorId);
    }

    
    function setAllocatedTokensPerEpoch(uint128 amount) public onlyOwner {
        require(amount > 0, ""Amount is 0"");
        uint128 toTransfer;
        if (endEpoch != 0){
            _updateGlobalExchangeRate();
            
            uint128 epochs = endEpoch > uint128(block.number) ? endEpoch - uint128(block.number) : 0;
            
            uint128 futureRewards = allocatedTokensPerEpoch * epochs;
            
            uint128 addEpochs = futureRewards / amount;
            toTransfer = futureRewards % amount;
            require(addEpochs != 0, ""This amount will end the program"");
            unchecked { endEpoch = uint128(block.number) + addEpochs; }
        }
        else {
          toTransfer = rewardsLocked % amount;
        }
        allocatedTokensPerEpoch = amount;
        emit EmissionRateChanged(amount);
        if(toTransfer > 0)
            _transferFromContract(msg.sender, toTransfer);

    }

    
    function setMaxCapMultiplier(uint128 amount) public onlyOwner {
        require(amount > 0, ""Must be greater than 0"");
        maxCapMultiplier = amount;
        emit MaxCapMultiplierChanged(amount);
    }

    
    function setValidatorCommissionRate(uint128 amount, uint128 validatorId) public onlyOwner {
        require(amount < divider, ""Rate must be less than 100%"");
        _updateGlobalExchangeRate();
        _updateValidator(validators[validatorId]);
        validators[validatorId].commissionRate = amount;
        emit ValidatorCommissionRateChanged(validatorId, amount);
    }

    
    function setValidatorMinStakedRequired(uint128 amount) public onlyOwner {
        validatorMinStakedRequired = amount;
        emit ValidatorMinStakedRequiredChanged(amount);
    }

    
    
    function redelegateUnstaked(uint128 amount, uint128 oldValidatorId, uint128 newValidatorId, uint128 unstakingId) public {
        require(validators[oldValidatorId].disabledEpoch != 0, ""Validator is not disabled"");
        require(validators[oldValidatorId]._address != msg.sender, ""Validator cannot redelegate"");
        Unstaking storage us = validators[oldValidatorId].unstakings[msg.sender][unstakingId];
        require(us.amount >= amount, ""Unstaking has less tokens"");
        _stake(newValidatorId, amount, false);
        unchecked { us.amount -= amount; }
        
        if(us.amount == 0)
            us.coolDownEnd = 0;
        emit TransferredUnstake(oldValidatorId, newValidatorId, msg.sender, amount, unstakingId);
    }

    
    function transferUnstakedOut(uint128 amount, uint128 validatorId, uint128 unstakingId) public {
        Unstaking storage us = validators[validatorId].unstakings[msg.sender][unstakingId];
        require( uint128(block.number) > us.coolDownEnd, ""Cooldown period has not ended"" );
        require(us.amount >= amount, ""Amount is too high"");
        _transferFromContract(msg.sender, amount);
        unchecked { us.amount -= amount; }
        
        if (us.amount == 0)
            us.coolDownEnd = 0;
        emit UnstakeRedeemed(validatorId, msg.sender, amount);
    }

    
    
    function getValidatorsDetails() public view returns (uint128[] memory commissionRates, uint128[] memory delegated) {
        commissionRates = new uint128[](validatorsN);
        delegated = new uint128[](validatorsN);
        for (uint128 i = 0; i < validatorsN; ++i){
            Validator storage v = validators[i];
            commissionRates[i] = v.commissionRate;
            delegated[i] = v.delegated - v.stakings[v._address].staked;
        }
        return (commissionRates, delegated);
    }

    
    
    function getDelegatorDetails(address delegator) public view returns( uint128[] memory delegated,  uint128[] memory rewardsAvailable, uint128[] memory commissionRewards) {
       delegated = new uint128[](validatorsN);
       rewardsAvailable = new uint128[](validatorsN);
       commissionRewards = new uint128[](validatorsN);
       uint256 currentEpoch = block.number < endEpoch? block.number: endEpoch;
       uint128 newGlobalExchangeRate = uint128((uint256(allocatedTokensPerEpoch) * divider/totalGlobalShares)*(currentEpoch - lastUpdateEpoch)) + globalExchangeRate;
       Validator storage v;
       Staking storage s;
        for (uint128 i = 0; i < validatorsN; ++i){
            v = validators[i];
            s = v.stakings[delegator];
            delegated[i] = s.staked;
            if (v.disabledEpoch == 0){
                uint128 newTokensGiven = _sharesToTokens(v.globalShares, newGlobalExchangeRate - v.lastUpdateGlobalRate);
                uint128 commissionPaid = uint128(uint256(newTokensGiven) * uint256(v.commissionRate) /  divider);
                uint128 rateIncrease = uint128(uint256(newTokensGiven - commissionPaid) * divider / v.totalShares);
                rewardsAvailable[i] = _sharesToTokens(s.shares, v.exchangeRate + rateIncrease) - s.staked;
                if(delegator == v._address)
                    commissionRewards[i] = v.commissionAvailableToRedeem + commissionPaid;
            }
            else {
                rewardsAvailable[i] = _sharesToTokens(s.shares, v.exchangeRate) - s.staked;
                if(delegator == v._address)
                    commissionRewards[i] = v.commissionAvailableToRedeem;
            }
        }
        return (delegated, rewardsAvailable, commissionRewards);
    }

    function getMetadata() public view returns(uint128,  uint128, uint128, uint128, uint128 ){
        uint128 totalStaked = uint128(uint256(totalGlobalShares) * uint256(globalExchangeRate) / divider);
        return (allocatedTokensPerEpoch, endEpoch, maxCapMultiplier, totalStaked, validatorsN);
    }
}",4532,2,3,"I’m working through the Solidity code for a smart contract named DelegatedStaking. It’s worth noting that critical functions include initialize(), depositRewardTokens(), stake(), unstake(), and others.
I’m focusing on key areas to spot potential Solidity vulnerabilities. With built-in overflow checks and libraries like SafeERC20, I’ll also review access controls and unauthorized actions.
I’m analyzing state variables like uint256 divider for scaling and multiple uint128 variables. The contract interacts with the CQT token through IERC20Upgradeable.
I'm examining the structures for Staking, Unstaking, and Validator, which manage staking activities, cooldown periods, and validator operations. Initialization function sets essential parameters and emits an event.
Managing staking operations
The stake function oversees validator staking, ensuring requirements like minimum token amount and validator status. It also syncs the validator's rewards and updates the global exchange rate.
Ensuring validator adherence
Validators get their rewards if they comply; otherwise, the function restricts access, smoothening the process and promoting accountability.
Checking for reentrancy
I’m assessing if external calls, like transfers in _stake, occur before state updates. Using SafeERC20 functions mitigates risk, but it's still good to be cautious.
Ensuring safety
I’m thinking through the use of SafeERC20 functions and standard ERC20 token assumptions. Calls like _transferFromContract are made after state updates, which seems secure.
Assessing update functions
I'm cautious about division by zero and overflow risks in updating global exchange rates and validator exchange rates. Proper checks and integer handling are crucial for secure calculations.
Monitoring unchecked sections
I’m considering the impact of unchecked blocks on overflow risks. It’s essential to identify areas where unchecked operations might lead to potential overflows/underflows and apply accurate measures.
Mitigating overflow
Focusing on the endEpoch value, I’m setting limits to prevent overflow, like the line require(amount >= allocatedTokensPerEpoch, ""Does not cover least 1 epoch""); to ensure accurate checks.
Assessing integer limits
I’m thinking about the functions stake() and _stake(), considering the risk of integer overflows in computation. Limiting values to prevent overflows ensures precision and system integrity.
Spotting vulnerabilities
OK, I’m working through potential issues like division by zero and manipulation of validator stakes, which could expose the system to attacks. It’s interesting to see how these risks unfold.
Managing unstaking
OK, I’m mapping out the updates in the unstake function. Ensuring state variables are updated first protects against issues like inappropriate transfers or excessive unstaking.
Assessing vulnerabilities
I’m noting front-running attacks, logic errors, and unchecked blocks which could risk reentrancy. Checking these risks ensures the contract's safety remains robust.
Evaluating security measures
I'm assessing the cooldown and recovery mechanisms, ensuring they are secure against potential attacks like token theft or unauthorized access, and that the code prevents unchecked blocks effectively.
Evaluating access controls
I'm mapping out functions like transferUnstakedOut() and the initial token supply, while monitoring for potential misuse, to ensure the owner doesn't set allocatedTokensPerEpoch to unfavorable levels.
Spotting potential pitfalls
I’m thinking about the implications of hardcoding constants, the risk of uint128 overflow, and the limitations of token addresses in the Solidity contract.
Assessing exchange rate manipulation
Simplifying complex exchange rate manipulations in uint128 calculations, like examining division and token conversion methods to spot vulnerabilities and protect against potential exploitation.
Assessing exchange rate safety
I'm exploring how exchange rate manipulation, especially with minimal validator stakes and unchecked overflow risks, can expose vulnerabilities in staking and reward mechanisms. This is a crucial area of concern.
Pinpointing vulnerabilities
I’m digging into unchecked blocks and large values that could overload uint128, leading to incorrect exchange rates. This manipulation risk is concerning for the contract's integrity.
Spotting critical risks
I'm thinking about unchecked block overflows and exchange rate manipulation due to tiny totalGlobalShares or totalShares. These are the main vulnerabilities that need addressing.
Spotting vulnerabilities
I’m identifying integer overflows in unchecked blocks, exchange rate manipulation due to small totalShares, and the owner’s ability to manipulate rewards through setAllocatedTokensPerEpoch() as key vulnerabilities.
","Based on my analysis of the provided Solidity smart contract code, I have identified several potential vulnerabilities:

1. **Integer Overflow and Underflow in Unchecked Blocks**:

   - **Description**: The contract uses `unchecked` blocks when performing arithmetic operations on `uint128` variables. While Solidity 0.8.0 and above include built-in overflow and underflow checks, using `unchecked` blocks disables these safety features. This can lead to overflows or underflows, especially when dealing with large numbers or user-provided inputs.

   - **Affected Functions**:
     - `_updateGlobalExchangeRate()`: Calculates `globalExchangeRate` using unchecked arithmetic, which can overflow if `allocatedTokensPerEpoch`, `divider`, or `currentEpoch - lastUpdateEpoch` are large enough.
     - `_updateValidator()`: Updates `v.exchangeRate` and `v.commissionAvailableToRedeem` using unchecked arithmetic, which can overflow if `tokensGivenToValidator` or `commissionPaid` are large.
     - Other functions like `depositRewardTokens()`, `takeOutRewardTokens()`, `_stake()`, `unstake()`, and `setAllocatedTokensPerEpoch()` also use unchecked arithmetic without proper validation.

   - **Impact**: Overflows or underflows in these calculations can lead to incorrect exchange rates, misallocated rewards, or even locking of funds within the contract.

   - **Recommendation**: Remove `unchecked` blocks or ensure that all arithmetic operations are safe. Alternatively, add explicit checks to prevent overflows and underflows.

2. **Exchange Rate Manipulation**:

   - **Description**: Attackers can manipulate the exchange rates by exploiting the relationship between `totalGlobalShares`, `totalShares`, and the exchange rate calculations.

   - **Attack Vector**:
     - An attacker stakes a minimal amount to become a validator, causing `totalGlobalShares` to be very small.
     - This small value is used as a divisor in `_updateGlobalExchangeRate()`, which can significantly inflate the `globalExchangeRate`.
     - The attacker can then redeem rewards or manipulate other calculations to their advantage.

   - **Impact**: Allows attackers to disproportionately increase their rewards or disrupt the reward distribution mechanism for other stakers.

   - **Recommendation**: Implement minimum staking requirements and additional validations to prevent `totalGlobalShares` from becoming too small. Also, consider adding safeguards against sudden changes in exchange rates.

3. **Owner Manipulation of Rewards**:

   - **Description**: The `setAllocatedTokensPerEpoch()` function allows the owner to set `allocatedTokensPerEpoch` to any value, including excessively high amounts.

   - **Attack Vector**:
     - The owner sets `allocatedTokensPerEpoch` to a very high value.
     - The calculation for `toTransfer` (`futureRewards % amount`) results in a significant amount.
     - The owner then calls `_transferFromContract(msg.sender, toTransfer)`, effectively withdrawing tokens that should have been allocated as rewards.

   - **Impact**: The owner can siphon off rewards meant for validators and delegators, undermining trust in the contract.

   - **Recommendation**: Add limits to how much `allocatedTokensPerEpoch` can be changed in a single transaction and implement a governance mechanism to approve such changes.

4. **Reentrancy Vulnerabilities via External Calls**:

   - **Description**: Functions like `_transferToContract()` and `_transferFromContract()` make external calls to the ERC20 token contract before updating critical state variables.

   - **Attack Vector**:
     - If the token contract is malicious or compromised, it could call back into the staking contract during the external call.
     - Since state variables are not yet updated, this could lead to reentrancy attacks.

   - **Impact**: Attackers could manipulate the contract's state, leading to unauthorized withdrawals or other malicious actions.

   - **Recommendation**: Follow the Checks-Effects-Interactions pattern by updating state variables before making external calls. Also, consider using reentrancy guards.

5. **Lack of Access Control in Critical Functions**:

   - **Description**: Some functions that modify critical contract parameters lack robust access control mechanisms.

   - **Examples**:
     - Functions like `setValidatorCommissionRate()` can be called by the owner to change validators' commission rates without their consent.
     - The `disableValidator()` function can be called by the owner, potentially disabling validators arbitrarily.

   - **Impact**: Centralizes too much power with the contract owner, which can be misused.

   - **Recommendation**: Implement role-based access control and possibly a governance mechanism where changes require approval from multiple stakeholders.

6. **Potential Denial of Service via Large Arrays**:

   - **Description**: Functions like `getValidatorsDetails()` and `getDelegatorDetails()` return arrays based on `validatorsN`, which can grow indefinitely.

   - **Impact**: If `validatorsN` becomes very large, these functions may consume excessive gas, leading to transaction failures or making these functions unusable.

   - **Recommendation**: Implement pagination or limit the maximum number of validators.

7. **Hardcoded Token Address**:

   - **Description**: The contract uses a hardcoded token address for CQT.

   - **Impact**: Limits the contract's flexibility and can cause issues if the token address changes or if deployed on different networks.

   - **Recommendation**: Allow the token address to be set during initialization and prevent changes afterward.

8. **Inadequate Validation of User Inputs**:

   - **Description**: Functions like `unstake()` and `redeemRewards()` rely on user-provided amounts without thorough validation.

   - **Impact**: Users might unintentionally or maliciously provide amounts that could disrupt the contract's logic or lead to unexpected behavior.

   - **Recommendation**: Add comprehensive input validation and sanity checks on user-provided values.

**Summary**:

The contract has several vulnerabilities related to unchecked arithmetic operations, potential manipulation of exchange rates, owner privileges that can be misused, and improper handling of external calls. These issues could lead to loss of funds, unfair distribution of rewards, or loss of trust in the staking mechanism.

**Action Items**:

- Remove `unchecked` blocks or ensure safe arithmetic operations.
- Implement safeguards against exchange rate manipulation.
- Restrict the owner's ability to alter critical parameters without consensus.
- Follow the Checks-Effects-Interactions pattern to prevent reentrancy.
- Add comprehensive access control and input validation.

By addressing these vulnerabilities, the contract can become more secure and reliable for all participants.
","Here’s the analysis and comparison between `{issue}` and `{response_list}` according to the specified methodology.

---

### **Analysis**

#### **[H-01] Usage of an incorrect version of Ownable library can potentially malfunction all onlyOwner functions**

**Report Description**:
The `DelegatedStaking.sol` contract is designed to be deployed as an upgradeable proxy contract but uses a non-upgradeable version of the `Ownable` library. This leads to the `onlyOwner` functions being inaccessible when deployed as a proxy contract because constructors in `Ownable` cannot be used in proxy contracts.

**Match in Response List**:
**No match found.**

**Validation**:
This issue is completely unaddressed in the response list. The incorrect version of `Ownable` directly undermines the upgradeability design, making the contract non-functional for `onlyOwner` functions.

**Suggestions**:
- Include a response to address this issue.
- Replace `Ownable` with `OwnableUpgradeable` from the `@openzeppelin/contracts-upgradeable` library.
- Use the `initializer` modifier for the `initialize()` function to set the contract owner.

---

#### **[H-02] unstake should update exchange rates first**

**Report Description**:
The `unstake` function calculates `validatorSharesRemove` using an outdated exchange rate and only updates the exchange rate after performing the calculation. This leads to incorrect share computations.

**Match in Response List**:
Partially aligns with **""Inadequate Validation of User Inputs""** and **""Exchange Rate Manipulation""**.

**Validation**:
**Partially Correct.** While the response highlights issues related to exchange rate calculations and potential manipulations, it does not explicitly address the sequencing problem in the `unstake` function.

**Suggestions**:
- Explicitly recommend updating exchange rates before using them for calculations in `unstake`.
- Modify the `unstake` implementation to ensure `validatorSharesRemove` is computed after updating the exchange rate.

---

#### **[M-01] Reward tokens could get lost due to rounding down**

**Report Description**:
Rounding issues in calculations like `depositRewardTokens`, `setAllocatedTokensPerEpoch`, and others cause tokens to be lost when the division result is not a whole number.

**Match in Response List**:
Partially aligns with **""Owner Manipulation of Rewards""** and **""Inadequate Validation of User Inputs""**.

**Validation**:
**Partially Correct.** While the responses discuss issues with token allocation and manipulation, they do not explicitly address the rounding issue causing token loss.

**Suggestions**:
- Address the rounding issue by recommending a mechanism to handle fractional tokens (e.g., accumulating fractions for later use).
- Add a response directly linking the described problem to the rounding in `endEpoch` and similar calculations.

---

#### **[M-02] Incorrect updateGlobalExchangeRate implementation**

**Report Description**:
The `_updateGlobalExchangeRate` function has an issue when `totalGlobalShares` is zero, leading to incorrect calculations or divisions by zero.

**Match in Response List**:
Matches with **""Exchange Rate Manipulation""** and **""Integer Overflow and Underflow in Unchecked Blocks""**.

**Validation**:
**Correct.** The responses address risks in exchange rate calculations and the need for checks against small or zero values for `totalGlobalShares`. The impact of unchecked blocks is also considered.

**Suggestions**:
No additional suggestions; the response is adequate.

---

#### **[M-03] Validator can fail to receive commission reward in redeemAllRewards**

**Report Description**:
A check in `redeemAllRewards` causes validators' transactions to revert if their rewards are less than or equal to zero, even if they have valid commission rewards.

**Match in Response List**:
**No match found.**

**Validation**:
**Incorrect.** This issue is not addressed in the response list. Failing to account for valid commission rewards is a significant flaw.

**Suggestions**:
- Modify the `redeemAllRewards` implementation to ensure commission rewards are computed and distributed correctly, even when user rewards are zero.
- Add a validation mechanism for commission rewards separate from user rewards.

---

### **GPT-Generated Potential Issues (May Be Incorrect)**

1. **[1] Integer Overflow and Underflow in Unchecked Blocks**  
   - **Assessment**: **Valid Concern.** The usage of `unchecked` blocks in critical functions like `_updateGlobalExchangeRate` and others can lead to overflow/underflow issues if not properly validated.
   - **Recommendations**: Remove `unchecked` blocks or validate all arithmetic operations.

2. **[2] Exchange Rate Manipulation**  
   - **Assessment**: **Valid Concern.** Exploiting low `totalGlobalShares` can inflate exchange rates and disrupt reward distribution.
   - **Recommendations**: Add minimum staking requirements and safeguard against drastic changes in rates.

3. **[3] Owner Manipulation of Rewards**  
   - **Assessment**: **Valid Concern.** Centralized control by the owner over `allocatedTokensPerEpoch` can lead to misuse of funds.
   - **Recommendations**: Implement governance or set limits on parameter changes.

4. **[4] Reentrancy Vulnerabilities via External Calls**  
   - **Assessment**: **Valid Concern.** External calls before updating state variables open the contract to reentrancy attacks.
   - **Recommendations**: Follow Checks-Effects-Interactions and use reentrancy guards.

5. **[5] Lack of Access Control in Critical Functions**  
   - **Assessment**: **Valid Concern.** Centralized access control for critical functions is risky.
   - **Recommendations**: Implement role-based access control or governance mechanisms.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- **[M-02] Incorrect updateGlobalExchangeRate implementation**: Covered under ""Exchange Rate Manipulation"" and ""Integer Overflow and Underflow in Unchecked Blocks.""

**Partially Correct Matches**:
- **[H-02] unstake should update exchange rates first**
- **[M-01] Reward tokens could get lost due to rounding down**

**Missed Issues from Issue Report**:
- **[H-01] Usage of an incorrect version of Ownable library**
- **[M-03] Validator can fail to receive commission reward in redeemAllRewards**

**GPT-Generated Potential Issues (May Be Incorrect)**:
- All issues identified in `{response_list}` are valid and add value to the audit.

--- 

This analysis can guide further improvements to the contract and responses. Let me know if you'd like deeper insights on specific sections!
",1,2,2,8,"```
1. Exchange Rate Manipulation
2. Integer Overflow and Underflow in Unchecked Blocks
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks of the true positives in the ranked list of predictions**:
   - **Exchange Rate Manipulation** appears at rank 2.
   - **Integer Overflow and Underflow in Unchecked Blocks** appears at rank 1.

2. **Calculate the precision at each rank where a true positive appears**:
   - **Precision at rank 1 (P@1)**: Since there is 1 true positive in the top 1 prediction, \( P@1 = \frac{1}{1} = 1.0 \).
   - **Precision at rank 2 (P@2)**: There are 2 true positives in the top 2 predictions, \( P@2 = \frac{2}{2} = 1.0 \).

3. **Average the precision values**:
   - \( AP = \frac{P@1 + P@2}{2} = \frac{1.0 + 1.0}{2} = 1.0 \).

**Average Precision (AP)**: 1.0"
