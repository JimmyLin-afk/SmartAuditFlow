nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Reasoning,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
TwabRewards.sol,"// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";

/**
 * @title PoolTogether V4 TwabRewards
 * @author PoolTogether Inc Team
 * @notice Contract to distribute rewards to depositors in a pool.
 * This contract supports the creation of several promotions that can run simultaneously.
 * In order to calculate user rewards, we use the TWAB (Time-Weighted Average Balance) from the Ticket contract.
 * This way, users simply need to hold their tickets to be eligible to claim rewards.
 * Rewards are calculated based on the average amount of tickets they hold during the epoch duration.
 */
contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    /* ============ Global Variables ============ */

    /// @notice Settings of each promotion.
    mapping(uint256 => Promotion) internal _promotions;

    /// @notice Latest recorded promotion id.
    /// @dev Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.
    uint256 internal _latestPromotionId;

    /// @notice Keeps track of claimed rewards per user.
    /// @dev _claimedEpochs[promotionId][user] => claimedEpochs
    /// @dev We pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    /* ============ Events ============ */

    /**
        @notice Emitted when a promotion is created.
        @param promotionId Id of the newly created promotion
    */
    event PromotionCreated(uint256 indexed promotionId);

    /**
        @notice Emitted when a promotion is cancelled.
        @param promotionId Id of the promotion being cancelled
        @param amount Amount of tokens transferred to the promotion creator
    */
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    /**
        @notice Emitted when a promotion is extended.
        @param promotionId Id of the promotion being extended
        @param numberOfEpochs Number of epochs the promotion has been extended by
    */
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    /**
        @notice Emitted when rewards have been claimed.
        @param promotionId Id of the promotion for which epoch rewards were claimed
        @param epochIds Ids of the epochs being claimed
        @param user Address of the user for which the rewards were claimed
        @param amount Amount of tokens transferred to the recipient address
    */
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    /* ============ Modifiers ============ */

    /// @dev Ensure that the caller is the creator of the promotion.
    /// @param _promotionId Id of the promotion to check
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    /* ============ External Functions ============ */

    /// @inheritdoc ITwabRewards
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    /// @inheritdoc ITwabRewards
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    /// @inheritdoc ITwabRewards
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    /// @inheritdoc ITwabRewards
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    /* ============ Internal Functions ============ */

    /**
    @notice Determine if address passed is actually a ticket.
    @param _ticket Address to check
   */
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    /**
        @notice Determine if a promotion is active.
        @param _promotion Promotion to check
    */
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    /**
        @notice Get settings for a specific promotion.
        @dev Will revert if the promotion does not exist.
        @param _promotionId Promotion id to get settings for
        @return Promotion settings
     */
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    /**
        @notice Get the current epoch id of a promotion.
        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.
        @param _promotion Promotion to get current epoch for
        @return Epoch id
     */
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        // elapsedTimestamp / epochDurationTimestamp
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    /**
        @notice Get reward amount for a specific user.
        @dev Rewards can only be claimed once the epoch is over.
        @param _user User to get reward amount for
        @param _promotion Promotion from which the epoch is
        @param _epochId Epoch id to get reward amount for
        @return Reward amount
     */
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    /**
        @notice Get the total amount of tokens left to be rewarded.
        @param _promotion Promotion to get the total amount of tokens left to be rewarded for
        @return Amount of tokens left to be rewarded
     */
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        // _tokensPerEpoch * _numberOfEpochsLeft
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    /**
        @notice Set boolean value for a specific epoch.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0011
        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.
        We get: 0000 0001 << 2 = 0000 0100
        We then OR the mask with the word to set the value.
        We get: 0110 0011 | 0000 0100 = 0110 0111
        @param _userClaimedEpochs Tightly packed epoch ids with their boolean values
        @param _epochId Id of the epoch to set the boolean for
        @return Tightly packed epoch ids with the newly boolean value set
    */
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    /**
        @notice Check if rewards of an epoch for a given promotion have already been claimed by the user.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0111
        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.
        We get: 0110 0111 >> 2 = 0001 1001
        We then get the value of the last bit by masking with 1.
        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1
        We then return the boolean value true since the last bit is 1.
        @param _userClaimedEpochs Record of epochs already claimed by the user
        @param _epochId Epoch id to check
        @return true if the rewards have already been claimed for the given epoch, false otherwise
     */
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",3228,378,"[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds
In the current implementation of `createPromotion()`, `_epochDuration` is allowed to be `0`.
However, when `_epochDuration = 0`, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it.
 
[H-02] Backdated `_startTimestamp` can lead to loss of funds
Function `createPromotion()`
This can lead to loss of funds as there is no recovery function of funds stuck like this
  [H-03] Continue claiming reqrds after numberOfEpochs are over
When claiming rewards via `claimRewards()`, the function `_calculateRewardAmount()` is called. The function `_calculateRewardAmount()` has a check to make sure the epoch is over
  “require(block.timestamp > _epochEndTimestamp, “TwabRewards/epoch-not-over"");"" 
However neither functions check if the `_epochId` is within the range of the reward epochs. Ergo it is possible to continue claiming rewards after the reward period is over. This only works as long as there are enough tokens in the contract. But this is the case when not everyone has claimed, or other rewards use the same token.
  [H-04] cancelPromotion is too rigorous
When you cancel a promotion with `cancelPromotion()` then the promotion is complete deleted. This means no-one can claim any rewards anymore, because `_promotions[_promotionId]` no longer exists.
It also means all the unclaimed tokens (of the previous epochs) will stay locked in the contract.
  [H-05] Malicious tickets can lead to the loss of all tokens It allows an attacker to retrieve all the tokens of each promotions.
Anyone can create a new promotion using `createPromotion()`. An attacker can create a new malicious promotion with the following parameters:
- the address of a malicious ticket smart contract
- the token address from the targeted promotion(s)
- optionally, `_numberOfEpochs` equal to 0 to create this promotion for free
The only verification made on the ticket address given by `_requireTicket()` is that the smart contract must implement the `ITicket` interface.
  [H-06] Rewards can be claimed multiple times
An attacker can claim its reward 256 * `epochDuration` seconds after the timestamp at which the promotion started. The vulnerability allows him to claim a reward several times to retrieve all the tokens associated to the promotion.
The function `claimRewards()` claim rewards for a given promotion and epoch. In order to prevent a user from claiming a reward multiple times, the mapping _claimedEpochs keeps track of claimed rewards per user:
  [H-07] Contract does not work with fee-on transfer tokens
Function `_calculateRewardAmount()`
There exist ERC20 tokens that charge a fee for every transfer.
This kind of token does not work correctly with the `TwabRewards` contract as the rewards calculation for an user is based on `promotion.tokensPerEpoch`.
However, the actual amount of tokens the contract holds could be less than `promotion.tokensPerEpoch * promotion.numberOfEpochs` leading to not claimable rewards for users claiming later than others.
  [M-01] `cancelPromotion()` Unable to cancel unstarted promotions
For unstarted promotions, `cancelPromotion()` will revert at `block.timestamp - _promotion.startTimestamp` in `_getCurrentEpochId()`.
Call stack: `cancelPromotion()` -> `_getRemainingRewards()` -> `_getCurrentEpochId()`.
  [M-02] `getRewardsAmount` doesn't check epochs haven't been claimed
In ITwabRewards.sol, it is claimed that `getRewardsAmount` should account for epochs that have already been claimed, and not include these epochs in the total amount (indeed, there is a line that says @dev Will be 0 if user has already claimed rewards for the epoch.)
However, no such check is done in the implementation of getRewardsAmount. This means that users will be shown rewardAmounts that are higher than they should be, and users will be confused when they are transferred fewer tokens than they are told they will. This would cause confusion, and people may begin to mistrust the contract since they think they are being transferred fewer tokens than they are owed.
  [M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account
Users who have a small claim on rewards for various promotions, may not feasibly be able to claim these rewards as gas costs could outweigh the sum they receive in return. Hence, it is likely that a dust balance accrues overtime for tokens allocated for various promotions. Additionally, the `_calculateRewardAmount` calculation may result in truncated results, leading to further accrual of a dust balance. Therefore, it is useful that these funds do not go to waste
  [M-04] Unsafe uint64 casting may overflow
The `_calculateRewardAmount` function casts epoch timestamps from uint256 to uint64 and these may overflow. The epochStartTimestamp value is a function of the user-supplied `_epochId` value, which could be extremely large (up to 2**255 – 1). While Solidity 0.8.x checks for overflows on arithmetic operations, it does not do so for casting – the OpenZeppelin SafeCast library offers this. The overflow condition could cause `_epochStartTimestamp` > `_epochEndTimestamp`, which the Ticket.sol getAverageBalanceBetween may not be expected to handle. The `_epochStartTimestamp` could overflow to have a value before the actual start of the promotion, also impacting the rewards calculation.
  [M-05] Missing Check When Transferring Tokens Out For A Given Promotion
The claimRewards function is called upon by ticket holders who parse a set of `_epochIds` they wish to claim rewards on. An internal call is made to _calculateRewardAmount to calculate the correct reward amount owed to the user. Subsequently, the _updateClaimedEpoch function will set the epoch bit of the tracked _claimedEpochs mapping, ensuring an epochId cannot be claimed twice for a given promotion.
However, there may be inaccuracies in the `_calculateRewardAmount` function, which results in more tokens being sent out than allocated by a promotion creator. This severely impacts the ability for users to claim their owed tokens on other promotions.",12,"pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";


contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    

    
    mapping(uint256 => Promotion) internal _promotions;

    
    
    uint256 internal _latestPromotionId;

    
    
    
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    

    
    event PromotionCreated(uint256 indexed promotionId);

    
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    

    
    
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    

    
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    

    
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",1979,7,5,"Analyzing contract vulnerabilities
I’m reviewing the provided smart contract to identify potential vulnerabilities and appreciate the user's explicit request to list them, excluding mitigations.
Spotting vulnerabilities
I’m piecing together potential security issues in the smart contract, focusing on areas that may harbor risks and considering their implications for the overall system.
Breaking down vulnerabilities
OK, let me see. I’m identifying potential security issues in the smart contract, such as gas limit risks, uninitialized state variables, and unchecked external calls, analyzing their implications and impact.
Identifying serious flaws
I’m outlining critical vulnerabilities such as gas limit risks, uninitialized state variables, and unchecked external calls in the smart contract, impacting both function and security.
","Here is a list of potential vulnerabilities in the provided smart contract:

1. **Reentrancy Attack**:  
   The contract allows users to claim rewards via the `claimRewards` function. If a user is able to re-enter the contract during the token transfer process, this could lead to unexpected behavior or exploits. Although the `SafeERC20` library is used for token transfers, it is generally advisable to consider implementing reentrancy guards to prevent such attacks.

2. **Lack of Access Control on `extendPromotion`**:  
   The function `extendPromotion` can be called by any user, but there is no access control to ensure only the promotion creator can extend the promotion. This opens the contract to abuse if someone other than the creator calls this function.

3. **Incorrect Use of `require` for Promotion End Check**:  
   The promotion's end timestamp is calculated as `_promotion.startTimestamp + (_promotion.epochDuration * _promotion.numberOfEpochs)`. While it uses a check for a valid promotion end (`_promotionEndTimestamp >= block.timestamp`), there might be issues with promotions that don't account for the exact block timestamps, especially if the contract's state changes slightly in timing. Precision might be important to prevent edge case issues with `block.timestamp`.

4. **Potential for Integer Overflow in `_updateClaimedEpoch`**:  
   Although this function uses bit shifting to update claimed epochs, it's important to ensure that `_epochId` doesn't exceed the maximum number of bits available. If the number of epochs grows large, this could cause an overflow, leading to incorrect results.

5. **Lack of Validation on Promotion Duration in `createPromotion`**:  
   There is no validation for the duration of a promotion, such as checking that the promotion's end date is in the future or that the number of epochs is a reasonable value. This might result in invalid promotions being created.

6. **Potential Gas Issues with Loops in `claimRewards`**:  
   The `claimRewards` function includes a loop that iterates over the `epochIds` array. If the array contains a large number of epochs, this could result in high gas costs, causing transactions to fail due to exceeding the block gas limit. This could potentially make the contract unusable for large numbers of epochs.

7. **Potential Integer Overflow in Reward Calculation**:  
   The function `_calculateRewardAmount` involves multiplication and division with values related to tokens, such as `_promotion.tokensPerEpoch`, `_averageBalance`, and `_averageTotalSupplies[0]`. If these values become too large, there could be an overflow in the calculations. Though Solidity 0.8.x includes overflow checks, handling such large values with additional logic or limits might be prudent.

8. **Lack of Checks on Token Approval in `createPromotion`**:  
   When creating a promotion, the contract relies on `safeTransferFrom` to transfer tokens from the creator to the contract. However, there is no check that the creator has previously approved the contract to spend their tokens. This might lead to failed transfers if the approval is not in place.

9. **Unrestricted `cancelPromotion` Function**:  
   While only the promotion creator can cancel a promotion, there is no check to prevent the promotion from being canceled in specific edge cases, such as if the promotion is already finished or the contract is in an invalid state. This could potentially lead to unexpected behavior.

10. **`_requirePromotionActive` Check May Fail for Future Promotions**:  
    The logic checks if `_promotionEndTimestamp >= block.timestamp`, but this could fail if there is a significant delay in block time or edge cases in promotion timing, especially when promotions are extended.","### **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**

**Report Description**:  
In the current implementation of `createPromotion()`, `_epochDuration` is allowed to be `0`. However, when `_epochDuration = 0`, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it. This could lead to the freezing of the promotion creator's funds.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of `_epochDuration` being set to `0` in `createPromotion()`. This is a critical oversight, as it directly impacts the functionality of the contract and could lead to frozen funds.

---

### **[H-02] Backdated `_startTimestamp` can lead to loss of funds**

**Report Description**:  
The function `createPromotion()` allows for a backdated `_startTimestamp`, which can lead to loss of funds as there is no recovery function for funds stuck in this scenario.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of backdated `_startTimestamp` in `createPromotion()`. This is a significant vulnerability that could result in the loss of funds.

---

### **[H-03] Continue claiming rewards after `numberOfEpochs` are over**

**Report Description**:  
When claiming rewards via `claimRewards()`, the function `_calculateRewardAmount()` is called. The function `_calculateRewardAmount()` has a check to ensure the epoch is over, but neither function checks if the `_epochId` is within the range of the reward epochs. This allows users to continue claiming rewards after the reward period is over, as long as there are enough tokens in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of claiming rewards after the reward period has ended. This is a critical vulnerability that could lead to the depletion of tokens in the contract.

---

### **[H-04] `cancelPromotion` is too rigorous**

**Report Description**:  
When a promotion is canceled with `cancelPromotion()`, the promotion is completely deleted. This means no one can claim any rewards anymore, and all unclaimed tokens from previous epochs will stay locked in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of `cancelPromotion()` being too rigorous, which could lead to locked funds and unclaimable rewards.

---

### **[H-05] Malicious tickets can lead to the loss of all tokens**

**Report Description**:  
An attacker can create a new malicious promotion using `createPromotion()` with the address of a malicious ticket smart contract and the token address from the targeted promotion(s). The only verification made on the ticket address is that the smart contract must implement the `ITicket` interface. This allows an attacker to retrieve all the tokens of each promotion.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of malicious tickets being used to drain tokens from the contract. This is a severe vulnerability that could lead to the loss of all tokens.

---

### **[H-06] Rewards can be claimed multiple times**

**Report Description**:  
An attacker can claim a reward multiple times to retrieve all the tokens associated with the promotion. The function `claimRewards()` claims rewards for a given promotion and epoch, but the mapping `_claimedEpochs` does not prevent a user from claiming a reward multiple times.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of multiple reward claims. This is a critical vulnerability that could lead to the depletion of tokens in the contract.

---

### **[H-07] Contract does not work with fee-on-transfer tokens**

**Report Description**:  
The `TwabRewards` contract does not work correctly with fee-on-transfer tokens, as the rewards calculation is based on `promotion.tokensPerEpoch`. However, the actual amount of tokens the contract holds could be less than `promotion.tokensPerEpoch * promotion.numberOfEpochs`, leading to unclaimable rewards for users claiming later than others.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of fee-on-transfer tokens. This is a significant vulnerability that could lead to unclaimable rewards.

---

### **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**

**Report Description**:  
For unstarted promotions, `cancelPromotion()` will revert at `block.timestamp - _promotion.startTimestamp` in `_getCurrentEpochId()`. This prevents the cancellation of unstarted promotions.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of being unable to cancel unstarted promotions. This is a significant oversight that could lead to stuck promotions.

---

### **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**

**Report Description**:  
The function `getRewardsAmount` does not account for epochs that have already been claimed, leading to users being shown reward amounts that are higher than they should be. This could cause confusion and mistrust in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of `getRewardsAmount` not checking for claimed epochs. This is a significant oversight that could lead to user confusion.

---

### **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**

**Report Description**:  
Users with small claims on rewards may not be able to claim them due to high gas costs. Additionally, the `_calculateRewardAmount` calculation may result in truncated results, leading to further accrual of a dust balance. There is no mechanism for an `admin` account to claim these dust balances.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of dust token balances. This is a significant oversight that could lead to wasted funds.

---

### **[M-04] Unsafe uint64 casting may overflow**

**Report Description**:  
The `_calculateRewardAmount` function casts epoch timestamps from uint256 to uint64, which may overflow. This could cause `_epochStartTimestamp` to be greater than `_epochEndTimestamp`, impacting the rewards calculation.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unsafe uint64 casting. This is a significant vulnerability that could lead to incorrect rewards calculations.

---

### **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

**Report Description**:  
The `claimRewards` function may result in more tokens being sent out than allocated by a promotion creator due to inaccuracies in the `_calculateRewardAmount` function. This severely impacts the ability for users to claim their owed tokens on other promotions.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of missing checks when transferring tokens out. This is a significant vulnerability that could lead to the depletion of tokens in the contract.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-01] `createPromotion()` Lack of input validation for `_epochDuration` can potentially freeze promotion creator's funds**  
- **[H-02] Backdated `_startTimestamp` can lead to loss of funds**  
- **[H-03] Continue claiming rewards after `numberOfEpochs` are over**  
- **[H-04] `cancelPromotion` is too rigorous**  
- **[H-05] Malicious tickets can lead to the loss of all tokens**  
- **[H-06] Rewards can be claimed multiple times**  
- **[H-07] Contract does not work with fee-on-transfer tokens**  
- **[M-01] `cancelPromotion()` Unable to cancel unstarted promotions**  
- **[M-02] `getRewardsAmount` doesn't check epochs haven't been claimed**  
- **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**  
- **[M-04] Unsafe uint64 casting may overflow**  
- **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**  

---

The response list does not adequately address the issues raised in the issue report. Most of the critical vulnerabilities and medium-severity issues were missed, indicating a significant gap in the coverage, accuracy, and sufficiency of the responses.",0,0,12,10,"```
None.
```",0.0
