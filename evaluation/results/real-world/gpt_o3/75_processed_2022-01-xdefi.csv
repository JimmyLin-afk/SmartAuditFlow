nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Reasoning,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
XDEFIDistribution.sol,"// SPDX-License-Identifier: MIT

pragma solidity =0.8.10;

import { ERC721, ERC721Enumerable, Strings } from ""@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol"";
import { IERC20, SafeERC20 } from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import { IEIP2612 } from ""./interfaces/IEIP2612.sol"";
import { IXDEFIDistribution } from ""./interfaces/IXDEFIDistribution.sol"";

/// @dev Handles distributing XDEFI to NFTs that have locked up XDEFI for various durations of time.
contract XDEFIDistribution is IXDEFIDistribution, ERC721Enumerable {

    uint88 internal MAX_TOTAL_XDEFI_SUPPLY = uint88(240_000_000_000_000_000_000_000_000);

    // See https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728
    uint256 internal constant _pointsMultiplier = uint256(2**128);
    uint256 internal _pointsPerUnit;

    address public immutable XDEFI;

    uint256 public distributableXDEFI;
    uint256 public totalDepositedXDEFI;
    uint256 public totalUnits;

    mapping(uint256 => Position) public positionOf;

    mapping(uint256 => uint8) public bonusMultiplierOf;  // Scaled by 100 (i.e. 1.1x is 110, 2.55x is 255).

    uint256 internal immutable _zeroDurationPointBase;

    string public baseURI;

    address public owner;
    address public pendingOwner;

    uint256 internal _locked;

    constructor (address XDEFI_, string memory baseURI_, uint256 zeroDurationPointBase_) ERC721(""Locked XDEFI"", ""lXDEFI"") {
        require((XDEFI = XDEFI_) != address(0), ""INVALID_TOKEN"");
        owner = msg.sender;
        baseURI = baseURI_;
        _zeroDurationPointBase = zeroDurationPointBase_;
    }

    modifier onlyOwner() {
        require(owner == msg.sender, ""NOT_OWNER"");
        _;
    }

    modifier noReenter() {
        require(_locked == 0, ""LOCKED"");
        _locked = uint256(1);
        _;
        _locked = uint256(0);
    }

    /*******************/
    /* Admin Functions */
    /*******************/

    function acceptOwnership() external {
        require(pendingOwner == msg.sender, ""NOT_PENDING_OWNER"");
        emit OwnershipAccepted(owner, msg.sender);
        owner = msg.sender;
        pendingOwner = address(0);
    }

    function proposeOwnership(address newOwner_) external onlyOwner {
        emit OwnershipProposed(owner, pendingOwner = newOwner_);
    }

    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setLockPeriods(uint256[] memory durations_, uint8[] memory multipliers) external onlyOwner {
        uint256 count = durations_.length;

        for (uint256 i; i < count; ++i) {
            uint256 duration = durations_[i];
            require(duration <= uint256(18250 days), ""INVALID_DURATION"");
            emit LockPeriodSet(duration, bonusMultiplierOf[duration] = multipliers[i]);
        }
    }

    /**********************/
    /* Position Functions */
    /**********************/

    function lock(uint256 amount_, uint256 duration_, address destination_) external noReenter returns (uint256 tokenId_) {
        // Lock the XDEFI in the contract.
        SafeERC20.safeTransferFrom(IERC20(XDEFI), msg.sender, address(this), amount_);

        // Handle the lock position creation and get the tokenId of the locked position.
        return _lock(amount_, duration_, destination_);
    }

    function lockWithPermit(uint256 amount_, uint256 duration_, address destination_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external noReenter returns (uint256 tokenId_) {
        // Approve this contract for the amount, using the provided signature.
        IEIP2612(XDEFI).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);

        // Lock the XDEFI in the contract.
        SafeERC20.safeTransferFrom(IERC20(XDEFI), msg.sender, address(this), amount_);

        // Handle the lock position creation and get the tokenId of the locked position.
        return _lock(amount_, duration_, destination_);
    }

    function relock(uint256 tokenId_, uint256 lockAmount_, uint256 duration_, address destination_) external noReenter returns (uint256 amountUnlocked_, uint256 newTokenId_) {
        // Handle the unlock and get the amount of XDEFI eligible to withdraw.
        amountUnlocked_ = _unlock(msg.sender, tokenId_);

        // Throw convenient error if trying to re-lock more than was unlocked. `amountUnlocked_ - lockAmount_` would have reverted below anyway.
        require(lockAmount_ <= amountUnlocked_, ""INSUFFICIENT_AMOUNT_UNLOCKED"");

        // Handle the lock position creation and get the tokenId of the locked position.
        newTokenId_ = _lock(lockAmount_, duration_, destination_);

        uint256 withdrawAmount = amountUnlocked_ - lockAmount_;

        if (withdrawAmount != uint256(0)) {
            // Send the excess XDEFI to the destination, if needed.
            SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);
        }

        // NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_unlock`) and transferring out.
        _updateXDEFIBalance();
    }

    function unlock(uint256 tokenId_, address destination_) external noReenter returns (uint256 amountUnlocked_) {
        // Handle the unlock and get the amount of XDEFI eligible to withdraw.
        amountUnlocked_ = _unlock(msg.sender, tokenId_);

        // Send the the unlocked XDEFI to the destination.
        SafeERC20.safeTransfer(IERC20(XDEFI), destination_, amountUnlocked_);

        // NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_unlock`) and transferring out.
        _updateXDEFIBalance();
    }

    function updateDistribution() external {
        uint256 totalUnitsCached = totalUnits;

        require(totalUnitsCached > uint256(0), ""NO_UNIT_SUPPLY"");

        uint256 newXDEFI = _toUint256Safe(_updateXDEFIBalance());

        if (newXDEFI == uint256(0)) return;

        _pointsPerUnit += ((newXDEFI * _pointsMultiplier) / totalUnitsCached);

        emit DistributionUpdated(msg.sender, newXDEFI);
    }

    function withdrawableOf(uint256 tokenId_) public view returns (uint256 withdrawableXDEFI_) {
        Position storage position = positionOf[tokenId_];
        return _withdrawableGiven(position.units, position.depositedXDEFI, position.pointsCorrection);
    }

    /****************************/
    /* Batch Position Functions */
    /****************************/

    function relockBatch(uint256[] memory tokenIds_, uint256 lockAmount_, uint256 duration_, address destination_) external noReenter returns (uint256 amountUnlocked_, uint256 newTokenId_) {
        // Handle the unlocks and get the amount of XDEFI eligible to withdraw.
        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);

        // Throw convenient error if trying to re-lock more than was unlocked. `amountUnlocked_ - lockAmount_` would have reverted below anyway.
        require(lockAmount_ <= amountUnlocked_, ""INSUFFICIENT_AMOUNT_UNLOCKED"");

        // Handle the lock position creation and get the tokenId of the locked position.
        newTokenId_ = _lock(lockAmount_, duration_, destination_);

        uint256 withdrawAmount = amountUnlocked_ - lockAmount_;

        if (withdrawAmount != uint256(0)) {
            // Send the excess XDEFI to the destination, if needed.
            SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);
        }

        // NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_unlockBatch`) and transferring out.
        _updateXDEFIBalance();
    }

    function unlockBatch(uint256[] memory tokenIds_, address destination_) external noReenter returns (uint256 amountUnlocked_) {
        // Handle the unlocks and get the amount of XDEFI eligible to withdraw.
        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);

        // Send the the unlocked XDEFI to the destination.
        SafeERC20.safeTransfer(IERC20(XDEFI), destination_, amountUnlocked_);

        // NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_unlockBatch`) and transferring out.
        _updateXDEFIBalance();
    }

    /*****************/
    /* NFT Functions */
    /*****************/

    function getPoints(uint256 amount_, uint256 duration_) external view returns (uint256 points_) {
        return _getPoints(amount_, duration_);
    }

    function merge(uint256[] memory tokenIds_, address destination_) external returns (uint256 tokenId_) {
        uint256 count = tokenIds_.length;
        require(count > uint256(1), ""MIN_2_TO_MERGE"");

        uint256 points;

        // For each NFT, check that it belongs to the caller, burn it, and accumulate the points.
        for (uint256 i; i < count; ++i) {
            uint256 tokenId = tokenIds_[i];
            require(ownerOf(tokenId) == msg.sender, ""NOT_OWNER"");
            require(positionOf[tokenId].expiry == uint32(0), ""POSITION_NOT_UNLOCKED"");

            _burn(tokenId);

            points += _getPointsFromTokenId(tokenId);
        }

        // Mine a new NFT to the destinations, based on the accumulated points.
        _safeMint(destination_, tokenId_ = _generateNewTokenId(points));
    }

    function pointsOf(uint256 tokenId_) external view returns (uint256 points_) {
        require(_exists(tokenId_), ""NO_TOKEN"");
        return _getPointsFromTokenId(tokenId_);
    }

    function tokenURI(uint256 tokenId_) public view override(IXDEFIDistribution, ERC721) returns (string memory tokenURI_) {
        require(_exists(tokenId_), ""NO_TOKEN"");
        return string(abi.encodePacked(baseURI, Strings.toString(tokenId_)));
    }

    /**********************/
    /* Internal Functions */
    /**********************/

    function _generateNewTokenId(uint256 points_) internal view returns (uint256 tokenId_) {
        // Points is capped at 128 bits (max supply of XDEFI for 10 years locked), total supply of NFTs is capped at 128 bits.
        return (points_ << uint256(128)) + uint128(totalSupply() + 1);
    }

    function _getPoints(uint256 amount_, uint256 duration_) internal view returns (uint256 points_) {
        return amount_ * (duration_ + _zeroDurationPointBase);
    }

    function _getPointsFromTokenId(uint256 tokenId_) internal pure returns (uint256 points_) {
        return tokenId_ >> uint256(128);
    }

    function _lock(uint256 amount_, uint256 duration_, address destination_) internal returns (uint256 tokenId_) {
        // Prevent locking 0 amount in order generate many score-less NFTs, even if it is inefficient, and such NFTs would be ignored.
        require(amount_ != uint256(0) && amount_ <= MAX_TOTAL_XDEFI_SUPPLY, ""INVALID_AMOUNT"");

        // Get bonus multiplier and check that it is not zero (which validates the duration).
        uint8 bonusMultiplier = bonusMultiplierOf[duration_];
        require(bonusMultiplier != uint8(0), ""INVALID_DURATION"");

        // Mint a locked staked position NFT to the destination.
        _safeMint(destination_, tokenId_ = _generateNewTokenId(_getPoints(amount_, duration_)));

        // Track deposits.
        totalDepositedXDEFI += amount_;

        // Create Position.
        uint96 units = uint96((amount_ * uint256(bonusMultiplier)) / uint256(100));
        totalUnits += units;
        positionOf[tokenId_] =
            Position({
                units: units,
                depositedXDEFI: uint88(amount_),
                expiry: uint32(block.timestamp + duration_),
                created: uint32(block.timestamp),
                bonusMultiplier: bonusMultiplier,
                pointsCorrection: -_toInt256Safe(_pointsPerUnit * units)
            });

        emit LockPositionCreated(tokenId_, destination_, amount_, duration_);
    }

    function _toInt256Safe(uint256 x_) internal pure returns (int256 y_) {
        y_ = int256(x_);
        assert(y_ >= int256(0));
    }

    function _toUint256Safe(int256 x_) internal pure returns (uint256 y_) {
        assert(x_ >= int256(0));
        return uint256(x_);
    }

    function _unlock(address account_, uint256 tokenId_) internal returns (uint256 amountUnlocked_) {
        // Check that the account is the position NFT owner.
        require(ownerOf(tokenId_) == account_, ""NOT_OWNER"");

        // Fetch position.
        Position storage position = positionOf[tokenId_];
        uint96 units = position.units;
        uint88 depositedXDEFI = position.depositedXDEFI;
        uint32 expiry = position.expiry;

        // Check that enough time has elapsed in order to unlock.
        require(expiry != uint32(0), ""NO_LOCKED_POSITION"");
        require(block.timestamp >= uint256(expiry), ""CANNOT_UNLOCK"");

        // Get the withdrawable amount of XDEFI for the position.
        amountUnlocked_ = _withdrawableGiven(units, depositedXDEFI, position.pointsCorrection);

        // Track deposits.
        totalDepositedXDEFI -= uint256(depositedXDEFI);

        // Burn FDT Position.
        totalUnits -= units;
        delete positionOf[tokenId_];

        emit LockPositionWithdrawn(tokenId_, account_, amountUnlocked_);
    }

    function _unlockBatch(address account_, uint256[] memory tokenIds_) internal returns (uint256 amountUnlocked_) {
        uint256 count = tokenIds_.length;
        require(count > uint256(1), ""USE_UNLOCK"");

        // Handle the unlock for each position and accumulate the unlocked amount.
        for (uint256 i; i < count; ++i) {
            amountUnlocked_ += _unlock(account_, tokenIds_[i]);
        }
    }

    function _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {
        uint256 previousDistributableXDEFI = distributableXDEFI;
        uint256 currentDistributableXDEFI = distributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;

        return _toInt256Safe(currentDistributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);
    }

    function _withdrawableGiven(uint96 units_, uint88 depositedXDEFI_, int256 pointsCorrection_) internal view returns (uint256 withdrawableXDEFI_) {
        return
            (
                _toUint256Safe(
                    _toInt256Safe(_pointsPerUnit * uint256(units_)) +
                    pointsCorrection_
                ) / _pointsMultiplier
            ) + uint256(depositedXDEFI_);
    }

}",3289,347,"[H-01] Malicious early user/attacker can malfunction the contract and even freeze users' funds in edge cases
“_pointsPerUnit += ((newXDEFI * _pointsMultiplier) / totalUnitsCached);”
In the current implementation, `_pointsPerUnit` can be changed in `updateDistribution()` which can be called by anyone.
A malicious early user can `lock()` with only `1 wei` of XDEFI and makes `_pointsPerUnit` to be very large, causing future users not to be able to `lock()` and/or `unlock()` anymore due to overflow in arithmetic related to `_pointsMultiplier`.
As a result, the contract can be malfunctioning and even freeze users' funds in edge cases.
  [H-02] The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards
There is a reentrancy vulnerability in the `_safeMint` function
  [M-01] `_safeMint` Will Fail Due To An Edge Case In Calculating `tokenId` Using The `_generateNewTokenId` Function
NFTs are used to represent unique positions referenced by the generated `tokenId`. The `tokenId` value contains the position's score in the upper 128 bits and the index wrt. the token supply in the lower 128 bits.
When positions are unlocked after expiring, the relevant position stored in the `positionOf` mapping is deleted, however, the NFT is not. The merge() function is used to combine points in unlocked NFTs, burning the underlying NFTs upon merging. As a result, _generateNewTokenId() may end up using the same totalSupply() value, causing _safeMint() to fail if the same amount_ and duration_ values are used.
This edge case only occurs if there is an overlap in the `points_` and `totalSupply() + 1` values used to generate tokenId. As a result, this may impact a user's overall experience while interacting with the XDEFI protocol, as some transactions may fail unexpectedly.",3,"pragma solidity =0.8.10;

import { ERC721, ERC721Enumerable, Strings } from ""@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol"";
import { IERC20, SafeERC20 } from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import { IEIP2612 } from ""./interfaces/IEIP2612.sol"";
import { IXDEFIDistribution } from ""./interfaces/IXDEFIDistribution.sol"";


contract XDEFIDistribution is IXDEFIDistribution, ERC721Enumerable {

    uint88 internal MAX_TOTAL_XDEFI_SUPPLY = uint88(240_000_000_000_000_000_000_000_000);

    
    uint256 internal constant _pointsMultiplier = uint256(2**128);
    uint256 internal _pointsPerUnit;

    address public immutable XDEFI;

    uint256 public distributableXDEFI;
    uint256 public totalDepositedXDEFI;
    uint256 public totalUnits;

    mapping(uint256 => Position) public positionOf;

    mapping(uint256 => uint8) public bonusMultiplierOf;  

    uint256 internal immutable _zeroDurationPointBase;

    string public baseURI;

    address public owner;
    address public pendingOwner;

    uint256 internal _locked;

    constructor (address XDEFI_, string memory baseURI_, uint256 zeroDurationPointBase_) ERC721(""Locked XDEFI"", ""lXDEFI"") {
        require((XDEFI = XDEFI_) != address(0), ""INVALID_TOKEN"");
        owner = msg.sender;
        baseURI = baseURI_;
        _zeroDurationPointBase = zeroDurationPointBase_;
    }

    modifier onlyOwner() {
        require(owner == msg.sender, ""NOT_OWNER"");
        _;
    }

    modifier noReenter() {
        require(_locked == 0, ""LOCKED"");
        _locked = uint256(1);
        _;
        _locked = uint256(0);
    }

    
    
    

    function acceptOwnership() external {
        require(pendingOwner == msg.sender, ""NOT_PENDING_OWNER"");
        emit OwnershipAccepted(owner, msg.sender);
        owner = msg.sender;
        pendingOwner = address(0);
    }

    function proposeOwnership(address newOwner_) external onlyOwner {
        emit OwnershipProposed(owner, pendingOwner = newOwner_);
    }

    function setBaseURI(string memory baseURI_) external onlyOwner {
        baseURI = baseURI_;
    }

    function setLockPeriods(uint256[] memory durations_, uint8[] memory multipliers) external onlyOwner {
        uint256 count = durations_.length;

        for (uint256 i; i < count; ++i) {
            uint256 duration = durations_[i];
            require(duration <= uint256(18250 days), ""INVALID_DURATION"");
            emit LockPeriodSet(duration, bonusMultiplierOf[duration] = multipliers[i]);
        }
    }

    
    
    

    function lock(uint256 amount_, uint256 duration_, address destination_) external noReenter returns (uint256 tokenId_) {
        
        SafeERC20.safeTransferFrom(IERC20(XDEFI), msg.sender, address(this), amount_);

        
        return _lock(amount_, duration_, destination_);
    }

    function lockWithPermit(uint256 amount_, uint256 duration_, address destination_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external noReenter returns (uint256 tokenId_) {
        
        IEIP2612(XDEFI).permit(msg.sender, address(this), amount_, deadline_, v_, r_, s_);

        
        SafeERC20.safeTransferFrom(IERC20(XDEFI), msg.sender, address(this), amount_);

        
        return _lock(amount_, duration_, destination_);
    }

    function relock(uint256 tokenId_, uint256 lockAmount_, uint256 duration_, address destination_) external noReenter returns (uint256 amountUnlocked_, uint256 newTokenId_) {
        
        amountUnlocked_ = _unlock(msg.sender, tokenId_);

        
        require(lockAmount_ <= amountUnlocked_, ""INSUFFICIENT_AMOUNT_UNLOCKED"");

        
        newTokenId_ = _lock(lockAmount_, duration_, destination_);

        uint256 withdrawAmount = amountUnlocked_ - lockAmount_;

        if (withdrawAmount != uint256(0)) {
            
            SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);
        }

        
        _updateXDEFIBalance();
    }

    function unlock(uint256 tokenId_, address destination_) external noReenter returns (uint256 amountUnlocked_) {
        
        amountUnlocked_ = _unlock(msg.sender, tokenId_);

        
        SafeERC20.safeTransfer(IERC20(XDEFI), destination_, amountUnlocked_);

        
        _updateXDEFIBalance();
    }

    function updateDistribution() external {
        uint256 totalUnitsCached = totalUnits;

        require(totalUnitsCached > uint256(0), ""NO_UNIT_SUPPLY"");

        uint256 newXDEFI = _toUint256Safe(_updateXDEFIBalance());

        if (newXDEFI == uint256(0)) return;

        _pointsPerUnit += ((newXDEFI * _pointsMultiplier) / totalUnitsCached);

        emit DistributionUpdated(msg.sender, newXDEFI);
    }

    function withdrawableOf(uint256 tokenId_) public view returns (uint256 withdrawableXDEFI_) {
        Position storage position = positionOf[tokenId_];
        return _withdrawableGiven(position.units, position.depositedXDEFI, position.pointsCorrection);
    }

    
    
    

    function relockBatch(uint256[] memory tokenIds_, uint256 lockAmount_, uint256 duration_, address destination_) external noReenter returns (uint256 amountUnlocked_, uint256 newTokenId_) {
        
        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);

        
        require(lockAmount_ <= amountUnlocked_, ""INSUFFICIENT_AMOUNT_UNLOCKED"");

        
        newTokenId_ = _lock(lockAmount_, duration_, destination_);

        uint256 withdrawAmount = amountUnlocked_ - lockAmount_;

        if (withdrawAmount != uint256(0)) {
            
            SafeERC20.safeTransfer(IERC20(XDEFI), destination_, withdrawAmount);
        }

        
        _updateXDEFIBalance();
    }

    function unlockBatch(uint256[] memory tokenIds_, address destination_) external noReenter returns (uint256 amountUnlocked_) {
        
        amountUnlocked_ = _unlockBatch(msg.sender, tokenIds_);

        
        SafeERC20.safeTransfer(IERC20(XDEFI), destination_, amountUnlocked_);

        
        _updateXDEFIBalance();
    }

    
    
    

    function getPoints(uint256 amount_, uint256 duration_) external view returns (uint256 points_) {
        return _getPoints(amount_, duration_);
    }

    function merge(uint256[] memory tokenIds_, address destination_) external returns (uint256 tokenId_) {
        uint256 count = tokenIds_.length;
        require(count > uint256(1), ""MIN_2_TO_MERGE"");

        uint256 points;

        
        for (uint256 i; i < count; ++i) {
            uint256 tokenId = tokenIds_[i];
            require(ownerOf(tokenId) == msg.sender, ""NOT_OWNER"");
            require(positionOf[tokenId].expiry == uint32(0), ""POSITION_NOT_UNLOCKED"");

            _burn(tokenId);

            points += _getPointsFromTokenId(tokenId);
        }

        
        _safeMint(destination_, tokenId_ = _generateNewTokenId(points));
    }

    function pointsOf(uint256 tokenId_) external view returns (uint256 points_) {
        require(_exists(tokenId_), ""NO_TOKEN"");
        return _getPointsFromTokenId(tokenId_);
    }

    function tokenURI(uint256 tokenId_) public view override(IXDEFIDistribution, ERC721) returns (string memory tokenURI_) {
        require(_exists(tokenId_), ""NO_TOKEN"");
        return string(abi.encodePacked(baseURI, Strings.toString(tokenId_)));
    }

    
    
    

    function _generateNewTokenId(uint256 points_) internal view returns (uint256 tokenId_) {
        
        return (points_ << uint256(128)) + uint128(totalSupply() + 1);
    }

    function _getPoints(uint256 amount_, uint256 duration_) internal view returns (uint256 points_) {
        return amount_ * (duration_ + _zeroDurationPointBase);
    }

    function _getPointsFromTokenId(uint256 tokenId_) internal pure returns (uint256 points_) {
        return tokenId_ >> uint256(128);
    }

    function _lock(uint256 amount_, uint256 duration_, address destination_) internal returns (uint256 tokenId_) {
        
        require(amount_ != uint256(0) && amount_ <= MAX_TOTAL_XDEFI_SUPPLY, ""INVALID_AMOUNT"");

        
        uint8 bonusMultiplier = bonusMultiplierOf[duration_];
        require(bonusMultiplier != uint8(0), ""INVALID_DURATION"");

        
        _safeMint(destination_, tokenId_ = _generateNewTokenId(_getPoints(amount_, duration_)));

        
        totalDepositedXDEFI += amount_;

        
        uint96 units = uint96((amount_ * uint256(bonusMultiplier)) / uint256(100));
        totalUnits += units;
        positionOf[tokenId_] =
            Position({
                units: units,
                depositedXDEFI: uint88(amount_),
                expiry: uint32(block.timestamp + duration_),
                created: uint32(block.timestamp),
                bonusMultiplier: bonusMultiplier,
                pointsCorrection: -_toInt256Safe(_pointsPerUnit * units)
            });

        emit LockPositionCreated(tokenId_, destination_, amount_, duration_);
    }

    function _toInt256Safe(uint256 x_) internal pure returns (int256 y_) {
        y_ = int256(x_);
        assert(y_ >= int256(0));
    }

    function _toUint256Safe(int256 x_) internal pure returns (uint256 y_) {
        assert(x_ >= int256(0));
        return uint256(x_);
    }

    function _unlock(address account_, uint256 tokenId_) internal returns (uint256 amountUnlocked_) {
        
        require(ownerOf(tokenId_) == account_, ""NOT_OWNER"");

        
        Position storage position = positionOf[tokenId_];
        uint96 units = position.units;
        uint88 depositedXDEFI = position.depositedXDEFI;
        uint32 expiry = position.expiry;

        
        require(expiry != uint32(0), ""NO_LOCKED_POSITION"");
        require(block.timestamp >= uint256(expiry), ""CANNOT_UNLOCK"");

        
        amountUnlocked_ = _withdrawableGiven(units, depositedXDEFI, position.pointsCorrection);

        
        totalDepositedXDEFI -= uint256(depositedXDEFI);

        
        totalUnits -= units;
        delete positionOf[tokenId_];

        emit LockPositionWithdrawn(tokenId_, account_, amountUnlocked_);
    }

    function _unlockBatch(address account_, uint256[] memory tokenIds_) internal returns (uint256 amountUnlocked_) {
        uint256 count = tokenIds_.length;
        require(count > uint256(1), ""USE_UNLOCK"");

        
        for (uint256 i; i < count; ++i) {
            amountUnlocked_ += _unlock(account_, tokenIds_[i]);
        }
    }

    function _updateXDEFIBalance() internal returns (int256 newFundsTokenBalance_) {
        uint256 previousDistributableXDEFI = distributableXDEFI;
        uint256 currentDistributableXDEFI = distributableXDEFI = IERC20(XDEFI).balanceOf(address(this)) - totalDepositedXDEFI;

        return _toInt256Safe(currentDistributableXDEFI) - _toInt256Safe(previousDistributableXDEFI);
    }

    function _withdrawableGiven(uint96 units_, uint88 depositedXDEFI_, int256 pointsCorrection_) internal view returns (uint256 withdrawableXDEFI_) {
        return
            (
                _toUint256Safe(
                    _toInt256Safe(_pointsPerUnit * uint256(units_)) +
                    pointsCorrection_
                ) / _pointsMultiplier
            ) + uint256(depositedXDEFI_);
    }

}",2551,2,1,"Identifying vulnerabilities
I'm working through listing vulnerabilities in a smart contract. The user's request specifies listing vulnerabilities without needing mitigation strategies.
Identifying issues
I'm listing vulnerabilities in a smart contract. The request is clear: focus solely on identifying vulnerabilities, without suggesting mitigations.
Tracking vulnerabilities
I'm listing vulnerabilities in a smart contract. The task involves identifying weaknesses without the need to suggest mitigations, focusing solely on listing vulnerabilities.
Identifying vulnerabilities
I’m noting vulnerabilities in a smart contract, focusing solely on listing them without requiring mitigation suggestions. Each issue is meticulously categorized.
","Here are some potential vulnerabilities in the provided smart contract:

1. **Reentrancy Risk in `lock` and `lockWithPermit` functions:**
   - Even though the contract uses a `noReenter` modifier to mitigate reentrancy, there is still a risk if the `_lock` function interacts with external contracts in ways that are not properly safeguarded. The reentrancy guard is applied only at the entry and exit points, but interactions with external contracts like `SafeERC20.safeTransferFrom` could be exploited in certain cases.

2. **Lack of Access Control in `updateDistribution`:**
   - The `updateDistribution` function allows anyone to call and update the distribution, which may result in unauthorized manipulation of the distribution calculation. It should be restricted to an authorized role, such as the contract owner.

3. **Improper Handling of ERC-20 Transfers (No Check for Success in `SafeERC20.safeTransferFrom`):**
   - While `SafeERC20.safeTransferFrom` is used, it’s important to ensure that the return value of the transfer is properly checked. A failure of the transfer could potentially be ignored, depending on the implementation of the ERC-20 token, leading to a loss of funds.

4. **Unverified Minting Process in `merge` function:**
   - In the `merge` function, when merging tokens, the contract burns the old tokens and mints a new one based on the accumulated points. There is no verification that the new token id is unique or that tokens have been properly handled, which could lead to unintended behaviors or duplication of token IDs.

5. **Gas Consumption on `unlockBatch`:**
   - The `unlockBatch` function could result in high gas consumption when called with a large number of tokens due to the need for multiple iterations over the provided `tokenIds_`. This could cause out-of-gas errors if the batch size is too large.

6. **Integer Overflow/Underflow Risk:**
   - Although Solidity 0.8.x includes built-in overflow and underflow protection, the use of operations like `totalUnits += units` and `totalDepositedXDEFI += amount_` without additional checks could still lead to unexpected results in extreme cases.

7. **Potential for Ownership Change Exploits:**
   - The `acceptOwnership` function allows a pending owner to take control of the contract without requiring any further verification, which could lead to a malicious user proposing themselves as the owner and accepting the ownership without any restrictions. Additional conditions should be in place to ensure the pending owner is truly authorized.

8. **Lack of Event Emission for Sensitive Operations:**
   - Certain sensitive operations, such as the transfer of tokens or changes in the balance, could benefit from additional event emissions to improve transparency and traceability. For example, after transferring XDEFI tokens in the `relock` function, an event could be emitted to log this transfer.

9. **Unused or Misleading Variables:**
   - The contract includes several internal variables, like `MAX_TOTAL_XDEFI_SUPPLY`, which is used only in the `_lock` function to validate the amount. However, there is no clear reason for the fixed total supply to be enforced in the context of the contract's broader logic.

10. **Potential Issue in `relock` with Amount Calculation:**
    - In the `relock` function, when a user locks more tokens, it first unlocks the previous position and checks that the locked amount does not exceed the unlocked amount. If the calculation for `amountUnlocked_` is incorrect or the amount to withdraw is improperly computed, this could lead to unexpected losses or incorrect behavior.","### **Output**

---

**[H-01] Malicious early user/attacker can malfunction the contract and even freeze users' funds in edge cases**

**Report Description**:  
The issue arises from the manipulation of `_pointsPerUnit` in the `updateDistribution()` function, which can be called by anyone. A malicious early user can lock a minimal amount (e.g., `1 wei`) of XDEFI, causing `_pointsPerUnit` to become excessively large. This can lead to arithmetic overflow in calculations involving `_pointsMultiplier`, preventing future users from locking or unlocking their funds. As a result, the contract may malfunction, and users' funds could be frozen in edge cases.

**Match in Response List**:  
Matches with the issue titled **""Lack of Access Control in `updateDistribution`""**.

**Validation**:  
**Partially Correct**. The response correctly identifies the lack of access control in `updateDistribution`, which is a critical part of the issue. However, it does not address the specific risk of arithmetic overflow or the potential freezing of users' funds, which are central to the reported vulnerability. The response could be improved by explicitly mentioning these risks.

---

**[H-02] The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards**

**Report Description**:  
The `_safeMint` function contains a reentrancy vulnerability that could allow an attacker to exploit the contract and steal all rewards. This occurs because the function does not adequately protect against reentrant calls, potentially enabling an attacker to repeatedly call the function and drain funds.

**Match in Response List**:  
Matches with the issue titled **""Reentrancy Risk in `lock` and `lockWithPermit` functions""**.

**Validation**:  
**Correct**. The response accurately identifies the reentrancy risk, even though it focuses on the `lock` and `lockWithPermit` functions rather than `_safeMint`. The core issue of reentrancy is correctly addressed, and the response aligns with Solidity best practices for mitigating such vulnerabilities.

---

**[M-01] `_safeMint` Will Fail Due To An Edge Case In Calculating `tokenId` Using The `_generateNewTokenId` Function**

**Report Description**:  
The `_safeMint` function may fail due to an edge case in the `_generateNewTokenId` function. When positions are unlocked and NFTs are merged, the `tokenId` generation process may reuse the same `totalSupply()` value, leading to duplicate `tokenId` values. This can cause `_safeMint` to fail if the same `amount_` and `duration_` values are used, impacting user experience and potentially causing unexpected transaction failures.

**Match in Response List**:  
Matches with the issue titled **""Unverified Minting Process in `merge` function""**.

**Validation**:  
**Correct**. The response correctly identifies the issue with the minting process in the `merge` function, which aligns with the reported edge case in `_generateNewTokenId`. The response highlights the lack of verification for unique token IDs, which is the core of the reported vulnerability.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-02] The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards**
- **[M-01] `_safeMint` Will Fail Due To An Edge Case In Calculating `tokenId` Using The `_generateNewTokenId` Function**

**Partially Correct Matches**:

- **[H-01] Malicious early user/attacker can malfunction the contract and even freeze users' funds in edge cases**

**Missed Issues from Issue Report**:

- *None*

--- 

### **Overall Assessment**  
The `response_list` covers most of the issues in the `issue` report, with two correct matches and one partially correct match. The partially correct match could be improved by addressing the specific risks of arithmetic overflow and fund freezing. Overall, the responses demonstrate a good understanding of the vulnerabilities but could benefit from more detailed explanations in some cases.",2,1,0,10,"```
1. Reentrancy Risk in `lock` and `lockWithPermit` functions
2. Unverified Minting Process in `merge` function
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks of the true positives in the ranked list of predictions**:
   - ""Reentrancy Risk in `lock` and `lockWithPermit` functions"" appears at rank 1.
   - ""Unverified Minting Process in `merge` function"" appears at rank 4.

2. **Calculate the precision at each rank where a true positive appears**:
   - At rank 1: \( P@1 = \frac{1}{1} = 1.0 \)
   - At rank 4: \( P@4 = \frac{2}{4} = 0.5 \)

3. **Average the precision values to compute the Average Precision (AP)**:
   \[
   AP = \frac{1.0 + 0.5}{2} = 0.75
   \]

**Output**:
```
0.75
```"
