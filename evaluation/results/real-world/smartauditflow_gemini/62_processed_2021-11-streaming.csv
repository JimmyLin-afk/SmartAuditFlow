nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,total_tokens,total_steps,Comparison,matchList,MAP
Locke.sol,"// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.0;

import ""./LockeERC20.sol"";
import ""solmate/utils/SafeTransferLib.sol"";
import ""solmate/tokens/ERC20.sol"";

// ====== Governance =====
contract Governed {
    address public gov;
    address private pendingGov;
    address public emergency_gov;

    event NewGov(address indexed oldGov, address indexed newGov);
    event NewPendingGov(address indexed oldPendingGov, address indexed newPendingGov);

    constructor(address _governor, address _emergency_governor) public {
        gov = _governor;
        emergency_gov = _emergency_governor;
    }

    function governorship() public view returns (address, address, address) {
        return (gov, emergency_gov, pendingGov);
    }

    /// Update pending governor
    function setPendingGov(address newPendingGov) governed public {
        address old = pendingGov;
        pendingGov = newPendingGov;
        emit NewPendingGov(old, newPendingGov);
    }

    /// Accepts governorship
    function acceptGov() public {
        require(pendingGov == msg.sender, ""!pending"");
        address old = gov;
        gov = pendingGov;
        emit NewGov(old, pendingGov);
    }

    function setEmergencyGov(address who) public governed {
        emergency_gov = who;
    } 

    /// Remove governor
    function __abdicate() governed public {
        address old = gov;
        gov = address(0);
        emit NewGov(old, address(0));
    }

    // ====== Modifiers =======
    /// Governed function
    modifier governed {
        require(msg.sender == gov, ""!gov"");
        _;
    }

    /// Emergency governed function
    modifier emergency_governed {
        require(msg.sender == gov || msg.sender == emergency_gov, ""!egov"");
        _;
    }
}

interface IGoverned {
    function gov() external view returns (address);
    function emergency_gov() external view returns (address);
}

abstract contract ExternallyGoverned {
    IGoverned public gov;

    constructor(address governor) {
        gov = IGoverned(governor);
    }

    // ====== Modifiers =======
    /// Governed function
    modifier externallyGoverned {
        require(msg.sender == gov.gov(), ""!gov"");
        _;
    }

    /// Emergency governed function
    modifier externallyEmergencyGoverned {
        require(msg.sender == gov.gov() || msg.sender == gov.emergency_gov(), ""!e_gov"");
        _;
    }
}

interface LockeCallee {
    function lockeCall(address initiator, address token, uint256 amount, bytes calldata data) external;
}

// ====== Stream =====
contract Stream is LockeERC20, ExternallyGoverned {
    using SafeTransferLib for ERC20;    
    // ======= Structs ========
    struct TokenStream {
        uint256 lastCumulativeRewardPerToken;
        uint256 virtualBalance;
        uint112 rewards;
        uint112 tokens;
        uint32 lastUpdate;
        bool merkleAccess;
    }

    // ======= Storage ========
    // ==== Immutables =====
    // stream start time
    uint32 private immutable startTime;
    // length of stream
    uint32 private immutable streamDuration;
    // length of time depositTokens are locked after stream ends
    uint32 private immutable depositLockDuration;
    // length of time rewardTokens are locked after stream ends
    uint32 private immutable rewardLockDuration;

    // end of stream
    uint32 private immutable endStream;
    // end of deposit lock
    uint32 private immutable endDepositLock;
    // end of reward lock
    uint32 private immutable endRewardLock;

    // Token given to depositer
    address public immutable rewardToken;
    // Token deposited
    address public immutable depositToken;

    // This stream's id
    uint64 public immutable streamId;

    // fee percent on reward tokens
    uint16 private immutable feePercent;
    // are fees enabled
    bool private immutable feeEnabled;

    // deposits are basically a *sale* to the stream creator if true
    bool public immutable isSale;

    // stream creator
    address public immutable streamCreator;

    uint112 private immutable depositDecimalsOne;
    // ============

    //  == sloc a ==
    // internal reward token amount to be given to depositors
    uint112 private rewardTokenAmount;
    // internal deposit token amount locked/to be sold to stream creator
    uint112 private depositTokenAmount;
    // ============

    // == slot b ==
    uint112 private rewardTokenFeeAmount;
    uint112 private depositTokenFlashloanFeeAmount;
    uint8 private unlocked = 1;
    bool private claimedDepositTokens;
    // ============

    // == slot c ==
    uint256 private cumulativeRewardPerToken;
    // ============

    // == slot d ==
    uint256 private totalVirtualBalance;
    // ============

    // == slot e ==
    uint112 public unstreamed;
    uint112 private redeemedDepositTokens;
    uint32 private lastUpdate;
    // ============

    // mapping of address to number of tokens not yet streamed over
    mapping (address => TokenStream) public tokensNotYetStreamed;

    // external incentives to stream creator
    mapping (address => uint112) public incentives;

    // ======= Events ========
    event StreamFunded(uint256 amount);
    event Staked(address indexed who, uint256 amount);
    event Withdrawn(address indexed who, uint256 amount);
    event StreamIncentivized(address indexed token, uint256 amount);
    event StreamIncentiveClaimed(address indexed token, uint256 amount);
    event SoldTokensClaimed(address indexed who, uint256 amount);
    event DepositTokensReclaimed(address indexed who, uint256 amount);
    event FeesClaimed(address indexed token, address indexed who, uint256 amount);
    event RecoveredTokens(address indexed token, address indexed recipient, uint256 amount);
    event RewardsClaimed(address indexed who, uint256 amount);
    event Flashloaned(address indexed token, address indexed who, uint256 amount, uint256 fee);

    // ======= Modifiers ========
    modifier updateStream(address who) {
        // save bytecode space by making it a jump instead of inlining at cost of gas
        updateStreamInternal(who);
        _;
    }

    function updateStreamInternal(address who) internal {
        require(block.timestamp < endStream , ""!stream"");
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];

        if (block.timestamp >= startTime) {
            // set lastUpdates if need be
            if (ts.lastUpdate == 0) {
                ts.lastUpdate = uint32(block.timestamp);
            }
            if (lastUpdate == 0) {
                lastUpdate = uint32(block.timestamp);
            }

            // accumulate reward per token info
            cumulativeRewardPerToken = rewardPerToken();

            // update user rewards
            ts.rewards = earned(ts, cumulativeRewardPerToken);
            // update users last cumulative reward per token
            ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;

            // update users unstreamed balance
            uint32 acctTimeDelta = uint32(block.timestamp) - ts.lastUpdate;
            if (acctTimeDelta > 0 && ts.tokens > 0) {
                // some time has passed since this user last interacted
                // update ts not yet streamed
                ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));
                ts.lastUpdate = uint32(block.timestamp);
            }

            // handle global unstreamed
            uint32 tdelta = uint32(block.timestamp - lastUpdate);
            // stream tokens over
            if (tdelta > 0 && unstreamed > 0) {
                uint256 globalStreamingSpeedPerSecond = (uint256(unstreamed) * 10**6)/ (endStream - lastUpdate);
                unstreamed -= uint112((uint256(tdelta) * globalStreamingSpeedPerSecond) / 10**6);
            }
            // already ensure that blocktimestamp is less than endStream so guaranteed ok here
            lastUpdate = uint32(block.timestamp);
        } else {
            if (ts.lastUpdate == 0) {
                ts.lastUpdate = startTime;
            }
            if (lastUpdate == 0) {
                lastUpdate = startTime;
            }
        }
    }


    function lockInternal() internal {
        require(unlocked == 1, ""re"");
        unlocked = 2;
    }
    modifier lock {
        lockInternal();
        _;
        unlocked = 1;
    }

    constructor(
        uint64 _streamId,
        address creator,
        bool _isSale,
        address _rewardToken,
        address _depositToken,
        uint32 _startTime,
        uint32 _streamDuration,
        uint32 _depositLockDuration,
        uint32 _rewardLockDuration,
        uint16 _feePercent,
        bool _feeEnabled

    )
        LockeERC20(_depositToken, _streamId, _startTime + _streamDuration)
        ExternallyGoverned(msg.sender) // inherit factory governance
        public 
    {
        // set fee info
        feePercent = _feePercent;
        feeEnabled = _feeEnabled;

        // limit feePercent
        require(feePercent < 10000, ""fee"");
    
        // store streamParams
        startTime = _startTime;
        streamDuration = _streamDuration;
        depositLockDuration = _depositLockDuration;
        rewardLockDuration = _rewardLockDuration;

        endStream = startTime + streamDuration;
        endDepositLock = endStream + depositLockDuration;
        endRewardLock = endStream + rewardLockDuration;
    
        // set tokens
        depositToken = _depositToken;
        rewardToken = _rewardToken;

        // set streamId
        streamId = _streamId;

        // set sale info
        isSale = _isSale;
    
        streamCreator = creator;

        depositDecimalsOne = uint112(10**ERC20(depositToken).decimals());
    }

    /**
     * @dev Returns relevant internal token amounts
    **/
    function tokenAmounts() public view returns (uint112, uint112, uint112, uint112) {
        return (rewardTokenAmount, depositTokenAmount, rewardTokenFeeAmount, depositTokenFlashloanFeeAmount);
    }

    /**
     * @dev Returns fee parameters
    **/
    function feeParams() public view returns (uint16, bool) {
        return (feePercent, feeEnabled);
    }

    /**
     * @dev Returns stream parameters
    **/
    function streamParams() public view returns (uint32,uint32,uint32,uint32) {
        return (
            startTime,
            streamDuration,
            depositLockDuration,
            rewardLockDuration
        );
    }

    function lastApplicableTime() internal view returns (uint32) {
        return block.timestamp <= endStream ? uint32(block.timestamp) : endStream;
    }

    function rewardPerToken() public view returns (uint256) {
        if (totalVirtualBalance == 0) {
            return cumulativeRewardPerToken;
        } else {
            // ∆time*rewardTokensPerSecond*oneDepositToken / totalVirtualBalance
            return cumulativeRewardPerToken + (
                ((uint256(lastApplicableTime()) - lastUpdate) * rewardTokenAmount * depositDecimalsOne/streamDuration) 
                / totalVirtualBalance
            );
        }
    }

    function dilutedBalance(uint112 amount) internal view returns (uint256) {
        // duration / timeRemaining * amount
        if (block.timestamp < startTime) {
            return amount;
        } else {
            uint32 timeRemaining = endStream - uint32(block.timestamp);
            return ((uint256(streamDuration) * amount * 10**6) / timeRemaining) / 10**6;
        }
    }

    function getEarned(address who) public view returns (uint256) {
        TokenStream storage ts = tokensNotYetStreamed[who];
        return earned(ts, rewardPerToken());
    }

    function earned(TokenStream storage ts, uint256 currCumRewardPerToken) internal view returns (uint112) {
        return uint112(ts.virtualBalance * (currCumRewardPerToken - ts.lastCumulativeRewardPerToken) / depositDecimalsOne) + ts.rewards;
    }

    /**
     * @dev Allows _anyone_ to fund this stream, if its before the stream start time
    **/
    function fundStream(uint112 amount) public lock {
        require(amount > 0, ""amt"");
        require(block.timestamp < startTime, ""time"");
        uint112 amt;

        // transfer from sender
        uint256 prevBal = ERC20(rewardToken).balanceOf(address(this));
        ERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(rewardToken).balanceOf(address(this));
        require(newBal < type(uint112).max && newBal > prevBal, ""erc"");

        amount = uint112(newBal - prevBal);
        // if fee is enabled, take a fee
        if (feeEnabled) {
            // Safety:
            //  1. feePercent & y are casted up to u256, so cannot overflow when multiplying
            //  2. downcast is safe because (x*y)/MAX_X is guaranteed to be smaller than y which is uint112
            //  3. amount is guaranteed to be greater than feeAmt
            uint112 feeAmt;
            unchecked {
                feeAmt = uint112(uint256(feePercent) * uint256(amount) / 10000); 
                amt = amount - feeAmt;
            }

            // since this operation can be repeated, we cannot assume no overflow so use checked math
            rewardTokenFeeAmount += feeAmt;
            rewardTokenAmount += amt;
        } else {
            amt = amount;
            rewardTokenAmount += amt;
        }
        
        emit StreamFunded(amt);
    }

    /**
     *  @dev Deposits depositTokens into this stream
     * 
     *  additionally, updates tokensNotYetStreamed
    */ 
    function stake(uint112 amount) public lock updateStream(msg.sender) {
        require(amount > 0, ""amt"");

        // checked in updateStream
        // require(block.timestamp < endStream, ""stake:!stream"");

        // transfer tokens over
        uint256 prevBal = ERC20(depositToken).balanceOf(address(this));
        ERC20(depositToken).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(depositToken).balanceOf(address(this));
        require(newBal <= type(uint112).max && newBal > prevBal, ""erc"");
        
        uint112 trueDepositAmt = uint112(newBal - prevBal);

        depositTokenAmount += trueDepositAmt;
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        ts.tokens += trueDepositAmt;

        uint256 virtualBal = dilutedBalance(trueDepositAmt);
        ts.virtualBalance += virtualBal;
        totalVirtualBalance += virtualBal;
        unstreamed += trueDepositAmt;

        if (!isSale) {
            // not a straight sale, so give the user some receipt tokens
            _mint(msg.sender, trueDepositAmt);
        } else {
        }

        emit Staked(msg.sender, trueDepositAmt);
    }

    /**
     *  @dev Allows a stream depositor to withdraw a specific amount of depositTokens during a stream,
     *  up to their tokensNotYetStreamed amount
     * 
     *  additionally, updates tokensNotYetStreamed
    */ 
    function withdraw(uint112 amount) public lock updateStream(msg.sender) {
        require(amount > 0, ""amt"");

        // checked in updateStream
        // is the stream still going on? thats the only time a depositer can withdraw
        // require(block.timestamp < endStream, ""withdraw:!stream"");
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];

        require(ts.tokens >= amount, ""amt"");
        ts.tokens -= amount;

        uint256 virtualBal = dilutedBalance(amount);
        ts.virtualBalance -= virtualBal;
        totalVirtualBalance -= virtualBal;
        depositTokenAmount -= amount;
        if (!isSale) {
            _burn(msg.sender, amount);
        } else {
        }

        // do the transfer
        ERC20(depositToken).safeTransfer(msg.sender, amount);

        emit Withdrawn(msg.sender, amount);
    }

    /**
     *  @dev Allows a stream depositor to exit their entire remaining tokens that haven't streamed
     *  and burns receiptTokens if its not a sale.
     * 
     *  additionally, updates tokensNotYetStreamed. Lock is done in withdraw
    */ 
    function exit() public updateStream(msg.sender) {
        // checked in updateStream
        // is the stream still going on? thats the only time a depositer can withdraw
        // require(block.timestamp < endStream, ""withdraw:!stream"");
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        uint112 amount = ts.tokens;
        withdraw(amount);
    }

    /**
     *  @dev Allows anyone to incentivize this stream with extra tokens
     *  and requires the incentive to not be the reward or deposit token
    */ 
    function createIncentive(address token, uint112 amount) public lock {
        require(token != rewardToken && token != depositToken, ""inc"");
        
        uint256 prevBal = ERC20(token).balanceOf(address(this));
        ERC20(token).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(token).balanceOf(address(this));
        require(newBal <= type(uint112).max && newBal > prevBal, ""erc"");

        uint112 amt = uint112(newBal - prevBal);
        incentives[token] += amt;
        emit StreamIncentivized(token, amt);
    }

    /**
     *  @dev Allows the stream creator to claim an incentive once the stream is done
    */ 
    function claimIncentive(address token) public lock {
        // creator is claiming
        require(msg.sender == streamCreator, ""!creator"");
        // stream ended
        require(block.timestamp >= endStream, ""stream"");
        uint112 amount = incentives[token];
        require(amount > 0, ""amt"");
        incentives[token] = 0;
        ERC20(token).safeTransfer(msg.sender, amount);
        emit StreamIncentiveClaimed(token, amount);
    }

    /**
     *  @dev Allows a receipt token holder to reclaim deposit tokens if the deposit lock is done & their receiptToken amount
     *  is greater than the requested amount
    */ 
    function claimDepositTokens(uint112 amount) public lock {
        require(!isSale, ""sale"");
        // NOTE: given that endDepositLock is strictly *after* the last time withdraw or exit is callable
        // we dont need to updateStream(msg.sender)
        require(amount > 0, ""amt"");

        // is the stream over + the deposit lock period over? thats the only time receiptTokens can be burned for depositTokens after stream is over
        require(block.timestamp > endDepositLock, ""lock"");

        // burn the receiptTokens
        _burn(msg.sender, amount);

        redeemedDepositTokens += amount;

        // send the receipt token holder back the funds
        ERC20(depositToken).safeTransfer(msg.sender, amount);

        emit DepositTokensReclaimed(msg.sender, amount);
    }

    /**
     *  @dev Allows a receipt token holder (or original depositor in case of a sale) to claim their rewardTokens
    */ 
    function claimReward() public lock {
        require(block.timestamp > endRewardLock, ""lock"");

        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        // accumulate reward per token info
        cumulativeRewardPerToken = rewardPerToken();

        // update user rewards
        ts.rewards = earned(ts, cumulativeRewardPerToken);
        // update users last cumulative reward per token
        ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;

        lastUpdate = lastApplicableTime();

        uint256 rewardAmt = ts.rewards;
        ts.rewards = 0;

        require(rewardAmt > 0, ""amt"");

        // transfer the tokens
        ERC20(rewardToken).safeTransfer(msg.sender, rewardAmt);

        emit RewardsClaimed(msg.sender, rewardAmt);
    }

    /**
     *  @dev Allows a creator to claim sold tokens if the stream has ended & this contract is a sale
    */ 
    function creatorClaimSoldTokens(address destination) public lock {
        // can only claim when its a sale
        require(isSale, ""!sale"");

        // only can claim once
        require(!claimedDepositTokens, ""claimed"");
        // creator is claiming
        require(msg.sender == streamCreator, ""!creator"");
        // stream ended
        require(block.timestamp >= endStream, ""stream"");
        
        uint112 amount = depositTokenAmount;
        claimedDepositTokens = true;

        ERC20(depositToken).safeTransfer(destination, amount);

        emit SoldTokensClaimed(destination, amount);
    }

    /**
     *  @dev Allows the governance contract of the factory to select a destination
     *  and transfer fees (in rewardTokens) to that address totaling the total fee amount
    */ 
    function claimFees(address destination) public lock externallyGoverned {
        // Stream is done
        require(block.timestamp >= endStream, ""stream"");

        // reset fee amount
        uint112 fees = rewardTokenFeeAmount;
        if (fees > 0) {
            rewardTokenFeeAmount = 0;

            // transfer and emit event
            ERC20(rewardToken).safeTransfer(destination, fees);
            emit FeesClaimed(rewardToken, destination, fees);
        }

        fees = depositTokenFlashloanFeeAmount;
        if (fees > 0) {
            depositTokenFlashloanFeeAmount = 0;

            // transfer and emit event
            ERC20(depositToken).safeTransfer(destination, fees);

            emit FeesClaimed(depositToken, destination, fees);
        }
        
    }

    // ======== Non-protocol functions ========

    /**
     *  @dev Allows the stream creator to save tokens
     *  There are some limitations to this:
     *      1. if its deposit token:
     *          - DepositLock is fully done
     *          - There are excess deposit tokens (balance - depositTokenAmount)
     *      2. if its the reward token:
     *          - RewardLock is fully done
     *          - Excess defined as balance - (rewardTokenAmount + rewardTokenFeeAmount)
     *      3. if incentivized:
     *          - excesss defined as bal - incentives[token]
    */ 
    function recoverTokens(address token, address recipient) public lock {
        // NOTE: it is the stream creators responsibility to save
        // tokens on behalf of their users.
        require(msg.sender == streamCreator, ""!creator"");
        if (token == depositToken) {
            require(block.timestamp > endDepositLock, ""time"");
            // get the balance of this contract
            // check what isnt claimable by either party
            uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);
            // allow saving of the token
            ERC20(token).safeTransfer(recipient, excess);

            emit RecoveredTokens(token, recipient, excess);
            return;
        }
        
        if (token == rewardToken) {
            require(block.timestamp > endRewardLock, ""time"");
            // check current balance vs internal balance
            //
            // NOTE: if a token rebases, i.e. changes balance out from under us,
            // most of this contract breaks and rugs depositors. this isn't exclusive
            // to this function but this function would in theory allow someone to rug
            // and recover the excess (if it is worth anything)

            // check what isnt claimable by depositors and governance
            uint256 excess = ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount);
            ERC20(token).safeTransfer(recipient, excess);

            emit RecoveredTokens(token, recipient, excess);
            return;
        }

        if (incentives[token] > 0) {
            require(block.timestamp >= endStream, ""stream"");
            uint256 excess = ERC20(token).balanceOf(address(this)) - incentives[token];
            ERC20(token).safeTransfer(recipient, excess);
            emit RecoveredTokens(token, recipient, excess);
            return;
        }

        // not reward token nor deposit nor incentivized token, free to transfer
        uint256 bal = ERC20(token).balanceOf(address(this));
        ERC20(token).safeTransfer(recipient, bal);
        emit RecoveredTokens(token, recipient, bal);
    }

    /**
     *  @dev Allows anyone to flashloan reward or deposit token for a 10bps fee
    */
    function flashloan(address token, address to, uint112 amount, bytes memory data) public lock {
        require(token == depositToken || token == rewardToken, ""erc"");

        uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        ERC20(token).safeTransfer(to, amount);

        // the `to` contract should have a public function with the signature:
        // function lockeCall(address initiator, address token, uint256 amount, bytes memory data);
        LockeCallee(to).lockeCall(msg.sender, token, amount, data);

        uint256 postDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 postRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        uint112 feeAmt = amount * 10 / 10000; // 10bps fee

        if (token == depositToken) {
            depositTokenFlashloanFeeAmount += feeAmt;
            require(preDepositTokenBalance + feeAmt <= postDepositTokenBalance, ""f1"");
            require(preRewardTokenBalance <= postRewardTokenBalance, ""f2"");
        } else {
            rewardTokenFeeAmount += feeAmt;
            require(preDepositTokenBalance <= postDepositTokenBalance, ""f3"");
            require(preRewardTokenBalance + feeAmt <= postRewardTokenBalance, ""f4"");
        }

        emit Flashloaned(token, msg.sender, amount, feeAmt);
    }

    /**
     *  @dev Allows inherited governance contract to call functions on behalf of this contract
     *  This is a potentially dangerous function so to ensure trustlessness, *all* balances
     *  that may matter are guaranteed to not change.
     * 
     *  The primary usecase is for claiming potentially airdrops that may have accrued on behalf of this contract
    */
    function arbitraryCall(address who, bytes memory data) public lock externallyGoverned {
        // cannot have an active incentive for the callee
        require(incentives[who] == 0, ""inc"");
        // cannot be to deposit token nor reward token
        require(who != depositToken && who != rewardToken, ""erc"");

        // get token balances
        uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        (bool success, bytes memory _ret) = who.call(data);
        require(success);

        // require no change in balances
        uint256 postDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 postRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));
        require(preDepositTokenBalance == postDepositTokenBalance && preRewardTokenBalance == postRewardTokenBalance, ""erc"");
    }
}

contract StreamFactory is Governed {

    // ======= Structs ========
    struct GovernableStreamParams {
        uint32 maxDepositLockDuration;
        uint32 maxRewardLockDuration;
        uint32 maxStreamDuration;
        uint32 minStreamDuration;
    }

    struct GovernableFeeParams {
        uint16 feePercent;
        bool feeEnabled;
    }

    // ======= Storage ========
    GovernableStreamParams public streamParams;
    GovernableFeeParams public feeParams;
    uint64 public currStreamId; 

    uint16 constant MAX_FEE_PERCENT = 500; // 500/10000 == 5%

    // =======  Events  =======
    event StreamCreated(uint256 indexed stream_id, address stream_addr);
    event StreamParametersUpdated(GovernableStreamParams oldParams, GovernableStreamParams newParams);
    event FeeParametersUpdated(GovernableFeeParams oldParams, GovernableFeeParams newParams);

    constructor(address _governor, address _emergency_governor) public Governed(_governor, _emergency_governor) {
        streamParams = GovernableStreamParams({
            maxDepositLockDuration: 52 weeks,
            maxRewardLockDuration: 52 weeks,
            maxStreamDuration: 2 weeks,
            minStreamDuration: 1 hours
        });
    }

    /**
     * @dev Deploys a minimal contract pointing to streaming logic. This contract will also be the token contract
     * for the receipt token. It custodies the depositTokens until depositLockDuration is complete. After
     * lockDuration is completed, the depositTokens can be claimed by the original depositors
     * 
    **/
    function createStream(
        address rewardToken,
        address depositToken,
        uint32 startTime,
        uint32 streamDuration,
        uint32 depositLockDuration,
        uint32 rewardLockDuration,
        bool isSale
    )
        public
        returns (Stream)
    {
        // perform checks

        {
            require(startTime >= block.timestamp, ""past"");
            require(streamDuration >= streamParams.minStreamDuration && streamDuration <= streamParams.maxStreamDuration, ""stream"");
            require(depositLockDuration <= streamParams.maxDepositLockDuration, ""lock"");
            require(rewardLockDuration <= streamParams.maxRewardLockDuration, ""reward"");
        }
        

        // TODO: figure out sane salt, i.e. streamid + x? streamid guaranteed to be unique
        uint64 that_stream = currStreamId;
        currStreamId += 1;
        bytes32 salt = bytes32(uint256(that_stream));

        Stream stream = new Stream{salt: salt}(
            that_stream,
            msg.sender,
            isSale,
            rewardToken,
            depositToken,
            startTime,
            streamDuration,
            depositLockDuration,
            rewardLockDuration,
            feeParams.feePercent,
            feeParams.feeEnabled
        );

        emit StreamCreated(that_stream, address(stream));

        return stream;
    }

    function updateStreamParams(GovernableStreamParams memory newParams) public governed {
        // DATA VALIDATION:
        //  there is no real concept of ""sane"" limits here, and if misconfigured its ultimated
        //  not a massive deal so no data validation is done
        GovernableStreamParams memory old = streamParams;
        streamParams = newParams;
        emit StreamParametersUpdated(old, newParams);
    }

    function updateFeeParams(GovernableFeeParams memory newFeeParams) public governed {
        require(newFeeParams.feePercent <= MAX_FEE_PERCENT, ""fee"");
        GovernableFeeParams memory old = feeParams;
        feeParams = newFeeParams;
        emit FeeParametersUpdated(old, newFeeParams);
    }
}",6655,856,"[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve depositTokenFlashloanFeeAmount, which may cause fund loss to users
Variables `depositTokenFlashloanFeeAmount`   Submitted by WatchPug, also found by 0x0x0x, ScopeLift, gpersoon, harleythedog, hyh, gzeon, jonah1005, and kenzo
https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654-L654 ```
uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);
```
In the current implementation, depositTokenFlashloanFeeAmount is not excluded when calculating excess depositToken. Therefore, the stream creator can call recoverTokens(depositToken, recipient) and retrieve depositTokenFlashloanFeeAmount if there are any.
As a result:
When the protocol governance calls claimFees() and claim accumulated depositTokenFlashloanFeeAmount, it may fail due to insufficient balance of depositToken.
Or, part of users' funds (depositToken) will be transferred to the protocol governance as fees, causing some users unable to withdraw or can only withdraw part of their deposits.
 [H-02] Tokens can be stolen when depositToken == rewardToken

Submitted by cmichel, also found by 0x0x0x, gzeon, Ruhum, gpersoon, hack3r-0m, and pauliax
The Streaming contract allows the deposit and reward tokens to be the same token.
I believe this is intended, think Sushi reward on Sushi as is the case with xSushi.
The reward and deposit balances are also correctly tracked independently in depositTokenAmount and rewardTokenAmount. However, when recovering tokens this leads to issues as the token is recovered twice, once for deposits and another time for rewards:
function recoverTokens(address token, address recipient) public lock {
  [H-03] Reward token not correctly recovered

Submitted by cmichel, also found by GeekyLumberjack, kenzo, pedroais, and hyh
The Streaming contract allows recovering the reward token by calling recoverTokens(rewardToken, recipient).
However, the excess amount is computed incorrectly as ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount):
function recoverTokens(address token, address recipient) public lock {

[H-04] Improper implementation of arbitraryCall() allows protocol gov to steal funds from users' wallets

Function `arbitraryCall`
https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733-L735
function arbitraryCall(address who, bytes memory data) public lock externallyGoverned {
    // cannot have an active incentive for the callee
    require(incentives[who] == 0, ""inc"");
    ...

When an incentiveToken is claimed after endStream, incentives[who] will be 0 for that incentiveToken.
If the protocol gov is malicious or compromised, they can call arbitraryCall() with the address of the incentiveToken as who and transferFrom() as calldata and steal all the incentiveToken in the victim's wallet balance up to the allowance amount.
  [H-05] Possible incentive theft through the arbitraryCall() function

The Locke.arbitraryCall() function allows the inherited governance contract to perform arbitrary contract calls within certain constraints. Contract calls to tokens provided as incentives through the createIncentive() function are not allowed if there is some still some balance according to the incentives mapping (See line 735 referenced below).
However, the token can still be called prior any user creating an incentive, so it's possible for the arbitraryCall() function to be used to set an allowance on an incentive token before the contract has actually received any of the token through createIncentive().
In summary:
If some possible incentive tokens are known prior to being provided, the arbitraryCall() function can be used to pre-approve a token allowance for a malicious recipient.
Once a user calls createIncentive() and provides one of the pre-approved tokens, the malicious recipient can call transferFrom on the provided incentive token and withdraw the tokens.
  [H-06] Creating rewardTokens without streaming depositTokens
 function `updateStreamInternal`
stake and withdraws can generate rewardTokens without streaming depositTokens. It does not matter whether the stream is a sale or not.
The following lines can increase the reward balance on a withdraw some time after stake: https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L219:L222
  [H-07] Business logic bug in __abdicate() function - 2 Bugs

Submitted by cyberboy, also found by Meta0xNull
Impact

The \__abdicate() function at https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L46-L50 is the logic to remove the governance i.e., to renounce governance. However, the function logic does not consider emergency governor and pending governor, which can be a backdoor as only the ""gov"" is set to zero address while the emergency and pending gov remains. A pending gov can just claim and become the gov again, replacing the zero address.

[H-08] ts.tokens sometimes calculated incorrectly

function stake

Suppose someone stakes some tokens and then withdraws all of his tokens (he can still withdraw). This will result in ts.tokens being 0.
Now after some time he stakes some tokens again. At the second stake updateStream() is called and the following if condition is false because ts.tokens==0
  if (acctTimeDelta > 0 && ts.tokens > 0) {

Thus ts.lastUpdate is not updated and stays at the value from the first withdraw. Now he does a second withdraw. updateStream() is called an calculates the updated value of ts.tokens. However it uses ts.lastUpdate, which is the time from the first withdraw and not from the second stake. So the value of ts.token is calculated incorrectly. Thus more tokens can be withdrawn than you are supposed to be able to withdraw.
``` function stake(uint112 amount) public lock updateStream(msg.sender) {
    ...         
    uint112 trueDepositAmt = uint112(newBal - prevBal);
    ... 
    ts.tokens += trueDepositAmt;
 ```   [H-09] DOS while dealing with erc20 when value(i.e amount*decimals) is high but less than type(uint112).max

Submitted by hack3r-0m
Impact

https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L229
reverts due to overflow for higher values (but strictly less than type(uint112).max) and hence when user calls exit or withdraw function it will revert and that user will not able to withdraw funds permanentaly.

[H-10] recoverTokens doesn't work when isSale is true

In `recoverTokens` function, the logic to calculate the excess number of deposit tokens in the contract is: ```
uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);
```
This breaks in the case where isSale is true and the deposit tokens have already been claimed through the use of creatorClaimSoldTokens. In this case, redemeedDepositTokens will be zero, and depositTokenAmount will still be at its original value when the streaming ended. As a result, any attempts to recover deposit tokens from the contract would either revert or send less tokens than should be sent, since the logic above would still think that there are the full amount of deposit tokens in the contract. This breaks the functionality of the function completely in this case.
  [M-02] Any `arbitraryCall` gathered airdrop can be stolen with recoverTokens

Any airdrop gathered with arbitraryCall will be immediately lost as an attacker can track arbitraryCall transactions and back run them with calls to recoverTokens, which doesn't track any tokens besides reward, deposit and incentive tokens, and will give the airdrop away.

[M-04] arbitraryCall() can get blocked by an attacker

Submitted by GiveMeTestEther, also found by ScopeLift
Impact

arbitraryCall()'s (L733) use case is to claim airdrops by ""gov"". If the address ""who"" is a token that could be send as an incentive by an attacker via createIncentive() then such claim can be made unusable, because on L735 there is a require(incentives\[who] == 0, ""inc""); that reverts if a ""who"" token was received as an incentive.
In this case the the incentives\[who] can be set to 0 by the stream creator by calling claimIncentive() but only after the stream has ended according to require(block.timestamp >= endStream, ""stream""); (L520)
If the airdrop is only claimable before the end of the stream, then the airdrop can never be claimed.
If ""gov"" is not the stream creator then the stream creator must become also the ""gov"" because claimIncentive() only can be called by the stream creator and the arbitraryCall() only by ""gov"". If resetting incentives\[who] to 0 by calling claimIncentive() and arbitraryCall() for the ""who"" address doesn't happen atomic, an attacker can send between those two calls again a ""who"" token.
",12,,"pragma solidity ^0.8.0;

import ""./LockeERC20.sol"";
import ""solmate/utils/SafeTransferLib.sol"";
import ""solmate/tokens/ERC20.sol"";


contract Governed {
    address public gov;
    address private pendingGov;
    address public emergency_gov;

    event NewGov(address indexed oldGov, address indexed newGov);
    event NewPendingGov(address indexed oldPendingGov, address indexed newPendingGov);

    constructor(address _governor, address _emergency_governor) public {
        gov = _governor;
        emergency_gov = _emergency_governor;
    }

    function governorship() public view returns (address, address, address) {
        return (gov, emergency_gov, pendingGov);
    }

    
    function setPendingGov(address newPendingGov) governed public {
        address old = pendingGov;
        pendingGov = newPendingGov;
        emit NewPendingGov(old, newPendingGov);
    }

    
    function acceptGov() public {
        require(pendingGov == msg.sender, ""!pending"");
        address old = gov;
        gov = pendingGov;
        emit NewGov(old, pendingGov);
    }

    function setEmergencyGov(address who) public governed {
        emergency_gov = who;
    } 

    
    function __abdicate() governed public {
        address old = gov;
        gov = address(0);
        emit NewGov(old, address(0));
    }

    
    
    modifier governed {
        require(msg.sender == gov, ""!gov"");
        _;
    }

    
    modifier emergency_governed {
        require(msg.sender == gov || msg.sender == emergency_gov, ""!egov"");
        _;
    }
}

interface IGoverned {
    function gov() external view returns (address);
    function emergency_gov() external view returns (address);
}

abstract contract ExternallyGoverned {
    IGoverned public gov;

    constructor(address governor) {
        gov = IGoverned(governor);
    }

    
    
    modifier externallyGoverned {
        require(msg.sender == gov.gov(), ""!gov"");
        _;
    }

    
    modifier externallyEmergencyGoverned {
        require(msg.sender == gov.gov() || msg.sender == gov.emergency_gov(), ""!e_gov"");
        _;
    }
}

interface LockeCallee {
    function lockeCall(address initiator, address token, uint256 amount, bytes calldata data) external;
}


contract Stream is LockeERC20, ExternallyGoverned {
    using SafeTransferLib for ERC20;    
    
    struct TokenStream {
        uint256 lastCumulativeRewardPerToken;
        uint256 virtualBalance;
        uint112 rewards;
        uint112 tokens;
        uint32 lastUpdate;
        bool merkleAccess;
    }

    
    
    
    uint32 private immutable startTime;
    
    uint32 private immutable streamDuration;
    
    uint32 private immutable depositLockDuration;
    
    uint32 private immutable rewardLockDuration;

    
    uint32 private immutable endStream;
    
    uint32 private immutable endDepositLock;
    
    uint32 private immutable endRewardLock;

    
    address public immutable rewardToken;
    
    address public immutable depositToken;

    
    uint64 public immutable streamId;

    
    uint16 private immutable feePercent;
    
    bool private immutable feeEnabled;

    
    bool public immutable isSale;

    
    address public immutable streamCreator;

    uint112 private immutable depositDecimalsOne;
    

    
    
    uint112 private rewardTokenAmount;
    
    uint112 private depositTokenAmount;
    

    
    uint112 private rewardTokenFeeAmount;
    uint112 private depositTokenFlashloanFeeAmount;
    uint8 private unlocked = 1;
    bool private claimedDepositTokens;
    

    
    uint256 private cumulativeRewardPerToken;
    

    
    uint256 private totalVirtualBalance;
    

    
    uint112 public unstreamed;
    uint112 private redeemedDepositTokens;
    uint32 private lastUpdate;
    

    
    mapping (address => TokenStream) public tokensNotYetStreamed;

    
    mapping (address => uint112) public incentives;

    
    event StreamFunded(uint256 amount);
    event Staked(address indexed who, uint256 amount);
    event Withdrawn(address indexed who, uint256 amount);
    event StreamIncentivized(address indexed token, uint256 amount);
    event StreamIncentiveClaimed(address indexed token, uint256 amount);
    event SoldTokensClaimed(address indexed who, uint256 amount);
    event DepositTokensReclaimed(address indexed who, uint256 amount);
    event FeesClaimed(address indexed token, address indexed who, uint256 amount);
    event RecoveredTokens(address indexed token, address indexed recipient, uint256 amount);
    event RewardsClaimed(address indexed who, uint256 amount);
    event Flashloaned(address indexed token, address indexed who, uint256 amount, uint256 fee);

    
    modifier updateStream(address who) {
        
        updateStreamInternal(who);
        _;
    }

    function updateStreamInternal(address who) internal {
        require(block.timestamp < endStream , ""!stream"");
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];

        if (block.timestamp >= startTime) {
            
            if (ts.lastUpdate == 0) {
                ts.lastUpdate = uint32(block.timestamp);
            }
            if (lastUpdate == 0) {
                lastUpdate = uint32(block.timestamp);
            }

            
            cumulativeRewardPerToken = rewardPerToken();

            
            ts.rewards = earned(ts, cumulativeRewardPerToken);
            
            ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;

            
            uint32 acctTimeDelta = uint32(block.timestamp) - ts.lastUpdate;
            if (acctTimeDelta > 0 && ts.tokens > 0) {
                
                
                ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));
                ts.lastUpdate = uint32(block.timestamp);
            }

            
            uint32 tdelta = uint32(block.timestamp - lastUpdate);
            
            if (tdelta > 0 && unstreamed > 0) {
                uint256 globalStreamingSpeedPerSecond = (uint256(unstreamed) * 10**6)/ (endStream - lastUpdate);
                unstreamed -= uint112((uint256(tdelta) * globalStreamingSpeedPerSecond) / 10**6);
            }
            
            lastUpdate = uint32(block.timestamp);
        } else {
            if (ts.lastUpdate == 0) {
                ts.lastUpdate = startTime;
            }
            if (lastUpdate == 0) {
                lastUpdate = startTime;
            }
        }
    }


    function lockInternal() internal {
        require(unlocked == 1, ""re"");
        unlocked = 2;
    }
    modifier lock {
        lockInternal();
        _;
        unlocked = 1;
    }

    constructor(
        uint64 _streamId,
        address creator,
        bool _isSale,
        address _rewardToken,
        address _depositToken,
        uint32 _startTime,
        uint32 _streamDuration,
        uint32 _depositLockDuration,
        uint32 _rewardLockDuration,
        uint16 _feePercent,
        bool _feeEnabled

    )
        LockeERC20(_depositToken, _streamId, _startTime + _streamDuration)
        ExternallyGoverned(msg.sender) 
        public 
    {
        
        feePercent = _feePercent;
        feeEnabled = _feeEnabled;

        
        require(feePercent < 10000, ""fee"");
    
        
        startTime = _startTime;
        streamDuration = _streamDuration;
        depositLockDuration = _depositLockDuration;
        rewardLockDuration = _rewardLockDuration;

        endStream = startTime + streamDuration;
        endDepositLock = endStream + depositLockDuration;
        endRewardLock = endStream + rewardLockDuration;
    
        
        depositToken = _depositToken;
        rewardToken = _rewardToken;

        
        streamId = _streamId;

        
        isSale = _isSale;
    
        streamCreator = creator;

        depositDecimalsOne = uint112(10**ERC20(depositToken).decimals());
    }

    
    function tokenAmounts() public view returns (uint112, uint112, uint112, uint112) {
        return (rewardTokenAmount, depositTokenAmount, rewardTokenFeeAmount, depositTokenFlashloanFeeAmount);
    }

    
    function feeParams() public view returns (uint16, bool) {
        return (feePercent, feeEnabled);
    }

    
    function streamParams() public view returns (uint32,uint32,uint32,uint32) {
        return (
            startTime,
            streamDuration,
            depositLockDuration,
            rewardLockDuration
        );
    }

    function lastApplicableTime() internal view returns (uint32) {
        return block.timestamp <= endStream ? uint32(block.timestamp) : endStream;
    }

    function rewardPerToken() public view returns (uint256) {
        if (totalVirtualBalance == 0) {
            return cumulativeRewardPerToken;
        } else {
            
            return cumulativeRewardPerToken + (
                ((uint256(lastApplicableTime()) - lastUpdate) * rewardTokenAmount * depositDecimalsOne/streamDuration) 
                / totalVirtualBalance
            );
        }
    }

    function dilutedBalance(uint112 amount) internal view returns (uint256) {
        
        if (block.timestamp < startTime) {
            return amount;
        } else {
            uint32 timeRemaining = endStream - uint32(block.timestamp);
            return ((uint256(streamDuration) * amount * 10**6) / timeRemaining) / 10**6;
        }
    }

    function getEarned(address who) public view returns (uint256) {
        TokenStream storage ts = tokensNotYetStreamed[who];
        return earned(ts, rewardPerToken());
    }

    function earned(TokenStream storage ts, uint256 currCumRewardPerToken) internal view returns (uint112) {
        return uint112(ts.virtualBalance * (currCumRewardPerToken - ts.lastCumulativeRewardPerToken) / depositDecimalsOne) + ts.rewards;
    }

    
    function fundStream(uint112 amount) public lock {
        require(amount > 0, ""amt"");
        require(block.timestamp < startTime, ""time"");
        uint112 amt;

        
        uint256 prevBal = ERC20(rewardToken).balanceOf(address(this));
        ERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(rewardToken).balanceOf(address(this));
        require(newBal < type(uint112).max && newBal > prevBal, ""erc"");

        amount = uint112(newBal - prevBal);
        
        if (feeEnabled) {
            
            
            
            
            uint112 feeAmt;
            unchecked {
                feeAmt = uint112(uint256(feePercent) * uint256(amount) / 10000); 
                amt = amount - feeAmt;
            }

            
            rewardTokenFeeAmount += feeAmt;
            rewardTokenAmount += amt;
        } else {
            amt = amount;
            rewardTokenAmount += amt;
        }
        
        emit StreamFunded(amt);
    }

     
    function stake(uint112 amount) public lock updateStream(msg.sender) {
        require(amount > 0, ""amt"");

        
        

        
        uint256 prevBal = ERC20(depositToken).balanceOf(address(this));
        ERC20(depositToken).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(depositToken).balanceOf(address(this));
        require(newBal <= type(uint112).max && newBal > prevBal, ""erc"");
        
        uint112 trueDepositAmt = uint112(newBal - prevBal);

        depositTokenAmount += trueDepositAmt;
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        ts.tokens += trueDepositAmt;

        uint256 virtualBal = dilutedBalance(trueDepositAmt);
        ts.virtualBalance += virtualBal;
        totalVirtualBalance += virtualBal;
        unstreamed += trueDepositAmt;

        if (!isSale) {
            
            _mint(msg.sender, trueDepositAmt);
        } else {
        }

        emit Staked(msg.sender, trueDepositAmt);
    }

     
    function withdraw(uint112 amount) public lock updateStream(msg.sender) {
        require(amount > 0, ""amt"");

        
        
        
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];

        require(ts.tokens >= amount, ""amt"");
        ts.tokens -= amount;

        uint256 virtualBal = dilutedBalance(amount);
        ts.virtualBalance -= virtualBal;
        totalVirtualBalance -= virtualBal;
        depositTokenAmount -= amount;
        if (!isSale) {
            _burn(msg.sender, amount);
        } else {
        }

        
        ERC20(depositToken).safeTransfer(msg.sender, amount);

        emit Withdrawn(msg.sender, amount);
    }

     
    function exit() public updateStream(msg.sender) {
        
        
        
        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        uint112 amount = ts.tokens;
        withdraw(amount);
    }

     
    function createIncentive(address token, uint112 amount) public lock {
        require(token != rewardToken && token != depositToken, ""inc"");
        
        uint256 prevBal = ERC20(token).balanceOf(address(this));
        ERC20(token).safeTransferFrom(msg.sender, address(this), amount);
        uint256 newBal = ERC20(token).balanceOf(address(this));
        require(newBal <= type(uint112).max && newBal > prevBal, ""erc"");

        uint112 amt = uint112(newBal - prevBal);
        incentives[token] += amt;
        emit StreamIncentivized(token, amt);
    }

     
    function claimIncentive(address token) public lock {
        
        require(msg.sender == streamCreator, ""!creator"");
        
        require(block.timestamp >= endStream, ""stream"");
        uint112 amount = incentives[token];
        require(amount > 0, ""amt"");
        incentives[token] = 0;
        ERC20(token).safeTransfer(msg.sender, amount);
        emit StreamIncentiveClaimed(token, amount);
    }

     
    function claimDepositTokens(uint112 amount) public lock {
        require(!isSale, ""sale"");
        
        
        require(amount > 0, ""amt"");

        
        require(block.timestamp > endDepositLock, ""lock"");

        
        _burn(msg.sender, amount);

        redeemedDepositTokens += amount;

        
        ERC20(depositToken).safeTransfer(msg.sender, amount);

        emit DepositTokensReclaimed(msg.sender, amount);
    }

     
    function claimReward() public lock {
        require(block.timestamp > endRewardLock, ""lock"");

        TokenStream storage ts = tokensNotYetStreamed[msg.sender];
        
        cumulativeRewardPerToken = rewardPerToken();

        
        ts.rewards = earned(ts, cumulativeRewardPerToken);
        
        ts.lastCumulativeRewardPerToken = cumulativeRewardPerToken;

        lastUpdate = lastApplicableTime();

        uint256 rewardAmt = ts.rewards;
        ts.rewards = 0;

        require(rewardAmt > 0, ""amt"");

        
        ERC20(rewardToken).safeTransfer(msg.sender, rewardAmt);

        emit RewardsClaimed(msg.sender, rewardAmt);
    }

     
    function creatorClaimSoldTokens(address destination) public lock {
        
        require(isSale, ""!sale"");

        
        require(!claimedDepositTokens, ""claimed"");
        
        require(msg.sender == streamCreator, ""!creator"");
        
        require(block.timestamp >= endStream, ""stream"");
        
        uint112 amount = depositTokenAmount;
        claimedDepositTokens = true;

        ERC20(depositToken).safeTransfer(destination, amount);

        emit SoldTokensClaimed(destination, amount);
    }

     
    function claimFees(address destination) public lock externallyGoverned {
        
        require(block.timestamp >= endStream, ""stream"");

        
        uint112 fees = rewardTokenFeeAmount;
        if (fees > 0) {
            rewardTokenFeeAmount = 0;

            
            ERC20(rewardToken).safeTransfer(destination, fees);
            emit FeesClaimed(rewardToken, destination, fees);
        }

        fees = depositTokenFlashloanFeeAmount;
        if (fees > 0) {
            depositTokenFlashloanFeeAmount = 0;

            
            ERC20(depositToken).safeTransfer(destination, fees);

            emit FeesClaimed(depositToken, destination, fees);
        }
        
    }

    

     
    function recoverTokens(address token, address recipient) public lock {
        
        
        require(msg.sender == streamCreator, ""!creator"");
        if (token == depositToken) {
            require(block.timestamp > endDepositLock, ""time"");
            
            
            uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);
            
            ERC20(token).safeTransfer(recipient, excess);

            emit RecoveredTokens(token, recipient, excess);
            return;
        }
        
        if (token == rewardToken) {
            require(block.timestamp > endRewardLock, ""time"");
            
            
            
            
            
            

            
            uint256 excess = ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount);
            ERC20(token).safeTransfer(recipient, excess);

            emit RecoveredTokens(token, recipient, excess);
            return;
        }

        if (incentives[token] > 0) {
            require(block.timestamp >= endStream, ""stream"");
            uint256 excess = ERC20(token).balanceOf(address(this)) - incentives[token];
            ERC20(token).safeTransfer(recipient, excess);
            emit RecoveredTokens(token, recipient, excess);
            return;
        }

        
        uint256 bal = ERC20(token).balanceOf(address(this));
        ERC20(token).safeTransfer(recipient, bal);
        emit RecoveredTokens(token, recipient, bal);
    }

    
    function flashloan(address token, address to, uint112 amount, bytes memory data) public lock {
        require(token == depositToken || token == rewardToken, ""erc"");

        uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        ERC20(token).safeTransfer(to, amount);

        
        
        LockeCallee(to).lockeCall(msg.sender, token, amount, data);

        uint256 postDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 postRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        uint112 feeAmt = amount * 10 / 10000; 

        if (token == depositToken) {
            depositTokenFlashloanFeeAmount += feeAmt;
            require(preDepositTokenBalance + feeAmt <= postDepositTokenBalance, ""f1"");
            require(preRewardTokenBalance <= postRewardTokenBalance, ""f2"");
        } else {
            rewardTokenFeeAmount += feeAmt;
            require(preDepositTokenBalance <= postDepositTokenBalance, ""f3"");
            require(preRewardTokenBalance + feeAmt <= postRewardTokenBalance, ""f4"");
        }

        emit Flashloaned(token, msg.sender, amount, feeAmt);
    }

    
    function arbitraryCall(address who, bytes memory data) public lock externallyGoverned {
        
        require(incentives[who] == 0, ""inc"");
        
        require(who != depositToken && who != rewardToken, ""erc"");

        
        uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));

        (bool success, bytes memory _ret) = who.call(data);
        require(success);

        
        uint256 postDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));
        uint256 postRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));
        require(preDepositTokenBalance == postDepositTokenBalance && preRewardTokenBalance == postRewardTokenBalance, ""erc"");
    }
}

contract StreamFactory is Governed {

    
    struct GovernableStreamParams {
        uint32 maxDepositLockDuration;
        uint32 maxRewardLockDuration;
        uint32 maxStreamDuration;
        uint32 minStreamDuration;
    }

    struct GovernableFeeParams {
        uint16 feePercent;
        bool feeEnabled;
    }

    
    GovernableStreamParams public streamParams;
    GovernableFeeParams public feeParams;
    uint64 public currStreamId; 

    uint16 constant MAX_FEE_PERCENT = 500; 

    
    event StreamCreated(uint256 indexed stream_id, address stream_addr);
    event StreamParametersUpdated(GovernableStreamParams oldParams, GovernableStreamParams newParams);
    event FeeParametersUpdated(GovernableFeeParams oldParams, GovernableFeeParams newParams);

    constructor(address _governor, address _emergency_governor) public Governed(_governor, _emergency_governor) {
        streamParams = GovernableStreamParams({
            maxDepositLockDuration: 52 weeks,
            maxRewardLockDuration: 52 weeks,
            maxStreamDuration: 2 weeks,
            minStreamDuration: 1 hours
        });
    }

    
    function createStream(
        address rewardToken,
        address depositToken,
        uint32 startTime,
        uint32 streamDuration,
        uint32 depositLockDuration,
        uint32 rewardLockDuration,
        bool isSale
    )
        public
        returns (Stream)
    {
        

        {
            require(startTime >= block.timestamp, ""past"");
            require(streamDuration >= streamParams.minStreamDuration && streamDuration <= streamParams.maxStreamDuration, ""stream"");
            require(depositLockDuration <= streamParams.maxDepositLockDuration, ""lock"");
            require(rewardLockDuration <= streamParams.maxRewardLockDuration, ""reward"");
        }
        

        
        uint64 that_stream = currStreamId;
        currStreamId += 1;
        bytes32 salt = bytes32(uint256(that_stream));

        Stream stream = new Stream{salt: salt}(
            that_stream,
            msg.sender,
            isSale,
            rewardToken,
            depositToken,
            startTime,
            streamDuration,
            depositLockDuration,
            rewardLockDuration,
            feeParams.feePercent,
            feeParams.feeEnabled
        );

        emit StreamCreated(that_stream, address(stream));

        return stream;
    }

    function updateStreamParams(GovernableStreamParams memory newParams) public governed {
        
        
        
        GovernableStreamParams memory old = streamParams;
        streamParams = newParams;
        emit StreamParametersUpdated(old, newParams);
    }

    function updateFeeParams(GovernableFeeParams memory newFeeParams) public governed {
        require(newFeeParams.feePercent <= MAX_FEE_PERCENT, ""fee"");
        GovernableFeeParams memory old = feeParams;
        feeParams = newFeeParams;
        emit FeeParametersUpdated(old, newFeeParams);
    }
}",4772,10,2,"{
  ""task_list"": [
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Analyze the `lock` modifier in `Stream.sol` for potential reentrancy vulnerabilities, despite its apparent simplicity. Investigate if external calls within the locked functions could bypass the intended protection. Specifically, review `stake`, `withdraw`, `createIncentive`, `claimIncentive`, `claimDepositTokens`, `claimReward`, `creatorClaimSoldTokens`, `claimFees`, `recoverTokens`, `flashloan`, and `arbitraryCall`."",
        ""Examine the `flashloan` function in `Stream.sol` for potential vulnerabilities related to incorrect fee calculation or insufficient balance checks after the `LockeCallee(to).lockeCall`."",
        ""Inspect `recoverTokens` in `Stream.sol` for potential integer overflows or underflows when calculating `excess`. Verify that the logic correctly handles edge cases where balances might be zero or very large."",
        ""Review the safeTransfer usage throughout the Stream contract to ensure that failed token transfers are properly handled and don't lead to unexpected state changes."",
        ""Carefully assess the arbitraryCall function for unexpected side effects or vulnerabilities due to unchecked external calls. Ensure that the state is reverted if the external call fails or modifies token balances in an unintended way.""
      ]
    },
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Verify the correct implementation of the `governed` and `emergency_governed` modifiers in `Governed.sol` and `ExternallyGoverned.sol`. Ensure that only authorized addresses can call functions protected by these modifiers."",
        ""Analyze the ownership and control flow in `Stream.sol` to ensure that sensitive operations (e.g., `claimFees`, `recoverTokens`) can only be performed by the intended actors (e.g., governor, stream creator)."",
        ""Confirm that the `streamCreator` address is correctly set during stream creation in `StreamFactory.sol` and that it cannot be modified after deployment."",
        ""In StreamFactory.sol, check if it is possible to create streams with startTime in the past due to potential block timestamp manipulation. Even though the code checks `startTime >= block.timestamp`, miners can manipulate the timestamp to some extent.""
      ]
    },
    {
      ""Area"": ""Complex Logic/Algorithms"",
      ""Tasks"": [
        ""Thoroughly examine the `rewardPerToken` function in `Stream.sol` for potential rounding errors or inaccuracies that could unfairly distribute rewards. Pay close attention to the order of operations and the use of integer division."",
        ""Analyze the `dilutedBalance` function in `Stream.sol` and its impact on the virtual balance calculation. Verify that the dilution logic correctly accounts for the remaining stream duration and that it prevents manipulation of the reward distribution."",
        ""Review the `updateStreamInternal` function in `Stream.sol` to ensure that the stream's state is updated correctly based on the elapsed time and user actions. Identify potential race conditions or inconsistencies that could arise from concurrent updates."",
        ""Simulate different scenarios for staking and withdrawing tokens in `Stream.sol` to verify that the virtual balance and reward calculations are accurate under various conditions. Test edge cases where users stake and withdraw repeatedly or near the end of the stream.""
      ]
    },
    {
      ""Area"": ""External Interactions"",
      ""Tasks"": [
        ""Audit the `safeTransferFrom` and `safeTransfer` calls in `Stream.sol` to ensure that they handle ERC-20 token transfers correctly. Verify that the contract has sufficient allowance to transfer tokens on behalf of users."",
        ""Examine the `LockeCallee(to).lockeCall` in `Stream.sol` within the `flashloan` function. Make sure the contract at address `to` is indeed a `LockeCallee` and that its `lockeCall` function behaves as expected, especially regarding security and token balances. Evaluate the potential risks associated with calling an untrusted contract."",
        ""Verify that all external interactions with ERC-20 tokens adhere to the ERC-20 standard and that the contract handles tokens with different decimal precisions correctly. Specifically check the constructor in Stream.sol where depositDecimalsOne is calculated.""
      ]
    },
    {
      ""Area"": ""Gas Optimization"",
      ""Tasks"": [
        ""Analyze the gas costs of the `stake` and `withdraw` functions in `Stream.sol` and identify potential areas for optimization. Consider using storage variables more efficiently or reducing the number of external calls."",
        ""Evaluate the gas costs of the `updateStreamInternal` function in `Stream.sol` and explore ways to reduce the overhead associated with updating the stream's state."",
        ""Review the use of immutable variables in `Stream.sol` and ensure that they are used effectively to reduce gas costs."",
        ""Where possible, replace `storage` variables with `memory` variables to reduce gas costs when the values are used only inside the function.""
      ]
    },
    {
      ""Area"": ""Stream Factory Specific Checks"",
      ""Tasks"": [
        ""Review the limits imposed by the `GovernableStreamParams` struct in `StreamFactory.sol` and verify that they are appropriate for the intended use case. Evaluate the potential risks of setting excessively large or small limits."",
        ""Examine the `updateStreamParams` and `updateFeeParams` functions in `StreamFactory.sol` to ensure that they are only callable by the governor and that the new parameter values are validated correctly."",
        ""Check the createStream function in StreamFactory.sol to determine whether the rewardToken and depositToken are validated to be different addresses.""
      ]
    }
  ]
}","{
  ""ReviewingTheCode"": ""The code defines a streaming contract that allows users to stake deposit tokens and earn reward tokens over time. It incorporates governance mechanisms, flashloan capabilities, and fee structures. It uses external libraries such as SafeTransferLib and ERC20 from Solmate. The contracts involved are `Governed`, `ExternallyGoverned`, `Stream`, and `StreamFactory`. The `Stream` contract is where most of the core logic lies."",
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""StreamFactory"",
    ""Purpose"": ""Factory contract to create Stream instances, managing governance and stream parameters."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [""Governed""],
      ""Imports"": []
    },
    ""StateVariables"": [
      {
        ""Name"": ""streamParams"",
        ""Type"": ""GovernableStreamParams"",
        ""Purpose"": ""Stores parameters related to stream durations and lock times.""
      },
      {
        ""Name"": ""feeParams"",
        ""Type"": ""GovernableFeeParams"",
        ""Purpose"": ""Stores parameters related to fees, including percentage and enablement.""
      },
      {
        ""Name"": ""currStreamId"",
        ""Type"": ""uint64"",
        ""Purpose"": ""Keeps track of the current stream ID for unique stream creation.""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""constructor"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Initializes the contract with governor and emergency governor addresses, and sets default stream parameters."",
        ""Parameters"": [""address _governor"", ""address _emergency_governor""],
        ""Returns"": []
      },
      {
        ""Name"": ""createStream"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Creates a new Stream contract with the given parameters."",
        ""Parameters"": [""address rewardToken"", ""address depositToken"", ""uint32 startTime"", ""uint32 streamDuration"", ""uint32 depositLockDuration"", ""uint32 rewardLockDuration"", ""bool isSale""],
        ""Returns"": [""Stream""]
      },
      {
        ""Name"": ""updateStreamParams"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Updates the stream parameters. Only callable by the governor."",
        ""Parameters"": [""GovernableStreamParams memory newParams""],
        ""Returns"": []
      },
      {
        ""Name"": ""updateFeeParams"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Updates the fee parameters. Only callable by the governor."",
        ""Parameters"": [""GovernableFeeParams memory newFeeParams""],
        ""Returns"": []
      },
      {
        ""Name"": ""governed"",
        ""Visibility"": ""modifier"",
        ""Purpose"": ""Restricts function access to the governor address."",
        ""Parameters"": [],
        ""Returns"": []
      }
    ]
  },
  ""ExternalInteractions"": [
    ""ERC20.safeTransferFrom"",
    ""ERC20.safeTransfer"",
    ""LockeCallee.lockeCall""
  ],
  ""SpecialMechanisms"": [
    ""Factory pattern for Stream contract creation."",
    ""Governance mechanism using `Governed` contract."",
    ""Flashloan capability using LockeCallee interface.""
  ],
  ""Questions"": [
    ""What is the purpose of the `unlocked` state variable and associated `lock` modifier in the `Stream` contract, as it seems like it always alternates between 1 and 2?"",
    ""Clarification on the exact calculation of `virtualBalance` and its impact on reward distribution is needed. The `dilutedBalance` function seems critical here."",
    ""Why the max value of rewardTokenFeeAmount, depositTokenFlashloanFeeAmount, unstreamed of type uint112?"",
    ""Need to understand the interaction between ExternallyGoverned and Governed contracts"",
    ""Why fee percent is limited to 500, instead of 10000 in StreamFactory?""
  ]
}","{
  ""Findings"": [
    {
      ""Issue"": ""Potential Reentrancy Vulnerability in `flashloan` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `flashloan` function transfers tokens to the borrower (`to`) and calls `lockeCall` on it before completing balance checks and fee calculations. This external call allows the callee to re-enter the `Stream` contract, potentially leading to inconsistent state and theft of funds. The `lock` modifier only protects against intra-contract reentrancy, not external reentrancy through the `LockeCallee` contract. Further, the require statements checking balances are insufficient because manipulation of the balances through reentrancy is possible."",
      ""Impact"": ""Theft of funds, unexpected state changes, and denial of service."",
      ""Location"": ""`Stream.sol`: `flashloan` function""
    },
    {
      ""Issue"": ""Lack of Access Control on `arbitraryCall` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `arbitraryCall` function allows the externally governed address to call any other contract with arbitrary data, lacking sufficient input validation. While checks exist for the deposit and reward tokens and a particular incentive, a compromised governor could drain funds, manipulate other contracts' states, or bypass intended logic. This poses a significant security risk."",
      ""Impact"": ""Significant potential for misuse, including draining of funds, state manipulation of other contracts, and other unforeseen consequences."",
      ""Location"": ""`Stream.sol`: `arbitraryCall` function""
    },
    {
      ""Issue"": ""Incorrect comparison operator in flashloan's fee check"",
      ""Severity"": ""High"",
      ""Description"": ""The require statements after the LockeCallee call are checking `preDepositTokenBalance + feeAmt <= postDepositTokenBalance`. This is backwards, it should be `preDepositTokenBalance + feeAmt >= postDepositTokenBalance`, because the contract is expecting to receive the amount back from the callee + the fee. If the condition is true, then the user has sent the correct amount of tokens back to the contract, and the transaction should proceed."",
      ""Impact"": ""The flashloan function will always fail, preventing its intended usage."",
      ""Location"": ""Stream.sol:flashloan""
    },
    {
      ""Issue"": ""Potential Integer Overflow/Underflow in Fee Calculation"",
      ""Severity"": ""Medium"",
      ""Description"": ""In the `fundStream` function, the fee calculation `feeAmt = uint112(uint256(feePercent) * uint256(amount) / 10000)` uses unchecked arithmetic, which could potentially lead to integer overflow if `amount` is sufficiently large and `feePercent` is high, even though `feePercent < 10000` is enforced. An incorrect `feeAmt` could result in incorrect reward distributions. Also a carefully crafted feePercent value could lead to unexpected underflow/overflow issues."",
      ""Impact"": ""Incorrect fee calculation, potential loss of funds for the contract or users, and unexpected contract behavior."",
      ""Location"": ""`Stream.sol`: `fundStream` function""
    },
    {
      ""Issue"": ""Potential for Integer Overflow in Reward Calculations"",
      ""Severity"": ""Medium"",
      ""Description"": ""Calculations in `dilutedBalance` and `rewardPerToken` involving multiplications and divisions can lead to integer overflows and precision loss. In `dilutedBalance`, `(uint256(streamDuration) * amount * 10**6) / timeRemaining` could overflow if `streamDuration` and `amount` are large and `timeRemaining` is small, leading to incorrect `virtualBal`. Similarly, in `rewardPerToken`, `((uint256(lastApplicableTime()) - lastUpdate) * rewardTokenAmount * depositDecimalsOne/streamDuration)` can overflow with large inputs. In `updateStreamInternal`, the globalStreamingSpeedPerSecond calculation can also overflow."",
      ""Impact"": ""Incorrect `virtualBalance` and reward calculations can lead to users receiving incorrect amounts of rewards or being able to withdraw more deposit tokens than they should be allowed to."",
      ""Location"": ""Stream.sol:dilutedBalance, Stream.sol:rewardPerToken, Stream.sol:updateStreamInternal""
    },
    {
      ""Issue"": ""Potential Denial of Service in `recoverTokens` function"",
      ""Severity"": ""Medium"",
      ""Description"": ""When recovering tokens, if the contract's balance is less than the calculated value (due to rounding errors or external transfers), the transaction may revert, preventing the creator from recovering tokens. Additionally, if a very large amount of tokens are stuck in the contract, the transfer could exceed the block gas limit. Also, the function does not set incentive to 0, so a large number of tokens can be sent and incentive tokens can be transferred, and an unbounded loop is possible if the incentives token balance is not set correctly. Finally, recovering funds from incentive tokens before they're fully utilized is possible, not aligned with the Stream’s lifecycle."",
      ""Impact"": ""Inability to recover tokens, potential loss of funds for the contract owner."",
      ""Location"": ""`Stream.sol`: `recoverTokens` function""
    },
    {
      ""Issue"": ""Timestamp Dependence in Time-Sensitive Operations"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract relies on `block.timestamp` for crucial time-dependent operations, making it vulnerable to miner manipulation, potentially leading to unfair outcomes. A malicious user can also front-run the `createStream` function by submitting their own transaction with a slightly earlier `startTime`. Also a division by zero is possible for `dilutedBalance` function."",
      ""Impact"": ""Potential for miners to manipulate time-sensitive operations to their advantage, leading to unfair or unexpected outcomes for users."",
      ""Location"": ""`Stream.sol`: Multiple locations where `block.timestamp` is used for time-dependent checks (e.g., `fundStream`, `claimReward`, `claimDepositTokens`), StreamFactory.sol:createStream""
    },
    {
      ""Issue"": ""Unchecked Subtraction in `updateStreamInternal` Can Cause Underflow"",
      ""Severity"": ""Medium"",
      ""Description"": ""In the `updateStreamInternal` function, the calculation `ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate))` could result in an underflow if `(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate))` is greater than `ts.tokens`. This is because `ts.tokens` is a `uint112`, and underflowing it will wrap around to a large number."",
      ""Impact"": ""Potential for incorrect token balance, leading to unexpected or exploitable behavior and failure of the withdraw function, and other unexpected behavior due to incorrect virtual balance and diluted balance."",
      ""Location"": ""Stream.sol: `updateStreamInternal` function.""
    },
    {
      ""Issue"": ""Potential Front-Running Vulnerability in `acceptGov()`"",
      ""Severity"": ""Medium"",
      ""Description"": ""In the `Governed` contract, the `acceptGov()` function only requires that `pendingGov == msg.sender`.  This allows anyone to set themself as the governor if the previous governor has set `pendingGov` to their address.  A malicious user could front-run the intended new governor's transaction to `acceptGov()` and claim governorship."",
      ""Impact"": ""A malicious actor could take control of the contract, potentially leading to unauthorized changes or draining of funds."",
      ""Location"": ""Governed.sol: acceptGov function""
    },
    {
      ""Issue"": ""Inconsistent Usage of `updateStream` Modifier and `updateStreamInternal` function"",
      ""Severity"": ""Low"",
      ""Description"": ""The `claimReward` function doesn't use `updateStream` before transferring rewards, potentially leading to incorrect calculations if the user hasn't interacted with the stream.  The code also contains logic for Incorrect Calculation of `ts.tokens` during Stream Updates that appears to be an attempt to reduce the token balance based on the elapsed time, but the division might result in significant rounding errors, especially when `endStream - ts.lastUpdate` is large."",
      ""Impact"": ""Potentially incorrect reward distribution, with certain users receiving less rewards than expected."",
      ""Location"": ""`Stream.sol`: `claimReward` function""
    },
    {
      ""Issue"": ""Potential Precision Loss and Rounding Errors in Reward Calculation"",
      ""Severity"": ""Low"",
      ""Description"": ""Integer division in `rewardPerToken` and internal reward accounting can introduce rounding errors, potentially underestimating rewards. The global streaming speed calculation also uses integer division, compounding errors. Similar rounding errors could appear in dilutedBalance where `((uint256(streamDuration) * amount * 10**6) / timeRemaining) / 10**6` can be problematic when `amount` is small or `timeRemaining` is large. Also, In `updateStreamInternal`, the calculation `ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));` appears to be an attempt to reduce the token balance based on the elapsed time, but the division might result in significant rounding errors."",
      ""Impact"": ""Small inaccuracies in reward distribution could lead to some stakers receiving slightly less than their fair share of rewards, potentially causing user dissatisfaction."",
      ""Location"": ""Stream.sol:rewardPerToken, Stream.sol:updateStreamInternal, Stream.sol: `dilutedBalance` function.""
    },
    {
      ""Issue"": ""Lack of Input Validation in StreamFactory::createStream"",
      ""Severity"": ""Low"",
      ""Description"": ""The `StreamFactory::createStream` function performs basic range checks on the duration parameters but does not validate the relationship between them. There is no check to ensure that `startTime + streamDuration + depositLockDuration` and `startTime + streamDuration + rewardLockDuration` do not exceed the maximum allowed timestamp."",
      ""Impact"": ""The contract could be made unusable by creating an extremely long deposit/reward lock. A carefully crafted stream configuration with very long lock periods could, in effect, lock user's deposit tokens or rewards longer than intended."",
      ""Location"": ""StreamFactory.sol: createStream function""
    },
    {
      ""Issue"": ""Unsafe Type Conversion from uint256 to uint112 in fundStream"",
      ""Severity"": ""Low"",
      ""Description"": ""In `fundStream`, `newBal - prevBal` is calculated as a `uint256` and converted to `uint112`. While there is `newBal <= type(uint112).max` check, this relies on safe transfer. If the ERC20 token has a faulty implementation, transfer of arbitrarily large amounts can bypass the check. The contract will then use incorrect `uint112` values due to truncation."",
      ""Impact"": ""Possible unexpected behavior if the transferred amount is greater than `type(uint112).max`. Reward distribution may be skewed or the function can revert in unexpected ways."",
      ""Location"": ""Stream.sol:fundStream (lines 438-441)""
    },
    {
      ""Issue"": ""Possible Denial of Service due to large number of stake holders"",
      ""Severity"": ""Low"",
      ""Description"": ""The `updateStreamInternal` function iterates over all stakers to update their rewards.  If the number of stakers becomes very large, this iteration could consume a significant amount of gas, potentially leading to a denial of service, especially when claiming rewards (`claimReward`) or withdrawing (`withdraw`) when it needs to be called inside the modifiers that are used by these functions. The complexity of this function is O(number of stakers)."",
      ""Impact"": ""If the number of stakers grows too large, certain actions (withdrawals, claiming rewards) might become impossible to execute due to exceeding gas limits."",
      ""Location"": ""Stream.sol:updateStreamInternal (lines 300-326)""
    }
  ],
  ""IssueNumber"": 35,
  ""OutputList"": 14
}",148.37071824073792,3674.0,26.0,"### **Comparison of Issue Report and Response List**

---

#### **[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve depositTokenFlashloanFeeAmount, which may cause fund loss to users**

**Report Description**:  
The `excess` calculation in `recoverTokens` does not exclude `depositTokenFlashloanFeeAmount`, allowing the stream creator to retrieve this amount. This could lead to insufficient balance when the protocol governance calls `claimFees()` or cause users to lose part of their deposits.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this specific issue, which involves incorrect calculations in `recoverTokens` and its impact on fund recovery and user balances.

---

#### **[H-02] Tokens can be stolen when depositToken == rewardToken**

**Report Description**:  
When `depositToken` and `rewardToken` are the same, the `recoverTokens` function recovers the token twice (once for deposits and once for rewards), leading to token theft.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of token recovery when `depositToken` and `rewardToken` are identical.

---

#### **[H-03] Reward token not correctly recovered**

**Report Description**:  
The `recoverTokens` function incorrectly calculates the excess reward token amount, leading to incorrect recovery.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of incorrect reward token recovery calculations.

---

#### **[H-04] Improper implementation of arbitraryCall() allows protocol gov to steal funds from users' wallets**

**Report Description**:  
The `arbitraryCall` function allows the protocol governance to steal funds from users' wallets by calling `transferFrom` on incentive tokens after the stream ends.

**Match in Response List**:  
**""Lack of Access Control on `arbitraryCall` Function""**.

**Validation**:  
**Partially Correct**. The response identifies the lack of access control in `arbitraryCall` but does not specifically address the risk of stealing funds from users' wallets through `transferFrom`.

---

#### **[H-05] Possible incentive theft through the arbitraryCall() function**

**Report Description**:  
The `arbitraryCall` function can be used to pre-approve token allowances for malicious recipients, enabling theft of incentive tokens.

**Match in Response List**:  
**""Lack of Access Control on `arbitraryCall` Function""**.

**Validation**:  
**Partially Correct**. The response highlights the lack of access control but does not specifically address the pre-approval and theft of incentive tokens.

---

#### **[H-06] Creating rewardTokens without streaming depositTokens**

**Report Description**:  
The `updateStreamInternal` function allows generating reward tokens without streaming deposit tokens, leading to incorrect reward distribution.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue of incorrect reward token generation.

---

#### **[H-07] Business logic bug in __abdicate() function - 2 Bugs**

**Report Description**:  
The `__abdicate` function does not reset the emergency and pending governors, allowing a pending governor to reclaim governance.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue of incomplete governance renunciation.

---

#### **[H-08] ts.tokens sometimes calculated incorrectly**

**Report Description**:  
The `ts.tokens` calculation in `stake` and `withdraw` functions can be incorrect due to improper updates of `ts.lastUpdate`, leading to incorrect token balances.

**Match in Response List**:  
**""Unchecked Subtraction in `updateStreamInternal` Can Cause Underflow""**.

**Validation**:  
**Partially Correct**. The response identifies potential underflow in `updateStreamInternal` but does not address the incorrect `ts.tokens` calculation due to improper `ts.lastUpdate` updates.

---

#### **[H-09] DOS while dealing with erc20 when value(i.e amount*decimals) is high but less than type(uint112).max**

**Report Description**:  
The `exit` and `withdraw` functions can revert due to overflow for high values, causing permanent denial of service.

**Match in Response List**:  
**""Unsafe Type Conversion from uint256 to uint112 in fundStream""**.

**Validation**:  
**Partially Correct**. The response identifies unsafe type conversion but does not specifically address the denial of service issue in `exit` and `withdraw`.

---

#### **[H-10] recoverTokens doesn't work when isSale is true**

**Report Description**:  
The `recoverTokens` function fails to correctly calculate excess deposit tokens when `isSale` is true, breaking its functionality.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue of incorrect `recoverTokens` functionality when `isSale` is true.

---

#### **[M-02] Any `arbitraryCall` gathered airdrop can be stolen with recoverTokens**

**Report Description**:  
Airdrops gathered with `arbitraryCall` can be stolen using `recoverTokens`, as the function does not track airdrop tokens.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue of airdrop theft through `recoverTokens`.

---

#### **[M-04] arbitraryCall() can get blocked by an attacker**

**Report Description**:  
An attacker can block `arbitraryCall` by sending an incentive token, preventing the governance from claiming airdrops.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue of blocking `arbitraryCall` through incentive tokens.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- **[H-04] Improper implementation of arbitraryCall() allows protocol gov to steal funds from users' wallets**  
- **[H-05] Possible incentive theft through the arbitraryCall() function**  
- **[H-08] ts.tokens sometimes calculated incorrectly**  
- **[H-09] DOS while dealing with erc20 when value(i.e amount*decimals) is high but less than type(uint112).max**

**Missed Issues from Issue Report**:  
- **[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve depositTokenFlashloanFeeAmount, which may cause fund loss to users**  
- **[H-02] Tokens can be stolen when depositToken == rewardToken**  
- **[H-03] Reward token not correctly recovered**  
- **[H-06] Creating rewardTokens without streaming depositTokens**  
- **[H-07] Business logic bug in __abdicate() function - 2 Bugs**  
- **[H-10] recoverTokens doesn't work when isSale is true**  
- **[M-02] Any `arbitraryCall` gathered airdrop can be stolen with recoverTokens**  
- **[M-04] arbitraryCall() can get blocked by an attacker**

--- 

The response list partially addresses some issues but misses or incorrectly evaluates many critical vulnerabilities in the issue report. Significant gaps remain in the coverage of key security concerns.","```
None.
```","The **Average Precision (AP)** for the query is **0.0**. Since there are no true positives in the ranked list of predictions, the AP is zero."
