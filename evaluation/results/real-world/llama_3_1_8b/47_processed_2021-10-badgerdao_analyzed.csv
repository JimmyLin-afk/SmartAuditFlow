nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
Wrappedlbbtc.sol,"//SPDX-License-Identifier: Unlicense
pragma solidity ^0.6.12;

import ""../deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol"";
import ""../deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import ""./ICoreOracle.sol"";

/*
    Wrapped Interest-Bearing Bitcoin (Non-Ethereum mainnet variant)
*/
contract WrappedIbbtc is Initializable, ERC20Upgradeable {
    address public governance;
    address public pendingGovernance;
    ERC20Upgradeable public ibbtc; 

    ICoreOracle public oracle;

    event SetOracle(address oracle);
    event SetPendingGovernance(address pendingGovernance);
    event AcceptPendingGovernance(address pendingGovernance);

    /// ===== Modifiers =====
    modifier onlyPendingGovernance() {
        require(msg.sender == pendingGovernance, ""onlyPendingGovernance"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""onlyGovernance"");
        _;
    }

    modifier onlyOracle() {
        require(msg.sender == address(oracle), ""onlyOracle"");
        _;
    }

    function initialize(address _governance, address _ibbtc, address _oracle) public initializer {
        __ERC20_init(""Wrapped Interest-Bearing Bitcoin"", ""wibBTC"");
        governance = _governance;
        oracle = ICoreOracle(_oracle);
        ibbtc = ERC20Upgradeable(_ibbtc);

        emit SetOracle(_oracle);
    }

    /// ===== Permissioned: Governance =====
    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
        pendingGovernance = _pendingGovernance;
        emit SetPendingGovernance(pendingGovernance);
    }

    function setOracle(address _oracle) external onlyGovernance {
        oracle = ICoreOracle(_oracle);
        emit SetOracle(_oracle);
    }

    /// ===== Permissioned: Pending Governance =====
    function acceptPendingGovernance() external onlyPendingGovernance {
        governance = pendingGovernance;
        emit AcceptPendingGovernance(pendingGovernance);
    }

    /// ===== Permissionless Calls =====

    /// @dev Deposit ibBTC to mint wibBTC shares
    function mint(uint256 _shares) external {
        require(ibbtc.transferFrom(_msgSender(), address(this), _shares));
        _mint(_msgSender(), _shares);
    }

    /// @dev Redeem wibBTC for ibBTC. Denominated in shares.
    function burn(uint256 _shares) external {
        _burn(_msgSender(), _shares);
        require(ibbtc.transfer(_msgSender(), _shares));
    }

    /// ===== Transfer Overrides =====
    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        /// @dev the _balances mapping represents the underlying ibBTC shares (""non-rebased balances"")
        /// @dev the naming confusion is due to maintaining original ERC20 code as much as possible

        uint256 amountInShares = balanceToShares(amount);

        _transfer(sender, recipient, amountInShares);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, ""ERC20: transfer amount exceeds allowance""));
        return true;
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        /// @dev the _balances mapping represents the underlying ibBTC shares (""non-rebased balances"")
        /// @dev the naming confusion is due to maintaining original ERC20 code as much as possible

        uint256 amountInShares = balanceToShares(amount);

        _transfer(_msgSender(), recipient, amountInShares);
        return true;
    }

    /// ===== View Methods =====

    /// @dev Current pricePerShare read live from oracle
    function pricePerShare() public view virtual returns (uint256) {
        return oracle.pricePerShare();
    }

    /// @dev Wrapped ibBTC shares of account
    function sharesOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /// @dev Current account shares * pricePerShare
    function balanceOf(address account) public view override returns (uint256) {
        return sharesOf(account).mul(pricePerShare()).div(1e18);
    }

    /// @dev Total wrapped ibBTC shares
    function totalShares() public view returns (uint256) {
        return _totalSupply;
    }

    /// @dev Current total shares * pricePerShare
    function totalSupply() public view override returns (uint256) {
        return totalShares().mul(pricePerShare()).div(1e18);
    }

    function balanceToShares(uint256 balance) public view returns (uint256) {
        return balance.mul(1e18).div(pricePerShare());
    }

    function sharesToBalance(uint256 shares) public view returns (uint256) {
        return shares.mul(pricePerShare()).div(1e18);
    }
}",1204.0,156.0,"[H-01] The design of `wibBTC` is not fully compatible with the current Curve StableSwap pool
Per the documentation, variables `wibBTC` is designed for a Curve StableSwap pool. However, the design of `wibBTC` makes the balances change dynamically and automatically. This is unusual for an ERC20 token, and it's not fully compatible with the current Curve StableSwap pool.
Specifically, a Curve StableSwap pool will maintain the balances of its `coins` based on the amount of tokens added, removed, and exchanged each time. In another word, it can not adopt the dynamic changes of the balances that happened automatically.
The pool's actual dynamic balance of `wibBTC` will deviate from the recorded balance in the pool contract as the pricePerShare increases.

[H-02] Approved spender can spend too many tokens
The `approve` function has not been overridden and therefore uses the internal shares, whereas transfer(From) uses the rebalanced amount.
Impact: The approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing with `pricePerShare`.
Many contracts also use the same amount for the `approve` call as for the amount they want to have transferred in a subsequent `transferFrom` call, and in this case, they approve an amount that is too large (as the approved `shares` amount yields a higher rebalanced amount).

[H-04] `WrappedIbbtc` contracts do not filter out price feed outliers
If price feed is manipulated in any way or there is any malfunction based volatility on the market, both contracts will pass it on a user. In the same time it's possible to construct mitigation mechanics for such cases, so user economics would be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it's worth adding some complexity to the implementation.

[M-01] Unable to transfer WrappedIbbtc if Oracle go down
In function `WrappedIbbtc`, user will not be able to transfer if `oracle.pricePerShare()` (L124) revert. This is because balanceToShares() is called in both transfer and transferFrom, which included a call to pricePerShare().
If this is the expected behavior, note that WrappedIbbtcEth is behaving the opposite as it uses the cached value in a local variable pricePerShare, which is only updated upon call to updatePricePerShare().

[M-02] Null check in `pricePerShare`
oracle can 0 as a price of the share, in that case, 0 will be the denominator in some calculations which can cause reverts from SafeMath (for e.g here: WrappedIbbtc.sol L148) resulting in Denial Of Service.

[M-03] hard to clear balance
The contract does not allow users to `transfer` by share. Therefore, It is hard for users to clear out all the shares. There will be users using this token with Metamask and it is likely the `pricePerShare` would increase after the user sends transactions. I consider this is a medium-risk issue.

[M-04] No sanity check on `pricePerShare` might lead to lost value
`pricePerShare` is read either from an oracle or from ibBTC's core.
If one of these is bugged or exploited, there are no safety checks to prevent loss of funds.Impact: As pricePerShare is used to calculate transfer amount, a bug or wrong data retuning a smaller pricePerShare than it really is, could result in drainage of wibbtc from Curve pool.",7.0,"pragma solidity ^0.6.12;

import ""../deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol"";
import ""../deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import ""./ICoreOracle.sol"";


contract WrappedIbbtc is Initializable, ERC20Upgradeable {
    address public governance;
    address public pendingGovernance;
    ERC20Upgradeable public ibbtc; 

    ICoreOracle public oracle;

    event SetOracle(address oracle);
    event SetPendingGovernance(address pendingGovernance);
    event AcceptPendingGovernance(address pendingGovernance);

    
    modifier onlyPendingGovernance() {
        require(msg.sender == pendingGovernance, ""onlyPendingGovernance"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""onlyGovernance"");
        _;
    }

    modifier onlyOracle() {
        require(msg.sender == address(oracle), ""onlyOracle"");
        _;
    }

    function initialize(address _governance, address _ibbtc, address _oracle) public initializer {
        __ERC20_init(""Wrapped Interest-Bearing Bitcoin"", ""wibBTC"");
        governance = _governance;
        oracle = ICoreOracle(_oracle);
        ibbtc = ERC20Upgradeable(_ibbtc);

        emit SetOracle(_oracle);
    }

    
    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
        pendingGovernance = _pendingGovernance;
        emit SetPendingGovernance(pendingGovernance);
    }

    function setOracle(address _oracle) external onlyGovernance {
        oracle = ICoreOracle(_oracle);
        emit SetOracle(_oracle);
    }

    
    function acceptPendingGovernance() external onlyPendingGovernance {
        governance = pendingGovernance;
        emit AcceptPendingGovernance(pendingGovernance);
    }

    

    
    function mint(uint256 _shares) external {
        require(ibbtc.transferFrom(_msgSender(), address(this), _shares));
        _mint(_msgSender(), _shares);
    }

    
    function burn(uint256 _shares) external {
        _burn(_msgSender(), _shares);
        require(ibbtc.transfer(_msgSender(), _shares));
    }

    
    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        
        

        uint256 amountInShares = balanceToShares(amount);

        _transfer(sender, recipient, amountInShares);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, ""ERC20: transfer amount exceeds allowance""));
        return true;
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        
        

        uint256 amountInShares = balanceToShares(amount);

        _transfer(_msgSender(), recipient, amountInShares);
        return true;
    }

    

    
    function pricePerShare() public view virtual returns (uint256) {
        return oracle.pricePerShare();
    }

    
    function sharesOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return sharesOf(account).mul(pricePerShare()).div(1e18);
    }

    
    function totalShares() public view returns (uint256) {
        return _totalSupply;
    }

    
    function totalSupply() public view override returns (uint256) {
        return totalShares().mul(pricePerShare()).div(1e18);
    }

    function balanceToShares(uint256 balance) public view returns (uint256) {
        return balance.mul(1e18).div(pricePerShare());
    }

    function sharesToBalance(uint256 shares) public view returns (uint256) {
        return shares.mul(pricePerShare()).div(1e18);
    }
}",811.0,3,4,"The vulnerabilities in the given solidity code of the smart contract are:

1. **Reentrancy**: The contract has a reentrancy vulnerability in the `transferFrom` and `transfer` functions. These functions call the `balanceToShares` function which in turn calls the `pricePerShare` function. However, the `pricePerShare` function is not marked as `view` or `pure` which means it can modify the state of the contract and potentially lead to a reentrancy attack.

2. **Unprotected External Calls**: The `setPendingGovernance` function calls the `ibbtc.transferFrom` function which is an external call. However, this function is not protected by the `onlyGovernance` modifier which means that any user can call this function and transfer tokens from the contract.

3. **Missing Input Validation**: The `initialize` function does not validate the inputs. For example, it does not check if the `governance` address is not null or if the `ibbtc` address is a valid ERC20 token.

4. **Unprotected Function Calls**: The `acceptPendingGovernance` function calls the `governance` address directly. However, this function is not protected by the `onlyPendingGovernance` modifier which means that any user can call this function and transfer governance to any address.

5. **Missing Error Handling**: The contract does not handle errors properly. For example, the `transferFrom` and `transfer` functions do not check if the transfer amount exceeds the allowance.

6. **Unprotected Variable Access**: The `balanceOf` function accesses the `_balances` array directly. However, this array is not protected by the `onlyGovernance` modifier which means that any user can access the balances of any account.

7. **Missing Event Emission**: The contract does not emit events properly. For example, the `acceptPendingGovernance` function does not emit an event when the governance is accepted.

8. **Unprotected Function Calls**: The `pricePerShare` function calls the `oracle.pricePerShare` function which is an external call. However, this function is not protected by the `onlyOracle` modifier which means that any user can call this function and potentially lead to a reentrancy attack.

9. **Missing Input Validation**: The `initialize` function does not validate the inputs. For example, it does not check if the `oracle` address is a valid ICoreOracle contract.

10. **Unprotected Variable Access**: The `sharesOf` function accesses the `_balances` array directly. However, this array is not protected by the `onlyGovernance` modifier which means that any user can access the shares of any account.

These are the vulnerabilities that I have identified in the given solidity code of the smart contract. Please note that this is not an exhaustive list and there may be other vulnerabilities present in the contract. It is recommended to use a static analysis tool to identify other potential vulnerabilities. 11. **Unprotected External Calls**: The `setOracle` function calls the `oracle` external call. However, this function is not protected by the `onlyGovernance` modifier which means that any user can call this function and set the oracle to any address. 

12. **Unprotected Variable Access**: The `totalSupply` function accesses the `_totalSupply` variable directly. However, this variable is not protected by the `onlyGovernance` modifier which means that any user can access the total supply of the contract. 

13. **Unprotected Function Calls**: The `balanceToShares` function calls the `pricePerShare` function which is an external call. However, this function is not protected by the `onlyOracle` modifier which means that any user can call this function and potentially lead to a reentrancy attack. 

14. **Missing Input Validation**: The `initialize` function does not validate the inputs. For example, it does not check if the `ibbtc` address is a valid ERC20 token. 

15. **Unprotected External Calls**: The `mint` function calls the `ibbtc.transferFrom` function which is an external call. However, this function is not protected by the `onlyGovernance` modifier which means that any user can call this function and transfer tokens from the contract. 

16. **Unprotected Variable Access**: The `sharesToBalance` function accesses the `_balances` array directly. However, this array is not protected by the `onlyGovernance` modifier which means that any user can access the shares of any account. 

17. **Unprotected Function Calls**: The `burn` function calls the `ibbtc.transfer` function which is an external call. However, this function is not protected by the `onlyGovernance` modifier which means that any user can call this function and transfer tokens from the contract. 

18. **Unprotected External Calls**: The `transfer`","### **Comparison of Issue Report and Response List**

---

#### **[H-01] The design of `wibBTC` is not fully compatible with the current Curve StableSwap pool**

**Report Description**:  
The `wibBTC` token is designed for a Curve StableSwap pool, but its dynamic and automatic balance changes are unusual for an ERC20 token and incompatible with the pool's design. The pool maintains balances based on token additions, removals, and exchanges, and cannot handle automatic balance changes. This discrepancy causes the actual dynamic balance of `wibBTC` to deviate from the recorded balance in the pool contract as `pricePerShare` increases.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the incompatibility between `wibBTC` and the Curve StableSwap pool. This issue is specific to the token's design and its interaction with the pool, which is not covered in the response list.

---

#### **[H-02] Approved spender can spend too many tokens**

**Report Description**:  
The `approve` function uses internal `shares`, while `transfer(From)` uses the rebalanced amount. This discrepancy allows an approved spender to spend more tokens than intended, as the approved amount grows with `pricePerShare`. Contracts that use the same amount for `approve` and `transferFrom` calls may approve an excessively large amount.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of `approve` and `transferFrom` discrepancies or the growing approved amount due to `pricePerShare`. This is a critical oversight.

---

#### **[H-04] `WrappedIbbtc` contracts do not filter out price feed outliers**

**Report Description**:  
The contracts do not filter out price feed outliers, which could result from manipulation or market volatility. This exposes users to unsustainable price movements and provides a substantial attack surface. Mitigation mechanics could be implemented to protect user economics.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the lack of filtering for price feed outliers or the associated risks. This is a significant security concern.

---

#### **[M-01] Unable to transfer `WrappedIbbtc` if Oracle goes down**

**Report Description**:  
Users cannot transfer `WrappedIbbtc` if `oracle.pricePerShare()` reverts, as `balanceToShares()` calls `pricePerShare()` in both `transfer` and `transferFrom`. This behavior contrasts with `WrappedIbbtcEth`, which uses a cached value for `pricePerShare`.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the dependency on `oracle.pricePerShare()` or the potential denial of service if the oracle fails.

---

#### **[M-02] Null check in `pricePerShare`**

**Report Description**:  
If `pricePerShare` returns `0`, it becomes the denominator in calculations, causing reverts from SafeMath and resulting in denial of service.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the lack of a null check for `pricePerShare` or the associated risks of division by zero.

---

#### **[M-03] Hard to clear balance**

**Report Description**:  
The contract does not allow users to transfer by share, making it difficult to clear out all shares. As `pricePerShare` increases, users may face challenges when using wallets like Metamask.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the difficulty of clearing balances or the impact of increasing `pricePerShare`.

---

#### **[M-04] No sanity check on `pricePerShare` might lead to lost value**

**Report Description**:  
The lack of sanity checks on `pricePerShare` could lead to loss of funds if the oracle or ibBTC's core is bugged or exploited. A smaller `pricePerShare` than the actual value could result in drainage of `wibbtc` from the Curve pool.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the lack of sanity checks on `pricePerShare` or the potential loss of funds.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-01] The design of `wibBTC` is not fully compatible with the current Curve StableSwap pool**  
- **[H-02] Approved spender can spend too many tokens**  
- **[H-04] `WrappedIbbtc` contracts do not filter out price feed outliers**  
- **[M-01] Unable to transfer `WrappedIbbtc` if Oracle goes down**  
- **[M-02] Null check in `pricePerShare`**  
- **[M-03] Hard to clear balance**  
- **[M-04] No sanity check on `pricePerShare` might lead to lost value**

---

### **Conclusion**  
The `response_list` does not address any of the issues in the `issue` report. It focuses on generic vulnerabilities like reentrancy, unprotected external calls, and missing input validation but fails to cover the specific risks and impacts outlined in the `issue` report. This indicates a significant gap in the response list's coverage, accuracy, and sufficiency.",1,4,2,16,"```
None.
```","The **Average Precision (AP)** for the query is **0.0**. 

Since there are no true positives in the ranked list of predictions, the precision at every rank is 0, and the average of these precision values is also 0."
WrappedlbbtcEth.sol,"//SPDX-License-Identifier: Unlicense
pragma solidity ^0.6.12;

import ""../deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol"";
import ""../deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import ""./ICore.sol"";

/*
    Wrapped Interest-Bearing Bitcoin (Ethereum mainnet variant)
*/
contract WrappedIbbtcEth is Initializable, ERC20Upgradeable {
    address public governance;
    address public pendingGovernance;
    ERC20Upgradeable public ibbtc; 
    
    ICore public core;

    uint256 public pricePerShare;
    uint256 public lastPricePerShareUpdate;

    event SetCore(address core);
    event SetPricePerShare(uint256 pricePerShare, uint256 updateTimestamp);
    event SetPendingGovernance(address pendingGovernance);
    event AcceptPendingGovernance(address pendingGovernance);

    /// ===== Modifiers =====
    modifier onlyPendingGovernance() {
        require(msg.sender == pendingGovernance, ""onlyPendingGovernance"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""onlyGovernance"");
        _;
    }

    function initialize(address _governance, address _ibbtc, address _core) public initializer {
        __ERC20_init(""Wrapped Interest-Bearing Bitcoin"", ""wibBTC"");
        governance = _governance;
        core = ICore(_core);
        ibbtc = ERC20Upgradeable(_ibbtc);

        updatePricePerShare();

        emit SetCore(_core);
    }

    /// ===== Permissioned: Governance =====
    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
        pendingGovernance = _pendingGovernance;
        emit SetPendingGovernance(pendingGovernance);
    }

    /// @dev The ibBTC token is technically capable of having it's Core contract changed via governance process. This allows the wrapper to adapt.
    /// @dev This function should be run atomically with setCore() on ibBTC if that eventuality ever arises.
    function setCore(address _core) external onlyGovernance {
        core = ICore(_core);
        emit SetCore(_core);
    }

    /// ===== Permissioned: Pending Governance =====
    function acceptPendingGovernance() external onlyPendingGovernance {
        governance = pendingGovernance;
        emit AcceptPendingGovernance(pendingGovernance);
    }

    /// ===== Permissionless Calls =====

    /// @dev Update live ibBTC price per share from core
    /// @dev We cache this to reduce gas costs of mint / burn / transfer operations.
    /// @dev Update function is permissionless, and must be updated at least once every X time as a sanity check to ensure value is up-to-date
    function updatePricePerShare() public virtual returns (uint256) {
        pricePerShare = core.pricePerShare();
        lastPricePerShareUpdate = now;

        emit SetPricePerShare(pricePerShare, lastPricePerShareUpdate);
    }

    /// @dev Deposit ibBTC to mint wibBTC shares
    function mint(uint256 _shares) external {
        require(ibbtc.transferFrom(_msgSender(), address(this), _shares));
        _mint(_msgSender(), _shares);
    }

    /// @dev Redeem wibBTC for ibBTC. Denominated in shares.
    function burn(uint256 _shares) external {
        _burn(_msgSender(), _shares);
        require(ibbtc.transfer(_msgSender(), _shares));
    }

    /// ===== Transfer Overrides =====
    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for ``sender``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        /// The _balances mapping represents the underlying ibBTC shares (""non-rebased balances"")
        /// Some naming confusion emerges due to maintaining original ERC20 var names

        uint256 amountInShares = balanceToShares(amount);

        _transfer(sender, recipient, amountInShares);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, ""ERC20: transfer amount exceeds allowance""));
        return true;
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        /// The _balances mapping represents the underlying ibBTC shares (""non-rebased balances"")
        /// Some naming confusion emerges due to maintaining original ERC20 var names

        uint256 amountInShares = balanceToShares(amount);

        _transfer(_msgSender(), recipient, amountInShares);
        return true;
    }

    /// ===== View Methods =====

    /// @dev Wrapped ibBTC shares of account
    function sharesOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /// @dev Current account shares * pricePerShare
    function balanceOf(address account) public view override returns (uint256) {
        return sharesOf(account).mul(pricePerShare).div(1e18);
    }

    /// @dev Total wrapped ibBTC shares
    function totalShares() public view returns (uint256) {
        return _totalSupply;
    }

    /// @dev Current total shares * pricePerShare
    function totalSupply() public view override returns (uint256) {
        return totalShares().mul(pricePerShare).div(1e18);
    }

    function balanceToShares(uint256 balance) public view returns (uint256) {
        return balance.mul(1e18).div(pricePerShare);
    }

    function sharesToBalance(uint256 shares) public view returns (uint256) {
        return shares.mul(pricePerShare).div(1e18);
    }
}",1337.0,164.0,"[H-03] WrappedIbbtcEth contract will use stalled price for mint/burn if `updatePricePerShare` wasn't run properly
Malicious user can monitor `SetPricePerShare` event and, if it was run long enough time ago and market moved, but, since there were no `SetPricePerShare` fired, the contract's `pricePerShare` is outdated, so a user can `mint()` with `pricePerShare` that is current for contract, but outdated for market, then wait for price update and burn() with updated pricePerShare, yielding risk-free profit at expense of contract holdings.


[H-04] WrappedIbbtcEth contracts do not filter out price feed outliers
If price feed is manipulated in any way or there is any malfunction based volatility on the market, both contracts will pass it on a user. In the same time it's possible to construct mitigation mechanics for such cases, so user economics would be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it's worth adding some complexity to the implementation.",2.0,"pragma solidity ^0.6.12;

import ""../deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol"";
import ""../deps/@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import ""./ICore.sol"";


contract WrappedIbbtcEth is Initializable, ERC20Upgradeable {
    address public governance;
    address public pendingGovernance;
    ERC20Upgradeable public ibbtc; 
    
    ICore public core;

    uint256 public pricePerShare;
    uint256 public lastPricePerShareUpdate;

    event SetCore(address core);
    event SetPricePerShare(uint256 pricePerShare, uint256 updateTimestamp);
    event SetPendingGovernance(address pendingGovernance);
    event AcceptPendingGovernance(address pendingGovernance);

    
    modifier onlyPendingGovernance() {
        require(msg.sender == pendingGovernance, ""onlyPendingGovernance"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""onlyGovernance"");
        _;
    }

    function initialize(address _governance, address _ibbtc, address _core) public initializer {
        __ERC20_init(""Wrapped Interest-Bearing Bitcoin"", ""wibBTC"");
        governance = _governance;
        core = ICore(_core);
        ibbtc = ERC20Upgradeable(_ibbtc);

        updatePricePerShare();

        emit SetCore(_core);
    }

    
    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {
        pendingGovernance = _pendingGovernance;
        emit SetPendingGovernance(pendingGovernance);
    }

    
    
    function setCore(address _core) external onlyGovernance {
        core = ICore(_core);
        emit SetCore(_core);
    }

    
    function acceptPendingGovernance() external onlyPendingGovernance {
        governance = pendingGovernance;
        emit AcceptPendingGovernance(pendingGovernance);
    }

    

    
    
    
    function updatePricePerShare() public virtual returns (uint256) {
        pricePerShare = core.pricePerShare();
        lastPricePerShareUpdate = now;

        emit SetPricePerShare(pricePerShare, lastPricePerShareUpdate);
    }

    
    function mint(uint256 _shares) external {
        require(ibbtc.transferFrom(_msgSender(), address(this), _shares));
        _mint(_msgSender(), _shares);
    }

    
    function burn(uint256 _shares) external {
        _burn(_msgSender(), _shares);
        require(ibbtc.transfer(_msgSender(), _shares));
    }

    
    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        
        

        uint256 amountInShares = balanceToShares(amount);

        _transfer(sender, recipient, amountInShares);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amountInShares, ""ERC20: transfer amount exceeds allowance""));
        return true;
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        
        

        uint256 amountInShares = balanceToShares(amount);

        _transfer(_msgSender(), recipient, amountInShares);
        return true;
    }

    

    
    function sharesOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return sharesOf(account).mul(pricePerShare).div(1e18);
    }

    
    function totalShares() public view returns (uint256) {
        return _totalSupply;
    }

    
    function totalSupply() public view override returns (uint256) {
        return totalShares().mul(pricePerShare).div(1e18);
    }

    function balanceToShares(uint256 balance) public view returns (uint256) {
        return balance.mul(1e18).div(pricePerShare);
    }

    function sharesToBalance(uint256 shares) public view returns (uint256) {
        return shares.mul(pricePerShare).div(1e18);
    }
}",854.0,2,0,"The following vulnerabilities were identified in the provided Solidity code:

1.  **Reentrancy vulnerability**: The `transferFrom` and `transfer` functions do not check if the recipient's allowance is sufficient to prevent reentrancy attacks. An attacker could call these functions repeatedly, causing the contract to repeatedly transfer funds to themselves.

2.  **Denial of Service (DoS) vulnerability**: The `updatePricePerShare` function does not have any checks to prevent an attacker from calling it repeatedly, causing the contract to update the price per share unnecessarily.

3.  **Missing input validation**: The `initialize` function does not validate the input addresses, which could lead to unexpected behavior or errors.

4.  **Missing gas optimization**: The `updatePricePerShare` function uses the `now` function, which is not gas-efficient. It would be better to use a timestamp from a trusted source.

5.  **Missing error handling**: The `transferFrom` and `transfer` functions do not handle errors properly. If an error occurs during the transfer, the function will revert, but the error message will not be informative.

6.  **Missing access control**: The `setCore` and `setPendingGovernance` functions do not have proper access control. Anyone can call these functions, which could lead to unexpected behavior or errors.

7.  **Missing event emission**: The `updatePricePerShare` function does not emit an event when the price per share is updated. This could make it difficult to track changes to the price per share.

8.  **Missing function reentrancy protection**: The `mint` and `burn` functions do not have proper reentrancy protection. An attacker could call these functions repeatedly, causing the contract to repeatedly transfer funds to themselves.

9.  **Missing function input validation**: The `mint` and `burn` functions do not validate the input amounts. This could lead to unexpected behavior or errors.

10. **Missing function gas optimization**: The `mint` and `burn` functions do not have proper gas optimization. They could be optimized to reduce gas costs.

To fix these vulnerabilities, the contract should be reviewed and updated to include proper input validation, error handling, access control, and gas optimization. Additionally, the contract should be audited by a security expert to ensure that it is secure and compliant with relevant regulations.<|eot_id|>","### **Output**

---

**[H-03] WrappedIbbtcEth contract will use stalled price for mint/burn if `updatePricePerShare` wasn't run properly**

**Report Description**:  
The `WrappedIbbtcEth` contract relies on the `pricePerShare` value for minting and burning operations. If the `updatePricePerShare` function is not called frequently enough, the `pricePerShare` value may become outdated. A malicious user can monitor the `SetPricePerShare` event and exploit the outdated price by minting tokens at the stale price, waiting for a price update, and then burning tokens at the updated price. This allows the attacker to make a risk-free profit at the expense of the contract's holdings.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of stale `pricePerShare` values or the associated risk of arbitrage-like attacks. The closest match is the ""Denial of Service (DoS) vulnerability"" related to the `updatePricePerShare` function, but this focuses on repeated calls rather than the risk of outdated prices. The core issue of stale pricing and its exploitation is entirely missed.

---

**[H-04] WrappedIbbtcEth contracts do not filter out price feed outliers**

**Report Description**:  
The `WrappedIbbtcEth` contracts do not implement any mechanism to filter out price feed outliers. If the price feed is manipulated or experiences abnormal volatility due to market malfunctions, the contracts will pass these anomalies directly to users. This creates a substantial attack surface, as malicious actors could exploit price outliers to manipulate the system. Implementing mitigation mechanics would ensure that only sustainable price movements affect user economics.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of price feed outliers or the need for mitigation mechanisms. The closest match is the ""Missing input validation"" issue, but this pertains to address validation rather than price feed filtering. The core issue of price feed manipulation and volatility is entirely missed.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-03] WrappedIbbtcEth contract will use stalled price for mint/burn if `updatePricePerShare` wasn't run properly**  
- **[H-04] WrappedIbbtcEth contracts do not filter out price feed outliers**

---

### **Analysis**  
The `response_list` fails to address the two critical issues in the `issue` report. While it identifies several vulnerabilities, such as reentrancy, DoS, and missing input validation, it does not cover the risks associated with stale pricing or price feed outliers. These omissions highlight significant gaps in the response list's coverage and accuracy. Addressing these issues would require adding specific checks for price staleness and implementing mechanisms to filter out price feed anomalies.",0,1,1,14,"```
None.
```",0.0
,,,,,,,,5,4,,,1,5,3,30,,
