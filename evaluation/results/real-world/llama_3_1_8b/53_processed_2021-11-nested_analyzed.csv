nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Thought,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
NestedFactory.sol,"// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.9;

import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/access/Ownable.sol"";
import ""@openzeppelin/contracts/utils/Multicall.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""./libraries/ExchangeHelpers.sol"";
import ""./libraries/OperatorHelpers.sol"";
import ""./interfaces/external/IWETH.sol"";
import ""./interfaces/INestedFactory.sol"";
import ""./FeeSplitter.sol"";
import ""./MixinOperatorResolver.sol"";
import ""./NestedReserve.sol"";
import ""./NestedAsset.sol"";
import ""./NestedRecords.sol"";

/// @title Creates, updates and destroys NestedAssets.
/// @notice Responsible for the business logic of the protocol and interaction with operators
contract NestedFactory is INestedFactory, ReentrancyGuard, Ownable, MixinOperatorResolver, Multicall {
    using SafeERC20 for IERC20;
    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    /// @dev Supported operators by the factory contract
    bytes32[] private operators;

    /// @dev Current feeSplitter contract/address
    FeeSplitter public feeSplitter;

    /// @dev Current reserve contract/address
    NestedReserve public reserve;

    NestedAsset public immutable nestedAsset;
    IWETH public immutable weth;
    NestedRecords public immutable nestedRecords;

    constructor(
        NestedAsset _nestedAsset,
        NestedRecords _nestedRecords,
        FeeSplitter _feeSplitter,
        IWETH _weth,
        address _operatorResolver
    ) MixinOperatorResolver(_operatorResolver) {
        nestedAsset = _nestedAsset;
        nestedRecords = _nestedRecords;
        feeSplitter = _feeSplitter;
        weth = _weth;
    }

    /// @dev Reverts the transaction if the caller is not the token owner
    /// @param _nftId The NFT Id
    modifier onlyTokenOwner(uint256 _nftId) {
        require(nestedAsset.ownerOf(_nftId) == _msgSender(), ""NestedFactory: Not the token owner"");
        _;
    }

    /// @dev Reverts the transaction if the nft is locked (hold by design).
    /// The block.timestamp must be greater than NFT record lock timestamp
    /// @param _nftId The NFT Id
    modifier isUnlocked(uint256 _nftId) {
        require(block.timestamp > nestedRecords.getLockTimestamp(_nftId), ""NestedFactory: The NFT is currently locked"");
        _;
    }

    /// @dev Receive function
    receive() external payable {}

    /// @notice Get the required operator addresses
    function resolverAddressesRequired() public view override returns (bytes32[] memory addresses) {
        return operators;
    }

    /// @inheritdoc INestedFactory
    function addOperator(bytes32 operator) external override onlyOwner {
        operators.push(operator);
    }

    /// @inheritdoc INestedFactory
    function removeOperator(bytes32 operator) external override onlyOwner {
        uint256 i = 0;
        while (operators[i] != operator) {
            i++;
        }
        require(i > 0, ""NestedFactory::removeOperator: Cant remove non-existent operator"");
        delete operators[i];
    }

    /// @inheritdoc INestedFactory
    function setReserve(NestedReserve _reserve) external override onlyOwner {
        require(address(reserve) == address(0), ""NestedFactory::setReserve: Reserve is immutable"");
        reserve = _reserve;
        emit ReserveUpdated(address(_reserve));
    }

    /// @inheritdoc INestedFactory
    function setFeeSplitter(FeeSplitter _feeSplitter) external override onlyOwner {
        require(address(_feeSplitter) != address(0), ""NestedFactory::setFeeSplitter: Invalid feeSplitter address"");
        feeSplitter = _feeSplitter;
        emit FeeSplitterUpdated(address(_feeSplitter));
    }

    /// @inheritdoc INestedFactory
    function create(
        uint256 _originalTokenId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external payable override nonReentrant {
        require(_orders.length > 0, ""NestedFactory::create: Missing orders"");

        uint256 nftId = nestedAsset.mint(_msgSender(), _originalTokenId);
        (uint256 fees, IERC20 tokenSold) = _submitInOrders(nftId, _sellToken, _sellTokenAmount, _orders, true, false);

        _transferFeeWithRoyalty(fees, tokenSold, nftId);
        emit NftCreated(nftId, _originalTokenId);
    }

    /// @inheritdoc INestedFactory
    function addTokens(
        uint256 _nftId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external payable override nonReentrant onlyTokenOwner(_nftId) {
        require(_orders.length > 0, ""NestedFactory::addTokens: Missing orders"");

        (uint256 fees, IERC20 tokenSold) = _submitInOrders(_nftId, _sellToken, _sellTokenAmount, _orders, true, false);
        _transferFeeWithRoyalty(fees, tokenSold, _nftId);
        emit NftUpdated(_nftId);
    }

    /// @inheritdoc INestedFactory
    function swapTokenForTokens(
        uint256 _nftId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::swapTokenForTokens: Missing orders"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::swapTokenForTokens: Assets in different reserve""
        );

        (uint256 fees, IERC20 tokenSold) = _submitInOrders(_nftId, _sellToken, _sellTokenAmount, _orders, true, true);
        _transferFeeWithRoyalty(fees, tokenSold, _nftId);

        emit NftUpdated(_nftId);
    }

    /// @inheritdoc INestedFactory
    function sellTokensToNft(
        uint256 _nftId,
        IERC20 _buyToken,
        uint256[] memory _sellTokensAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::sellTokensToNft: Missing orders"");
        require(_sellTokensAmount.length == _orders.length, ""NestedFactory::sellTokensToNft: Input lengths must match"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::sellTokensToNft: Assets in different reserve""
        );

        (uint256 feesAmount, ) = _submitOutOrders(_nftId, _buyToken, _sellTokensAmount, _orders, true, true);
        _transferFeeWithRoyalty(feesAmount, _buyToken, _nftId);

        emit NftUpdated(_nftId);
    }

    /// @inheritdoc INestedFactory
    function sellTokensToWallet(
        uint256 _nftId,
        IERC20 _buyToken,
        uint256[] memory _sellTokensAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::sellTokensToWallet: Missing orders"");
        require(
            _sellTokensAmount.length == _orders.length,
            ""NestedFactory::sellTokensToWallet: Input lengths must match""
        );
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::sellTokensToWallet: Assets in different reserve""
        );

        (uint256 feesAmount, uint256 amountBought) = _submitOutOrders(
            _nftId,
            _buyToken,
            _sellTokensAmount,
            _orders,
            false,
            true
        );
        _transferFeeWithRoyalty(feesAmount, _buyToken, _nftId);
        _safeTransferAndUnwrap(_buyToken, amountBought - feesAmount, _msgSender());

        emit NftUpdated(_nftId);
    }

    /// @inheritdoc INestedFactory
    function destroy(
        uint256 _nftId,
        IERC20 _buyToken,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        address[] memory tokens = nestedRecords.getAssetTokens(_nftId);
        require(_orders.length > 0, ""NestedFactory::destroy: Missing orders"");
        require(tokens.length == _orders.length, ""NestedFactory::destroy: Missing sell args"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::destroy: Assets in different reserve""
        );

        uint256 buyTokenInitialBalance = _buyToken.balanceOf(address(this));

        for (uint256 i = 0; i < tokens.length; i++) {
            NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, tokens[i]);
            reserve.withdraw(IERC20(holding.token), holding.amount);

            _safeSubmitOrder(tokens[i], address(_buyToken), holding.amount, _nftId, _orders[i]);
            nestedRecords.freeHolding(_nftId, tokens[i]);
        }

        // Amount calculation to send fees and tokens
        uint256 amountBought = _buyToken.balanceOf(address(this)) - buyTokenInitialBalance;
        uint256 amountFees = _calculateFees(_msgSender(), amountBought);
        amountBought = amountBought - amountFees;

        _transferFeeWithRoyalty(amountFees, _buyToken, _nftId);
        _safeTransferAndUnwrap(_buyToken, amountBought, _msgSender());

        // Burn NFT
        nestedRecords.removeNFT(_nftId);
        nestedAsset.burn(_msgSender(), _nftId);
        emit NftBurned(_nftId);
    }

    /// @inheritdoc INestedFactory
    function withdraw(uint256 _nftId, uint256 _tokenIndex)
        external
        override
        nonReentrant
        onlyTokenOwner(_nftId)
        isUnlocked(_nftId)
    {
        uint256 assetTokensLength = nestedRecords.getAssetTokensLength(_nftId);
        require(assetTokensLength > _tokenIndex, ""NestedFactory::withdraw: Invalid token index"");
        // Use destroy instead if NFT has a single holding
        require(assetTokensLength > 1, ""NestedFactory::withdraw: Can't withdraw the last asset"");

        NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(
            _nftId,
            nestedRecords.getAssetTokens(_nftId)[_tokenIndex]
        );
        reserve.withdraw(IERC20(holding.token), holding.amount);
        _safeTransferWithFees(IERC20(holding.token), holding.amount, _msgSender(), _nftId);

        nestedRecords.deleteAsset(_nftId, _tokenIndex);

        emit NftUpdated(_nftId);
    }

    /// @inheritdoc INestedFactory
    function increaseLockTimestamp(uint256 _nftId, uint256 _timestamp) external override onlyTokenOwner(_nftId) {
        nestedRecords.updateLockTimestamp(_nftId, _timestamp);
    }

    /// @inheritdoc INestedFactory
    function unlockTokens(IERC20 _token) external override onlyOwner {
        _token.transfer(owner(), _token.balanceOf(address(this)));
    }

    /// @dev For every orders, call the operator with the calldata
    /// to submit buy orders (where the input is one asset).
    /// @param _nftId The id of the NFT impacted by the orders
    /// @param _inputToken Token used to make the orders
    /// @param _inputTokenAmount Amount of input tokens to use
    /// @param _orders Orders calldata
    /// @param _reserved True if the output is store in the reserve/records, false if not.
    /// @param _fromReserve True if the input tokens are from the reserve
    /// @return feesAmount The total amount of fees
    /// @return tokenSold The ERC20 token sold (in case of ETH to WETH)
    function _submitInOrders(
        uint256 _nftId,
        IERC20 _inputToken,
        uint256 _inputTokenAmount,
        Order[] calldata _orders,
        bool _reserved,
        bool _fromReserve
    ) private returns (uint256 feesAmount, IERC20 tokenSold) {
        _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);
        uint256 amountSpent;
        for (uint256 i = 0; i < _orders.length; i++) {
            amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);
        }
        feesAmount = _calculateFees(_msgSender(), amountSpent);
        assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent

        // If input is from the reserve, update the records
        if (_fromReserve) {
            _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount);
        }

        _handleUnderSpending(_inputTokenAmount - feesAmount, amountSpent, _inputToken);

        tokenSold = _inputToken;
    }

    /// @dev For every orders, call the operator with the calldata
    /// to submit sell orders (where the output is one asset).
    /// @param _nftId The id of the NFT impacted by the orders
    /// @param _outputToken Token received for every orders
    /// @param _inputTokenAmounts Amounts of tokens to use (respectively with Orders)
    /// @param _orders Orders calldata
    /// @param _reserved True if the output is store in the reserve/records, false if not.
    /// @param _fromReserve True if the input tokens are from the reserve
    /// @return feesAmount The total amount of fees
    /// @return amountBought The total amount bought
    function _submitOutOrders(
        uint256 _nftId,
        IERC20 _outputToken,
        uint256[] memory _inputTokenAmounts,
        Order[] calldata _orders,
        bool _reserved,
        bool _fromReserve
    ) private returns (uint256 feesAmount, uint256 amountBought) {
        uint256 _outputTokenInitialBalance = _outputToken.balanceOf(address(this));

        for (uint256 i = 0; i < _orders.length; i++) {
            IERC20 _inputToken = _transferInputTokens(
                _nftId,
                IERC20(_orders[i].token),
                _inputTokenAmounts[i],
                _fromReserve
            );

            // Submit order and update holding of spent token
            uint256 amountSpent = _submitOrder(address(_inputToken), address(_outputToken), _nftId, _orders[i], false);
            assert(amountSpent <= _inputTokenAmounts[i]);

            if (_fromReserve) {
                _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmounts[i]);
            }

            // Under spent input amount send to fee splitter
            if (_inputTokenAmounts[i] - amountSpent > 0) {
                _transferFeeWithRoyalty(_inputTokenAmounts[i] - amountSpent, _inputToken, _nftId);
            }
        }

        amountBought = _outputToken.balanceOf(address(this)) - _outputTokenInitialBalance;
        feesAmount = _calculateFees(_msgSender(), amountBought);

        if (_reserved) {
            _transferToReserveAndStore(address(_outputToken), amountBought - feesAmount, _nftId);
        }
    }

    /// @dev Call the operator to submit the order (commit/revert) and add the output
    /// assets to the reserve (if needed).
    /// @param _inputToken Token used to make the orders
    /// @param _outputToken Expected output token
    /// @param _nftId The nftId
    /// @param _order The order calldata
    /// @param _reserved True if the output is store in the reserve/records, false if not.
    function _submitOrder(
        address _inputToken,
        address _outputToken,
        uint256 _nftId,
        Order calldata _order,
        bool _reserved
    ) private returns (uint256 amountSpent) {
        address operator = requireAndGetAddress(_order.operator);
        (bool success, bytes memory data) = OperatorHelpers.callOperator(operator, _order.commit, _order.callData);
        require(success, ""NestedFactory::_submitOrder: Operator call failed"");

        (uint256[] memory amounts, address[] memory tokens) = OperatorHelpers.decodeDataAndRequire(
            data,
            _inputToken,
            _outputToken
        );

        if (_reserved) {
            _transferToReserveAndStore(_outputToken, amounts[0], _nftId);
        }
        amountSpent = amounts[1];
    }

    /// @dev Call the operator to submit the order (commit/revert) but dont stop if
    /// the call to the operator fail. It will send the input token back to the msg.sender.
    /// Note : The _reserved Boolean has been removed (compare to _submitOrder) since it was
    ///        useless for the only use case (destroy).
    /// @param _inputToken Token used to make the orders
    /// @param _outputToken Expected output token
    /// @param _amountToSpend The input amount available (to spend)
    /// @param _nftId The nftId
    /// @param _order The order calldata
    function _safeSubmitOrder(
        address _inputToken,
        address _outputToken,
        uint256 _amountToSpend,
        uint256 _nftId,
        Order calldata _order
    ) private {
        address operator = requireAndGetAddress(_order.operator);
        (bool success, bytes memory data) = OperatorHelpers.callOperator(operator, _order.commit, _order.callData);
        if (success) {
            (uint256[] memory amounts, address[] memory tokens) = OperatorHelpers.decodeDataAndRequire(
                data,
                _inputToken,
                _outputToken
            );
            _handleUnderSpending(_amountToSpend, amounts[1], IERC20(_inputToken));
        } else {
            _safeTransferWithFees(IERC20(_inputToken), _amountToSpend, _msgSender(), _nftId);
        }
    }

    /// @dev Transfer tokens to the reserve, and compute the amount received to store
    /// in the records. We need to know the amount received in case of deflationary tokens.
    /// @param _token The token address
    /// @param _amount The amount to send to the reserve
    /// @param _nftId The Token ID to store the assets
    function _transferToReserveAndStore(
        address _token,
        uint256 _amount,
        uint256 _nftId
    ) private {
        uint256 balanceReserveBefore = IERC20(_token).balanceOf(address(reserve));

        // Send output to reserve
        IERC20(_token).safeTransfer(address(reserve), _amount);

        uint256 balanceReserveAfter = IERC20(_token).balanceOf(address(reserve));

        nestedRecords.store(_nftId, _token, balanceReserveAfter - balanceReserveBefore, address(reserve));
    }

    /// @dev Choose between ERC20 (safeTransfer) and ETH (deposit), to transfer from the Reserve
    ///      or the user wallet, to the factory.
    /// @param _nftId The NFT id
    /// @param _inputToken The token to receive
    /// @param _inputTokenAmount Amount to transfer
    /// @param _fromReserve True to transfer from the reserve
    /// @return tokenUsed Token transfered (in case of ETH)
    function _transferInputTokens(
        uint256 _nftId,
        IERC20 _inputToken,
        uint256 _inputTokenAmount,
        bool _fromReserve
    ) private returns (IERC20 tokenUsed) {
        if (_fromReserve) {
            NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, address(_inputToken));
            require(holding.amount >= _inputTokenAmount, ""NestedFactory:_transferInputTokens: Insufficient amount"");

            // Get input from reserve
            reserve.withdraw(IERC20(holding.token), _inputTokenAmount);
        } else if (address(_inputToken) == ETH) {
            require(msg.value == _inputTokenAmount, ""NestedFactory::_transferInputTokens: Insufficient amount in"");
            weth.deposit{ value: msg.value }();
            _inputToken = IERC20(address(weth));
        } else {
            _inputToken.safeTransferFrom(_msgSender(), address(this), _inputTokenAmount);
        }
        tokenUsed = _inputToken;
    }

    /// @dev Send the under spent amount to the FeeSplitter without the royalties.
    ///      The ""under spent"" amount is the positive difference between the amount supposed
    ///      to be spent and the amount really spent.
    /// @param _amountToSpent The amount supposed to be spent
    /// @param _amountSpent The amount really spent
    /// @param _token The amount-related token
    function _handleUnderSpending(
        uint256 _amountToSpent,
        uint256 _amountSpent,
        IERC20 _token
    ) private {
        if (_amountToSpent - _amountSpent > 0) {
            ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));
            feeSplitter.sendFees(_token, _amountToSpent - _amountSpent);
        }
    }

    /// @dev Send a fee to the FeeSplitter, royalties will be paid to the owner of the original asset
    /// @param _amount Amount to send
    /// @param _token Token to send
    /// @param _nftId User portfolio ID used to find a potential royalties recipient
    function _transferFeeWithRoyalty(
        uint256 _amount,
        IERC20 _token,
        uint256 _nftId
    ) private {
        address originalOwner = nestedAsset.originalOwner(_nftId);
        ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));
        if (originalOwner != address(0)) {
            feeSplitter.sendFeesWithRoyalties(originalOwner, _token, _amount);
        } else {
            feeSplitter.sendFees(_token, _amount);
        }
    }

    /// @dev Decrease the amount of a NFT holding
    /// @param _nftId The NFT id
    /// @param _inputToken The token holding
    /// @param _amount The amount to subtract from the actual holding amount
    function _decreaseHoldingAmount(
        uint256 _nftId,
        address _inputToken,
        uint256 _amount
    ) private {
        NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, _inputToken);
        nestedRecords.updateHoldingAmount(_nftId, _inputToken, holding.amount - _amount);
    }

    /// @dev Transfer a token amount from the factory to the recipient.
    ///      The token is unwrapped if WETH.
    /// @param _token The token to transfer
    /// @param _amount The amount to transfer
    /// @param _dest The address receiving the funds
    function _safeTransferAndUnwrap(
        IERC20 _token,
        uint256 _amount,
        address _dest
    ) private {
        // if buy token is WETH, unwrap it instead of transferring it to the sender
        if (address(_token) == address(weth)) {
            IWETH(weth).withdraw(_amount);
            (bool success, ) = _dest.call{ value: _amount }("""");
            require(success, ""ETH_TRANSFER_ERROR"");
        } else {
            _token.safeTransfer(_dest, _amount);
        }
    }

    /// @dev Transfer from factory and collect fees
    /// @param _token The token to transfer
    /// @param _amount The amount (with fees) to transfer
    /// @param _dest The address receiving the funds
    function _safeTransferWithFees(
        IERC20 _token,
        uint256 _amount,
        address _dest,
        uint256 _nftId
    ) private {
        uint256 feeAmount = _calculateFees(_dest, _amount);
        _transferFeeWithRoyalty(feeAmount, _token, _nftId);
        _token.safeTransfer(_dest, _amount - feeAmount);
    }

    /// @dev Calculate the fees for a specific user and amount (1%)
    /// @param _user The user address
    /// @param _amount The amount
    /// @return The fees amount
    function _calculateFees(address _user, uint256 _amount) private view returns (uint256) {
        return _amount / 100;
    }
}",5567.0,562.0,"[H-01] Copy your own portfolio to keep earning royalties
In NestedFactory.sol going through the `create()` function which leads to the `sendFeesWithRoyalties()` => `addShares()` function, Im not seeing any checks preventing someone from copying their own portfolio and receiving royalty shares for it and simply repeating the process over and over again.
 
[M-01] setReserve() can be front-run
The `reserve` address variable in NestedFactory.sol remains equal to 0 before the `setReserve()` function is called by an owner. This may lead to incorrect transfers of tokens or invalid comparison with e.g., the asset reserve (`nestedRecords.getAssetReserve(_nftId) == address(reserve)`), should they occur before the value for reserve was set. In addition, the immutabiliy of the `reserve` variable requires extra caution when setting the value.

 [M-06] NestedFactory.sol#_submitInOrders() Wrong implementation cause users to be overcharged
Function `_submitInOrders`
When executing orders, the actual `amountSpent + feesAmount` can be lower than `_inputTokenAmount`, the unspent amount should be returned to the user.
However, in the current implementation, the unspent amount will be taken as part of the fee. NestedFactory.sol L285-L309
  [M-07] Ensure on-chain that cache is synced
Currently, many core operations (like `NestedFactory.create()`, `NestedFactory.swapTokenForTokens()`) are dependent on the assumption that the cache is synced before these functions are executed however this may not necessarily be the case.
  [M-08] Passing multiple ETH deposits in orders array will use the same `msg.value` many times
Contract holdings can be emptied as malicious user will do deposit/withdraw to extract value. This is possible because after `transferInputTokens` system uses contract balance for user's operations, assuming that equivalent value was transferred. `msg.value` persist over calls, so passing 'Order[] calldata _orders' holding multiple ETH deposits will use the same msg.value in each of them, resulting in multiple deposits, that sums up to much bigger accounted value than actually deposited value, up to contract's ETH holdings.",5.0,"pragma solidity 0.8.9;

import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/access/Ownable.sol"";
import ""@openzeppelin/contracts/utils/Multicall.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""./libraries/ExchangeHelpers.sol"";
import ""./libraries/OperatorHelpers.sol"";
import ""./interfaces/external/IWETH.sol"";
import ""./interfaces/INestedFactory.sol"";
import ""./FeeSplitter.sol"";
import ""./MixinOperatorResolver.sol"";
import ""./NestedReserve.sol"";
import ""./NestedAsset.sol"";
import ""./NestedRecords.sol"";



contract NestedFactory is INestedFactory, ReentrancyGuard, Ownable, MixinOperatorResolver, Multicall {
    using SafeERC20 for IERC20;
    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    
    bytes32[] private operators;

    
    FeeSplitter public feeSplitter;

    
    NestedReserve public reserve;

    NestedAsset public immutable nestedAsset;
    IWETH public immutable weth;
    NestedRecords public immutable nestedRecords;

    constructor(
        NestedAsset _nestedAsset,
        NestedRecords _nestedRecords,
        FeeSplitter _feeSplitter,
        IWETH _weth,
        address _operatorResolver
    ) MixinOperatorResolver(_operatorResolver) {
        nestedAsset = _nestedAsset;
        nestedRecords = _nestedRecords;
        feeSplitter = _feeSplitter;
        weth = _weth;
    }

    
    
    modifier onlyTokenOwner(uint256 _nftId) {
        require(nestedAsset.ownerOf(_nftId) == _msgSender(), ""NestedFactory: Not the token owner"");
        _;
    }

    
    
    
    modifier isUnlocked(uint256 _nftId) {
        require(block.timestamp > nestedRecords.getLockTimestamp(_nftId), ""NestedFactory: The NFT is currently locked"");
        _;
    }

    
    receive() external payable {}

    
    function resolverAddressesRequired() public view override returns (bytes32[] memory addresses) {
        return operators;
    }

    
    function addOperator(bytes32 operator) external override onlyOwner {
        operators.push(operator);
    }

    
    function removeOperator(bytes32 operator) external override onlyOwner {
        uint256 i = 0;
        while (operators[i] != operator) {
            i++;
        }
        require(i > 0, ""NestedFactory::removeOperator: Cant remove non-existent operator"");
        delete operators[i];
    }

    
    function setReserve(NestedReserve _reserve) external override onlyOwner {
        require(address(reserve) == address(0), ""NestedFactory::setReserve: Reserve is immutable"");
        reserve = _reserve;
        emit ReserveUpdated(address(_reserve));
    }

    
    function setFeeSplitter(FeeSplitter _feeSplitter) external override onlyOwner {
        require(address(_feeSplitter) != address(0), ""NestedFactory::setFeeSplitter: Invalid feeSplitter address"");
        feeSplitter = _feeSplitter;
        emit FeeSplitterUpdated(address(_feeSplitter));
    }

    
    function create(
        uint256 _originalTokenId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external payable override nonReentrant {
        require(_orders.length > 0, ""NestedFactory::create: Missing orders"");

        uint256 nftId = nestedAsset.mint(_msgSender(), _originalTokenId);
        (uint256 fees, IERC20 tokenSold) = _submitInOrders(nftId, _sellToken, _sellTokenAmount, _orders, true, false);

        _transferFeeWithRoyalty(fees, tokenSold, nftId);
        emit NftCreated(nftId, _originalTokenId);
    }

    
    function addTokens(
        uint256 _nftId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external payable override nonReentrant onlyTokenOwner(_nftId) {
        require(_orders.length > 0, ""NestedFactory::addTokens: Missing orders"");

        (uint256 fees, IERC20 tokenSold) = _submitInOrders(_nftId, _sellToken, _sellTokenAmount, _orders, true, false);
        _transferFeeWithRoyalty(fees, tokenSold, _nftId);
        emit NftUpdated(_nftId);
    }

    
    function swapTokenForTokens(
        uint256 _nftId,
        IERC20 _sellToken,
        uint256 _sellTokenAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::swapTokenForTokens: Missing orders"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::swapTokenForTokens: Assets in different reserve""
        );

        (uint256 fees, IERC20 tokenSold) = _submitInOrders(_nftId, _sellToken, _sellTokenAmount, _orders, true, true);
        _transferFeeWithRoyalty(fees, tokenSold, _nftId);

        emit NftUpdated(_nftId);
    }

    
    function sellTokensToNft(
        uint256 _nftId,
        IERC20 _buyToken,
        uint256[] memory _sellTokensAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::sellTokensToNft: Missing orders"");
        require(_sellTokensAmount.length == _orders.length, ""NestedFactory::sellTokensToNft: Input lengths must match"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::sellTokensToNft: Assets in different reserve""
        );

        (uint256 feesAmount, ) = _submitOutOrders(_nftId, _buyToken, _sellTokensAmount, _orders, true, true);
        _transferFeeWithRoyalty(feesAmount, _buyToken, _nftId);

        emit NftUpdated(_nftId);
    }

    
    function sellTokensToWallet(
        uint256 _nftId,
        IERC20 _buyToken,
        uint256[] memory _sellTokensAmount,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        require(_orders.length > 0, ""NestedFactory::sellTokensToWallet: Missing orders"");
        require(
            _sellTokensAmount.length == _orders.length,
            ""NestedFactory::sellTokensToWallet: Input lengths must match""
        );
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::sellTokensToWallet: Assets in different reserve""
        );

        (uint256 feesAmount, uint256 amountBought) = _submitOutOrders(
            _nftId,
            _buyToken,
            _sellTokensAmount,
            _orders,
            false,
            true
        );
        _transferFeeWithRoyalty(feesAmount, _buyToken, _nftId);
        _safeTransferAndUnwrap(_buyToken, amountBought - feesAmount, _msgSender());

        emit NftUpdated(_nftId);
    }

    
    function destroy(
        uint256 _nftId,
        IERC20 _buyToken,
        Order[] calldata _orders
    ) external override nonReentrant onlyTokenOwner(_nftId) isUnlocked(_nftId) {
        address[] memory tokens = nestedRecords.getAssetTokens(_nftId);
        require(_orders.length > 0, ""NestedFactory::destroy: Missing orders"");
        require(tokens.length == _orders.length, ""NestedFactory::destroy: Missing sell args"");
        require(
            nestedRecords.getAssetReserve(_nftId) == address(reserve),
            ""NestedFactory::destroy: Assets in different reserve""
        );

        uint256 buyTokenInitialBalance = _buyToken.balanceOf(address(this));

        for (uint256 i = 0; i < tokens.length; i++) {
            NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, tokens[i]);
            reserve.withdraw(IERC20(holding.token), holding.amount);

            _safeSubmitOrder(tokens[i], address(_buyToken), holding.amount, _nftId, _orders[i]);
            nestedRecords.freeHolding(_nftId, tokens[i]);
        }

        
        uint256 amountBought = _buyToken.balanceOf(address(this)) - buyTokenInitialBalance;
        uint256 amountFees = _calculateFees(_msgSender(), amountBought);
        amountBought = amountBought - amountFees;

        _transferFeeWithRoyalty(amountFees, _buyToken, _nftId);
        _safeTransferAndUnwrap(_buyToken, amountBought, _msgSender());

        
        nestedRecords.removeNFT(_nftId);
        nestedAsset.burn(_msgSender(), _nftId);
        emit NftBurned(_nftId);
    }

    
    function withdraw(uint256 _nftId, uint256 _tokenIndex)
        external
        override
        nonReentrant
        onlyTokenOwner(_nftId)
        isUnlocked(_nftId)
    {
        uint256 assetTokensLength = nestedRecords.getAssetTokensLength(_nftId);
        require(assetTokensLength > _tokenIndex, ""NestedFactory::withdraw: Invalid token index"");
        
        require(assetTokensLength > 1, ""NestedFactory::withdraw: Can't withdraw the last asset"");

        NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(
            _nftId,
            nestedRecords.getAssetTokens(_nftId)[_tokenIndex]
        );
        reserve.withdraw(IERC20(holding.token), holding.amount);
        _safeTransferWithFees(IERC20(holding.token), holding.amount, _msgSender(), _nftId);

        nestedRecords.deleteAsset(_nftId, _tokenIndex);

        emit NftUpdated(_nftId);
    }

    
    function increaseLockTimestamp(uint256 _nftId, uint256 _timestamp) external override onlyTokenOwner(_nftId) {
        nestedRecords.updateLockTimestamp(_nftId, _timestamp);
    }

    
    function unlockTokens(IERC20 _token) external override onlyOwner {
        _token.transfer(owner(), _token.balanceOf(address(this)));
    }

    
    
    
    
    
    
    
    
    
    
    function _submitInOrders(
        uint256 _nftId,
        IERC20 _inputToken,
        uint256 _inputTokenAmount,
        Order[] calldata _orders,
        bool _reserved,
        bool _fromReserve
    ) private returns (uint256 feesAmount, IERC20 tokenSold) {
        _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);
        uint256 amountSpent;
        for (uint256 i = 0; i < _orders.length; i++) {
            amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);
        }
        feesAmount = _calculateFees(_msgSender(), amountSpent);
        assert(amountSpent <= _inputTokenAmount - feesAmount); 

        
        if (_fromReserve) {
            _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount);
        }

        _handleUnderSpending(_inputTokenAmount - feesAmount, amountSpent, _inputToken);

        tokenSold = _inputToken;
    }

    
    
    
    
    
    
    
    
    
    
    function _submitOutOrders(
        uint256 _nftId,
        IERC20 _outputToken,
        uint256[] memory _inputTokenAmounts,
        Order[] calldata _orders,
        bool _reserved,
        bool _fromReserve
    ) private returns (uint256 feesAmount, uint256 amountBought) {
        uint256 _outputTokenInitialBalance = _outputToken.balanceOf(address(this));

        for (uint256 i = 0; i < _orders.length; i++) {
            IERC20 _inputToken = _transferInputTokens(
                _nftId,
                IERC20(_orders[i].token),
                _inputTokenAmounts[i],
                _fromReserve
            );

            
            uint256 amountSpent = _submitOrder(address(_inputToken), address(_outputToken), _nftId, _orders[i], false);
            assert(amountSpent <= _inputTokenAmounts[i]);

            if (_fromReserve) {
                _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmounts[i]);
            }

            
            if (_inputTokenAmounts[i] - amountSpent > 0) {
                _transferFeeWithRoyalty(_inputTokenAmounts[i] - amountSpent, _inputToken, _nftId);
            }
        }

        amountBought = _outputToken.balanceOf(address(this)) - _outputTokenInitialBalance;
        feesAmount = _calculateFees(_msgSender(), amountBought);

        if (_reserved) {
            _transferToReserveAndStore(address(_outputToken), amountBought - feesAmount, _nftId);
        }
    }

    
    
    
    
    
    
    
    function _submitOrder(
        address _inputToken,
        address _outputToken,
        uint256 _nftId,
        Order calldata _order,
        bool _reserved
    ) private returns (uint256 amountSpent) {
        address operator = requireAndGetAddress(_order.operator);
        (bool success, bytes memory data) = OperatorHelpers.callOperator(operator, _order.commit, _order.callData);
        require(success, ""NestedFactory::_submitOrder: Operator call failed"");

        (uint256[] memory amounts, address[] memory tokens) = OperatorHelpers.decodeDataAndRequire(
            data,
            _inputToken,
            _outputToken
        );

        if (_reserved) {
            _transferToReserveAndStore(_outputToken, amounts[0], _nftId);
        }
        amountSpent = amounts[1];
    }

    
    
    
    
    
    
    
    
    
    function _safeSubmitOrder(
        address _inputToken,
        address _outputToken,
        uint256 _amountToSpend,
        uint256 _nftId,
        Order calldata _order
    ) private {
        address operator = requireAndGetAddress(_order.operator);
        (bool success, bytes memory data) = OperatorHelpers.callOperator(operator, _order.commit, _order.callData);
        if (success) {
            (uint256[] memory amounts, address[] memory tokens) = OperatorHelpers.decodeDataAndRequire(
                data,
                _inputToken,
                _outputToken
            );
            _handleUnderSpending(_amountToSpend, amounts[1], IERC20(_inputToken));
        } else {
            _safeTransferWithFees(IERC20(_inputToken), _amountToSpend, _msgSender(), _nftId);
        }
    }

    
    
    
    
    
    function _transferToReserveAndStore(
        address _token,
        uint256 _amount,
        uint256 _nftId
    ) private {
        uint256 balanceReserveBefore = IERC20(_token).balanceOf(address(reserve));

        
        IERC20(_token).safeTransfer(address(reserve), _amount);

        uint256 balanceReserveAfter = IERC20(_token).balanceOf(address(reserve));

        nestedRecords.store(_nftId, _token, balanceReserveAfter - balanceReserveBefore, address(reserve));
    }

    
    
    
    
    
    
    
    function _transferInputTokens(
        uint256 _nftId,
        IERC20 _inputToken,
        uint256 _inputTokenAmount,
        bool _fromReserve
    ) private returns (IERC20 tokenUsed) {
        if (_fromReserve) {
            NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, address(_inputToken));
            require(holding.amount >= _inputTokenAmount, ""NestedFactory:_transferInputTokens: Insufficient amount"");

            
            reserve.withdraw(IERC20(holding.token), _inputTokenAmount);
        } else if (address(_inputToken) == ETH) {
            require(msg.value == _inputTokenAmount, ""NestedFactory::_transferInputTokens: Insufficient amount in"");
            weth.deposit{ value: msg.value }();
            _inputToken = IERC20(address(weth));
        } else {
            _inputToken.safeTransferFrom(_msgSender(), address(this), _inputTokenAmount);
        }
        tokenUsed = _inputToken;
    }

    
    
    
    
    
    
    function _handleUnderSpending(
        uint256 _amountToSpent,
        uint256 _amountSpent,
        IERC20 _token
    ) private {
        if (_amountToSpent - _amountSpent > 0) {
            ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));
            feeSplitter.sendFees(_token, _amountToSpent - _amountSpent);
        }
    }

    
    
    
    
    function _transferFeeWithRoyalty(
        uint256 _amount,
        IERC20 _token,
        uint256 _nftId
    ) private {
        address originalOwner = nestedAsset.originalOwner(_nftId);
        ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));
        if (originalOwner != address(0)) {
            feeSplitter.sendFeesWithRoyalties(originalOwner, _token, _amount);
        } else {
            feeSplitter.sendFees(_token, _amount);
        }
    }

    
    
    
    
    function _decreaseHoldingAmount(
        uint256 _nftId,
        address _inputToken,
        uint256 _amount
    ) private {
        NestedRecords.Holding memory holding = nestedRecords.getAssetHolding(_nftId, _inputToken);
        nestedRecords.updateHoldingAmount(_nftId, _inputToken, holding.amount - _amount);
    }

    
    
    
    
    
    function _safeTransferAndUnwrap(
        IERC20 _token,
        uint256 _amount,
        address _dest
    ) private {
        
        if (address(_token) == address(weth)) {
            IWETH(weth).withdraw(_amount);
            (bool success, ) = _dest.call{ value: _amount }("""");
            require(success, ""ETH_TRANSFER_ERROR"");
        } else {
            _token.safeTransfer(_dest, _amount);
        }
    }

    
    
    
    
    function _safeTransferWithFees(
        IERC20 _token,
        uint256 _amount,
        address _dest,
        uint256 _nftId
    ) private {
        uint256 feeAmount = _calculateFees(_dest, _amount);
        _transferFeeWithRoyalty(feeAmount, _token, _nftId);
        _token.safeTransfer(_dest, _amount - feeAmount);
    }

    
    
    
    
    function _calculateFees(address _user, uint256 _amount) private view returns (uint256) {
        return _amount / 100;
    }
}",4148.0,1,4,"Identifying vulnerabilities
Analyzing the Solidity smart contract for vulnerabilities, I’m noting reentrancy, access control, integer overflows, logic bugs, and unsafe external calls. Progressing through each potential issue methodically.
Mapping the contract
I’m noting the contract's imports and variables, focusing on SafeERC20 for ERC20 interactions. Constructor initializes key variables. Modifiers ensure owner and time-based access.
Spotting a logic issue
Identifying a bug in removeOperator where i > 0 blocks removing the operator at index 0. This needs refining to handle such cases smoothly.
Addressing operator array issues
Highlighting dynamic array gaps and their functional impacts. Also, focusing on setReserve and setFeeSplitter functions being owner-only operations.
Spotting potential flaws
I’m mapping out vulnerabilities in swapTokenForTokens and sellTokensToWallet, considering issues like orders deletion. Also evaluating withdraw for incorrect balance update.
Assessing internal functions
I’m digging into internal functions for token management and handling external calls. Evaluating potential reentrancy or state manipulation issues, especially post-operator calls.
Evaluating internal processes
OK, let me see. I’m thinking through internal functions for token transfers and fee handling, checking for reentrancy risks and state updates post-external calls, ensuring contract integrity.
Ensuring safety
Evaluating internal functions with external calls, I’m focusing on order submissions and fee transfers, ensuring state changes precede external interactions to mitigate reentrancy risks.
Examining operators array
I’m checking addOperator and removeOperator for operators array handling. Zero entries might cause issues. Accumulating operators could impact functionality but not security.
Evaluating risks
I'm pulling together potential vulnerabilities: rounding issues in fee calculations, centralization risks in token withdrawals, and potential flash loan attacks via ETH transfers. SafeERC20 is being properly utilized.
Evaluating access control
Checking setReserve and setFeeSplitter functions that only the owner can trigger. Also, scrutinizing internal functions assuming proper library implementations, and mitigating risks from a malicious operator.
Identifying key concerns
I’m pinpointing logic issues like a token withdrawal risk and operators array management. Also, noting ETH mishandling as a potential vulnerability. Progressing through each potential threat methodically.
Spotting risks
I'm identifying stuck ETH issues and allowances, assessing potential denial of service through operators array manipulation. Access control on operators seems clear, with only the owner able to manage them.
Spotting single vs. multiple issues
I’m highlighting risks like compromised owners adding harmful operators, unbounded loops with high gas costs, front-running vulnerabilities, and the need for assert usage in function checks.","Here are the vulnerabilities found in the given Solidity code:

1.  **Reentrancy Vulnerability**: The contract is vulnerable to reentrancy attacks due to the use of the `nonReentrant` modifier, which is not properly implemented. The modifier should be used on the function that calls the external contract, not on the function that receives the call. Additionally, the contract uses the `require` function, which can cause reentrancy issues if not used carefully.

2.  **Integer Overflow**: The contract uses the `require` function to check for integer overflows, but it does not account for the possibility of overflows in the `amountSpent` variable. This can cause the contract to behave unexpectedly if the `amountSpent` variable overflows.

3.  **Potential Denial of Service (DoS)**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

4.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

5.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

6.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

7.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

8.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

9.  **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

10. **Potential Front-Running**: The contract uses the `require` function to check if the `amountSpent` variable is within the expected range. However, if the `amountSpent` variable is set to a very large value, it can cause the contract to run out of gas, leading to a denial of service.

To fix these vulnerabilities, the contract should be reviewed and updated to use the `nonReentrant` modifier correctly, check for integer overflows, and prevent potential denial of service attacks. Additionally, the contract should be reviewed to ensure that it is not vulnerable to front-running attacks.

Note: The above response is based on a general analysis of the contract and may not cover all possible vulnerabilities. A thorough security audit should be performed to identify and fix any potential issues.````
Please let me know if you need further clarification or details.<|eot_id|>","### **[H-01] Copy your own portfolio to keep earning royalties**

**Report Description**:
In `NestedFactory.sol`, the `create()` function leads to `sendFeesWithRoyalties()` and `addShares()`. There are no checks preventing someone from copying their own portfolio and receiving royalty shares repeatedly. This could lead to an exploit where users continuously earn royalties by duplicating their portfolios.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue at all. The described vulnerability involves improper access control and potential abuse of royalty mechanisms, which is not covered in the response list.

---

### **[M-01] setReserve() can be front-run**

**Report Description**:
The `reserve` address variable in `NestedFactory.sol` remains uninitialized (equal to 0) until the `setReserve()` function is called by an owner. This could lead to incorrect token transfers or invalid comparisons (e.g., `nestedRecords.getAssetReserve(_nftId) == address(reserve)`) if operations occur before `reserve` is set. The immutability of `reserve` requires careful handling during initialization.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address front-running risks or initialization vulnerabilities. The issue is specific to the `reserve` variable and its immutability, which is not covered in the response list.

---

### **[M-06] NestedFactory.sol#_submitInOrders() Wrong implementation cause users to be overcharged**

**Report Description**:
In `_submitInOrders`, the actual `amountSpent + feesAmount` can be lower than `_inputTokenAmount`. The unspent amount should be returned to the user, but the current implementation takes it as part of the fee. This results in users being overcharged.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The problem involves incorrect fee calculations and improper handling of unspent amounts, which is not covered in the response list.

---

### **[M-07] Ensure on-chain that cache is synced**

**Report Description**:
Core operations like `NestedFactory.create()` and `NestedFactory.swapTokenForTokens()` depend on the assumption that the cache is synced before execution. However, there is no on-chain mechanism to ensure this, which could lead to inconsistencies or vulnerabilities if the cache is out of sync.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address cache synchronization issues. This vulnerability involves state management and assumptions about cache consistency, which is not covered in the response list.

---

### **[M-08] Passing multiple ETH deposits in orders array will use the same `msg.value` many times**

**Report Description**:
A malicious user can exploit the system by passing multiple ETH deposits in the `Order[] calldata _orders` array. Since `msg.value` persists over calls, the same `msg.value` is used for each deposit, resulting in multiple deposits that sum up to a much larger accounted value than actually deposited. This could allow the user to drain the contract's ETH holdings.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The vulnerability involves improper handling of `msg.value` and potential draining of contract funds, which is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-01] Copy your own portfolio to keep earning royalties**
- **[M-01] setReserve() can be front-run**
- **[M-06] NestedFactory.sol#_submitInOrders() Wrong implementation cause users to be overcharged**
- **[M-07] Ensure on-chain that cache is synced**
- **[M-08] Passing multiple ETH deposits in orders array will use the same `msg.value` many times**

---

### **Conclusion**
The response list does not adequately address the issues reported in the `issue` list. Most of the reported vulnerabilities are either completely missed or misaligned with the responses provided. A thorough security audit is necessary to identify and address these specific vulnerabilities.",0,1,4,15,"```
None.
```",0.0
FeeSplitter.sol,"// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity 0.8.9;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/access/Ownable.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import ""./interfaces/external/IWETH.sol"";

/// @title Manage the fees between shareholders
/// @notice Receives fees collected by the NestedFactory, and splits the income among
/// shareholders (the NFT owners, Nested treasury and a NST buybacker contract).
contract FeeSplitter is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    /// @dev Emitted when a payment is released
    /// @param to The address receiving the payment
    /// @param token The token transfered
    /// @param amount The amount paid
    event PaymentReleased(address to, address token, uint256 amount);

    /// @dev Emitted when a payment is released
    /// @param from The address sending the tokens
    /// @param token The token received
    /// @param amount The amount received
    event PaymentReceived(address from, address token, uint256 amount);

    /// @dev Represent a shareholder
    /// @param account Shareholders address that can receive income
    /// @param weight Determines share allocation
    struct Shareholder {
        address account;
        uint256 weight;
    }

    /// @dev Registers shares and amount release for a specific token or ETH
    struct TokenRecords {
        uint256 totalShares;
        uint256 totalReleased;
        mapping(address => uint256) shares;
        mapping(address => uint256) released;
    }

    /// @dev Map of tokens with the tokenRecords
    mapping(address => TokenRecords) private tokenRecords;

    /// @dev All the shareholders (array)
    Shareholder[] private shareholders;

    /// @dev Royalties part weights when applicable
    uint256 public royaltiesWeight;

    uint256 public totalWeights;

    address public immutable weth;

    constructor(
        address[] memory _accounts,
        uint256[] memory _weights,
        uint256 _royaltiesWeight,
        address _weth
    ) {
        // Initial shareholders addresses and weights
        setShareholders(_accounts, _weights);
        setRoyaltiesWeight(_royaltiesWeight);
        weth = _weth;
    }

    /// @dev Receive ether after a WETH withdraw call
    receive() external payable {
        require(_msgSender() == weth, ""FeeSplitter: ETH_SENDER_NOT_WETH"");
    }

    /// @notice Returns the amount due to an account. Call releaseToken to withdraw the amount.
    /// @param _account Account address to check the amount due for
    /// @param _token ERC20 payment token address (or ETH_ADDR)
    /// @return The total amount due for the requested currency
    function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {
        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];
        uint256 totalReceived = _tokenRecords.totalReleased;
        if (_tokenRecords.totalShares == 0) return 0;
        else totalReceived += _token.balanceOf(address(this));
        uint256 amountDue = (totalReceived * _tokenRecords.shares[_account]) /
            _tokenRecords.totalShares -
            _tokenRecords.released[_account];
        return amountDue;
    }

    /// @notice Sets the weight assigned to the royalties part for the fee
    /// @param _weight The new royalties weight
    function setRoyaltiesWeight(uint256 _weight) public onlyOwner {
        totalWeights -= royaltiesWeight;
        royaltiesWeight = _weight;
        totalWeights += _weight;
    }

    /// @notice Sets a new list of shareholders
    /// @param _accounts Shareholders accounts list
    /// @param _weights Weight for each shareholder. Determines part of the payment allocated to them
    function setShareholders(address[] memory _accounts, uint256[] memory _weights) public onlyOwner {
        delete shareholders;
        require(_accounts.length > 0 && _accounts.length == _weights.length, ""FeeSplitter: ARRAY_LENGTHS_ERR"");
        totalWeights = royaltiesWeight;

        for (uint256 i = 0; i < _accounts.length; i++) {
            _addShareholder(_accounts[i], _weights[i]);
        }
    }

    /// @notice Triggers a transfer to `msg.sender` of the amount of token they are owed, according to
    /// the amount of shares they own and their previous withdrawals.
    /// @param _token Payment token address
    function releaseToken(IERC20 _token) public nonReentrant {
        uint256 amount = _releaseToken(_msgSender(), _token);
        _token.safeTransfer(_msgSender(), amount);
        emit PaymentReleased(_msgSender(), address(_token), amount);
    }

    /// @notice Call releaseToken() for multiple tokens
    /// @param _tokens ERC20 tokens to release
    function releaseTokens(IERC20[] memory _tokens) external {
        for (uint256 i = 0; i < _tokens.length; i++) {
            releaseToken(_tokens[i]);
        }
    }

    /// @dev Triggers a transfer to `msg.sender` of the amount of Ether they are owed, according to
    /// the amount of shares they own and their previous withdrawals.
    function releaseETH() external nonReentrant {
        uint256 amount = _releaseToken(_msgSender(), IERC20(weth));
        IWETH(weth).withdraw(amount);
        (bool success, ) = _msgSender().call{ value: amount }("""");
        require(success, ""FeeSplitter: ETH_TRANFER_ERROR"");
        emit PaymentReleased(_msgSender(), ETH, amount);
    }

    /// @notice Sends a fee to this contract for splitting, as an ERC20 token. No royalties are expected.
    /// @param _token Currency for the fee as an ERC20 token
    /// @param _amount Amount of token as fee to be claimed by this contract
    function sendFees(IERC20 _token, uint256 _amount) external nonReentrant {
        uint256 weights = totalWeights - royaltiesWeight;
        _sendFees(_token, _amount, weights);
    }

    /// @notice Sends a fee to this contract for splitting, as an ERC20 token
    /// @param _royaltiesTarget The account that can claim royalties
    /// @param _token Currency for the fee as an ERC20 token
    /// @param _amount Amount of token as fee to be claimed by this contract
    function sendFeesWithRoyalties(
        address _royaltiesTarget,
        IERC20 _token,
        uint256 _amount
    ) external nonReentrant {
        require(_royaltiesTarget != address(0), ""FeeSplitter: INVALID_ROYALTIES_TARGET_ADDRESS"");

        _sendFees(_token, _amount, totalWeights);
        _addShares(_royaltiesTarget, _computeShareCount(_amount, royaltiesWeight, totalWeights), address(_token));
    }

    /// @notice Updates weight for a shareholder
    /// @param _accountIndex Account to change the weight of
    /// @param _weight The new weight
    function updateShareholder(uint256 _accountIndex, uint256 _weight) external onlyOwner {
        require(_accountIndex + 1 <= shareholders.length, ""FeeSplitter: INVALID_ACCOUNT_INDEX"");
        uint256 _totalWeights = totalWeights;
        _totalWeights -= shareholders[_accountIndex].weight;
        shareholders[_accountIndex].weight = _weight;
        _totalWeights += _weight;
        require(_totalWeights > 0, ""FeeSplitter: TOTAL_WEIGHTS_ZERO"");
        totalWeights = _totalWeights;
    }

    /// @notice Getter for the total shares held by shareholders.
    /// @param _token Payment token address, use ETH_ADDR for ETH
    /// @return The total shares count
    function totalShares(address _token) external view returns (uint256) {
        return tokenRecords[_token].totalShares;
    }

    /// @notice Getter for the total amount of token already released.
    /// @param _token Payment token address, use ETH_ADDR for ETH
    /// @return The total amount release to shareholders
    function totalReleased(address _token) external view returns (uint256) {
        return tokenRecords[_token].totalReleased;
    }

    /// @notice Getter for the amount of shares held by an account.
    /// @param _account Account the shares belong to
    /// @param _token Payment token address, use ETH_ADDR for ETH
    /// @return The shares owned by the account
    function shares(address _account, address _token) external view returns (uint256) {
        return tokenRecords[_token].shares[_account];
    }

    /// @notice Getter for the amount of Ether already released to a shareholders.
    /// @param _account The target account for this request
    /// @param _token Payment token address, use ETH_ADDR for ETH
    /// @return The amount already released to this account
    function released(address _account, address _token) external view returns (uint256) {
        return tokenRecords[_token].released[_account];
    }

    /// @notice Finds a shareholder and return its index
    /// @param _account Account to find
    /// @return The shareholder index in the storage array
    function findShareholder(address _account) external view returns (uint256) {
        for (uint256 i = 0; i < shareholders.length; i++) {
            if (shareholders[i].account == _account) return i;
        }
        revert(""FeeSplitter: NOT_FOUND"");
    }

    /// @dev Transfers a fee to this contract
    /// @param _token Currency for the fee
    /// @param _amount Amount of token as fee
    /// @param _totalWeights Total weights to determine the share count to allocate
    function _sendFees(
        IERC20 _token,
        uint256 _amount,
        uint256 _totalWeights
    ) private {
        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amount);

        for (uint256 i = 0; i < shareholders.length; i++) {
            _addShares(
                shareholders[i].account,
                _computeShareCount(_amount, shareholders[i].weight, _totalWeights),
                address(_token)
            );
        }
        emit PaymentReceived(_msgSender(), address(_token), _amount);
    }

    /// @dev Increase the shares of a shareholder
    /// @param _account The shareholder address
    /// @param _shares The shares of the holder
    /// @param _token The updated token
    function _addShares(
        address _account,
        uint256 _shares,
        address _token
    ) private {
        TokenRecords storage _tokenRecords = tokenRecords[_token];
        _tokenRecords.shares[_account] += _shares;
        _tokenRecords.totalShares = _tokenRecords.totalShares + _shares;
    }

    function _releaseToken(address _account, IERC20 _token) private returns (uint256) {
        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];
        uint256 amountToRelease = getAmountDue(_account, _token);
        require(amountToRelease != 0, ""FeeSplitter: NO_PAYMENT_DUE"");

        _tokenRecords.released[_account] = _tokenRecords.released[_account] + amountToRelease;
        _tokenRecords.totalReleased = _tokenRecords.totalReleased + amountToRelease;

        return amountToRelease;
    }

    function _addShareholder(address _account, uint256 _weight) private {
        require(_weight > 0, ""FeeSplitter: ZERO_WEIGHT"");
        shareholders.push(Shareholder(_account, _weight));
        totalWeights += _weight;
    }

    function _computeShareCount(
        uint256 _amount,
        uint256 _weight,
        uint256 _totalWeights
    ) private pure returns (uint256) {
        return (_amount * _weight) / _totalWeights;
    }
}",2615.0,277.0,"[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice.
It is possible for duplicate shareholders to be added. These shareholders will get more than intended when `_sendFee()` is called.
  [M-04] FeeSplitter: Unbounded number of shareholders can cause DOS
There is no limit to the number of shareholders. It is therefore possible to set a large number of shareholders such that `_sendFees()` will run out of gas when adding shares to each shareholder. This will cause denial of service to all NestedFactory functions, especially the ones that will remove funds like `withdraw()` and `destroy()`.",2.0,"pragma solidity 0.8.9;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/access/Ownable.sol"";
import ""@openzeppelin/contracts/security/ReentrancyGuard.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

import ""./interfaces/external/IWETH.sol"";




contract FeeSplitter is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    
    
    
    
    event PaymentReleased(address to, address token, uint256 amount);

    
    
    
    
    event PaymentReceived(address from, address token, uint256 amount);

    
    
    
    struct Shareholder {
        address account;
        uint256 weight;
    }

    
    struct TokenRecords {
        uint256 totalShares;
        uint256 totalReleased;
        mapping(address => uint256) shares;
        mapping(address => uint256) released;
    }

    
    mapping(address => TokenRecords) private tokenRecords;

    
    Shareholder[] private shareholders;

    
    uint256 public royaltiesWeight;

    uint256 public totalWeights;

    address public immutable weth;

    constructor(
        address[] memory _accounts,
        uint256[] memory _weights,
        uint256 _royaltiesWeight,
        address _weth
    ) {
        
        setShareholders(_accounts, _weights);
        setRoyaltiesWeight(_royaltiesWeight);
        weth = _weth;
    }

    
    receive() external payable {
        require(_msgSender() == weth, ""FeeSplitter: ETH_SENDER_NOT_WETH"");
    }

    
    
    
    
    function getAmountDue(address _account, IERC20 _token) public view returns (uint256) {
        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];
        uint256 totalReceived = _tokenRecords.totalReleased;
        if (_tokenRecords.totalShares == 0) return 0;
        else totalReceived += _token.balanceOf(address(this));
        uint256 amountDue = (totalReceived * _tokenRecords.shares[_account]) /
            _tokenRecords.totalShares -
            _tokenRecords.released[_account];
        return amountDue;
    }

    
    
    function setRoyaltiesWeight(uint256 _weight) public onlyOwner {
        totalWeights -= royaltiesWeight;
        royaltiesWeight = _weight;
        totalWeights += _weight;
    }

    
    
    
    function setShareholders(address[] memory _accounts, uint256[] memory _weights) public onlyOwner {
        delete shareholders;
        require(_accounts.length > 0 && _accounts.length == _weights.length, ""FeeSplitter: ARRAY_LENGTHS_ERR"");
        totalWeights = royaltiesWeight;

        for (uint256 i = 0; i < _accounts.length; i++) {
            _addShareholder(_accounts[i], _weights[i]);
        }
    }

    
    
    
    function releaseToken(IERC20 _token) public nonReentrant {
        uint256 amount = _releaseToken(_msgSender(), _token);
        _token.safeTransfer(_msgSender(), amount);
        emit PaymentReleased(_msgSender(), address(_token), amount);
    }

    
    
    function releaseTokens(IERC20[] memory _tokens) external {
        for (uint256 i = 0; i < _tokens.length; i++) {
            releaseToken(_tokens[i]);
        }
    }

    
    
    function releaseETH() external nonReentrant {
        uint256 amount = _releaseToken(_msgSender(), IERC20(weth));
        IWETH(weth).withdraw(amount);
        (bool success, ) = _msgSender().call{ value: amount }("""");
        require(success, ""FeeSplitter: ETH_TRANFER_ERROR"");
        emit PaymentReleased(_msgSender(), ETH, amount);
    }

    
    
    
    function sendFees(IERC20 _token, uint256 _amount) external nonReentrant {
        uint256 weights = totalWeights - royaltiesWeight;
        _sendFees(_token, _amount, weights);
    }

    
    
    
    
    function sendFeesWithRoyalties(
        address _royaltiesTarget,
        IERC20 _token,
        uint256 _amount
    ) external nonReentrant {
        require(_royaltiesTarget != address(0), ""FeeSplitter: INVALID_ROYALTIES_TARGET_ADDRESS"");

        _sendFees(_token, _amount, totalWeights);
        _addShares(_royaltiesTarget, _computeShareCount(_amount, royaltiesWeight, totalWeights), address(_token));
    }

    
    
    
    function updateShareholder(uint256 _accountIndex, uint256 _weight) external onlyOwner {
        require(_accountIndex + 1 <= shareholders.length, ""FeeSplitter: INVALID_ACCOUNT_INDEX"");
        uint256 _totalWeights = totalWeights;
        _totalWeights -= shareholders[_accountIndex].weight;
        shareholders[_accountIndex].weight = _weight;
        _totalWeights += _weight;
        require(_totalWeights > 0, ""FeeSplitter: TOTAL_WEIGHTS_ZERO"");
        totalWeights = _totalWeights;
    }

    
    
    
    function totalShares(address _token) external view returns (uint256) {
        return tokenRecords[_token].totalShares;
    }

    
    
    
    function totalReleased(address _token) external view returns (uint256) {
        return tokenRecords[_token].totalReleased;
    }

    
    
    
    
    function shares(address _account, address _token) external view returns (uint256) {
        return tokenRecords[_token].shares[_account];
    }

    
    
    
    
    function released(address _account, address _token) external view returns (uint256) {
        return tokenRecords[_token].released[_account];
    }

    
    
    
    function findShareholder(address _account) external view returns (uint256) {
        for (uint256 i = 0; i < shareholders.length; i++) {
            if (shareholders[i].account == _account) return i;
        }
        revert(""FeeSplitter: NOT_FOUND"");
    }

    
    
    
    
    function _sendFees(
        IERC20 _token,
        uint256 _amount,
        uint256 _totalWeights
    ) private {
        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amount);

        for (uint256 i = 0; i < shareholders.length; i++) {
            _addShares(
                shareholders[i].account,
                _computeShareCount(_amount, shareholders[i].weight, _totalWeights),
                address(_token)
            );
        }
        emit PaymentReceived(_msgSender(), address(_token), _amount);
    }

    
    
    
    
    function _addShares(
        address _account,
        uint256 _shares,
        address _token
    ) private {
        TokenRecords storage _tokenRecords = tokenRecords[_token];
        _tokenRecords.shares[_account] += _shares;
        _tokenRecords.totalShares = _tokenRecords.totalShares + _shares;
    }

    function _releaseToken(address _account, IERC20 _token) private returns (uint256) {
        TokenRecords storage _tokenRecords = tokenRecords[address(_token)];
        uint256 amountToRelease = getAmountDue(_account, _token);
        require(amountToRelease != 0, ""FeeSplitter: NO_PAYMENT_DUE"");

        _tokenRecords.released[_account] = _tokenRecords.released[_account] + amountToRelease;
        _tokenRecords.totalReleased = _tokenRecords.totalReleased + amountToRelease;

        return amountToRelease;
    }

    function _addShareholder(address _account, uint256 _weight) private {
        require(_weight > 0, ""FeeSplitter: ZERO_WEIGHT"");
        shareholders.push(Shareholder(_account, _weight));
        totalWeights += _weight;
    }

    function _computeShareCount(
        uint256 _amount,
        uint256 _weight,
        uint256 _totalWeights
    ) private pure returns (uint256) {
        return (_amount * _weight) / _totalWeights;
    }
}",1677.0,0,2,"Identifying vulnerability areas
I'm analyzing the FeeSplitter smart contract, which uses OpenZeppelin libraries. Notable components include variables, events, structs, mappings, and addresses like ETH and weth, raising potential issues like reentrancy or access control risks.
Setting up and managing
The constructor initializes accounts and weights, sets weth, and configures shareholders and royalties. Functions ensure secure releases of tokens or ETH and update shareholders, maintaining access control and integrity.
Spotting potential risks
I observed that the nonReentrant modifier secures transfers. Access control could allow unauthorized fee functions. Arithmetic overflow is mitigated by Solidity's 0.8.9 checks.
Assessing smart contract safety
I'm thinking through totalWeights adjustments and shareholder management. The receive() function's restrictions and Solidity's safety features offer a level of assurance.
Addressing token flow
Now I'm mapping out potential token manipulation in sendFees and getAmountDue. Direct contract deposits could skew the balance and shares, unlike safeTransferFrom which maintains consistency.
Navigating token flow
I'm thinking through direct token transfers potentially skewing balance and shares, while releaseETH operates strictly within WETH and receive() constraints, effectively limiting access to authorized channels.
Managing token transfers
Considering token transfer reversion and the owner's control over royaltiesWeight and totalWeights. Solidity 0.8+ ensures arithmetic safety to avoid overflows or misallocated shares.
Mapping functions and transparency
I'm considering _sendFees' fee allocation, observing the absence of shareholder update events, and noting the potential issue of duplicate addresses with different weights in _addShareholder.
Managing shareholder updates
I’m mapping out the implications of allowing duplicate shareholders and addressing potential gas limit problems due to multiple storage writes in _sendFees, while noting the absence of direct security risks.
Evaluating potential threats
Considering ownership manipulation and WETH address validation in constructor. The receive() function ensures secure ETH channel, focusing on thorough verification.
Evaluating function alignment
OK, let's think it through: findShareholder iterates shareholders, but it's a view function with no security implications. Meta-transactions are managed effectively through _msgSender() in release functions.
Evaluating contract security
Analyzing share handling and owner control highlights potential discrepancies. Address duplication and gas limit issues in shareholder functions emerge as critical vulnerabilities.
Pinpointing vulnerabilities
I’m highlighting issues like direct token allocations, duplicate shareholders, and centralized control. Examining gas limits, integer overflows, and access control in shareholder functions.
Addressing key vulnerabilities
I'm examining direct token transfers, lack of shareholder checks, and centralized control. Highlighting potential gas limit issues due to a large number of shareholders.
Navigating smart contract intricacies
OK, let me see. I'm considering token standard deviations, reentrancy safeguards, zero address checks, and missing front-running protection to ensure the contract's robustness and security.
Addressing potential risks
OK, let me see: the owner's ability to add zero addresses as shareholders could lead to tokens being burned. Ensuring WETH address verification as a standard is crucial to prevent misuse.
Evaluating smart contract flaws
Ensuring accurate token allocation is crucial, especially against reentrancy attacks. Zero addresses in shareholders and owner control increasing weight are significant risks.
Spotting critical issues
I'm focusing on zero address checks for shareholders and the prevention of duplicate shareholder entries. These vulnerabilities could lead to unintended token allocations or burning.
Addressing risks
OK, I’m looking at centralized control, WETH address validation, direct token transfers, and gas limit implications. These factors can significantly impact token allocation and contract security.","1. The contract has a vulnerability in the `receive()` function. It does not check if the sender is the WETH contract before accepting the ETH payment. This can lead to a situation where an attacker can drain the contract's balance by sending ETH to the contract.

2. The contract has a vulnerability in the `sendFeesWithRoyalties()` function. It does not check if the royalties target address is the same as the contract's owner before adding shares to it. This can lead to a situation where an attacker can steal the royalties by setting the royalties target address to a different address.

3. The contract has a vulnerability in the `updateShareholder()` function. It does not check if the account index is within the bounds of the shareholders array before updating the shareholder's weight. This can lead to a situation where an attacker can update the weight of a non-existent shareholder.

4. The contract has a vulnerability in the `findShareholder()` function. It does not check if the shareholder exists before returning its index. This can lead to a situation where the function returns an incorrect index or reverts with an error message.

5. The contract has a vulnerability in the `_sendFees()` function. It does not check if the token is the same as the token being transferred before transferring the token. This can lead to a situation where an attacker can steal the token by transferring a different token.

6. The contract has a vulnerability in the `_addShares()` function. It does not check if the shares are zero before adding them to the shareholder's shares. This can lead to a situation where the shareholder's shares are not updated correctly.

7. The contract has a vulnerability in the `_releaseToken()` function. It does not check if the amount to release is zero before releasing the token. This can lead to a situation where the token is not released correctly.

8. The contract has a vulnerability in the `_addShareholder()` function. It does not check if the weight is zero before adding the shareholder to the shareholders array. This can lead to a situation where the shareholder's weight is not updated correctly.

9. The contract has a vulnerability in the `_computeShareCount()` function. It does not check if the total weights are zero before computing the share count. This can lead to a situation where the share count is not computed correctly.

10. The contract has a vulnerability in the `setShareholders()` function. It does not check if the accounts array and the weights array have the same length before setting the shareholders. This can lead to a situation where the shareholders are not set correctly.

11. The contract has a vulnerability in the `releaseTokens()` function. It does not check if the tokens array is empty before releasing the tokens. This can lead to a situation where the tokens are not released correctly.

12. The contract has a vulnerability in the `releaseETH()` function. It does not check if the amount to release is zero before releasing the ETH. This can lead to a situation where the ETH is not released correctly.

13. The contract has a vulnerability in the `sendFees()` function. It does not check if the token is the same as the token being transferred before transferring the token. This can lead to a situation where an attacker can steal the token by transferring a different token.

14. The contract has a vulnerability in the `setRoyaltiesWeight()` function. It does not check if the royalties weight is zero before setting it. This can lead to a situation where the royalties weight is not updated correctly.

15. The contract has a vulnerability in the `totalShares()` function. It does not check if the token is the same as the token being queried before returning the total shares. This can lead to a situation where the total shares are not returned correctly.

16. The contract has a vulnerability in the `totalReleased()` function. It does not check if the token is the same as the token being queried before returning the total released. This can lead to a situation where the total released is not returned correctly.

17. The contract has a vulnerability in the `shares()` function. It does not check if the token is the same as the token being queried before returning the shares. This can lead to a situation where the shares are not returned correctly.

18. The contract has a vulnerability in the `released()` function. It does not check if the token is the same as the token being queried before returning the released amount. This can lead to a situation where the released amount is not returned correctly.

19. The contract has a vulnerability in the `findShareholder()` function. It does not check if the shareholder exists before returning its index. This can lead to a situation where the function returns an incorrect index or reverts with an error message.

20. The contract has a vulnerability in the `updateShareholder()` function. It does not check if the account index is within the bounds of the shareholders array before updating the","### **[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice**

**Report Description**:
The `FeeSplitter` contract lacks a sanity check to prevent duplicate shareholders from being added. This oversight allows the same shareholder to be added multiple times, leading to unintended consequences when `_sendFee()` is called. Specifically, duplicate shareholders will receive more than their intended share of fees, potentially causing financial discrepancies and unfair distribution of funds.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of duplicate shareholders being added. None of the responses mention the lack of a sanity check to prevent duplicate entries in the shareholders array, which is the core issue described in the report.

---

### **[M-04] FeeSplitter: Unbounded number of shareholders can cause DOS**

**Report Description**:
The `FeeSplitter` contract does not impose a limit on the number of shareholders. This design flaw allows for the addition of an unbounded number of shareholders, which can lead to a denial of service (DOS) when `_sendFees()` is called. Specifically, if a large number of shareholders are added, the function may run out of gas while iterating through the list to distribute fees. This DOS condition can affect all `NestedFactory` functions, particularly those that remove funds, such as `withdraw()` and `destroy()`.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of an unbounded number of shareholders causing a DOS. None of the responses mention the lack of a limit on the number of shareholders or the potential gas exhaustion in `_sendFees()`, which are the core issues described in the report.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice**
- **[M-04] FeeSplitter: Unbounded number of shareholders can cause DOS**

---

### **Conclusion**
The `response_list` does not adequately address the issues raised in the `issue` report. Specifically, the vulnerabilities related to duplicate shareholders and the unbounded number of shareholders causing a DOS are not covered. This indicates a significant gap in the response list's coverage of the reported issues.",1,1,0,10,"```
None.
```",0.0
,,,,,,,,1,6,,,,1,2,4,25,,
