nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
CompositeMultiOracle.sol,"// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.1;

import ""../../utils/access/AccessControl.sol"";
import ""../../interfaces/vault/IOracle.sol"";
import ""../../math/CastBytes32Bytes6.sol"";


/**
 * @title CompositeMultiOracle
 */
contract CompositeMultiOracle is IOracle, AccessControl {
    using CastBytes32Bytes6 for bytes32;

    uint8 public constant override decimals = 18;   // All prices are converted to 18 decimals

    event SourceSet(bytes6 indexed baseId, bytes6 indexed quoteId, address indexed source);
    event PathSet(bytes6 indexed baseId, bytes6 indexed quoteId, bytes6[] indexed path);

    struct Source {
        address source;
        uint8 decimals;
    }

    mapping(bytes6 => mapping(bytes6 => Source)) public sources;
    mapping(bytes6 => mapping(bytes6 => bytes6[])) public paths;

    /**
     * @notice Set or reset an oracle source
     */
    function setSource(bytes6 base, bytes6 quote, address source) external auth {
        _setSource(base, quote, source);
    }

    /**
     * @notice Set or reset a number of oracle sources
     */
    function setSources(bytes6[] memory bases, bytes6[] memory quotes, address[] memory sources_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == sources_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setSource(bases[i], quotes[i], sources_[i]);
        }
    }

    /**
     * @notice Set or reset an price path
     */
    function setPath(bytes6 base, bytes6 quote, bytes6[] memory path) external auth {
        _setPath(base, quote, path);
    }

    /**
     * @notice Set or reset a number of price paths
     */
    function setPaths(bytes6[] memory bases, bytes6[] memory quotes, bytes6[][] memory paths_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == paths_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setPath(bases[i], quotes[i], paths_[i]);
        }
    }

    /**
     * @notice Retrieve the value of the amount at the latest oracle price.
     * @return value
     */
    function peek(bytes32 base, bytes32 quote, uint256 amount)
        external view virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price = 1e18;
        bytes6 base_ = base.b6();
        bytes6 quote_ = quote.b6();
        bytes6[] memory path = paths[base_][quote_];
        for (uint256 p = 0; p < path.length; p++) {
            (price, updateTime) = _peek(base_, path[p], price, updateTime);
            base_ = path[p];
        }
        (price, updateTime) = _peek(base_, quote_, price, updateTime);
        value = price * amount / 1e18;
    }

    /**
     * @notice Retrieve the value of the amount at the latest oracle price.. Same as `peek` for this oracle.
     * @return value
     */
    function get(bytes32 base, bytes32 quote, uint256 amount)
        external virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price = 1e18;
        bytes6 base_ = base.b6();
        bytes6 quote_ = quote.b6();
        bytes6[] memory path = paths[base_][quote_];
        for (uint256 p = 0; p < path.length; p++) {
            (price, updateTime) = _get(base_, path[p], price, updateTime);
            base_ = path[p];
        }
        (price, updateTime) = _get(base_, quote_, price, updateTime);
        value = price * amount / 1e18;
    }

    function _peek(bytes6 base, bytes6 quote, uint256 priceIn, uint256 updateTimeIn)
        private view returns (uint priceOut, uint updateTimeOut)
    {
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");
        (priceOut, updateTimeOut) = IOracle(source.source).peek(base, quote, 10 ** source.decimals);   // Get price for one unit
        priceOut = priceIn * priceOut / (10 ** source.decimals);                                       // Fixed point according to decimals
        updateTimeOut = (updateTimeOut < updateTimeIn) ? updateTimeOut : updateTimeIn;                 // Take the oldest update time
    }

    function _get(bytes6 base, bytes6 quote, uint256 priceIn, uint256 updateTimeIn)
        private returns (uint priceOut, uint updateTimeOut)
    {
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");
        (priceOut, updateTimeOut) = IOracle(source.source).get(base, quote, 10 ** source.decimals);    // Get price for one unit
        priceOut = priceIn * priceOut / (10 ** source.decimals);                                       // Fixed point according to decimals
        updateTimeOut = (updateTimeOut < updateTimeIn) ? updateTimeOut : updateTimeIn;                 // Take the oldest update time
    }

    function _setSource(bytes6 base, bytes6 quote, address source) internal {
        uint8 decimals_ = IOracle(source).decimals();
        require (decimals_ <= 18, ""Unsupported decimals"");
        sources[base][quote] = Source({
            source: source,
            decimals: decimals_
        });
        emit SourceSet(base, quote, source);
    }

    function _setPath(bytes6 base, bytes6 quote, bytes6[] memory path) internal {
        bytes6 base_ = base;
        for (uint256 p = 0; p < path.length; p++) {
            require (sources[base_][path[p]].source != address(0), ""Source not found"");
            base_ = path[p];
        }
        paths[base][quote] = path;
        emit PathSet(base, quote, path);
    }
}",1345.0,151.0,"[H-01] CompositeMultiOracle returns wrong decimals for prices?
The `CompositeMultiOracle.peek/get` functions seem to return wrong prices. It's unclear what decimals `source.decimals` refers to in this case. Does it refer to `source.source` token decimals?
It chains the price arguments through _peek function calls and a single price is computed as:
``` (priceOut, updateTimeOut) = IOracle(source.source).peek(base, quote, 10 ** source.decimals);   // Get price for one unit
// @audit shouldn't this divide by 10 ** IOracle(source.source).decimals() instead?
priceOut = priceIn * priceOut / (10 ** source.decimals);
```
Assume all oracles use 18 decimals (`oracle.decimals()` returns 18) and source.decimals refers to the token decimals of source.source.",1.0,"pragma solidity 0.8.1;

import ""../../utils/access/AccessControl.sol"";
import ""../../interfaces/vault/IOracle.sol"";
import ""../../math/CastBytes32Bytes6.sol"";



contract CompositeMultiOracle is IOracle, AccessControl {
    using CastBytes32Bytes6 for bytes32;

    uint8 public constant override decimals = 18;   

    event SourceSet(bytes6 indexed baseId, bytes6 indexed quoteId, address indexed source);
    event PathSet(bytes6 indexed baseId, bytes6 indexed quoteId, bytes6[] indexed path);

    struct Source {
        address source;
        uint8 decimals;
    }

    mapping(bytes6 => mapping(bytes6 => Source)) public sources;
    mapping(bytes6 => mapping(bytes6 => bytes6[])) public paths;

    
    function setSource(bytes6 base, bytes6 quote, address source) external auth {
        _setSource(base, quote, source);
    }

    
    function setSources(bytes6[] memory bases, bytes6[] memory quotes, address[] memory sources_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == sources_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setSource(bases[i], quotes[i], sources_[i]);
        }
    }

    
    function setPath(bytes6 base, bytes6 quote, bytes6[] memory path) external auth {
        _setPath(base, quote, path);
    }

    
    function setPaths(bytes6[] memory bases, bytes6[] memory quotes, bytes6[][] memory paths_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == paths_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setPath(bases[i], quotes[i], paths_[i]);
        }
    }

    
    function peek(bytes32 base, bytes32 quote, uint256 amount)
        external view virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price = 1e18;
        bytes6 base_ = base.b6();
        bytes6 quote_ = quote.b6();
        bytes6[] memory path = paths[base_][quote_];
        for (uint256 p = 0; p < path.length; p++) {
            (price, updateTime) = _peek(base_, path[p], price, updateTime);
            base_ = path[p];
        }
        (price, updateTime) = _peek(base_, quote_, price, updateTime);
        value = price * amount / 1e18;
    }

    
    function get(bytes32 base, bytes32 quote, uint256 amount)
        external virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price = 1e18;
        bytes6 base_ = base.b6();
        bytes6 quote_ = quote.b6();
        bytes6[] memory path = paths[base_][quote_];
        for (uint256 p = 0; p < path.length; p++) {
            (price, updateTime) = _get(base_, path[p], price, updateTime);
            base_ = path[p];
        }
        (price, updateTime) = _get(base_, quote_, price, updateTime);
        value = price * amount / 1e18;
    }

    function _peek(bytes6 base, bytes6 quote, uint256 priceIn, uint256 updateTimeIn)
        private view returns (uint priceOut, uint updateTimeOut)
    {
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");
        (priceOut, updateTimeOut) = IOracle(source.source).peek(base, quote, 10 ** source.decimals);   
        priceOut = priceIn * priceOut / (10 ** source.decimals);                                       
        updateTimeOut = (updateTimeOut < updateTimeIn) ? updateTimeOut : updateTimeIn;                 
    }

    function _get(bytes6 base, bytes6 quote, uint256 priceIn, uint256 updateTimeIn)
        private returns (uint priceOut, uint updateTimeOut)
    {
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");
        (priceOut, updateTimeOut) = IOracle(source.source).get(base, quote, 10 ** source.decimals);    
        priceOut = priceIn * priceOut / (10 ** source.decimals);                                       
        updateTimeOut = (updateTimeOut < updateTimeIn) ? updateTimeOut : updateTimeIn;                 
    }

    function _setSource(bytes6 base, bytes6 quote, address source) internal {
        uint8 decimals_ = IOracle(source).decimals();
        require (decimals_ <= 18, ""Unsupported decimals"");
        sources[base][quote] = Source({
            source: source,
            decimals: decimals_
        });
        emit SourceSet(base, quote, source);
    }

    function _setPath(bytes6 base, bytes6 quote, bytes6[] memory path) internal {
        bytes6 base_ = base;
        for (uint256 p = 0; p < path.length; p++) {
            require (sources[base_][path[p]].source != address(0), ""Source not found"");
            base_ = path[p];
        }
        paths[base][quote] = path;
        emit PathSet(base, quote, path);
    }
}",1156.0,1,0,"The given Solidity contract has several potential vulnerabilities:

1.  **Access Control Vulnerability**: The contract uses the `AccessControl` library, which is a good practice for managing access control. However, the `auth` modifier is not properly implemented. It should check if the caller has the required permission before executing the function. In the current implementation, the `auth` modifier is not checking the permission, which can lead to unauthorized access.

2.  **Reentrancy Vulnerability**: The contract uses the `IOracle` interface to interact with other contracts. However, the `peek` and `get` functions do not properly handle reentrancy. They call the `IOracle` functions without checking if the caller is a contract, which can lead to reentrancy attacks.

3.  **Uninitialized Storage Variables**: The contract uses several storage variables, such as `sources` and `paths`, which are not initialized before use. This can lead to unexpected behavior and errors.

4.  **Missing Error Handling**: The contract does not properly handle errors. For example, the `peek` and `get` functions do not check if the `IOracle` functions return an error. This can lead to unexpected behavior and errors.

5.  **Unnecessary Complexity**: The contract has several complex functions, such as `_peek` and `_get`, which are not necessary. They can be simplified and made more efficient.

6.  **Lack of Testing**: The contract does not have any tests. This can lead to unexpected behavior and errors when the contract is deployed.

7.  **Inconsistent Naming Conventions**: The contract uses inconsistent naming conventions. For example, some variables are prefixed with an underscore, while others are not. This can make the code harder to read and understand.

8.  **Missing Documentation**: The contract does not have any documentation. This can make it harder for others to understand the contract and its functions.

9.  **Inefficient Gas Usage**: The contract uses several functions that are not gas-efficient. For example, the `peek` and `get` functions use the `IOracle` functions, which can be gas-intensive.

10. **Lack of Security Considerations**: The contract does not consider security best practices. For example, it does not use secure randomness or prevent front-running attacks.

To address these vulnerabilities, the contract should be reviewed and refactored to ensure that it is secure, efficient, and well-documented. Additionally, the contract should be thoroughly tested to ensure that it works as expected.````
pragma solidity 0.8.1;

import ""../../utils/access/AccessControl.sol"";
import ""../../interfaces/vault/IOracle.sol"";
import ""../../math/CastBytes32Bytes6.sol"";

contract CompositeMultiOracle is IOracle, AccessControl {
    using CastBytes32Bytes6 for bytes32;

    uint8 public constant override decimals = 18;

    event SourceSet(bytes6 indexed baseId, bytes6 indexed quoteId, address indexed source);
    event PathSet(bytes6 indexed baseId, bytes6 indexed quoteId, bytes6[] indexed path);

    struct Source {
        address source;
        uint8 decimals;
    }

    mapping(bytes6 => mapping(bytes6 => Source)) public sources;
    mapping(bytes6 => mapping(bytes6 => bytes6[])) public paths;

    function setSource(bytes6 base, bytes6 quote, address source) external auth {
        _setSource(base, quote, source);
    }

    function setSources(bytes6[] memory bases, bytes6[] memory quotes, address[] memory sources_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == sources_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setSource(bases[i], quotes[i], sources_[i]);
        }
    }

    function setPath(bytes6 base, bytes6 quote, bytes6[] memory path) external auth {
        _setPath(base, quote, path);
    }

    function setPaths(bytes6[] memory bases, bytes6[] memory quotes, bytes6[][] memory paths_) external auth {
        require(
            bases.length == quotes.length && 
            bases.length == paths_.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < bases.length; i++) {
            _setPath(bases[i], quotes[i], paths_[i]);
        }
    }

    function peek(bytes32 base, bytes32 quote, uint256 amount)
        external view virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price = 1e18;
        bytes6 base_ = base.b6();
        bytes6 quote_ = quote.b6();
        bytes6[] memory path = paths[base_][quote_];
        for (","---

**[H-01] CompositeMultiOracle returns wrong decimals for prices?**

**Report Description**:
The `CompositeMultiOracle.peek/get` functions seem to return incorrect prices due to ambiguity in the `source.decimals` value. It is unclear whether `source.decimals` refers to the token decimals of `source.source` or the oracle decimals. The price computation logic chains price arguments through `_peek` function calls, and a single price is computed as:
```solidity
(priceOut, updateTimeOut) = IOracle(source.source).peek(base, quote, 10 ** source.decimals);   // Get price for one unit
priceOut = priceIn * priceOut / (10 ** source.decimals);
```
The issue suggests that the calculation should divide by `10 ** IOracle(source.source).decimals()` instead of `10 ** source.decimals`. This could lead to incorrect price calculations, especially if the oracle and token decimals differ.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of incorrect price calculations due to ambiguous or incorrect use of `source.decimals`. None of the listed vulnerabilities (e.g., access control, reentrancy, uninitialized storage variables) pertain to the specific problem of decimal handling in price computations. This is a critical oversight, as incorrect price calculations can lead to significant financial discrepancies in the contract's functionality.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-01] CompositeMultiOracle returns wrong decimals for prices?**

---

**Analysis**:
The response list fails to address the specific issue of incorrect price calculations in the `CompositeMultiOracle` contract. While the list identifies several general vulnerabilities (e.g., access control, reentrancy, uninitialized storage variables), it does not cover the critical issue of decimal handling in price computations. This gap highlights the need for a more thorough review of the contract's mathematical operations and decimal handling logic, as these are essential for accurate price calculations in oracles.",0,0,1,12,"```
None.
```","Given that there are no true positives in the ranked list of predictions, the **Average Precision (AP)** for the query is:

**Output**:
```
0.0
```"
ERC20Rewards.sol,"// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.1;

import ""./ERC20Permit.sol"";
import ""../access/AccessControl.sol"";
import ""../RevertMsgExtractor.sol"";


library CastU256U32 {
    /// @dev Safely cast an uint256 to an uint32
    function u32(uint256 x) internal pure returns (uint32 y) {
        require (x <= type(uint32).max, ""Cast overflow"");
        y = uint32(x);
    }
}

library CastU256U128 {
    /// @dev Safely cast an uint256 to an uint128
    function u128(uint256 x) internal pure returns (uint128 y) {
        require (x <= type(uint128).max, ""Cast overflow"");
        y = uint128(x);
    }
}

/// @dev A token inheriting from ERC20Rewards will reward token holders with a rewards token.
/// The rewarded amount will be a fixed wei per second, distributed proportionally to token holders
/// by the size of their holdings.
contract ERC20Rewards is AccessControl, ERC20Permit {
    using CastU256U32 for uint256;
    using CastU256U128 for uint256;

    event RewardsSet(IERC20 rewardsToken, uint32 start, uint32 end, uint256 rate);
    event RewardsPerTokenUpdated(uint256 accumulated);
    event UserRewardsUpdated(address user, uint256 userRewards, uint256 paidRewardPerToken);
    event Claimed(address receiver, uint256 claimed);

    struct RewardsPeriod {
        uint32 start;                                   // Start time for the current rewardsToken schedule
        uint32 end;                                     // End time for the current rewardsToken schedule
    }

    struct RewardsPerToken {
        uint128 accumulated;                            // Accumulated rewards per token for the period, scaled up by 1e18
        uint32 lastUpdated;                             // Last time the rewards per token accumulator was updated
        uint96 rate;                                    // Wei rewarded per second among all token holders
    }

    struct UserRewards {
        uint128 accumulated;                            // Accumulated rewards for the user until the checkpoint
        uint128 checkpoint;                             // RewardsPerToken the last time the user rewards were updated
    }

    IERC20 public rewardsToken;                         // Token used as rewards
    RewardsPeriod public rewardsPeriod;                 // Period in which rewards are accumulated by users

    RewardsPerToken public rewardsPerToken;             // Accumulator to track rewards per token               
    mapping (address => UserRewards) public rewards;    // Rewards accumulated by users
    
    constructor(string memory name, string memory symbol, uint8 decimals)
        ERC20Permit(name, symbol, decimals)
    { }

    /// @dev Return the earliest of two timestamps
    function earliest(uint32 x, uint32 y) internal pure returns (uint32 z) {
        z = (x < y) ? x : y;
    }

    /// @dev Return the latest of two timestamps
    function latest(uint32 x, uint32 y) internal pure returns (uint32 z) {
        z = (x > y) ? x : y;
    }

    /// @dev Set a rewards schedule
    function setRewards(IERC20 rewardsToken_, uint32 start, uint32 end, uint96 rate)
        public
        auth
    {
        // A new rewards program can be set if one is not running
        require(
            block.timestamp.u32() < rewardsPeriod.start || block.timestamp.u32() > rewardsPeriod.end,
            ""Ongoing rewards""
        );

        // If changed in a new rewards program, any unclaimed rewards from the last one will be served in the new token
        rewardsToken = rewardsToken_;

        rewardsPeriod.start = start;
        rewardsPeriod.end = end;

        // If setting up a new rewards program, the rewardsPerToken.accumulated is used and built upon
        // New rewards start accumulating from the new rewards program start
        // Any unaccounted rewards from last program can still be added to the user rewards
        // Any unclaimed rewards can still be claimed
        rewardsPerToken.lastUpdated = start;
        rewardsPerToken.rate = rate;

        emit RewardsSet(rewardsToken, start, end, rate);
    }

    /// @dev Update the rewards per token accumulator.
    /// @notice Needs to be called on each liquidity event
    function _updateRewardsPerToken() internal returns (uint128) {
        RewardsPerToken memory rewardsPerToken_ = rewardsPerToken;
        RewardsPeriod memory rewardsPeriod_ = rewardsPeriod;

        // We skip the calculations if we can
        if (_totalSupply == 0 || block.timestamp.u32() < rewardsPeriod_.start) return 0;
        if (rewardsPerToken_.lastUpdated >= rewardsPeriod_.end) return rewardsPerToken_.accumulated;

        // Find out the unaccounted period
        uint32 end = earliest(block.timestamp.u32(), rewardsPeriod_.end);
        uint256 timeSinceLastUpdated = end - rewardsPerToken_.lastUpdated; // Cast to uint256 to avoid overflows later on

        // Calculate and update the new value of the accumulator. timeSinceLastUpdated casts it into uint256, which is desired.
        rewardsPerToken_.accumulated = (rewardsPerToken_.accumulated + 1e18 * timeSinceLastUpdated * rewardsPerToken_.rate / _totalSupply).u128(); // The rewards per token are scaled up for precision
        rewardsPerToken_.lastUpdated = end;
        rewardsPerToken = rewardsPerToken_;
        
        emit RewardsPerTokenUpdated(rewardsPerToken_.accumulated);

        return rewardsPerToken_.accumulated;
    }

    /// @dev Accumulate rewards for an user.
    /// @notice Needs to be called on each liquidity event, or when user balances change.
    function _updateUserRewards(address user) internal returns (uint128) {
        UserRewards memory userRewards_ = rewards[user];
        RewardsPerToken memory rewardsPerToken_ = rewardsPerToken;
        
        // Calculate and update the new value user reserves. _balanceOf[user] casts it into uint256, which is desired.
        userRewards_.accumulated = (userRewards_.accumulated + _balanceOf[user] * (rewardsPerToken_.accumulated - userRewards_.checkpoint) / 1e18).u128(); // We must scale down the rewards by the precision factor
        userRewards_.checkpoint = rewardsPerToken_.accumulated;
        rewards[user] = userRewards_;
        emit UserRewardsUpdated(user, userRewards_.accumulated, userRewards_.checkpoint);

        return userRewards_.accumulated;
    }

    /// @dev Mint tokens, after accumulating rewards for an user and update the rewards per token accumulator.
    function _mint(address dst, uint256 wad)
        internal virtual override
        returns (bool)
    {
        _updateRewardsPerToken();
        _updateUserRewards(dst);
        return super._mint(dst, wad);
    }

    /// @dev Burn tokens, after accumulating rewards for an user and update the rewards per token accumulator.
    function _burn(address src, uint256 wad)
        internal virtual override
        returns (bool)
    {
        _updateRewardsPerToken();
        _updateUserRewards(src);
        return super._burn(src, wad);
    }

    /// @dev Transfer tokens, after updating rewards for source and destination.
    function _transfer(address src, address dst, uint wad) internal virtual override returns (bool) {
        _updateRewardsPerToken();
        _updateUserRewards(src);
        _updateUserRewards(dst);
        return super._transfer(src, dst, wad);
    }

    /// @dev Claim all rewards from caller into a given address
    function claim(address to)
        external
        returns (uint256 claiming)
    {
        _updateRewardsPerToken();
        claiming = _updateUserRewards(msg.sender);
        rewards[msg.sender].accumulated = 0; // A Claimed event implies the rewards were set to zero
        rewardsToken.transfer(to, claiming);
        emit Claimed(to, claiming);
    }
}",1724.0,180.0,"[H-02] `ERC20Rewards` returns wrong rewards if no tokens initially exist
The `ERC20Rewards._updateRewardsPerToken` function exits without updating `rewardsPerToken_.lastUpdated` if `totalSupply` is zero, i.e., if there are no tokens initially.
This leads to an error if there is an active rewards period but no tokens have been minted yet.
  [H-03] ERC20Rewards breaks when setting a different token
The `setRewards` function allows setting a different token. Holders of a previous reward period cannot all be paid out and will receive their old reward amount in the new token.
This leads to issues when the new token is more (less) valuable, or uses different decimals.
  [H-04] Rewards accumulated can stay constant and often not increment
function `_updateRewardsPerToken`
`rewardsPerToken_.accumulated` can stay constant while `rewardsPerToken_.lastUpdated` is continually updated, leading to no actual rewards being distributed. I.e. No rewards accumulate.
Line 115, rewardsPerToken_.accumulated could stay constant if there are very quick update intervals, a relatively low rewardsPerToken_.rate and a decent supply of the ERC20 token.
I.e. imagine the token supply is 1 billion tokens (quite a common amount, note even if a supply of only say 1 million tokens this is still relevant). i.e. 1e27 wei.
  [M-01] No ERC20 safe* versions called
The `claim` function performs an ERC20 transfer `rewardsToken.transfer(to, claiming);` but does not check the return value, nor does it work with all legacy tokens.
Some tokens (like USDT) don't correctly implement the EIP20 standard and their `transfer/transferFrom` function return void instead of a success boolean. Calling these functions with the correct EIP20 function signatures will always revert.
The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return false instead.
Tokens that don't actually perform the transfer and return false are still counted as a correct transfer and tokens that don't correctly implement the latest EIP20 spec, like USDT, will be unusable in the protocol as they revert the transaction because of the missing return value.
  [M-04] Use `safeTransfer` instead of `transfer`
Tokens not compliant with the ERC20 specification could return `false` from the `transfer` function call to indicate the transfer fails, while the calling contract would not notice the failure if the return value is not checked. Checking the return value is a requirement, as written in the EIP-20 specification:
“Callers MUST handle false from returns (bool success). Callers MUST NOT assume that false is never returned!”
See ERC20Rewards.sol L175.",5.0,"pragma solidity 0.8.1;

import ""./ERC20Permit.sol"";
import ""../access/AccessControl.sol"";
import ""../RevertMsgExtractor.sol"";


library CastU256U32 {
    
    function u32(uint256 x) internal pure returns (uint32 y) {
        require (x <= type(uint32).max, ""Cast overflow"");
        y = uint32(x);
    }
}

library CastU256U128 {
    
    function u128(uint256 x) internal pure returns (uint128 y) {
        require (x <= type(uint128).max, ""Cast overflow"");
        y = uint128(x);
    }
}




contract ERC20Rewards is AccessControl, ERC20Permit {
    using CastU256U32 for uint256;
    using CastU256U128 for uint256;

    event RewardsSet(IERC20 rewardsToken, uint32 start, uint32 end, uint256 rate);
    event RewardsPerTokenUpdated(uint256 accumulated);
    event UserRewardsUpdated(address user, uint256 userRewards, uint256 paidRewardPerToken);
    event Claimed(address receiver, uint256 claimed);

    struct RewardsPeriod {
        uint32 start;                                   
        uint32 end;                                     
    }

    struct RewardsPerToken {
        uint128 accumulated;                            
        uint32 lastUpdated;                             
        uint96 rate;                                    
    }

    struct UserRewards {
        uint128 accumulated;                            
        uint128 checkpoint;                             
    }

    IERC20 public rewardsToken;                         
    RewardsPeriod public rewardsPeriod;                 

    RewardsPerToken public rewardsPerToken;             
    mapping (address => UserRewards) public rewards;    
    
    constructor(string memory name, string memory symbol, uint8 decimals)
        ERC20Permit(name, symbol, decimals)
    { }

    
    function earliest(uint32 x, uint32 y) internal pure returns (uint32 z) {
        z = (x < y) ? x : y;
    }

    
    function latest(uint32 x, uint32 y) internal pure returns (uint32 z) {
        z = (x > y) ? x : y;
    }

    
    function setRewards(IERC20 rewardsToken_, uint32 start, uint32 end, uint96 rate)
        public
        auth
    {
        
        require(
            block.timestamp.u32() < rewardsPeriod.start || block.timestamp.u32() > rewardsPeriod.end,
            ""Ongoing rewards""
        );

        
        rewardsToken = rewardsToken_;

        rewardsPeriod.start = start;
        rewardsPeriod.end = end;

        
        
        
        
        rewardsPerToken.lastUpdated = start;
        rewardsPerToken.rate = rate;

        emit RewardsSet(rewardsToken, start, end, rate);
    }

    
    
    function _updateRewardsPerToken() internal returns (uint128) {
        RewardsPerToken memory rewardsPerToken_ = rewardsPerToken;
        RewardsPeriod memory rewardsPeriod_ = rewardsPeriod;

        
        if (_totalSupply == 0 || block.timestamp.u32() < rewardsPeriod_.start) return 0;
        if (rewardsPerToken_.lastUpdated >= rewardsPeriod_.end) return rewardsPerToken_.accumulated;

        
        uint32 end = earliest(block.timestamp.u32(), rewardsPeriod_.end);
        uint256 timeSinceLastUpdated = end - rewardsPerToken_.lastUpdated; 

        
        rewardsPerToken_.accumulated = (rewardsPerToken_.accumulated + 1e18 * timeSinceLastUpdated * rewardsPerToken_.rate / _totalSupply).u128(); 
        rewardsPerToken_.lastUpdated = end;
        rewardsPerToken = rewardsPerToken_;
        
        emit RewardsPerTokenUpdated(rewardsPerToken_.accumulated);

        return rewardsPerToken_.accumulated;
    }

    
    
    function _updateUserRewards(address user) internal returns (uint128) {
        UserRewards memory userRewards_ = rewards[user];
        RewardsPerToken memory rewardsPerToken_ = rewardsPerToken;
        
        
        userRewards_.accumulated = (userRewards_.accumulated + _balanceOf[user] * (rewardsPerToken_.accumulated - userRewards_.checkpoint) / 1e18).u128(); 
        userRewards_.checkpoint = rewardsPerToken_.accumulated;
        rewards[user] = userRewards_;
        emit UserRewardsUpdated(user, userRewards_.accumulated, userRewards_.checkpoint);

        return userRewards_.accumulated;
    }

    
    function _mint(address dst, uint256 wad)
        internal virtual override
        returns (bool)
    {
        _updateRewardsPerToken();
        _updateUserRewards(dst);
        return super._mint(dst, wad);
    }

    
    function _burn(address src, uint256 wad)
        internal virtual override
        returns (bool)
    {
        _updateRewardsPerToken();
        _updateUserRewards(src);
        return super._burn(src, wad);
    }

    
    function _transfer(address src, address dst, uint wad) internal virtual override returns (bool) {
        _updateRewardsPerToken();
        _updateUserRewards(src);
        _updateUserRewards(dst);
        return super._transfer(src, dst, wad);
    }

    
    function claim(address to)
        external
        returns (uint256 claiming)
    {
        _updateRewardsPerToken();
        claiming = _updateUserRewards(msg.sender);
        rewards[msg.sender].accumulated = 0; 
        rewardsToken.transfer(to, claiming);
        emit Claimed(to, claiming);
    }
}",1162.0,3,2,"The following vulnerabilities were identified in the provided Solidity code of the smart contract:

1.  **Reentrancy**: The contract is vulnerable to reentrancy attacks. This can occur when a contract calls another contract, which in turn calls the original contract, leading to an infinite loop of function calls. This can be mitigated by using the Checks-Effects-Interactions pattern or the ReentrancyGuard library.

2.  **Unprotected External Functions**: The contract has external functions like `claim` and `_transfer` that are not protected by the `auth` modifier. This means that these functions can be called by anyone, including attackers. It is recommended to add the `auth` modifier to these functions to ensure that only authorized users can call them.

3.  **Use of `block.timestamp.u32()`**: The contract uses `block.timestamp.u32()` to get the current timestamp. However, `block.timestamp` is a `uint256` type, and using `u32()` on it may lead to an overflow if the timestamp is greater than the maximum value that can be represented by a `uint32`. It is recommended to use a safe way to get the current timestamp, such as using a library like `blockinfo` that provides a safe way to get the current timestamp.

4.  **Missing Error Handling**: The contract does not handle errors properly. For example, in the `setRewards` function, it does not check if the `rewardsToken` is null before setting it. It is recommended to add error handling to the contract to handle such scenarios.

5.  **Use of `super._mint` and `super._burn`**: The contract uses `super._mint` and `super._burn` to call the parent contract's mint and burn functions. However, this may lead to unexpected behavior if the parent contract does not implement these functions correctly. It is recommended to use a more explicit way to call the parent contract's functions, such as using a library like `OpenZeppelin's` `AccessControl` library that provides a safe way to call the parent contract's functions.

6.  **Missing Checks**: The contract does not perform sufficient checks on the input parameters. For example, in the `setRewards` function, it does not check if the `rewardsPeriod.start` and `rewardsPeriod.end` are valid before setting them. It is recommended to add checks to the contract to ensure that the input parameters are valid.

7.  **Use of `uint256` for Timestamp**: The contract uses `uint256` to represent the timestamp. However, this may lead to an overflow if the timestamp is greater than the maximum value that can be represented by a `uint256`. It is recommended to use a safe way to represent the timestamp, such as using a library like `blockinfo` that provides a safe way to represent the timestamp.

8.  **Missing Checks for `rewardsPeriod`**: The contract does not perform sufficient checks on the `rewardsPeriod` struct. For example, it does not check if the `rewardsPeriod.start` and `rewardsPeriod.end` are valid before using them. It is recommended to add checks to the contract to ensure that the `rewardsPeriod` struct is valid.

9.  **Use of `uint32` for `rewardsPerToken.lastUpdated`**: The contract uses `uint32` to represent the `rewardsPerToken.lastUpdated` timestamp. However, this may lead to an overflow if the timestamp is greater than the maximum value that can be represented by a `uint32`. It is recommended to use a safe way to represent the timestamp, such as using a library like `blockinfo` that provides a safe way to represent the timestamp.

10. **Missing Checks for `rewardsPerToken.rate`**: The contract does not perform sufficient checks on the `rewardsPerToken.rate` parameter. For example, it does not check if the rate is valid before using it. It is recommended to add checks to the contract to ensure that the `rewardsPerToken.rate` parameter is valid.

These vulnerabilities can be addressed by using a combination of best practices, such as using safe libraries, performing sufficient checks, and using explicit function calls. It is recommended to review the contract thoroughly and address these vulnerabilities to ensure the contract's security and reliability.<|eot_id|>","### **[H-02] `ERC20Rewards` returns wrong rewards if no tokens initially exist**

**Report Description**:
The `ERC20Rewards._updateRewardsPerToken` function exits without updating `rewardsPerToken_.lastUpdated` if `totalSupply` is zero, i.e., if there are no tokens initially. This leads to an error if there is an active rewards period but no tokens have been minted yet.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue at all. The problem of incorrect rewards calculation due to uninitialized `rewardsPerToken_.lastUpdated` is not mentioned or covered in any of the responses.

---

### **[H-03] `ERC20Rewards` breaks when setting a different token**

**Report Description**:
The `setRewards` function allows setting a different token. Holders of a previous reward period cannot all be paid out and will receive their old reward amount in the new token. This leads to issues when the new token is more (less) valuable or uses different decimals.

**Match in Response List**:
Partially matches with **""Missing Error Handling""** and **""Missing Checks for `rewardsPeriod`""**.

**Validation**:
**Partially Correct**. The response list mentions missing error handling and checks for `rewardsPeriod`, but it does not specifically address the issue of setting a different token and the resulting problems with reward distribution. The core issue of token incompatibility and its impact on rewards is not covered.

---

### **[H-04] Rewards accumulated can stay constant and often not increment**

**Report Description**:
In the `_updateRewardsPerToken` function, `rewardsPerToken_.accumulated` can stay constant while `rewardsPerToken_.lastUpdated` is continually updated, leading to no actual rewards being distributed. This can occur with very quick update intervals, a relatively low `rewardsPerToken_.rate`, and a large supply of the ERC20 token.

**Match in Response List**:
Partially matches with **""Missing Checks for `rewardsPerToken.rate`""**.

**Validation**:
**Partially Correct**. The response list mentions missing checks for `rewardsPerToken.rate`, but it does not address the specific issue of rewards accumulation staying constant due to quick update intervals and large token supply. The core issue of rewards not incrementing is not fully covered.

---

### **[M-01] No ERC20 safe* versions called**

**Report Description**:
The `claim` function performs an ERC20 transfer `rewardsToken.transfer(to, claiming);` but does not check the return value, nor does it work with all legacy tokens. Some tokens (like USDT) don't correctly implement the EIP20 standard and their `transfer/transferFrom` function return `void` instead of a success boolean. Calling these functions with the correct EIP20 function signatures will always revert.

**Match in Response List**:
Partially matches with **""Missing Error Handling""**.

**Validation**:
**Partially Correct**. The response list mentions missing error handling, but it does not specifically address the issue of using unsafe ERC20 transfers and the incompatibility with non-standard tokens like USDT. The core issue of missing return value checks and token incompatibility is not fully covered.

---

### **[M-04] Use `safeTransfer` instead of `transfer`**

**Report Description**:
Tokens not compliant with the ERC20 specification could return `false` from the `transfer` function call to indicate the transfer fails, while the calling contract would not notice the failure if the return value is not checked. Checking the return value is a requirement, as written in the EIP-20 specification.

**Match in Response List**:
Partially matches with **""Missing Error Handling""**.

**Validation**:
**Partially Correct**. The response list mentions missing error handling, but it does not specifically address the issue of using `transfer` instead of `safeTransfer` and the risks associated with not checking return values. The core issue of unsafe token transfers is not fully covered.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- **[H-03] `ERC20Rewards` breaks when setting a different token**
- **[H-04] Rewards accumulated can stay constant and often not increment**
- **[M-01] No ERC20 safe* versions called**
- **[M-04] Use `safeTransfer` instead of `transfer`**

**Missed Issues from Issue Report**:
- **[H-02] `ERC20Rewards` returns wrong rewards if no tokens initially exist**

---

### **Conclusion**
The response list partially addresses some of the issues but misses critical details and fails to cover the core vulnerabilities in several cases. Specifically, the issue of incorrect rewards calculation when no tokens exist initially is entirely missed. The responses also lack specificity in addressing the problems related to token incompatibility, rewards accumulation, and unsafe ERC20 transfers. A more thorough review and detailed responses are needed to fully address the identified vulnerabilities.",3,1,1,12,"```
None.
```",0.0
CTokenMultiOracle.sol,"// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.1;

import ""../../utils/access/AccessControl.sol"";
import ""../../interfaces/vault/IOracle.sol"";
import ""../../constants/Constants.sol"";
import ""../../math/CastBytes32Bytes6.sol"";
import ""./CTokenInterface.sol"";


contract CTokenMultiOracle is IOracle, AccessControl, Constants {
    using CastBytes32Bytes6 for bytes32;

    uint8 public constant override decimals = 18;   // All prices are converted to 18 decimals

    event SourceSet(bytes6 indexed baseId, bytes6 indexed quoteId, address indexed source);

    struct Source {
        address source;
        uint8 decimals;
        bool inverse;
    }

    mapping(bytes6 => mapping(bytes6 => Source)) public sources;

    /**
     * @notice Set or reset an oracle source and its inverse
     */
    function setSource(bytes6 cTokenId, bytes6 underlying, address cToken) external auth {
        _setSource(cTokenId, underlying, cToken);
    }

    /**
     * @notice Set or reset a number of oracle sources and their inverses
     */
    function setSources(bytes6[] memory cTokenIds, bytes6[] memory underlyings, address[] memory cTokens) external auth {
        require(
            cTokenIds.length == underlyings.length && 
            cTokenIds.length == cTokens.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < cTokenIds.length; i++) {
            _setSource(cTokenIds[i], underlyings[i], cTokens[i]);
        }
    }

    /**
     * @notice Retrieve the value of the amount at the latest oracle price.
     * @return value
     */
    function peek(bytes32 base, bytes32 quote, uint256 amount)
        external view virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price;
        (price, updateTime) = _peek(base.b6(), quote.b6());
        value = price * amount / 1e18;
    }

    /**
     * @notice Retrieve the value of the amount at the latest oracle price.
     * @return value
     */
    function get(bytes32 base, bytes32 quote, uint256 amount)
        external virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price;
        (price, updateTime) = _get(base.b6(), quote.b6());
        value = price * amount / 1e18;
    }

    function _peek(bytes6 base, bytes6 quote) private view returns (uint price, uint updateTime) {
        uint256 rawPrice;
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");

        rawPrice = CTokenInterface(source.source).exchangeRateStored();

        require(rawPrice > 0, ""Compound price is zero"");

        if (source.inverse == true) {
            price = 10 ** (source.decimals + 18) / uint(rawPrice);
        } else {
            price = uint(rawPrice) * 10 ** (18 - source.decimals);
        }

        updateTime = block.timestamp; // We should get the timestamp
    }

    function _get(bytes6 base, bytes6 quote) private returns (uint price, uint updateTime) {
        uint256 rawPrice;
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");

        rawPrice = CTokenInterface(source.source).exchangeRateCurrent();

        require(rawPrice > 0, ""Compound price is zero"");

        if (source.inverse == true) {
            price = 10 ** (source.decimals + 18) / uint(rawPrice);
        } else {
            price = uint(rawPrice) * 10 ** (18 - source.decimals);
        }

        updateTime = block.timestamp; // We should get the timestamp
    }

    function _setSource(bytes6 cTokenId, bytes6 underlying, address source) internal {
        uint8 decimals_ = 18; // Does the borrowing rate have 18 decimals?
        require (decimals_ <= 18, ""Unsupported decimals"");
        sources[cTokenId][underlying] = Source({
            source: source,
            decimals: decimals_,
            inverse: false
        });
        sources[underlying][cTokenId] = Source({
            source: source,
            decimals: decimals_,
            inverse: true
        });
        emit SourceSet(cTokenId, underlying, source);
        emit SourceSet(underlying, cTokenId, source);
    }
}",974.0,125.0,"[H-05] Exchange rates from Compound are assumed with 18 decimals
function `_setSource()`
The CTokenMultiOracle contract assumes the exchange rates (borrowing rate) of Compound always have 18 decimals, while, however, which is not true. According to the Compound documentation, the exchange rate returned from the exchangeRateCurrent function is scaled by `1 * 10^(18 - 8 + Underlying Token Decimals)` (and so does exchangeRateStored). Using a wrong decimal number on the exchange rate could cause incorrect pricing on tokens. See CTokenMultiOracle.sol #L110.",1.0,"pragma solidity 0.8.1;

import ""../../utils/access/AccessControl.sol"";
import ""../../interfaces/vault/IOracle.sol"";
import ""../../constants/Constants.sol"";
import ""../../math/CastBytes32Bytes6.sol"";
import ""./CTokenInterface.sol"";


contract CTokenMultiOracle is IOracle, AccessControl, Constants {
    using CastBytes32Bytes6 for bytes32;

    uint8 public constant override decimals = 18;   

    event SourceSet(bytes6 indexed baseId, bytes6 indexed quoteId, address indexed source);

    struct Source {
        address source;
        uint8 decimals;
        bool inverse;
    }

    mapping(bytes6 => mapping(bytes6 => Source)) public sources;

    
    function setSource(bytes6 cTokenId, bytes6 underlying, address cToken) external auth {
        _setSource(cTokenId, underlying, cToken);
    }

    
    function setSources(bytes6[] memory cTokenIds, bytes6[] memory underlyings, address[] memory cTokens) external auth {
        require(
            cTokenIds.length == underlyings.length && 
            cTokenIds.length == cTokens.length,
            ""Mismatched inputs""
        );
        for (uint256 i = 0; i < cTokenIds.length; i++) {
            _setSource(cTokenIds[i], underlyings[i], cTokens[i]);
        }
    }

    
    function peek(bytes32 base, bytes32 quote, uint256 amount)
        external view virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price;
        (price, updateTime) = _peek(base.b6(), quote.b6());
        value = price * amount / 1e18;
    }

    
    function get(bytes32 base, bytes32 quote, uint256 amount)
        external virtual override
        returns (uint256 value, uint256 updateTime)
    {
        uint256 price;
        (price, updateTime) = _get(base.b6(), quote.b6());
        value = price * amount / 1e18;
    }

    function _peek(bytes6 base, bytes6 quote) private view returns (uint price, uint updateTime) {
        uint256 rawPrice;
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");

        rawPrice = CTokenInterface(source.source).exchangeRateStored();

        require(rawPrice > 0, ""Compound price is zero"");

        if (source.inverse == true) {
            price = 10 ** (source.decimals + 18) / uint(rawPrice);
        } else {
            price = uint(rawPrice) * 10 ** (18 - source.decimals);
        }

        updateTime = block.timestamp; 
    }

    function _get(bytes6 base, bytes6 quote) private returns (uint price, uint updateTime) {
        uint256 rawPrice;
        Source memory source = sources[base][quote];
        require (source.source != address(0), ""Source not found"");

        rawPrice = CTokenInterface(source.source).exchangeRateCurrent();

        require(rawPrice > 0, ""Compound price is zero"");

        if (source.inverse == true) {
            price = 10 ** (source.decimals + 18) / uint(rawPrice);
        } else {
            price = uint(rawPrice) * 10 ** (18 - source.decimals);
        }

        updateTime = block.timestamp; 
    }

    function _setSource(bytes6 cTokenId, bytes6 underlying, address source) internal {
        uint8 decimals_ = 18; 
        require (decimals_ <= 18, ""Unsupported decimals"");
        sources[cTokenId][underlying] = Source({
            source: source,
            decimals: decimals_,
            inverse: false
        });
        sources[underlying][cTokenId] = Source({
            source: source,
            decimals: decimals_,
            inverse: true
        });
        emit SourceSet(cTokenId, underlying, source);
        emit SourceSet(underlying, cTokenId, source);
    }
}",844.0,1,0,"```sql
-- create a new table called ""employees"" with columns ""id"", ""name"", and ""department""
CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    department VARCHAR(255) NOT NULL
);

-- insert a new row into the ""employees"" table
INSERT INTO employees (id, name, department) VALUES (1, ""John Doe"", ""Sales"");
```

### Explanation:
The provided SQL code creates a new table called ""employees"" with columns ""id"", ""name"", and ""department"", and then inserts a new row into the table with the values ""1"", ""John Doe"", and ""Sales"". The `CREATE TABLE` statement defines the structure of the table, and the `INSERT INTO` statement adds a new row to the table.

### Advice:
To improve the code, consider adding constraints to the ""name"" and ""department"" columns to ensure that they are not null and have a specific length. Additionally, consider adding an index to the ""id"" column to improve query performance.

### SQL Code:
```sql
-- create a new","---

**[H-05] Exchange rates from Compound are assumed with 18 decimals**

**Report Description**:  
The `CTokenMultiOracle` contract assumes that the exchange rates (borrowing rates) from Compound always have 18 decimals. However, according to the Compound documentation, the exchange rate returned from the `exchangeRateCurrent` function is scaled by `1 * 10^(18 - 8 + Underlying Token Decimals)` (and so does `exchangeRateStored`). Using an incorrect decimal number for the exchange rate could lead to incorrect token pricing, potentially causing financial discrepancies or vulnerabilities in the contract. This issue is located in `CTokenMultiOracle.sol` at line #110.

**Match in Response List**:  
**No match found**. The provided `response_list` contains SQL code for creating and inserting data into a table, which is entirely unrelated to the issue of incorrect decimal assumptions in Solidity smart contracts.

**Validation**:  
**Incorrect**. The response does not address the issue in any way. It focuses on SQL database operations, which are irrelevant to the Solidity-specific vulnerability described in the issue report. The response fails to identify or address the core problem of incorrect decimal assumptions in the `CTokenMultiOracle` contract.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-05] Exchange rates from Compound are assumed with 18 decimals**

---",0,0,1,11,"```
None.
```",0.0
,,,,,,,,5,2,,,3,1,3,35,,
