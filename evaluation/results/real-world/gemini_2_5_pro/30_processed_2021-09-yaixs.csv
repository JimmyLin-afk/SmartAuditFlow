nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
Controller.sol,"// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""../interfaces/IController.sol"";
import ""../interfaces/IConverter.sol"";
import ""../interfaces/IVault.sol"";
import ""../interfaces/IHarvester.sol"";
import ""../interfaces/IStrategy.sol"";
import ""../interfaces/IManager.sol"";

/**
 * @title Controller
 * @notice This controller allows multiple strategies to be used
 * for a single vault supporting multiple tokens.
 */
contract Controller is IController {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    IManager public immutable override manager;

    bool public globalInvestEnabled;
    uint256 public maxStrategies;

    struct VaultDetail {
        address converter;
        uint256 balance;
        address[] strategies;
        mapping(address => uint256) balances;
        mapping(address => uint256) index;
        mapping(address => uint256) caps;
    }

    // vault => Vault
    mapping(address => VaultDetail) internal _vaultDetails;
    // strategy => vault
    mapping(address => address) internal _vaultStrategies;

    /**
     * @notice Logged when harvest is called for a strategy
     */
    event Harvest(address indexed strategy);

    /**
     * @notice Logged when a strategy is added for a vault
     */
    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);

    /**
     * @notice Logged when a strategy is removed for a vault
     */
    event StrategyRemoved(address indexed vault, address indexed strategy);

    /**
     * @notice Logged when strategies are reordered for a vault
     */
    event StrategiesReordered(
        address indexed vault,
        address indexed strategy1,
        address indexed strategy2
    );

    /**
     * @param _manager The address of the manager
     */
    constructor(
        address _manager
    )
        public
    {
        manager = IManager(_manager);
        globalInvestEnabled = true;
        maxStrategies = 10;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Adds a strategy for a given vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _cap The cap of the strategy
     * @param _timeout The timeout between harvests
     */
    function addStrategy(
        address _vault,
        address _strategy,
        uint256 _cap,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultDetails[_vault].converter != address(0), ""!converter"");
        // checking if strategy is already added
        require(_vaultStrategies[_strategy] == address(0), ""Strategy is already added""); 
        // get the index of the newly added strategy
        uint256 index = _vaultDetails[_vault].strategies.length;
        // ensure we haven't added too many strategies already
        require(index < maxStrategies, ""!maxStrategies"");
        // push the strategy to the array of strategies
        _vaultDetails[_vault].strategies.push(_strategy);
        // set the cap
        _vaultDetails[_vault].caps[_strategy] = _cap;
        // set the index
        _vaultDetails[_vault].index[_strategy] = index;
        // store the mapping of strategy to the vault
        _vaultStrategies[_strategy] = _vault;
        if (_timeout > 0) {
            // add it to the harvester
            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);
        }
        emit StrategyAdded(_vault, _strategy, _cap);
    }

    /**
     * @notice Withdraws token from a strategy to the treasury address as returned by the manager
     * @param _strategy The address of the strategy
     * @param _token The address of the token
     */
    function inCaseStrategyGetStuck(
        address _strategy,
        address _token
    )
        external
        onlyStrategist
    {
        IStrategy(_strategy).withdraw(_token);
        IERC20(_token).safeTransfer(
            manager.treasury(),
            IERC20(_token).balanceOf(address(this))
        );
    }

    /**
     * @notice Withdraws token from the controller to the treasury
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function inCaseTokensGetStuck(
        address _token,
        uint256 _amount
    )
        external
        onlyStrategist
    {
        IERC20(_token).safeTransfer(manager.treasury(), _amount);
    }

    /**
     * @notice Removes a strategy for a given token
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _timeout The timeout between harvests
     */
    function removeStrategy(
        address _vault,
        address _strategy,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        // get the index of the strategy to remove
        uint256 index = vaultDetail.index[_strategy];
        // get the index of the last strategy
        uint256 tail = vaultDetail.strategies.length.sub(1);
        // get the address of the last strategy
        address replace = vaultDetail.strategies[tail];
        // replace the removed strategy with the tail
        vaultDetail.strategies[index] = replace;
        // set the new index for the replaced strategy
        vaultDetail.index[replace] = index;
        // remove the duplicate replaced strategy
        vaultDetail.strategies.pop();
        // remove the strategy's index
        delete vaultDetail.index[_strategy];
        // remove the strategy's cap
        delete vaultDetail.caps[_strategy];
        // remove the strategy's balance
        delete vaultDetail.balances[_strategy];
        // remove the mapping of strategy to the vault
        delete _vaultStrategies[_strategy];
        // pull funds from the removed strategy to the vault
        IStrategy(_strategy).withdrawAll();
        // remove the strategy from the harvester
        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);
        emit StrategyRemoved(_vault, _strategy);
    }

    /**
     * @notice Reorders two strategies for a given vault
     * @param _vault The address of the vault
     * @param _strategy1 The address of the first strategy
     * @param _strategy2 The address of the second strategy
     */
    function reorderStrategies(
        address _vault,
        address _strategy1,
        address _strategy2
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultStrategies[_strategy1] == _vault, ""!_strategy1"");
        require(_vaultStrategies[_strategy2] == _vault, ""!_strategy2"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        // get the indexes of the strategies
        uint256 index1 = vaultDetail.index[_strategy1];
        uint256 index2 = vaultDetail.index[_strategy2];
        // set the new addresses at their indexes
        vaultDetail.strategies[index1] = _strategy2;
        vaultDetail.strategies[index2] = _strategy1;
        // update indexes
        vaultDetail.index[_strategy1] = index2;
        vaultDetail.index[_strategy2] = index1;
        emit StrategiesReordered(_vault, _strategy1, _strategy2);
    }

    /**
     * @notice Sets/updates the cap of a strategy for a vault
     * @dev If the balance of the strategy is greater than the new cap (except if
     * the cap is 0), then withdraw the difference from the strategy to the vault.
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     * @param _cap The new cap of the strategy
     */
    function setCap(
        address _vault,
        address _strategy,
        uint256 _cap,
        address _convert
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        _vaultDetails[_vault].caps[_strategy] = _cap;
        uint256 _balance = IStrategy(_strategy).balanceOf();
        // send excess funds (over cap) back to the vault
        if (_balance > _cap && _cap != 0) {
            uint256 _diff = _balance.sub(_cap);
            IStrategy(_strategy).withdraw(_diff);
            updateBalance(_vault, _strategy);
            _balance = IStrategy(_strategy).balanceOf();
            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);
            address _want = IStrategy(_strategy).want();
            _balance = IERC20(_want).balanceOf(address(this));
            if (_convert != address(0)) {
                IConverter _converter = IConverter(_vaultDetails[_vault].converter);
                IERC20(_want).safeTransfer(address(_converter), _balance);
                _balance = _converter.convert(_want, _convert, _balance, 1);
                IERC20(_convert).safeTransfer(_vault, _balance);
            } else {
                IERC20(_want).safeTransfer(_vault, _balance);
            }
        }
    }

    /**
     * @notice Sets/updates the converter for a given vault
     * @param _vault The address of the vault
     * @param _converter The address of the converter
     */
    function setConverter(
        address _vault,
        address _converter
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedConverters(_converter), ""!allowedConverters"");
        _vaultDetails[_vault].converter = _converter;
    }

    /**
     * @notice Sets/updates the global invest enabled flag
     * @param _investEnabled The new bool of the invest enabled flag
     */
    function setInvestEnabled(
        bool _investEnabled
    )
        external
        notHalted
        onlyStrategist
    {
        globalInvestEnabled = _investEnabled;
    }

    /**
     * @notice Sets/updates the maximum number of strategies for a vault
     * @param _maxStrategies The new value of the maximum strategies
     */
    function setMaxStrategies(
        uint256 _maxStrategies
    )
        external
        notHalted
        onlyStrategist
    {
        maxStrategies = _maxStrategies;
    }

    function skim(
        address _strategy
    )
        external
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).skim();
        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));
    }

    /**
     * @notice Withdraws all funds from a strategy
     * @param _strategy The address of the strategy
     * @param _convert The token address to convert to
     */
    function withdrawAll(
        address _strategy,
        address _convert
    )
        external
        override
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).withdrawAll();
        uint256 _amount = IERC20(_want).balanceOf(address(this));
        address _vault = _vaultStrategies[_strategy];
        updateBalance(_vault, _strategy);
        if (_convert != address(0)) {
            IConverter _converter = IConverter(_vaultDetails[_vault].converter);
            IERC20(_want).safeTransfer(address(_converter), _amount);
            _amount = _converter.convert(_want, _convert, _amount, 1);
            IERC20(_convert).safeTransfer(_vault, _amount);
        } else {
            IERC20(_want).safeTransfer(_vault, _amount);
        }
        uint256 _balance = _vaultDetails[_vault].balance;
        if (_balance >= _amount) {
            _vaultDetails[_vault].balance = _balance.sub(_amount);
        } else {
            _vaultDetails[_vault].balance = 0;
        }
    }

    /**
     * HARVESTER-ONLY FUNCTIONS
     */

    /**
     * @notice Harvests the specified strategy
     * @param _strategy The address of the strategy
     */
    function harvestStrategy(
        address _strategy,
        uint256 _estimatedWETH,
        uint256 _estimatedYAXIS
    )
        external
        override
        notHalted
        onlyHarvester
        onlyStrategy(_strategy)
    {
        uint256 _before = IStrategy(_strategy).balanceOf();
        IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);
        uint256 _after = IStrategy(_strategy).balanceOf();
        address _vault = _vaultStrategies[_strategy];
        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));
        _vaultDetails[_vault].balances[_strategy] = _after;
        emit Harvest(_strategy);
    }

    /**
     * VAULT-ONLY FUNCTIONS
     */

    /**
     * @notice Invests funds into a strategy
     * @param _strategy The address of the strategy
     * @param _token The address of the token
     * @param _amount The amount that will be invested
     */
    function earn(
        address _strategy,
        address _token,
        uint256 _amount
    )
        external
        override
        notHalted
        onlyStrategy(_strategy)
        onlyVault(_token)
    {
        // get the want token of the strategy
        address _want = IStrategy(_strategy).want();
        if (_want != _token) {
            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);
            IERC20(_token).safeTransfer(address(_converter), _amount);
            // TODO: do estimation for received
            _amount = _converter.convert(_token, _want, _amount, 1);
            IERC20(_want).safeTransfer(_strategy, _amount);
        } else {
            IERC20(_token).safeTransfer(_strategy, _amount);
        }
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);
        // call the strategy deposit function
        IStrategy(_strategy).deposit();
        updateBalance(msg.sender, _strategy);
    }

    /**
     * @notice Withdraws funds from a strategy
     * @dev If the withdraw amount is greater than the first strategy given
     * by getBestStrategyWithdraw, this function will loop over strategies
     * until the requested amount is met.
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function withdraw(
        address _token,
        uint256 _amount
    )
        external
        override
        onlyVault(_token)
    {
        (
            address[] memory _strategies,
            uint256[] memory _amounts
        ) = getBestStrategyWithdraw(_token, _amount);
        for (uint i = 0; i < _strategies.length; i++) {
            // getBestStrategyWithdraw will return arrays larger than needed
            // if this happens, simply exit the loop
            if (_strategies[i] == address(0)) {
                break;
            }
            IStrategy(_strategies[i]).withdraw(_amounts[i]);
            updateBalance(msg.sender, _strategies[i]);
            address _want = IStrategy(_strategies[i]).want();
            if (_want != _token) {
                address _converter = _vaultDetails[msg.sender].converter;
                IERC20(_want).safeTransfer(_converter, _amounts[i]);
                // TODO: do estimation for received
                IConverter(_converter).convert(_want, _token, _amounts[i], 1);
            }
        }
        _amount = IERC20(_token).balanceOf(address(this));
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);
        IERC20(_token).safeTransfer(msg.sender, _amount);
    }

    /**
     * EXTERNAL VIEW FUNCTIONS
     */

    /**
     * @notice Returns the rough balance of the sum of all strategies for a given vault
     * @dev This function is optimized to prevent looping over all strategy balances,
     * and instead the controller tracks the earn, withdraw, and harvest amounts.
     */
    function balanceOf()
        external
        view
        override
        returns (uint256 _balance)
    {
        return _vaultDetails[msg.sender].balance;
    }

    /**
     * @notice Returns the converter assigned for the given vault
     * @param _vault Address of the vault
     */
    function converter(
        address _vault
    )
        external
        view
        override
        returns (address)
    {
        return _vaultDetails[_vault].converter;
    }

    /**
     * @notice Returns the cap of a strategy for a given vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     */
    function getCap(
        address _vault,
        address _strategy
    )
        external
        view
        returns (uint256)
    {
        return _vaultDetails[_vault].caps[_strategy];
    }

    /**
     * @notice Returns whether investing is enabled for the calling vault
     * @dev Should be called by the vault
     */
    function investEnabled()
        external
        view
        override
        returns (bool)
    {
        if (globalInvestEnabled) {
            return _vaultDetails[msg.sender].strategies.length > 0;
        }
        return false;
    }

    /**
     * @notice Returns all the strategies for a given vault
     * @param _vault The address of the vault
     */
    function strategies(
        address _vault
    )
        external
        view
        returns (address[] memory)
    {
        return _vaultDetails[_vault].strategies;
    }

    /**
     * @notice Returns the length of the strategies of the calling vault
     * @dev This function is expected to be called by a vault
     */
    function strategies()
        external
        view
        override
        returns (uint256)
    {
        return _vaultDetails[msg.sender].strategies.length;
    }

    /**
     * INTERNAL FUNCTIONS
     */

    /**
     * @notice Returns the best (optimistic) strategy for funds to be withdrawn from
     * @dev Since Solidity doesn't support dynamic arrays in memory, the returned arrays
     * from this function will always be the same length as the amount of strategies for
     * a token. Check that _strategies[i] != address(0) when consuming to know when to
     * break out of the loop.
     * @param _token The address of the token
     * @param _amount The amount that will be withdrawn
     */
    function getBestStrategyWithdraw(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (
            address[] memory _strategies,
            uint256[] memory _amounts
        )
    {
        // get the length of strategies for a single token
        address _vault = manager.vaults(_token);
        uint256 k = _vaultDetails[_vault].strategies.length;
        // initialize fixed-length memory arrays
        _strategies = new address[](k);
        _amounts = new uint256[](k);
        address _strategy;
        uint256 _balance;
        // scan forward from the the beginning of strategies
        for (uint i = 0; i < k; i++) {
            _strategy = _vaultDetails[_vault].strategies[i];
            _strategies[i] = _strategy;
            // get the balance of the strategy
            _balance = _vaultDetails[_vault].balances[_strategy];
            // if the strategy doesn't have the balance to cover the withdraw
            if (_balance < _amount) {
                // withdraw what we can and add to the _amounts
                _amounts[i] = _balance;
                _amount = _amount.sub(_balance);
            } else {
                // stop scanning if the balance is more than the withdraw amount
                _amounts[i] = _amount;
                break;
            }
        }
    }

    /**
     * @notice Updates the stored balance of a given strategy for a vault
     * @param _vault The address of the vault
     * @param _strategy The address of the strategy
     */
    function updateBalance(
        address _vault,
        address _strategy
    )
        internal
    {
        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();
    }

    /**
     * MODIFIERS
     */

    /**
     * @notice Reverts if the protocol is halted
     */
    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    /**
     * @notice Reverts if the caller is not governance
     */
    modifier onlyGovernance() {
        require(msg.sender == manager.governance(), ""!governance"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the strategist
     */
    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }

    /**
     * @notice Reverts if the strategy is not allowed in the manager
     */
    modifier onlyStrategy(address _strategy) {
        require(manager.allowedStrategies(_strategy), ""!allowedStrategy"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the harvester
     */
    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    /**
     * @notice Reverts if the caller is not the vault for the given token
     */
    modifier onlyVault(address _token) {
        require(msg.sender == manager.vaults(_token), ""!vault"");
        _;
    }
}",4847.0,684.0,"[H-01] Controller.setCap sets wrong vault balance
The `Controller.setCap` function sets a cap for a strategy and withdraws any excess amounts (_diff). The vault balance is decreased by the entire strategy balance instead of by this _diff: The `_vaultDetails[_vault].balance` variable does not correctly track the actual vault balances anymore, it will usually underestimate the vault balance. This variable is used in `Controller.balanceOf()`, which in turn is used in `Vault.balance()`, which in turn is used to determine how many shares to mint / amount to receive when redeeming shares. If the value is less, users will lose money as they can redeem fewer tokens. Also, an attacker can deposit and will receive more shares than they should receive. They can then wait until the balance is correctly updated again and withdraw their shares for a higher amount than they deposited. This leads to the vault losing tokens.   [H-02] set cap breaks vault's Balance
In controller.sol's function setCap, the contract wrongly handles _vaultDetails[_vault].balance. While the balance should be decreased by the difference of strategies balance, it subtracts the remaining balance of the strategy. See Controller.sol L262-L278. `_vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_balance);`
This would result in vaultDetails[_vault].balance being far smaller than the strategy's value. A user would trigger the assertion at Controller.sol#475 and the fund would be locked in the strategy.
Though setCap is a permission function that only the operator can call, it's likely to be called and the fund would be locked in the contract. I consider this a high severity issue.
  [H-04] Controller does not raise an error when there's insufficient liquidity
When a user tries to withdraw the token from the vault, the vault would withdraw the token from the controller if there's insufficient liquidity in the vault. However, the controller does not raise an error when there's insufficient liquidity in the controller/ strategies. The user would lose his shares while getting nothing.
An MEV searcher could apply this attack on any withdrawal. When an attacker found an unconfirmed tx that tries to withdraw 1M dai, he can do such sandwich attack.
- Deposits USDC into the vault.
- Withdraw all dai left in the vault/controller/strategy.
- Place the vitims tx here. The victim would get zero dai while burning 1 M share. This would pump the share price.
- Withdraw all liquidity.
All users would be vulnerable to MEV attackers. I consider this is a high-risk issue.   [H-09] `removeToken` would break the vault/protocol.
There's no safety check in Manager.sol's `removeToken`. Manager.sol#L454-L487`
(1) The token would be locked in the original vault. Given the current design, the vault would keep a ratio of total amount to save the gas. Once the token is removed at manager contract, these token would lost.
(2) Controller’s `balanceOf` would no longer reflects the real value. Controller.sol#L488-L495 While `_vaultDetails[msg.sender].balance;` remains the same, user can nolonger withdraw those amount.
(3) Share price in the vault would decrease drastically. The share price is calculated as `totalValue / totalSupply` Vault.sol#L217. While the totalSupply of the share remains the same, the total balance has drastically decreased.
Calling removeToken way would almost break the whole protocol if the vault has already started. I consider this is a high-risk issue.
 
[M-08] Controller.inCaseStrategyGetStuck does not update balance
The `Controller.inCaseStrategyGetStuck` withdraws from a strategy but does not call `updateBalance(_vault, _strategy)` afterwards.
The `_vaultDetails[_vault].balances[_strategy`] variable does not correctly track the actual strategy balance anymore. I'm not sure what exactly this field is used for besides getting the withdraw amounts per strategy in getBestStrategyWithdraw. As the strategy contains a lower amount than stored in the field, Controller.withdraw will attempt to withdraw too much.",5.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""../interfaces/IController.sol"";
import ""../interfaces/IConverter.sol"";
import ""../interfaces/IVault.sol"";
import ""../interfaces/IHarvester.sol"";
import ""../interfaces/IStrategy.sol"";
import ""../interfaces/IManager.sol"";


contract Controller is IController {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    IManager public immutable override manager;

    bool public globalInvestEnabled;
    uint256 public maxStrategies;

    struct VaultDetail {
        address converter;
        uint256 balance;
        address[] strategies;
        mapping(address => uint256) balances;
        mapping(address => uint256) index;
        mapping(address => uint256) caps;
    }

    
    mapping(address => VaultDetail) internal _vaultDetails;
    
    mapping(address => address) internal _vaultStrategies;

    
    event Harvest(address indexed strategy);

    
    event StrategyAdded(address indexed vault, address indexed strategy, uint256 cap);

    
    event StrategyRemoved(address indexed vault, address indexed strategy);

    
    event StrategiesReordered(
        address indexed vault,
        address indexed strategy1,
        address indexed strategy2
    );

    
    constructor(
        address _manager
    )
        public
    {
        manager = IManager(_manager);
        globalInvestEnabled = true;
        maxStrategies = 10;
    }

    

    
    function addStrategy(
        address _vault,
        address _strategy,
        uint256 _cap,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultDetails[_vault].converter != address(0), ""!converter"");
        
        require(_vaultStrategies[_strategy] == address(0), ""Strategy is already added""); 
        
        uint256 index = _vaultDetails[_vault].strategies.length;
        
        require(index < maxStrategies, ""!maxStrategies"");
        
        _vaultDetails[_vault].strategies.push(_strategy);
        
        _vaultDetails[_vault].caps[_strategy] = _cap;
        
        _vaultDetails[_vault].index[_strategy] = index;
        
        _vaultStrategies[_strategy] = _vault;
        if (_timeout > 0) {
            
            IHarvester(manager.harvester()).addStrategy(_vault, _strategy, _timeout);
        }
        emit StrategyAdded(_vault, _strategy, _cap);
    }

    
    function inCaseStrategyGetStuck(
        address _strategy,
        address _token
    )
        external
        onlyStrategist
    {
        IStrategy(_strategy).withdraw(_token);
        IERC20(_token).safeTransfer(
            manager.treasury(),
            IERC20(_token).balanceOf(address(this))
        );
    }

    
    function inCaseTokensGetStuck(
        address _token,
        uint256 _amount
    )
        external
        onlyStrategist
    {
        IERC20(_token).safeTransfer(manager.treasury(), _amount);
    }

    
    function removeStrategy(
        address _vault,
        address _strategy,
        uint256 _timeout
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        
        uint256 index = vaultDetail.index[_strategy];
        
        uint256 tail = vaultDetail.strategies.length.sub(1);
        
        address replace = vaultDetail.strategies[tail];
        
        vaultDetail.strategies[index] = replace;
        
        vaultDetail.index[replace] = index;
        
        vaultDetail.strategies.pop();
        
        delete vaultDetail.index[_strategy];
        
        delete vaultDetail.caps[_strategy];
        
        delete vaultDetail.balances[_strategy];
        
        delete _vaultStrategies[_strategy];
        
        IStrategy(_strategy).withdrawAll();
        
        IHarvester(manager.harvester()).removeStrategy(_vault, _strategy, _timeout);
        emit StrategyRemoved(_vault, _strategy);
    }

    
    function reorderStrategies(
        address _vault,
        address _strategy1,
        address _strategy2
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedVaults(_vault), ""!_vault"");
        require(_vaultStrategies[_strategy1] == _vault, ""!_strategy1"");
        require(_vaultStrategies[_strategy2] == _vault, ""!_strategy2"");
        VaultDetail storage vaultDetail = _vaultDetails[_vault];
        
        uint256 index1 = vaultDetail.index[_strategy1];
        uint256 index2 = vaultDetail.index[_strategy2];
        
        vaultDetail.strategies[index1] = _strategy2;
        vaultDetail.strategies[index2] = _strategy1;
        
        vaultDetail.index[_strategy1] = index2;
        vaultDetail.index[_strategy2] = index1;
        emit StrategiesReordered(_vault, _strategy1, _strategy2);
    }

    
    function setCap(
        address _vault,
        address _strategy,
        uint256 _cap,
        address _convert
    )
        external
        notHalted
        onlyStrategist
        onlyStrategy(_strategy)
    {
        _vaultDetails[_vault].caps[_strategy] = _cap;
        uint256 _balance = IStrategy(_strategy).balanceOf();
        
        if (_balance > _cap && _cap != 0) {
            uint256 _diff = _balance.sub(_cap);
            IStrategy(_strategy).withdraw(_diff);
            updateBalance(_vault, _strategy);
            _balance = IStrategy(_strategy).balanceOf();
            _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.sub(_diff);
            address _want = IStrategy(_strategy).want();
            _balance = IERC20(_want).balanceOf(address(this));
            if (_convert != address(0)) {
                IConverter _converter = IConverter(_vaultDetails[_vault].converter);
                IERC20(_want).safeTransfer(address(_converter), _balance);
                _balance = _converter.convert(_want, _convert, _balance, 1);
                IERC20(_convert).safeTransfer(_vault, _balance);
            } else {
                IERC20(_want).safeTransfer(_vault, _balance);
            }
        }
    }

    
    function setConverter(
        address _vault,
        address _converter
    )
        external
        notHalted
        onlyStrategist
    {
        require(manager.allowedConverters(_converter), ""!allowedConverters"");
        _vaultDetails[_vault].converter = _converter;
    }

    
    function setInvestEnabled(
        bool _investEnabled
    )
        external
        notHalted
        onlyStrategist
    {
        globalInvestEnabled = _investEnabled;
    }

    
    function setMaxStrategies(
        uint256 _maxStrategies
    )
        external
        notHalted
        onlyStrategist
    {
        maxStrategies = _maxStrategies;
    }

    function skim(
        address _strategy
    )
        external
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).skim();
        IERC20(_want).safeTransfer(_vaultStrategies[_strategy], IERC20(_want).balanceOf(address(this)));
    }

    
    function withdrawAll(
        address _strategy,
        address _convert
    )
        external
        override
        onlyStrategist
        onlyStrategy(_strategy)
    {
        address _want = IStrategy(_strategy).want();
        IStrategy(_strategy).withdrawAll();
        uint256 _amount = IERC20(_want).balanceOf(address(this));
        address _vault = _vaultStrategies[_strategy];
        updateBalance(_vault, _strategy);
        if (_convert != address(0)) {
            IConverter _converter = IConverter(_vaultDetails[_vault].converter);
            IERC20(_want).safeTransfer(address(_converter), _amount);
            _amount = _converter.convert(_want, _convert, _amount, 1);
            IERC20(_convert).safeTransfer(_vault, _amount);
        } else {
            IERC20(_want).safeTransfer(_vault, _amount);
        }
        uint256 _balance = _vaultDetails[_vault].balance;
        if (_balance >= _amount) {
            _vaultDetails[_vault].balance = _balance.sub(_amount);
        } else {
            _vaultDetails[_vault].balance = 0;
        }
    }

    

    
    function harvestStrategy(
        address _strategy,
        uint256 _estimatedWETH,
        uint256 _estimatedYAXIS
    )
        external
        override
        notHalted
        onlyHarvester
        onlyStrategy(_strategy)
    {
        uint256 _before = IStrategy(_strategy).balanceOf();
        IStrategy(_strategy).harvest(_estimatedWETH, _estimatedYAXIS);
        uint256 _after = IStrategy(_strategy).balanceOf();
        address _vault = _vaultStrategies[_strategy];
        _vaultDetails[_vault].balance = _vaultDetails[_vault].balance.add(_after.sub(_before));
        _vaultDetails[_vault].balances[_strategy] = _after;
        emit Harvest(_strategy);
    }

    

    
    function earn(
        address _strategy,
        address _token,
        uint256 _amount
    )
        external
        override
        notHalted
        onlyStrategy(_strategy)
        onlyVault(_token)
    {
        
        address _want = IStrategy(_strategy).want();
        if (_want != _token) {
            IConverter _converter = IConverter(_vaultDetails[msg.sender].converter);
            IERC20(_token).safeTransfer(address(_converter), _amount);
            
            _amount = _converter.convert(_token, _want, _amount, 1);
            IERC20(_want).safeTransfer(_strategy, _amount);
        } else {
            IERC20(_token).safeTransfer(_strategy, _amount);
        }
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.add(_amount);
        
        IStrategy(_strategy).deposit();
        updateBalance(msg.sender, _strategy);
    }

    
    function withdraw(
        address _token,
        uint256 _amount
    )
        external
        override
        onlyVault(_token)
    {
        (
            address[] memory _strategies,
            uint256[] memory _amounts
        ) = getBestStrategyWithdraw(_token, _amount);
        for (uint i = 0; i < _strategies.length; i++) {
            
            
            if (_strategies[i] == address(0)) {
                break;
            }
            IStrategy(_strategies[i]).withdraw(_amounts[i]);
            updateBalance(msg.sender, _strategies[i]);
            address _want = IStrategy(_strategies[i]).want();
            if (_want != _token) {
                address _converter = _vaultDetails[msg.sender].converter;
                IERC20(_want).safeTransfer(_converter, _amounts[i]);
                
                IConverter(_converter).convert(_want, _token, _amounts[i], 1);
            }
        }
        _amount = IERC20(_token).balanceOf(address(this));
        _vaultDetails[msg.sender].balance = _vaultDetails[msg.sender].balance.sub(_amount);
        IERC20(_token).safeTransfer(msg.sender, _amount);
    }

    

    
    function balanceOf()
        external
        view
        override
        returns (uint256 _balance)
    {
        return _vaultDetails[msg.sender].balance;
    }

    
    function converter(
        address _vault
    )
        external
        view
        override
        returns (address)
    {
        return _vaultDetails[_vault].converter;
    }

    
    function getCap(
        address _vault,
        address _strategy
    )
        external
        view
        returns (uint256)
    {
        return _vaultDetails[_vault].caps[_strategy];
    }

    
    function investEnabled()
        external
        view
        override
        returns (bool)
    {
        if (globalInvestEnabled) {
            return _vaultDetails[msg.sender].strategies.length > 0;
        }
        return false;
    }

    
    function strategies(
        address _vault
    )
        external
        view
        returns (address[] memory)
    {
        return _vaultDetails[_vault].strategies;
    }

    
    function strategies()
        external
        view
        override
        returns (uint256)
    {
        return _vaultDetails[msg.sender].strategies.length;
    }

    

    
    function getBestStrategyWithdraw(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (
            address[] memory _strategies,
            uint256[] memory _amounts
        )
    {
        
        address _vault = manager.vaults(_token);
        uint256 k = _vaultDetails[_vault].strategies.length;
        
        _strategies = new address[](k);
        _amounts = new uint256[](k);
        address _strategy;
        uint256 _balance;
        
        for (uint i = 0; i < k; i++) {
            _strategy = _vaultDetails[_vault].strategies[i];
            _strategies[i] = _strategy;
            
            _balance = _vaultDetails[_vault].balances[_strategy];
            
            if (_balance < _amount) {
                
                _amounts[i] = _balance;
                _amount = _amount.sub(_balance);
            } else {
                
                _amounts[i] = _amount;
                break;
            }
        }
    }

    
    function updateBalance(
        address _vault,
        address _strategy
    )
        internal
    {
        _vaultDetails[_vault].balances[_strategy] = IStrategy(_strategy).balanceOf();
    }

    

    
    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    
    modifier onlyGovernance() {
        require(msg.sender == manager.governance(), ""!governance"");
        _;
    }

    
    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }

    
    modifier onlyStrategy(address _strategy) {
        require(manager.allowedStrategies(_strategy), ""!allowedStrategy"");
        _;
    }

    
    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    
    modifier onlyVault(address _token) {
        require(msg.sender == manager.vaults(_token), ""!vault"");
        _;
    }
}",3187.0,4,1,"Okay, let's break down the potential vulnerabilities in the `Controller` smart contract.

**High Severity Vulnerabilities**

1.  **Reentrancy:** Several functions follow the pattern of making external calls (`IStrategy.withdraw`, `IStrategy.harvest`, `IConverter.convert`, `IStrategy.deposit`) *before* updating internal state tracking balances (`_vaultDetails[vault].balance`, `_vaultDetails[vault].balances[strategy]`). This is a classic reentrancy vector.
    *   **Affected Functions:** `setCap`, `withdrawAll`, `harvestStrategy`, `earn`, `withdraw`.
    *   **Example Scenario (harvestStrategy):**
        1.  `harvestStrategy` is called.
        2.  It calls `IStrategy(_strategy).harvest(...)`.
        3.  A malicious strategy contract implements `harvest` to call back into the `Controller`, perhaps calling `withdraw` or another function that reads/modifies `_vaultDetails[_vault].balance` or `_vaultDetails[_vault].balances[_strategy]`.
        4.  The reentrant call operates on stale data because the state updates in the original `harvestStrategy` call (`_vaultDetails[_vault].balance = ...`, `_vaultDetails[_vault].balances[_strategy] = ...`) haven't executed yet.
        5.  This could lead to incorrect balance accounting, potentially allowing users or the strategy to withdraw more funds than they should have, or breaking internal consistency.
    *   **Mitigation:** Implement the Checks-Effects-Interactions pattern (update state *before* external calls) and/or use a reentrancy guard (like OpenZeppelin's `ReentrancyGuard` modifier) on all functions involving external calls and state updates.

2.  **Centralization Risk / Malicious Strategist:** The `strategist` role (controlled via `manager.strategist()`) has extensive, potentially dangerous permissions:
    *   Can add/remove any allowed strategy to/from any allowed vault (`addStrategy`, `removeStrategy`).
    *   Can arbitrarily reorder strategies (`reorderStrategies`), potentially affecting withdrawal order logic (`getBestStrategyWithdraw`).
    *   Can set strategy caps (`setCap`), potentially withdrawing funds unexpectedly if lowering the cap.
    *   Can change the vault's converter (`setConverter`) to a malicious one.
    *   Can halt all new investments (`setInvestEnabled(false)`).
    *   Can withdraw *all* funds from any strategy to the vault (`withdrawAll`), potentially forcing conversions.
    *   Can forcefully withdraw specific tokens from a strategy (`inCaseStrategyGetStuck`) or arbitrary tokens from the controller (`inCaseTokensGetStuck`), sending them to the treasury.
    *   Can skim rewards/assets from strategies (`skim`).
    *   **Impact:** A malicious or compromised strategist could steal funds (e.g., by setting a malicious converter, adding a malicious strategy, manipulating withdrawals via `setCap` or `withdrawAll`), disrupt operations, or hold funds hostage.
    *   **Mitigation:** This is often a design choice trading off decentralization for operational efficiency. Potential mitigations include using a multi-sig for the strategist role, implementing a timelock for sensitive actions, or splitting permissions into more granular roles.

**Medium Severity Vulnerabilities**

3.  **Denial of Service (DoS) in `withdraw`:**
    *   **Gas Limit:** The `withdraw` function iterates through strategies returned by `getBestStrategyWithdraw`. If a vault has many strategies (`maxStrategies` defaults to 10 but can be increased), the gas cost of the loop (including external calls `IStrategy.withdraw` and potentially `IConverter.convert`) could exceed the block gas limit, making withdrawals impossible for amounts requiring iteration over many strategies.
    *   **External Call Failure:** If any `IStrategy.withdraw` or `IConverter.convert` call within the loop reverts (due to a bug, low liquidity, paused contract, etc.), the *entire* `withdraw` transaction will revert. A single faulty strategy or converter interaction can block all withdrawals that need to interact with it.
    *   **Mitigation:** Limit `maxStrategies` to a reasonable number. For the external call failure, consider more complex withdrawal logic that might allow skipping faulty strategies (difficult) or implement off-chain resolution/manual intervention paths.

4.  **Inconsistent State / Missing Check in `removeStrategy`:**
    *   The `removeStrategy` function checks `manager.allowedVaults(_vault)` but does *not* explicitly check if the `_strategy` being removed actually belongs to that `_vault` (i.e., `_vaultStrategies[_strategy] == _vault`) before performing state manipulations like `vaultDetail.index[_strategy]`.
    *   If a strategist accidentally (or maliciously) calls `removeStrategy` with a valid `_vault` but a `_strategy` that isn't part of that vault (or belongs to another vault), `vaultDetail.index[_strategy]` would likely return 0 (default value). The function would then attempt to modify `vaultDetail.strategies[0]` and `vaultDetail.index` based on this incorrect index, potentially corrupting the strategy list and index mapping for that vault.
    *   **Mitigation:** Add a requirement at the beginning of `removeStrategy`: `require(_vaultStrategies[_strategy] == _vault, ""Strategy not in vault"");`.

**Low Severity / Informational**

5.  **Reliance on External Components:** The Controller's security is heavily dependent on the correctness and security of the `IManager`, `IStrategy`, `IConverter`, `IHarvester`, and the ERC20 token contracts it interacts with. A vulnerability in any of these can cascade and affect the Controller.
    *   **Mitigation:** Thoroughly audit all external components and ensure the `IManager` provides correct addresses and permissions.

6.  **Potential Oracle Manipulation (via Converter):** Functions like `earn`, `withdraw`, `setCap`, and `withdrawAll` rely on `IConverter.convert`. Converters often use price oracles. If the converter uses a manipulatable oracle, these functions could be exploited (e.g., withdrawing more value than expected, depositing less).
    *   **Mitigation:** Ensure the converters set via `setConverter` use robust and manipulation-resistant price oracles.

7.  **Front-Running/MEV:** Administrative actions (`addStrategy`, `removeStrategy`, `setCap`, `reorderStrategies`) and potentially `harvestStrategy` calls can be front-run for informational advantage or minor value extraction, depending on the specific strategies and market conditions. Deposits (`earn`) and withdrawals (`withdraw`) could also be front-run if they cause significant price impact within the strategy or converter.
    *   **Mitigation:** Difficult to prevent entirely. Timelocks on critical admin functions can help. Users may need to use MEV protection services or appropriate slippage controls.

8.  **Lack of Event Emission for Some State Changes:** Functions like `setConverter`, `setInvestEnabled`, `setMaxStrategies` modify critical parameters but do not emit events. This makes off-chain monitoring and tracking of these important changes harder.
    *   **Mitigation:** Add corresponding `event` declarations and `emit` statements in these functions.

9.  **Redundant State (`_vaultStrategies`):** The `_vaultStrategies` mapping (`strategy => vault`) seems somewhat redundant given that the primary data structure is `_vaultDetails[vault].strategies`. While used for checks, it increases state complexity and requires careful management to keep consistent with `_vaultDetails`.
    *   **Mitigation:** Consider if this mapping is strictly necessary or if the checks could be performed by iterating through `_vaultDetails[vault].strategies` (though potentially more gas-intensive). If kept, ensure consistency during add/remove operations.

This list covers the primary vulnerabilities based on the provided code. Remember that a full audit would also involve analyzing the interactions with the interfaces (`IManager`, `IStrategy`, etc.) and the specific implementations used for those components.","### **Summary of Matches and Gaps**

---

### **[H-01] Controller.setCap sets wrong vault balance**

**Report Description**:
The `Controller.setCap` function sets a cap for a strategy and withdraws any excess amounts (`_diff`). However, the vault balance is decreased by the entire strategy balance instead of by `_diff`. This causes `_vaultDetails[_vault].balance` to underestimate the actual vault balance. This variable is used in `Controller.balanceOf()`, which in turn is used in `Vault.balance()`, affecting share minting and redemption. Users may lose money when redeeming shares, and attackers can exploit this by depositing to receive more shares than they should, leading to vault losses.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this specific issue. The problem lies in incorrect balance tracking during the `setCap` operation, which is not covered in the response list.

---

### **[H-02] setCap breaks vault's Balance**

**Report Description**:
In `Controller.sol`, the `setCap` function incorrectly handles `_vaultDetails[_vault].balance`. Instead of decreasing the balance by the difference (`_diff`), it subtracts the entire strategy balance. This results in `vaultDetails[_vault].balance` being far smaller than the actual strategy value. This could trigger an assertion failure in `Controller.sol#475`, locking funds in the strategy. Although `setCap` is a permissioned function, its misuse could lead to high-severity issues.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The problem is specific to incorrect balance adjustments in `setCap`, which is not mentioned in the response list.

---

### **[H-04] Controller does not raise an error when there's insufficient liquidity**

**Report Description**:
When a user withdraws tokens from the vault, the vault withdraws from the controller if there's insufficient liquidity. However, the controller does not raise an error when there's insufficient liquidity in the controller/strategies. This allows users to lose shares without receiving tokens. An MEV searcher could exploit this by sandwiching withdrawals, causing users to lose funds and artificially inflating share prices.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The problem is specific to insufficient liquidity handling and MEV exploitation, which is not covered in the response list.

---

### **[H-09] `removeToken` would break the vault/protocol**

**Report Description**:
The `removeToken` function in `Manager.sol` lacks safety checks. Removing a token would lock it in the original vault, break `Controller.balanceOf` accuracy, and drastically decrease the vault's share price. This could almost break the entire protocol if the vault has already started operations.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The problem is specific to the `removeToken` function's lack of safety checks, which is not mentioned in the response list.

---

### **[M-08] Controller.inCaseStrategyGetStuck does not update balance**

**Report Description**:
The `Controller.inCaseStrategyGetStuck` function withdraws from a strategy but does not call `updateBalance(_vault, _strategy)` afterward. This causes `_vaultDetails[_vault].balances[_strategy]` to incorrectly track the actual strategy balance. This could lead to incorrect withdrawal amounts in `Controller.withdraw`.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address this issue. The problem is specific to missing balance updates in `inCaseStrategyGetStuck`, which is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-01] Controller.setCap sets wrong vault balance**
- **[H-02] setCap breaks vault's Balance**
- **[H-04] Controller does not raise an error when there's insufficient liquidity**
- **[H-09] `removeToken` would break the vault/protocol**
- **[M-08] Controller.inCaseStrategyGetStuck does not update balance**

---

### **Conclusion**:
The response list does not adequately address the issues reported in the `issue` list. Most of the high and medium-severity issues are either missed or misaligned with the actual vulnerabilities described. The response list focuses on general vulnerabilities like reentrancy and centralization risks but fails to cover the specific issues related to incorrect balance tracking, insufficient liquidity handling, and unsafe function implementations.",0,0,5,22,"```
None.
```",0.0
Vault.sol,"// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/utils/Address.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/GSN/Context.sol"";

import ""./VaultToken.sol"";

import ""./interfaces/IManager.sol"";
import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/ExtendedIERC20.sol"";

/**
 * @title Vault
 * @notice The vault is where users deposit and withdraw
 * like-kind assets that have been added by governance.
 */
contract Vault is VaultToken, IVault {
    using Address for address;
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant MAX = 10000;

    IManager public immutable override manager;

    // Strategist-updated variables
    address public override gauge;
    uint256 public min;
    uint256 public totalDepositCap;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);
    event Earn(address indexed token, uint256 amount);

    /**
     * @param _name The name of the vault token for depositors
     * @param _symbol The symbol of the vault token for depositors
     * @param _manager The address of the vault manager contract
     */
    constructor(
        string memory _name,
        string memory _symbol,
        address _manager
    )
        public
        VaultToken(_name, _symbol)
    {
        manager = IManager(_manager);
        min = 9500;
        totalDepositCap = 10000000 ether;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Sets the value of this vault's gauge
     * @dev Allow to be unset with the zero address
     * @param _gauge The address of the gauge
     */
    function setGauge(
        address _gauge
    )
        external
        notHalted
        onlyStrategist
    {
        gauge = _gauge;
    }

    /**
     * @notice Sets the value for min
     * @dev min is the minimum percent of funds to keep small withdrawals cheap
     * @param _min The new min value
     */
    function setMin(
        uint256 _min
    )
        external
        notHalted
        onlyStrategist
    {
        require(_min <= MAX, ""!_min"");
        min = _min;
    }

    /**
     * @notice Sets the value for the totalDepositCap
     * @dev totalDepositCap is the maximum amount of value that can be deposited
     * to the metavault at a time
     * @param _totalDepositCap The new totalDepositCap value
     */
    function setTotalDepositCap(
        uint256 _totalDepositCap
    )
        external
        notHalted
        onlyStrategist
    {
        totalDepositCap = _totalDepositCap;
    }

    /**
     * @notice Swaps tokens held within the vault
     * @param _token0 The token address to swap out
     * @param _token1 The token address to to
     * @param _expectedAmount The expected amount of _token1 to receive
     */
    function swap(
        address _token0,
        address _token1,
        uint256 _expectedAmount
    )
        external
        override
        notHalted
        onlyStrategist
        returns (uint256 _balance)
    {
        IConverter _converter = IConverter(IController(manager.controllers(address(this))).converter(address(this)));
        _balance = IERC20(_token0).balanceOf(address(this));
        IERC20(_token0).safeTransfer(address(_converter), _balance);
        _balance = _converter.convert(_token0, _token1, _balance, _expectedAmount);
    }

    /**
     * HARVESTER-ONLY FUNCTIONS
     */

    /**
     * @notice Sends accrued 3CRV tokens on the metavault to the controller to be deposited to strategies
     */
    function earn(
        address _token,
        address _strategy
    )
        external
        override
        checkToken(_token)
        notHalted
        onlyHarvester
    {
        require(manager.allowedStrategies(_strategy), ""!_strategy"");
        IController _controller = IController(manager.controllers(address(this)));
        if (_controller.investEnabled()) {
            uint256 _balance = available(_token);
            IERC20(_token).safeTransfer(address(_controller), _balance);
            _controller.earn(_strategy, _token, _balance);
            emit Earn(_token, _balance);
        }
    }

    /**
     * USER-FACING FUNCTIONS
     */

    /**
     * @notice Deposits the given token into the vault
     * @param _token The address of the token
     * @param _amount The amount of tokens to deposit
     */
     function deposit(
        address _token,
        uint256 _amount
     )
        public
        override
        checkToken(_token)
        notHalted
        returns (uint256 _shares)
    {
        require(_amount > 0, ""!_amount"");

        uint256 _balance = balance();

        uint256 _before = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        _amount = IERC20(_token).balanceOf(address(this)).sub(_before);

        if (_amount > 0) {
            _amount = _normalizeDecimals(_token, _amount);

            if (totalSupply() > 0) {
                _amount = (_amount.mul(totalSupply())).div(_balance);
            }

            _shares = _amount;
        }

        if (_shares > 0) {
            _mint(msg.sender, _shares);
            require(totalSupply() <= totalDepositCap, "">totalDepositCap"");
            emit Deposit(msg.sender, _shares);
        }
    }

    /**
     * @notice Deposits multiple tokens simultaneously to the vault
     * @dev Users must approve the vault to spend their stablecoin
     * @param _tokens The addresses of each token being deposited
     * @param _amounts The amounts of each token being deposited
     */
    function depositMultiple(
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
        override
        returns (uint256 _shares)
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i; i < _amounts.length; i++) {
            _shares = _shares.add(deposit(_tokens[i], _amounts[i]));
        }
    }

    /**
     * @notice Withdraws an amount of shares to a given output token
     * @param _shares The amount of shares to withdraw
     * @param _output The address of the token to receive
     */
    function withdraw(
        uint256 _shares,
        address _output
    )
        public
        override
        checkToken(_output)
    {
        uint256 _amount = (balance().mul(_shares)).div(totalSupply());
        _burn(msg.sender, _shares);

        uint256 _withdrawalProtectionFee = manager.withdrawalProtectionFee();
        if (_withdrawalProtectionFee > 0) {
            uint256 _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX);
            _amount = _amount.sub(_withdrawalProtection);
        }

        uint256 _balance = IERC20(_output).balanceOf(address(this));
        if (_balance < _amount) {
            IController _controller = IController(manager.controllers(address(this)));
            uint256 _toWithdraw = _amount.sub(_balance);
            if (_controller.strategies() > 0) {
                _controller.withdraw(_output, _toWithdraw);
            }
            uint256 _after = IERC20(_output).balanceOf(address(this));
            uint256 _diff = _after.sub(_balance);
            if (_diff < _toWithdraw) {
                _amount = _after;
            }
        }

        IERC20(_output).safeTransfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    /**
     * @notice Withdraw the entire balance for an account
     * @param _output The address of the desired token to receive
     */
    function withdrawAll(
        address _output
    )
        external
        override
    {
        withdraw(balanceOf(msg.sender), _output);
    }

    /**
     * VIEWS
     */

    /**
     * @notice Returns the amount of tokens available to be sent to strategies
     * @dev Custom logic in here for how much the vault allows to be borrowed
     * @dev Sets minimum required on-hand to keep small withdrawals cheap
     * @param _token The address of the token
     */
    function available(
        address _token
    )
        public
        view
        override
        returns (uint256)
    {
        return IERC20(_token).balanceOf(address(this)).mul(min).div(MAX);
    }

    /**
     * @notice Returns the total balance of the vault, including strategies
     */
    function balance()
        public
        view
        override
        returns (uint256 _balance)
    {
        return balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf());
    }

    /**
     * @notice Returns the balance of allowed tokens present on the vault only
     */
    function balanceOfThis()
        public
        view
        returns (uint256 _balance)
    {
        address[] memory _tokens = manager.getTokens(address(this));
        for (uint8 i; i < _tokens.length; i++) {
            address _token = _tokens[i];
            _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
        }
    }

    /**
     * @notice Returns the rate of vault shares
     */
    function getPricePerFullShare()
        external
        view
        override
        returns (uint256)
    {
        if (totalSupply() > 0) {
            return balance().mul(1e18).div(totalSupply());
        } else {
            return balance();
        }
    }

    /**
     * @notice Returns an array of the tokens for this vault
     */
    function getTokens()
        external
        view
        override
        returns (address[] memory)
    {
        return manager.getTokens(address(this));
    }

    /**
     * @notice Returns the fee for withdrawing the given amount
     * @param _amount The amount to withdraw
     */
    function withdrawFee(
        uint256 _amount
    )
        external
        view
        override
        returns (uint256)
    {
        return manager.withdrawalProtectionFee().mul(_amount).div(MAX);
    }

    function _normalizeDecimals(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (uint256)
    {
        uint256 _decimals = uint256(ExtendedIERC20(_token).decimals());
        if (_decimals < 18) {
            _amount = _amount.mul(10**(18-_decimals));
        }
        return _amount;
    }

    /**
     * MODIFIERS
     */

    modifier checkToken(address _token) {
        require(manager.allowedTokens(_token) && manager.vaults(_token) == address(this), ""!_token"");
        _;
    }

    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }
}",2561.0,408.0,"[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities.
The v3 vault treats all valid tokens exactly the same. Depositing 1M DAI would get the same share as depositing 1M USDT. User can withdraw their share in another token. Though there's withdrawalProtectionFee (0.1 percent), the vault is still a no slippage stable coin exchange.
Also, I notice that 3crv_token is added to the vault in the test. Treating 3crv_token and all other stable coins the same would make the vault vulnerable to flashloan attack. 3crv_token is an lp token and at the point of writing, the price of it is 1.01. The arbitrage space is about 0.8 percent and makes the vault vulnerable to flashloan attacks.
Though the team may not add crv_token and dai to the same vault, its design makes the vault vulnerable. Strategies need to be designed with super caution or the vault would be vulnerable to attackers.
Given the possibility of a flashloan attack, I consider this a high-risk issue.
  [H-06] earn results in decreasing share price
For a dai vault that pairs with `NativeStrategyCurve3Crv`, every time `earn()` is called, shareholders would lose money. (about 2%)
There are two issues involved. The Vault contract and the `controller` contract doesn't handle the price difference between the want token and other tokens.
At Vault.sol L293, when a vault calculates its value, it sums up all tokens balance. However, when the controller calculates vaults' value (at Controller.sol L410-L436), it only adds the amount of strategy.want it received. (in this case, it's t3crv).
Under the current design, users who deposit dai to the vault would not get yield. Instead, they would keep losing money.
  [H-07] Vault.balance() mixes normalized and standard amounts
Loops
The `Vault.balance` function uses the balanceOfThis function which scales (""normalizes"") all balances to 18 decimals.
Note that balance()'s second term IController(manager.controllers(address(this))).balanceOf() is not normalized. The code is adding a non-normalized amount (for example 6 decimals only for USDC) to a normalized (18 decimals).
  [H-08] Vault.withdraw mixes normalized and standard amounts The `Vault.balance` function uses the balanceOfThis function which scales (""normalizes"") all balances to 18 decimals.
Note that balance()'s second term IController(manager.controllers(address(this))).balanceOf() is not normalized, but it must be.
This leads to many issues through the contracts that use balance but don't treat these values as normalized values. For example, in Vault.withdraw, the computed _amount value is normalized (in 18 decimals). But the uint256 _balance = IERC20(_output).balanceOf(address(this)); value is not normalized but compared to the normalized _amount and even subtracted:

  [M-03] `Vault.withdraw` sometimes burns too many shares
The `Vault.withdraw` function attempts to withdraw funds from the controller if there are not enough in the vault already. In the case the controller could not withdraw enough, i.e., where _diff < _toWithdraw, the user will receive less output tokens than their fair share would entitle them to (the initial _amount).
The withdrawer receives fewer output tokens than they were entitled to.",5.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/utils/Address.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/GSN/Context.sol"";

import ""./VaultToken.sol"";

import ""./interfaces/IManager.sol"";
import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IVault.sol"";
import ""./interfaces/ExtendedIERC20.sol"";


contract Vault is VaultToken, IVault {
    using Address for address;
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant MAX = 10000;

    IManager public immutable override manager;

    
    address public override gauge;
    uint256 public min;
    uint256 public totalDepositCap;

    event Deposit(address indexed account, uint256 amount);
    event Withdraw(address indexed account, uint256 amount);
    event Earn(address indexed token, uint256 amount);

    
    constructor(
        string memory _name,
        string memory _symbol,
        address _manager
    )
        public
        VaultToken(_name, _symbol)
    {
        manager = IManager(_manager);
        min = 9500;
        totalDepositCap = 10000000 ether;
    }

    

    
    function setGauge(
        address _gauge
    )
        external
        notHalted
        onlyStrategist
    {
        gauge = _gauge;
    }

    
    function setMin(
        uint256 _min
    )
        external
        notHalted
        onlyStrategist
    {
        require(_min <= MAX, ""!_min"");
        min = _min;
    }

    
    function setTotalDepositCap(
        uint256 _totalDepositCap
    )
        external
        notHalted
        onlyStrategist
    {
        totalDepositCap = _totalDepositCap;
    }

    
    function swap(
        address _token0,
        address _token1,
        uint256 _expectedAmount
    )
        external
        override
        notHalted
        onlyStrategist
        returns (uint256 _balance)
    {
        IConverter _converter = IConverter(IController(manager.controllers(address(this))).converter(address(this)));
        _balance = IERC20(_token0).balanceOf(address(this));
        IERC20(_token0).safeTransfer(address(_converter), _balance);
        _balance = _converter.convert(_token0, _token1, _balance, _expectedAmount);
    }

    

    
    function earn(
        address _token,
        address _strategy
    )
        external
        override
        checkToken(_token)
        notHalted
        onlyHarvester
    {
        require(manager.allowedStrategies(_strategy), ""!_strategy"");
        IController _controller = IController(manager.controllers(address(this)));
        if (_controller.investEnabled()) {
            uint256 _balance = available(_token);
            IERC20(_token).safeTransfer(address(_controller), _balance);
            _controller.earn(_strategy, _token, _balance);
            emit Earn(_token, _balance);
        }
    }

    

    
     function deposit(
        address _token,
        uint256 _amount
     )
        public
        override
        checkToken(_token)
        notHalted
        returns (uint256 _shares)
    {
        require(_amount > 0, ""!_amount"");

        uint256 _balance = balance();

        uint256 _before = IERC20(_token).balanceOf(address(this));
        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);
        _amount = IERC20(_token).balanceOf(address(this)).sub(_before);

        if (_amount > 0) {
            _amount = _normalizeDecimals(_token, _amount);

            if (totalSupply() > 0) {
                _amount = (_amount.mul(totalSupply())).div(_balance);
            }

            _shares = _amount;
        }

        if (_shares > 0) {
            _mint(msg.sender, _shares);
            require(totalSupply() <= totalDepositCap, "">totalDepositCap"");
            emit Deposit(msg.sender, _shares);
        }
    }

    
    function depositMultiple(
        address[] calldata _tokens,
        uint256[] calldata _amounts
    )
        external
        override
        returns (uint256 _shares)
    {
        require(_tokens.length == _amounts.length, ""!length"");

        for (uint8 i; i < _amounts.length; i++) {
            _shares = _shares.add(deposit(_tokens[i], _amounts[i]));
        }
    }

    
    function withdraw(
        uint256 _shares,
        address _output
    )
        public
        override
        checkToken(_output)
    {
        uint256 _amount = (balance().mul(_shares)).div(totalSupply());
        _burn(msg.sender, _shares);

        uint256 _withdrawalProtectionFee = manager.withdrawalProtectionFee();
        if (_withdrawalProtectionFee > 0) {
            uint256 _withdrawalProtection = _amount.mul(_withdrawalProtectionFee).div(MAX);
            _amount = _amount.sub(_withdrawalProtection);
        }

        uint256 _balance = IERC20(_output).balanceOf(address(this));
        if (_balance < _amount) {
            IController _controller = IController(manager.controllers(address(this)));
            uint256 _toWithdraw = _amount.sub(_balance);
            if (_controller.strategies() > 0) {
                _controller.withdraw(_output, _toWithdraw);
            }
            uint256 _after = IERC20(_output).balanceOf(address(this));
            uint256 _diff = _after.sub(_balance);
            if (_diff < _toWithdraw) {
                _amount = _after;
            }
        }

        IERC20(_output).safeTransfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    
    function withdrawAll(
        address _output
    )
        external
        override
    {
        withdraw(balanceOf(msg.sender), _output);
    }

    

    
    function available(
        address _token
    )
        public
        view
        override
        returns (uint256)
    {
        return IERC20(_token).balanceOf(address(this)).mul(min).div(MAX);
    }

    
    function balance()
        public
        view
        override
        returns (uint256 _balance)
    {
        return balanceOfThis().add(IController(manager.controllers(address(this))).balanceOf());
    }

    
    function balanceOfThis()
        public
        view
        returns (uint256 _balance)
    {
        address[] memory _tokens = manager.getTokens(address(this));
        for (uint8 i; i < _tokens.length; i++) {
            address _token = _tokens[i];
            _balance = _balance.add(_normalizeDecimals(_token, IERC20(_token).balanceOf(address(this))));
        }
    }

    
    function getPricePerFullShare()
        external
        view
        override
        returns (uint256)
    {
        if (totalSupply() > 0) {
            return balance().mul(1e18).div(totalSupply());
        } else {
            return balance();
        }
    }

    
    function getTokens()
        external
        view
        override
        returns (address[] memory)
    {
        return manager.getTokens(address(this));
    }

    
    function withdrawFee(
        uint256 _amount
    )
        external
        view
        override
        returns (uint256)
    {
        return manager.withdrawalProtectionFee().mul(_amount).div(MAX);
    }

    function _normalizeDecimals(
        address _token,
        uint256 _amount
    )
        internal
        view
        returns (uint256)
    {
        uint256 _decimals = uint256(ExtendedIERC20(_token).decimals());
        if (_decimals < 18) {
            _amount = _amount.mul(10**(18-_decimals));
        }
        return _amount;
    }

    

    modifier checkToken(address _token) {
        require(manager.allowedTokens(_token) && manager.vaults(_token) == address(this), ""!_token"");
        _;
    }

    modifier notHalted() {
        require(!manager.halted(), ""halted"");
        _;
    }

    modifier onlyHarvester() {
        require(msg.sender == manager.harvester(), ""!harvester"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == manager.strategist(), ""!strategist"");
        _;
    }
}",1853.0,4,1,"Okay, let's break down the potential vulnerabilities in the `Vault` smart contract.

**Critical / High Severity Vulnerabilities:**

1.  **Incorrect Decimal Normalization (Handling > 18 Decimals):**
    *   **Location:** `_normalizeDecimals` function.
    *   **Description:** The function correctly scales up amounts for tokens with *fewer* than 18 decimals. However, it does *nothing* for tokens with *more* than 18 decimals. This means if a token with, say, 20 decimals is deposited, its value will be treated as if it had 18 decimals, effectively overstating its contribution to the vault's total `balance()` by a factor of 100 (10^(20-18)).
    *   **Impact:** This inflates the perceived `balance()` of the vault.
        *   **Unfair Share Minting:** Subsequent depositors (of any token) will receive fewer shares than they should because the vault's `balance()` used in the share calculation (`_amount.mul(totalSupply())).div(_balance)`) is artificially high.
        *   **Unfair Withdrawals:** Users withdrawing will receive more underlying tokens than their shares truly represent, potentially draining value from other LPs.
        *   **Manipulation:** An attacker could deposit a small amount of a >18 decimal token to inflate the `balance()`, then deposit a large amount of an 18-decimal token to receive unfairly few shares (or vice-versa depending on the attack path).
    *   **Mitigation:** The `_normalizeDecimals` function needs to handle `_decimals > 18` by *dividing* the amount (`_amount = _amount.div(10**(_decimals-18));`). Also, consider whether supporting >18 decimal tokens is intended or if they should be disallowed.

2.  **First Depositor Attack / Share Price Manipulation:**
    *   **Location:** `deposit` function.
    *   **Description:** The calculation of shares depends on the ratio between the deposited amount and the current `balance()` relative to the `totalSupply()`. If the vault is empty (`totalSupply() == 0`), shares are minted 1:1 with the normalized deposit amount. A malicious first depositor can:
        1.  Deposit a tiny amount (e.g., 1 wei) of the underlying token, receiving a tiny number of shares (e.g., 1 share if normalized). `totalSupply` is now > 0.
        2.  Transfer a *large* amount of the underlying token directly to the vault contract (using `transfer`, not the vault's `deposit` function). This increases the vault's `balance()` significantly *without* minting new shares.
        3.  When a legitimate second depositor deposits funds, the `balance()` used in their share calculation (`_amount.mul(totalSupply())).div(_balance)`) is now vastly inflated relative to the tiny `totalSupply`. They receive far fewer shares than their deposit is worth.
        4.  The initial malicious depositor can then withdraw their tiny share count, receiving back their initial tiny deposit *plus* a large portion of the second depositor's funds due to the manipulated share price.
    *   **Impact:** Loss of funds for early depositors after the first one.
    *   **Mitigation:**
        *   Require a minimum deposit amount for the very first deposit.
        *   Send the first few shares (e.g., 1000 wei worth) to the `address(0)` or a dead address during deployment/initialization to establish a non-zero `totalSupply` and `balance` baseline, making the manipulation much harder/more expensive.

**Medium Severity Vulnerabilities:**

3.  **Reliance on External Contracts (Centralization/Trust):**
    *   **Location:** Throughout the contract (`manager`, `controller`, `converter`).
    *   **Description:** The vault's core logic heavily depends on the `IManager`, `IController`, and `IConverter` contracts provided via the `manager`. The `balance()` calculation, `earn` function, `swap` function, and `withdraw` logic all rely on these external contracts behaving correctly and honestly.
    *   **Impact:** If the `Manager`, `Controller`, or `Converter` contracts are malicious, buggy, upgradeable (and upgraded maliciously), or compromised, they could:
        *   Steal funds sent via `earn` or `swap`.
        *   Fail to return funds during `withdraw`.
        *   Report incorrect balances (`controller.balanceOf()`), leading to unfair share calculations.
        *   Block critical functions (`earn`, `withdraw`).
    *   **Mitigation:** Thorough audits of all connected contracts, potentially immutable external contract addresses, timelocks for critical changes in external contracts if they are upgradeable.

4.  **Centralization of Control (Strategist/Harvester Roles):**
    *   **Location:** Functions with `onlyStrategist` or `onlyHarvester` modifiers (`setGauge`, `setMin`, `setTotalDepositCap`, `swap`, `earn`).
    *   **Description:** The `Strategist` and `Harvester` roles (defined in the `Manager` contract) have significant control over the vault's operation and funds flow.
    *   **Impact:** A compromised or malicious `Strategist` could:
        *   Set `min` to `MAX` (10000), preventing `earn` from ever sending funds to strategies.
        *   Set `min` extremely low, potentially exposing more funds than intended.
        *   Set an arbitrarily high `totalDepositCap`.
        *   Execute `swap` potentially at unfavorable prices if the `Converter` doesn't have robust slippage protection.
        *   Set `gauge` to a malicious address (impact depends on how `gauge` is used externally).
        A compromised `Harvester` could prevent `earn` from being called.
    *   **Mitigation:** Use multi-sig wallets for these roles, implement timelocks for critical parameter changes (`setMin`, `setTotalDepositCap`), ensure robust governance processes around role management within the `Manager`.

5.  **Potential Reentrancy (Low Risk but Present):**
    *   **Location:** `deposit`, `withdraw`.
    *   **Description:** While `SafeERC20` is used and the checks-effects-interactions pattern is generally followed (`_mint`/`_burn` before transfers), interactions with external contracts (`token.safeTransferFrom`, `controller.withdraw`, `token.safeTransfer`) still exist. Non-standard ERC20 tokens or complex interactions via the `Controller` could theoretically open reentrancy vectors, although it seems less likely with the current structure. For instance, in `deposit`, the transfer happens *before* the share calculation and minting, which relies on `balance()` (involving external calls). In `withdraw`, `controller.withdraw` is called before the final `safeTransfer`.
    *   **Impact:** Could potentially allow draining funds or manipulating state during execution.
    *   **Mitigation:** Adhere strictly to checks-effects-interactions. Ensure external calls are made only when necessary and ideally after all state changes are complete. Use OpenZeppelin's `ReentrancyGuard` modifier on public/external functions that modify state and interact with external contracts.

**Low Severity / Informational:**

6.  **Missing `notHalted` Modifier on `withdraw` / `withdrawAll`:**
    *   **Location:** `withdraw`, `withdrawAll`.
    *   **Description:** These functions lack the `notHalted` modifier. While `checkToken` calls the `manager`, which might internally revert if halted, it's not explicit. A global halt initiated via `manager.halted()` might be intended to stop withdrawals, but these functions don't directly check it.
    *   **Impact:** Withdrawals might be possible even when the system is intended to be globally halted.
    *   **Mitigation:** Add the `notHalted` modifier to `withdraw`.

7.  **No Slippage Protection in `swap`:**
    *   **Location:** `swap` function.
    *   **Description:** The `swap` function takes an `_expectedAmount` parameter but only passes it to the external `_converter.convert` call. The vault itself does not verify if the amount received from the converter meets this expectation.
    *   **Impact:** If the `Converter` implementation is flawed or doesn't enforce slippage based on `_expectedAmount`, the `Strategist` could execute swaps with significant slippage, causing value loss for the vault.
    *   **Mitigation:** Add a check within the `swap` function after the `_converter.convert` call to ensure the returned `_balance` (amount received) is greater than or equal to `_expectedAmount`.

8.  **Potential Gas Limit Issues:**
    *   **Location:** `depositMultiple`, `balanceOfThis`.
    *   **Description:** Functions that loop through arrays (`depositMultiple`, `balanceOfThis`) can potentially consume a large amount of gas if the array (`_tokens`) is very long.
    *   **Impact:** Transactions might fail by running out of gas, preventing multiple deposits or potentially hindering off-chain monitoring that relies on `balanceOfThis`.
    *   **Mitigation:** Limit the number of tokens supported per vault or implement pagination/batching if large numbers of tokens are expected.

9.  **`setMin` Allows Setting `min = MAX`:**
    *   **Location:** `setMin` function.
    *   **Description:** The check `require(_min <= MAX, ""!_min"")` allows setting `min` exactly to `MAX` (10000).
    *   **Impact:** If `min` is 10000, the `available()` function will always return 0 (`balanceOf(this).mul(10000).div(10000)` simplifies to `balanceOf(this)`, but the code uses `available = balanceOf(this).mul(min).div(MAX)`, which would be `balanceOf(this).mul(10000).div(10000)` = `balanceOf(this)`. Ah, wait, `available` calculates the amount *available* to send to strategies, which implies `min` is the reserve percentage. So `available = balance * (MAX - min) / MAX` would make more sense, or `available = balance * min / MAX` means `min` is the *deployable* percentage. Assuming the code is correct `available = balance * min / MAX`, setting `min = MAX` means `available = balance`. If `min` represents the *reserve* percentage (e.g., 9500 means keep 95%, deploy 5%), then setting `min=MAX` would mean deploy 0%. Let's re-read `available()`: `IERC20(_token).balanceOf(address(this)).mul(min).div(MAX)`. This implies `min` is the *maximum percentage of the vault's balance* that is considered ""available"" (likely for earning). If `min` is 9500, 95% is available. If `min` is set to 10000 (MAX), 100% is available. If `min` is set to 0, 0% is available. The vulnerability is less severe than initially thought, but setting `min=0` would block `earn`. Setting `min=MAX` allows `earn` to potentially deplete *all* liquid tokens in the vault, potentially hindering immediate withdrawals.
    *   **Mitigation:** Add a check `require(_min < MAX, ""!_min"")` if the intention is to always keep some minimal reserve liquid, or clarify the exact meaning of `min`.

10. **Lack of Event Emission for Parameter Changes:**
    *   **Location:** `setGauge`, `setMin`, `setTotalDepositCap`.
    *   **Description:** These functions change critical operational parameters but do not emit events.
    *   **Impact:** Off-chain monitoring and tracking of vault configuration changes are more difficult. Users might be unaware of changes to reserve ratios or deposit caps.
    *   **Mitigation:** Emit events for each parameter change (e.g., `event MinChanged(uint256 oldMin, uint256 newMin)`).

This list covers the main vulnerabilities and areas of concern within the provided `Vault` contract code. Remember that the security also heavily depends on the implementation details of the linked `Manager`, `Controller`, `Converter`, and `VaultToken` contracts.","### **[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities**

**Report Description**:  
The v3 vault treats all valid tokens equally, allowing users to deposit one token and withdraw another without accounting for price differences. This creates arbitrage opportunities, especially when tokens like `3crv_token` (an LP token with a price of 1.01) are treated the same as stablecoins. The `withdrawalProtectionFee` (0.1%) is insufficient to prevent arbitrage, making the vault vulnerable to flashloan attacks. The design flaw allows attackers to exploit price discrepancies, leading to significant financial losses.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of arbitrage opportunities arising from treating all tokens equally. The focus of the response list is on decimal normalization, first depositor attacks, and external contract reliance, which are unrelated to this issue. The arbitrage vulnerability and flashloan attack risk are not covered.

---

### **[H-06] earn results in decreasing share price**

**Report Description**:  
The `earn()` function in a DAI vault paired with `NativeStrategyCurve3Crv` causes shareholders to lose money (approximately 2%) each time it is called. This occurs because the `Vault` contract and `controller` contract do not handle the price difference between the `want` token and other tokens. The `Vault` sums up all token balances, while the `controller` only considers the `strategy.want` token (t3crv). This discrepancy results in users losing money instead of earning yield.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of `earn()` causing a decrease in share price due to mismatched token value calculations. The focus of the response list is on decimal normalization, first depositor attacks, and external contract reliance, which are unrelated to this issue. The specific problem of share price reduction is not covered.

---

### **[H-07] Vault.balance() mixes normalized and standard amounts**

**Report Description**:  
The `Vault.balance()` function uses the `balanceOfThis` function, which normalizes all balances to 18 decimals. However, the second term in the calculation (`IController(manager.controllers(address(this))).balanceOf()`) is not normalized. This leads to incorrect calculations when adding normalized and non-normalized amounts, causing discrepancies in the vault's balance.

**Match in Response List**:  
Matches with the issue titled **""Incorrect Decimal Normalization (Handling > 18 Decimals)""**.

**Validation**:  
**Partially Correct**. The response identifies the issue of decimal normalization but focuses on tokens with more than 18 decimals, which is not the core problem here. The issue in the report is about mixing normalized and non-normalized amounts, which is only partially addressed by the response.

---

### **[H-08] Vault.withdraw mixes normalized and standard amounts**

**Report Description**:  
The `Vault.withdraw` function uses the `balanceOfThis` function, which normalizes all balances to 18 decimals. However, the `uint256 _balance = IERC20(_output).balanceOf(address(this));` value is not normalized but is compared to and subtracted from the normalized `_amount`. This leads to incorrect calculations and potential issues in the withdrawal process.

**Match in Response List**:  
Matches with the issue titled **""Incorrect Decimal Normalization (Handling > 18 Decimals)""**.

**Validation**:  
**Partially Correct**. The response identifies the issue of decimal normalization but focuses on tokens with more than 18 decimals, which is not the core problem here. The issue in the report is about mixing normalized and non-normalized amounts in the `withdraw` function, which is only partially addressed by the response.

---

### **[M-03] Vault.withdraw sometimes burns too many shares**

**Report Description**:  
The `Vault.withdraw` function attempts to withdraw funds from the controller if there are not enough in the vault. If the controller cannot withdraw enough funds (`_diff < _toWithdraw`), the user receives fewer output tokens than their fair share entitles them to. This results in the withdrawer receiving fewer tokens than they should, leading to unfair losses.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address the issue of burning too many shares during withdrawal due to insufficient funds in the controller. The focus of the response list is on decimal normalization, first depositor attacks, and external contract reliance, which are unrelated to this issue. The specific problem of unfair share burning is not covered.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- **[H-07] Vault.balance() mixes normalized and standard amounts**  
- **[H-08] Vault.withdraw mixes normalized and standard amounts**

**Missed Issues from Issue Report**:  
- **[H-05] Vault treats all tokens exactly the same that creates (huge) arbitrage opportunities**  
- **[H-06] earn results in decreasing share price**  
- **[M-03] Vault.withdraw sometimes burns too many shares**

---

The response list partially addresses some issues related to decimal normalization but misses critical vulnerabilities such as arbitrage opportunities, share price reduction, and unfair share burning. These gaps highlight the need for a more comprehensive review of the vault's design and functionality.",0,2,3,9,"```
None.
```",0.0
Manger.sol,"// SPDX-License-Identifier: MIT
// solhint-disable max-states-count
// solhint-disable var-name-mixedcase

pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IHarvester.sol"";
import ""./interfaces/IManager.sol"";
import ""./interfaces/IStrategy.sol"";
import ""./interfaces/IVault.sol"";

/**
 * @title Manager
 * @notice This contract serves as the central point for governance-voted
 * variables. Fees and permissioned addresses are stored and referenced in
 * this contract only.
 */
contract Manager is IManager {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant PENDING_STRATEGIST_TIMELOCK = 7 days;
    uint256 public constant MAX_TOKENS = 256;

    address public immutable override yaxis;

    bool public override halted;

    address public override governance;
    address public override harvester;
    address public override insurancePool;
    address public override stakingPool;
    address public override strategist;
    address public override pendingStrategist;
    address public override treasury;

    // The following fees are all mutable.
    // They are updated by governance (community vote).
    uint256 public override insuranceFee;
    uint256 public override insurancePoolFee;
    uint256 public override stakingPoolShareFee;
    uint256 public override treasuryFee;
    uint256 public override withdrawalProtectionFee;


    uint256 private setPendingStrategistTime;

    // Governance must first allow the following properties before
    // the strategist can make use of them
    mapping(address => bool) public override allowedControllers;
    mapping(address => bool) public override allowedConverters;
    mapping(address => bool) public override allowedStrategies;
    mapping(address => bool) public override allowedTokens;
    mapping(address => bool) public override allowedVaults;

    // vault => controller
    mapping(address => address) public override controllers;
    // vault => tokens[]
    mapping(address => address[]) public override tokens;
    // token => vault
    mapping(address => address) public override vaults;

    event AllowedController(
        address indexed _controller,
        bool _allowed
    );
    event AllowedConverter(
        address indexed _converter,
        bool _allowed
    );
    event AllowedStrategy(
        address indexed _strategy,
        bool _allowed
    );
    event AllowedToken(
        address indexed _token,
        bool _allowed
    );
    event AllowedVault(
        address indexed _vault,
        bool _allowed
    );
    event Halted();
    event SetController(
        address indexed _vault,
        address indexed _controller
    );
    event SetGovernance(
        address indexed _governance
    );
    event SetPendingStrategist(
        address indexed _strategist
    );
    event SetStrategist(
        address indexed _strategist
    );
    event TokenAdded(
        address indexed _vault,
        address indexed _token
    );
    event TokenRemoved(
        address indexed _vault,
        address indexed _token
    );

    /**
     * @param _yaxis The address of the YAX token
     */
    constructor(
        address _yaxis
    )
        public
    {
        require(_yaxis != address(0), ""!_yaxis"");
        yaxis = _yaxis;
        governance = msg.sender;
        strategist = msg.sender;
        harvester = msg.sender;
        treasury = msg.sender;
        stakingPoolShareFee = 2000;
        treasuryFee = 500;
        withdrawalProtectionFee = 10;
    }

    /**
     * GOVERNANCE-ONLY FUNCTIONS
     */

    /**
     * @notice Sets the permission for the given controller
     * @param _controller The address of the controller
     * @param _allowed The status of if it is allowed
     */
    function setAllowedController(
        address _controller,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IController(_controller).manager()) == address(this), ""!manager"");
        allowedControllers[_controller] = _allowed;
        emit AllowedController(_controller, _allowed);
    }

    /**
     * @notice Sets the permission for the given converter
     * @param _converter The address of the converter
     * @param _allowed The status of if it is allowed
     */
    function setAllowedConverter(
        address _converter,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IConverter(_converter).manager()) == address(this), ""!manager"");
        allowedConverters[_converter] = _allowed;
        emit AllowedConverter(_converter, _allowed);
    }

    /**
     * @notice Sets the permission for the given strategy
     * @param _strategy The address of the strategy
     * @param _allowed The status of if it is allowed
     */
    function setAllowedStrategy(
        address _strategy,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IStrategy(_strategy).manager()) == address(this), ""!manager"");
        allowedStrategies[_strategy] = _allowed;
        emit AllowedStrategy(_strategy, _allowed);
    }

    /**
     * @notice Sets the permission for the given token
     * @param _token The address of the token
     * @param _allowed The status of if it is allowed
     */
    function setAllowedToken(
        address _token,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        allowedTokens[_token] = _allowed;
        emit AllowedToken(_token, _allowed);
    }

    /**
     * @notice Sets the permission for the given vault
     * @param _vault The address of the vault
     * @param _allowed The status of if it is allowed
     */
    function setAllowedVault(
        address _vault,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IVault(_vault).manager()) == address(this), ""!manager"");
        allowedVaults[_vault] = _allowed;
        emit AllowedVault(_vault, _allowed);
    }

    /**
     * @notice Sets the governance address
     * @param _governance The address of the governance
     */
    function setGovernance(
        address _governance
    )
        external
        notHalted
        onlyGovernance
    {
        governance = _governance;
        emit SetGovernance(_governance);
    }

    /**
     * @notice Sets the harvester address
     * @param _harvester The address of the harvester
     */
    function setHarvester(
        address _harvester
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IHarvester(_harvester).manager()) == address(this), ""!manager"");
        harvester = _harvester;
    }

    /**
     * @notice Sets the insurance fee
     * @dev Throws if setting fee over 1%
     * @param _insuranceFee The value for the insurance fee
     */
    function setInsuranceFee(
        uint256 _insuranceFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insuranceFee <= 100, ""_insuranceFee over 1%"");
        insuranceFee = _insuranceFee;
    }

    /**
     * @notice Sets the insurance pool address
     * @param _insurancePool The address of the insurance pool
     */
    function setInsurancePool(
        address _insurancePool
    )
        external
        notHalted
        onlyGovernance
    {
        insurancePool = _insurancePool;
    }

    /**
     * @notice Sets the insurance pool fee
     * @dev Throws if setting fee over 20%
     * @param _insurancePoolFee The value for the insurance pool fee
     */
    function setInsurancePoolFee(
        uint256 _insurancePoolFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insurancePoolFee <= 2000, ""_insurancePoolFee over 20%"");
        insurancePoolFee = _insurancePoolFee;
    }

    /**
     * @notice Sets the staking pool address
     * @param _stakingPool The address of the staking pool
     */
    function setStakingPool(
        address _stakingPool
    )
        external
        notHalted
        onlyGovernance
    {
        stakingPool = _stakingPool;
    }

    /**
     * @notice Sets the staking pool share fee
     * @dev Throws if setting fee over 50%
     * @param _stakingPoolShareFee The value for the staking pool fee
     */
    function setStakingPoolShareFee(
        uint256 _stakingPoolShareFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_stakingPoolShareFee <= 5000, ""_stakingPoolShareFee over 50%"");
        stakingPoolShareFee = _stakingPoolShareFee;
    }

    /**
     * @notice Sets the pending strategist and the timestamp
     * @param _strategist The address of the strategist
     */
    function setStrategist(
        address _strategist
    )
        external
        notHalted
        onlyGovernance
    {
        require(_strategist != address(0), ""!_strategist"");
        pendingStrategist = _strategist;
        // solhint-disable-next-line not-rely-on-time
        setPendingStrategistTime = block.timestamp;
        emit SetPendingStrategist(_strategist);
    }

    /**
     * @notice Sets the treasury address
     * @param _treasury The address of the treasury
     */
    function setTreasury(
        address _treasury
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasury != address(0), ""!_treasury"");
        treasury = _treasury;
    }

    /**
     * @notice Sets the treasury fee
     * @dev Throws if setting fee over 20%
     * @param _treasuryFee The value for the treasury fee
     */
    function setTreasuryFee(
        uint256 _treasuryFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasuryFee <= 2000, ""_treasuryFee over 20%"");
        treasuryFee = _treasuryFee;
    }

    /**
     * @notice Sets the withdrawal protection fee
     * @dev Throws if setting fee over 1%
     * @param _withdrawalProtectionFee The value for the withdrawal protection fee
     */
    function setWithdrawalProtectionFee(
        uint256 _withdrawalProtectionFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_withdrawalProtectionFee <= 100, ""_withdrawalProtectionFee over 1%"");
        withdrawalProtectionFee = _withdrawalProtectionFee;
    }

    /**
     * STRATEGIST-ONLY FUNCTIONS
     */

    /**
     * @notice Updates the strategist to the pending strategist
     * @dev This can only be called after the pending strategist timelock (7 days)
     */
    function acceptStrategist()
        external
        notHalted
    {
        require(msg.sender == pendingStrategist, ""!pendingStrategist"");
        // solhint-disable-next-line not-rely-on-time
        require(block.timestamp > setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK), ""PENDING_STRATEGIST_TIMELOCK"");
        delete pendingStrategist;
        delete setPendingStrategistTime;
        strategist = msg.sender;
        emit SetStrategist(msg.sender);
    }

    /**
     * @notice Adds a token to be able to be deposited for a given vault
     * @param _vault The address of the vault
     * @param _token The address of the token
     */
    function addToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        require(allowedTokens[_token], ""!allowedTokens"");
        require(allowedVaults[_vault], ""!allowedVaults"");
        require(tokens[_vault].length < MAX_TOKENS, "">tokens"");
        require(vaults[_token] == address(0), ""!_token"");
        vaults[_token] = _vault;
        tokens[_vault].push(_token);
        emit TokenAdded(_vault, _token);
    }

    /**
     * @notice Allows the strategist to pull tokens out of this contract
     * @dev This contract should never hold tokens
     * @param _token The address of the token
     * @param _amount The amount to withdraw
     * @param _to The address to send to
     */
    function recoverToken(
        IERC20 _token,
        uint256 _amount,
        address _to
    )
        external
        notHalted
        onlyStrategist
    {
        _token.safeTransfer(_to, _amount);
    }

    /**
     * @notice Removes a token from being able to be deposited for a given vault
     * @param _vault The address of the vault
     * @param _token The address of the token
     */
    function removeToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        uint256 k = tokens[_vault].length;
        uint256 index;
        bool found;

        for (uint i = 0; i < k; i++) {
            if (tokens[_vault][i] == _token) {
                index = i;
                found = true;
                break;
            }
        }

        // TODO: Verify added check
        if (found) {
            tokens[_vault][index] = tokens[_vault][k-1];
            tokens[_vault].pop();
            delete vaults[_token];
            emit TokenRemoved(_vault, _token);
        }
    }

    /**
     * @notice Sets the vault address for a controller
     * @param _vault The address of the vault
     * @param _controller The address of the controller
     */
    function setController(
        address _vault,
        address _controller
    )
        external
        notHalted
        onlyStrategist
    {
        require(allowedVaults[_vault], ""!_vault"");
        require(allowedControllers[_controller], ""!_controller"");
        controllers[_vault] = _controller;
        emit SetController(_vault, _controller);
    }

    /**
     * @notice Sets the protocol as halted, disallowing all deposits forever
     * @dev Withdraws will still work, allowing users to exit the protocol
     */
    function setHalted()
        external
        notHalted
        onlyStrategist
    {
        halted = true;
        emit Halted();
    }

    /**
     * EXTERNAL VIEW FUNCTIONS
     */

    /**
     * @notice Returns an array of token addresses for a given vault
     * @param _vault The address of the vault
     */
    function getTokens(
        address _vault
    )
        external
        view
        override
        returns (address[] memory)
    {
        return tokens[_vault];
    }

    /**
     * @notice Returns a tuple of:
     *     YAXIS token address,
     *     Treasury address,
     *     Treasury fee
     */
    function getHarvestFeeInfo()
        external
        view
        override
        returns (
            address,
            address,
            uint256
        )
    {
        return (
            yaxis,
            treasury,
            treasuryFee
        );
    }

    modifier notHalted() {
        require(!halted, ""halted"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""!governance"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == strategist, ""!strategist"");
        _;
    }
}",3492.0,583.0,"[M-02] ERC20 return values not checked
The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer failed but return `false` instead.
The `Manager.recoverToken` function does not check the return value of this function.
Tokens that don't actually perform the transfer and return false are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT which does not return a success boolean, will revert.
  [M-09] token -> vault mapping can be overwritten
One vault can have many tokens, but each token should only be assigned to a single vault. The Manager contract keeps a mapping of tokens to vaults in the `vaults[_token] => _vault` map, and a mapping of vault to tokens in tokens[vault] => token[].
The `addToken` function can assign any token to a single vault and allows overwriting an existing vaults[_token] map entry with a different vault. This indirectly disassociates the previous vault for the token. Note that the previous vault's tokens[_previousVault] map still contains the token.
  [M-13] `manager.allowedVaults` check missing for add/remove strategy
The `manager.allowedVaults` check is missing for add/remove strategy like how it is used in reorderStrategies(). This will allow a strategist to accidentally/maliciously add/remove strategies on unauthorized vaults.
Given the critical access control that is missing on vaults here, this is classified as medium severity.",3.0,"pragma solidity 0.6.12;

import ""@openzeppelin/contracts/math/SafeMath.sol"";
import ""@openzeppelin/contracts/token/ERC20/SafeERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";

import ""./interfaces/IController.sol"";
import ""./interfaces/IConverter.sol"";
import ""./interfaces/IHarvester.sol"";
import ""./interfaces/IManager.sol"";
import ""./interfaces/IStrategy.sol"";
import ""./interfaces/IVault.sol"";


contract Manager is IManager {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    uint256 public constant PENDING_STRATEGIST_TIMELOCK = 7 days;
    uint256 public constant MAX_TOKENS = 256;

    address public immutable override yaxis;

    bool public override halted;

    address public override governance;
    address public override harvester;
    address public override insurancePool;
    address public override stakingPool;
    address public override strategist;
    address public override pendingStrategist;
    address public override treasury;

    
    
    uint256 public override insuranceFee;
    uint256 public override insurancePoolFee;
    uint256 public override stakingPoolShareFee;
    uint256 public override treasuryFee;
    uint256 public override withdrawalProtectionFee;


    uint256 private setPendingStrategistTime;

    
    
    mapping(address => bool) public override allowedControllers;
    mapping(address => bool) public override allowedConverters;
    mapping(address => bool) public override allowedStrategies;
    mapping(address => bool) public override allowedTokens;
    mapping(address => bool) public override allowedVaults;

    
    mapping(address => address) public override controllers;
    
    mapping(address => address[]) public override tokens;
    
    mapping(address => address) public override vaults;

    event AllowedController(
        address indexed _controller,
        bool _allowed
    );
    event AllowedConverter(
        address indexed _converter,
        bool _allowed
    );
    event AllowedStrategy(
        address indexed _strategy,
        bool _allowed
    );
    event AllowedToken(
        address indexed _token,
        bool _allowed
    );
    event AllowedVault(
        address indexed _vault,
        bool _allowed
    );
    event Halted();
    event SetController(
        address indexed _vault,
        address indexed _controller
    );
    event SetGovernance(
        address indexed _governance
    );
    event SetPendingStrategist(
        address indexed _strategist
    );
    event SetStrategist(
        address indexed _strategist
    );
    event TokenAdded(
        address indexed _vault,
        address indexed _token
    );
    event TokenRemoved(
        address indexed _vault,
        address indexed _token
    );

    
    constructor(
        address _yaxis
    )
        public
    {
        require(_yaxis != address(0), ""!_yaxis"");
        yaxis = _yaxis;
        governance = msg.sender;
        strategist = msg.sender;
        harvester = msg.sender;
        treasury = msg.sender;
        stakingPoolShareFee = 2000;
        treasuryFee = 500;
        withdrawalProtectionFee = 10;
    }

    

    
    function setAllowedController(
        address _controller,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IController(_controller).manager()) == address(this), ""!manager"");
        allowedControllers[_controller] = _allowed;
        emit AllowedController(_controller, _allowed);
    }

    
    function setAllowedConverter(
        address _converter,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IConverter(_converter).manager()) == address(this), ""!manager"");
        allowedConverters[_converter] = _allowed;
        emit AllowedConverter(_converter, _allowed);
    }

    
    function setAllowedStrategy(
        address _strategy,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IStrategy(_strategy).manager()) == address(this), ""!manager"");
        allowedStrategies[_strategy] = _allowed;
        emit AllowedStrategy(_strategy, _allowed);
    }

    
    function setAllowedToken(
        address _token,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        allowedTokens[_token] = _allowed;
        emit AllowedToken(_token, _allowed);
    }

    
    function setAllowedVault(
        address _vault,
        bool _allowed
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IVault(_vault).manager()) == address(this), ""!manager"");
        allowedVaults[_vault] = _allowed;
        emit AllowedVault(_vault, _allowed);
    }

    
    function setGovernance(
        address _governance
    )
        external
        notHalted
        onlyGovernance
    {
        governance = _governance;
        emit SetGovernance(_governance);
    }

    
    function setHarvester(
        address _harvester
    )
        external
        notHalted
        onlyGovernance
    {
        require(address(IHarvester(_harvester).manager()) == address(this), ""!manager"");
        harvester = _harvester;
    }

    
    function setInsuranceFee(
        uint256 _insuranceFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insuranceFee <= 100, ""_insuranceFee over 1%"");
        insuranceFee = _insuranceFee;
    }

    
    function setInsurancePool(
        address _insurancePool
    )
        external
        notHalted
        onlyGovernance
    {
        insurancePool = _insurancePool;
    }

    
    function setInsurancePoolFee(
        uint256 _insurancePoolFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_insurancePoolFee <= 2000, ""_insurancePoolFee over 20%"");
        insurancePoolFee = _insurancePoolFee;
    }

    
    function setStakingPool(
        address _stakingPool
    )
        external
        notHalted
        onlyGovernance
    {
        stakingPool = _stakingPool;
    }

    
    function setStakingPoolShareFee(
        uint256 _stakingPoolShareFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_stakingPoolShareFee <= 5000, ""_stakingPoolShareFee over 50%"");
        stakingPoolShareFee = _stakingPoolShareFee;
    }

    
    function setStrategist(
        address _strategist
    )
        external
        notHalted
        onlyGovernance
    {
        require(_strategist != address(0), ""!_strategist"");
        pendingStrategist = _strategist;
        
        setPendingStrategistTime = block.timestamp;
        emit SetPendingStrategist(_strategist);
    }

    
    function setTreasury(
        address _treasury
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasury != address(0), ""!_treasury"");
        treasury = _treasury;
    }

    
    function setTreasuryFee(
        uint256 _treasuryFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_treasuryFee <= 2000, ""_treasuryFee over 20%"");
        treasuryFee = _treasuryFee;
    }

    
    function setWithdrawalProtectionFee(
        uint256 _withdrawalProtectionFee
    )
        external
        notHalted
        onlyGovernance
    {
        require(_withdrawalProtectionFee <= 100, ""_withdrawalProtectionFee over 1%"");
        withdrawalProtectionFee = _withdrawalProtectionFee;
    }

    

    
    function acceptStrategist()
        external
        notHalted
    {
        require(msg.sender == pendingStrategist, ""!pendingStrategist"");
        
        require(block.timestamp > setPendingStrategistTime.add(PENDING_STRATEGIST_TIMELOCK), ""PENDING_STRATEGIST_TIMELOCK"");
        delete pendingStrategist;
        delete setPendingStrategistTime;
        strategist = msg.sender;
        emit SetStrategist(msg.sender);
    }

    
    function addToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        require(allowedTokens[_token], ""!allowedTokens"");
        require(allowedVaults[_vault], ""!allowedVaults"");
        require(tokens[_vault].length < MAX_TOKENS, "">tokens"");
        require(vaults[_token] == address(0), ""!_token"");
        vaults[_token] = _vault;
        tokens[_vault].push(_token);
        emit TokenAdded(_vault, _token);
    }

    
    function recoverToken(
        IERC20 _token,
        uint256 _amount,
        address _to
    )
        external
        notHalted
        onlyStrategist
    {
        _token.safeTransfer(_to, _amount);
    }

    
    function removeToken(
        address _vault,
        address _token
    )
        external
        override
        notHalted
        onlyStrategist
    {
        uint256 k = tokens[_vault].length;
        uint256 index;
        bool found;

        for (uint i = 0; i < k; i++) {
            if (tokens[_vault][i] == _token) {
                index = i;
                found = true;
                break;
            }
        }

        
        if (found) {
            tokens[_vault][index] = tokens[_vault][k-1];
            tokens[_vault].pop();
            delete vaults[_token];
            emit TokenRemoved(_vault, _token);
        }
    }

    
    function setController(
        address _vault,
        address _controller
    )
        external
        notHalted
        onlyStrategist
    {
        require(allowedVaults[_vault], ""!_vault"");
        require(allowedControllers[_controller], ""!_controller"");
        controllers[_vault] = _controller;
        emit SetController(_vault, _controller);
    }

    
    function setHalted()
        external
        notHalted
        onlyStrategist
    {
        halted = true;
        emit Halted();
    }

    

    
    function getTokens(
        address _vault
    )
        external
        view
        override
        returns (address[] memory)
    {
        return tokens[_vault];
    }

    
    function getHarvestFeeInfo()
        external
        view
        override
        returns (
            address,
            address,
            uint256
        )
    {
        return (
            yaxis,
            treasury,
            treasuryFee
        );
    }

    modifier notHalted() {
        require(!halted, ""halted"");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance, ""!governance"");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == strategist, ""!strategist"");
        _;
    }
}",2388.0,0,3,"Okay, let's break down the potential vulnerabilities in the provided `Manager` smart contract.

**Categorization:**

*   **High Severity:** Issues that could lead to direct loss of funds, significant control loss, or major system malfunction.
*   **Medium Severity:** Issues that could cause denial of service, unexpected behavior, or facilitate other attacks.
*   **Low Severity / Informational:** Issues related to gas optimization, minor deviations from best practices, or design choices with potential downsides.
*   **Centralization / Trust Issues:** Aspects relying heavily on privileged roles.

---

**Vulnerability List:**

1.  **Missing Zero-Address Checks (Medium Severity):**
    *   **Location:** `setInsurancePool`, `setStakingPool`
    *   **Description:** These functions allow governance to set the `insurancePool` and `stakingPool` addresses without checking if they are the zero address (`address(0)`). While `setTreasury` includes this check, its absence here could lead to errors or reverted transactions in other contracts (like the Harvester) that attempt to interact with or send funds to these addresses if they are mistakenly set to zero.
    *   **Impact:** Potential temporary denial of service for fee distribution or related functions until governance corrects the address.

2.  **Potential Gas Limit DoS in `removeToken` (Medium Severity):**
    *   **Location:** `removeToken` function's loop.
    *   **Description:** The function iterates through the `tokens[_vault]` array to find the index of the token to remove. If this array becomes very large (up to `MAX_TOKENS = 256`), the gas cost of this loop could exceed the block gas limit, especially if the token to be removed is near the end of the array or not present at all.
    *   **Impact:** The strategist might be unable to remove a specific token from a vault if the array is large, effectively causing a Denial of Service for that specific administrative action.

3.  **Centralization of Power (Trust Issue):**
    *   **Location:** Throughout the contract (`onlyGovernance`, `onlyStrategist` modifiers, role-setting functions).
    *   **Description:** The `governance` and `strategist` roles have significant control over the system's configuration, operation, and safety mechanisms.
        *   `governance` can change critical addresses, fees, allowed components, and even itself.
        *   `strategist` can manage vault tokens/controllers, recover *any* ERC20 token held by the Manager contract (`recoverToken`), and halt the system (`setHalted`).
    *   **Impact:** A compromised or malicious `governance` or `strategist` account could severely damage the protocol, steal recoverable funds sent to the Manager, misconfigure vaults, or halt operations indefinitely. This relies heavily on the security and integrity of these roles (often managed via multi-sigs or DAOs in practice, but the contract itself centralizes the power).

4.  **No Unhalt Mechanism (Design Choice / Potential Issue):**
    *   **Location:** `setHalted`, `notHalted` modifier.
    *   **Description:** The `strategist` can halt the contract's main functions using `setHalted`. However, there is no corresponding `unhalt` function within this contract.
    *   **Impact:** Once halted, most administrative actions (including potentially changing the strategist or governance if those functions are also blocked indirectly) become impossible via this contract. Unhalting would likely require a contract upgrade or intervention from governance via a different mechanism (if one exists outside this contract). This might be intentional as an emergency stop, but it's a significant decision point.

5.  **Risk of Allowing Malicious/Non-Standard Tokens (Systemic Risk / Low Severity in *this* contract):**
    *   **Location:** `setAllowedToken`
    *   **Description:** Governance can allow any address as a token via `setAllowedToken`. There's no check if the address implements ERC20 correctly or if it contains malicious code (e.g., reentrancy on transfer, fee-on-transfer that vaults/strategies don't expect).
    *   **Impact:** While this function itself is safe, allowing a problematic token could cause significant issues (fund loss, unexpected behavior) in the `Vaults` or `Strategies` that later interact with that token based on the manager's configuration. The vulnerability manifests downstream.

6.  **Initial Centralization at Deployment (Informational / Trust Issue):**
    *   **Location:** `constructor`
    *   **Description:** The deployer (`msg.sender`) is initially assigned the `governance`, `strategist`, `harvester`, and `treasury` roles.
    *   **Impact:** Immediately after deployment, a single address holds all critical roles. This requires the deployer to quickly and correctly transfer these roles to the intended addresses (e.g., multi-sig, DAO, dedicated contracts). Until then, the system is fully centralized under the deployer.

7.  **Potential Griefing via External `manager()` Calls (Low Severity):**
    *   **Location:** `setAllowedController`, `setAllowedConverter`, `setAllowedStrategy`, `setAllowedVault`, `setHarvester`.
    *   **Description:** These functions call the `manager()` view function on the external contract being set/allowed. If a malicious contract is submitted for approval and its `manager()` function is designed to revert or consume excessive gas, it could prevent governance from successfully calling these configuration functions for that specific malicious address.
    *   **Impact:** Minor denial of service specific to adding a particular problematic component. Governance should vet contracts before attempting to allow them.

8.  **Strategist Can Drain *Any* Token via `recoverToken` (Trust Issue / Potential Issue):**
    *   **Location:** `recoverToken`
    *   **Description:** The `recoverToken` function allows the strategist to transfer *any* amount of *any* ERC20 token held by the Manager contract to an arbitrary address `_to`. While intended for recovering accidentally sent funds, it's not restricted to specific tokens or circumstances.
    *   **Impact:** If the Manager contract were ever intended to hold specific tokens as part of its protocol design (which doesn't seem to be the case here, but could be in a modified version or related system), a malicious strategist could steal them. Primarily, it highlights the trust placed in the strategist.

---

In summary, the contract relies heavily on trusted actors (`governance`, `strategist`) and has a few potential technical vulnerabilities related to gas limits and missing zero-address checks. The most significant risks are tied to the centralized control held by the privileged roles.","### **[M-02] ERC20 return values not checked**

**Report Description**:  
The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success. Some tokens do not revert if the transfer fails but return `false` instead. The `Manager.recoverToken` function does not check the return value of these functions. Tokens that do not perform the transfer and return `false` are still counted as a correct transfer. Furthermore, tokens that do not correctly implement the EIP20 standard, like USDT (which does not return a success boolean), will revert.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unchecked ERC20 return values in the `Manager.recoverToken` function. This is a critical oversight, as it could lead to silent failures in token transfers, especially when dealing with non-standard or malicious tokens. Solidity best practices emphasize the importance of validating return values from external calls to ensure the integrity of token transfers.

---

### **[M-09] token -> vault mapping can be overwritten**

**Report Description**:  
One vault can have many tokens, but each token should only be assigned to a single vault. The `Manager` contract keeps a mapping of tokens to vaults in the `vaults[_token] => _vault` map and a mapping of vaults to tokens in `tokens[vault] => token[]`. The `addToken` function can assign any token to a single vault and allows overwriting an existing `vaults[_token]` map entry with a different vault. This indirectly disassociates the previous vault for the token. Note that the previous vault's `tokens[_previousVault]` map still contains the token.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of overwriting the `vaults[_token]` mapping in the `addToken` function. This oversight could lead to inconsistencies in the token-to-vault associations, potentially causing operational issues or vulnerabilities in the system. Proper validation and checks should be implemented to ensure that tokens are not reassigned to different vaults without proper cleanup.

---

### **[M-13] `manager.allowedVaults` check missing for add/remove strategy**

**Report Description**:  
The `manager.allowedVaults` check is missing for add/remove strategy functions, unlike how it is used in `reorderStrategies()`. This will allow a strategist to accidentally or maliciously add/remove strategies on unauthorized vaults. Given the critical access control that is missing on vaults here, this is classified as medium severity.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the missing `allowedVaults` check for the add/remove strategy functions. This is a significant access control issue, as it allows unauthorized modifications to vault strategies, potentially compromising the security and functionality of the system. Access control checks should be consistently applied across all relevant functions to prevent unauthorized actions.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[M-02] ERC20 return values not checked**  
- **[M-09] token -> vault mapping can be overwritten**  
- **[M-13] `manager.allowedVaults` check missing for add/remove strategy**

---

The response list fails to address any of the issues reported in the `issue` list. This indicates significant gaps in the coverage of vulnerabilities, particularly in areas related to unchecked ERC20 return values, inconsistent token-to-vault mappings, and missing access control checks. These issues are critical to the security and functionality of the smart contract and should be addressed in accordance with Solidity best practices.",0,0,3,11,"```
None.
```",0.0
,,,,,,,,8,5,,,0,2,11,42,,