nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,Findings,Comparison,Correct Matches,Partially Correct,Missed,GPT-generated,matchList,MAP
Vault.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import {Context} from ""@openzeppelin/contracts/utils/Context.sol"";
import {Counters} from ""@openzeppelin/contracts/utils/Counters.sol"";
import {Address} from ""@openzeppelin/contracts/utils/Address.sol"";
import {ERC165} from ""@openzeppelin/contracts/utils/introspection/ERC165.sol"";
import {Trust} from ""@rari-capital/solmate/src/auth/Trust.sol"";

import {IVault} from ""./vault/IVault.sol"";
import {IVaultSponsoring} from ""./vault/IVaultSponsoring.sol"";
import {PercentMath} from ""./lib/PercentMath.sol"";
import {Depositors} from ""./vault/Depositors.sol"";
import {Claimers} from ""./vault/Claimers.sol"";
import {IIntegration} from ""./integrations/IIntegration.sol"";
import {IStrategy} from ""./strategy/IStrategy.sol"";
import {ERC165Query} from ""./lib/ERC165Query.sol"";

import ""hardhat/console.sol"";

/**
 * A vault where other accounts can deposit an underlying token
 * currency and set distribution params for their principal and yield
 *
 * @dev Yield generation strategies not yet implemented
 */

contract Vault is IVault, IVaultSponsoring, Context, ERC165, Trust {
    using Counters for Counters.Counter;
    using SafeERC20 for IERC20;
    using PercentMath for uint256;
    using Address for address;
    using ERC165Query for address;

    //
    // Constants
    //

    uint256 public constant MIN_SPONSOR_LOCK_DURATION = 1209600; // 2 weeks in seconds
    uint256 public constant SHARES_MULTIPLIER = 10**18;

    //
    // State
    //

    /// Underlying ERC20 token accepted by the vault
    /// See {IVault}
    IERC20 public override(IVault) underlying;

    /// See {IVault}
    IStrategy public strategy;

    /// See {IVault}
    uint256 public investPerc;

    /// See {IVault}
    uint256 public immutable override(IVault) minLockPeriod;

    /// See {IVaultSponsoring}
    uint256 public override(IVaultSponsoring) totalSponsored;

    /// Depositors, represented as an NFT per deposit
    Depositors public depositors;

    /// Yield allocation
    Claimers public claimers;

    /// Unique IDs to correlate donations that belong to the same foundation
    Counters.Counter private _depositGroupIds;

    /**
     * @param _underlying Underlying ERC20 token to use.
     */
    constructor(
        IERC20 _underlying,
        uint256 _minLockPeriod,
        uint256 _investPerc,
        address _owner
    ) Trust(_owner) {
        require(
            PercentMath.validPerc(_investPerc),
            ""Vault: invalid investPerc""
        );
        require(
            address(_underlying) != address(0x0),
            ""VaultContext: underlying cannot be 0x0""
        );
        investPerc = _investPerc;
        underlying = _underlying;
        minLockPeriod = _minLockPeriod;

        depositors = new Depositors(address(this), ""depositors"", ""p"");
        claimers = new Claimers(address(this));
    }

    //
    // IVault
    //

    /// See {IVault}
    function setStrategy(address _strategy)
        external
        override(IVault)
        requiresTrust
    {
        require(_strategy != address(0), ""Vault: strategy 0x"");
        require(
            IStrategy(_strategy).vault() == address(this),
            ""Vault: invalid vault""
        );
        require(
            address(strategy) == address(0) || strategy.investedAssets() == 0,
            ""Vault: strategy has invested funds""
        );

        strategy = IStrategy(_strategy);
    }

    /// See {IVault}
    function totalUnderlying() public view override(IVault) returns (uint256) {
        if (address(strategy) != address(0)) {
            return
                underlying.balanceOf(address(this)) + strategy.investedAssets();
        } else {
            return underlying.balanceOf(address(this));
        }
    }

    /// See {IVault}
    function totalShares() public view override(IVault) returns (uint256) {
        return claimers.totalShares();
    }

    /// See {IVault}
    function yieldFor(address _to)
        public
        view
        override(IVault)
        returns (uint256)
    {
        uint256 tokenId = claimers.addressToTokenID(_to);
        uint256 claimerPrincipal = claimers.principalOf(tokenId);
        uint256 claimerShares = claimers.sharesOf(tokenId);
        uint256 currentClaimerPrincipal = _computeAmount(
            claimerShares,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );

        if (currentClaimerPrincipal <= claimerPrincipal) {
            return 0;
        }

        return currentClaimerPrincipal - claimerPrincipal;
    }

    /// See {IVault}
    function deposit(DepositParams calldata _params) external {
        _createDeposit(_params.amount, _params.lockedUntil, _params.claims);
        _transferAndCheckUnderlying(_msgSender(), _params.amount);
    }

    /// See {IVault}
    function claimYield(address _to) external override(IVault) {
        uint256 yield = yieldFor(_msgSender());

        if (yield == 0) return;

        uint256 shares = _computeShares(
            yield,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );
        uint256 sharesAmount = _computeAmount(
            shares,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );

        claimers.claimYield(_msgSender(), _to, sharesAmount, shares);

        underlying.safeTransfer(_to, sharesAmount);
    }

    /// See {IVault}
    function withdraw(address _to, uint256[] memory _ids)
        external
        override(IVault)
    {
        _withdraw(_to, _ids, false);
    }

    /// See {IVault}
    function forceWithdraw(address _to, uint256[] memory _ids) external {
        _withdraw(_to, _ids, true);
    }

    /// See {IVault}
    function setInvestPerc(uint16 _investPerc) external requiresTrust {
        require(
            PercentMath.validPerc(_investPerc),
            ""Vault: invalid investPerc""
        );

        emit InvestPercentageUpdated(_investPerc);

        investPerc = _investPerc;
    }

    /// See {IVault}
    function investableAmount() public view returns (uint256) {
        uint256 maxInvestableAssets = totalUnderlying().percOf(investPerc);

        uint256 alreadyInvested = strategy.investedAssets();

        if (alreadyInvested >= maxInvestableAssets) {
            return 0;
        } else {
            return maxInvestableAssets - alreadyInvested;
        }
    }

    /// See {IVault}
    function updateInvested() external requiresTrust {
        require(address(strategy) != address(0), ""Vault: strategy is not set"");

        uint256 _investable = investableAmount();

        if (_investable > 0) {
            underlying.safeTransfer(address(strategy), _investable);

            emit Invested(_investable);
        }

        strategy.doHardWork();
    }

    //
    // IVaultSponsoring

    /// See {IVaultSponsoring}
    function sponsor(uint256 _amount, uint256 _lockedUntil)
        external
        override(IVaultSponsoring)
    {
        if (_lockedUntil == 0)
            _lockedUntil = block.timestamp + MIN_SPONSOR_LOCK_DURATION;
        else
            require(
                _lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,
                ""Vault: lock time is too small""
            );

        uint256 tokenId = depositors.mint(
            _msgSender(),
            _amount,
            0,
            _lockedUntil
        );

        emit Sponsored(tokenId, _amount, _msgSender(), _lockedUntil);

        totalSponsored += _amount;
        _transferAndCheckUnderlying(_msgSender(), _amount);
    }

    /// See {IVaultSponsoring}
    function unsponsor(address _to, uint256[] memory _ids) external {
        _unsponsor(_to, _ids, false);
    }

    /// See {IVaultSponsoring}
    function forceUnsponsor(address _to, uint256[] memory _ids) external {
        _unsponsor(_to, _ids, true);
    }

    //
    // Public API
    //

    /**
     * Computes the total amount of principal + yield currently controlled by the
     * vault and the strategy. The principal + yield is the total amount
     * of underlying that can be claimed or withdrawn, excluding the sponsored amount.
     *
     * @return Total amount of principal and yield help by the vault (not including sponsored amount).
     */
    function totalUnderlyingMinusSponsored() public view returns (uint256) {
        // TODO no invested amount yet
        return totalUnderlying() - totalSponsored;
    }

    //
    // ERC165
    //

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC165)
        returns (bool)
    {
        return
            interfaceId == type(IVault).interfaceId ||
            interfaceId == type(IVaultSponsoring).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    //
    // Internal API
    //

    /**
     * Withdraws the principal from the deposits with the ids provided in @param _ids and sends it to @param _to.
     *
     * @notice the NFTs of the deposits will be burned.
     *
     * @param _to Address that will receive the funds.
     * @param _ids Array with the ids of the deposits.
     * @param _force Boolean to specify if the action should be perfomed when there's loss.
     */
    function _withdraw(
        address _to,
        uint256[] memory _ids,
        bool _force
    ) internal {
        uint256 localTotalShares = totalShares();
        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();
        uint256 amount;

        for (uint8 i = 0; i < _ids.length; i++) {
            amount += _withdrawDeposit(
                _ids[i],
                localTotalShares,
                localTotalPrincipal,
                _to,
                _force
            );
        }

        underlying.safeTransfer(_to, amount);
    }

    /**
     * Withdraws the sponsored amount for the deposits with the ids provided
     * in @param _ids and sends it to @param _to.
     *
     * @notice the NFTs of the deposits will be burned.
     *
     * @param _to Address that will receive the funds.
     * @param _ids Array with the ids of the deposits.
     * @param _force Boolean to specify if the action should be perfomed when there's loss.
     */
    function _unsponsor(
        address _to,
        uint256[] memory _ids,
        bool _force
    ) internal {
        uint256 sponsorAmount;

        for (uint8 i = 0; i < _ids.length; i++) {
            uint256 tokenId = _ids[i];

            require(
                depositors.ownerOf(tokenId) == _msgSender(),
                ""Vault: you are not the owner of a sponsor""
            );

            (
                uint256 depositAmount,
                uint256 claimerId,
                uint256 lockedUntil
            ) = depositors.deposits(tokenId);
            require(lockedUntil <= block.timestamp, ""Vault: amount is locked"");

            require(claimerId == 0, ""Vault: token id is not a sponsor"");

            depositors.burn(tokenId);

            emit Unsponsored(tokenId);

            sponsorAmount += depositAmount;
        }

        uint256 sponsorToTransfer = sponsorAmount;

        if (_force && sponsorAmount > totalUnderlying()) {
            sponsorToTransfer = totalUnderlying();
        } else if (!_force) {
            require(
                sponsorToTransfer <= totalUnderlying(),
                ""Vault: not enough funds to unsponsor""
            );
        }

        totalSponsored -= sponsorAmount;

        underlying.safeTransfer(_to, sponsorToTransfer);
    }

    /**
     * Creates a deposit with the given amount of underlying and claim
     * structure. The deposit is locked until the timestamp specified in @param _lockedUntil.
     * @notice This function assumes underlying will be transfered elsewhere in
     * the transaction.
     *
     * @notice Underlying must be transfered *after* this function, in order to
     * correctly calculate shares.
     *
     * @notice claims must add up to 100%.
     *
     * @param _amount Amount of underlying to consider @param claims claim
     * @param _lockedUntil When the depositor can unsponsor the amount.
     * @param claims Claim params
     * params.
     */
    function _createDeposit(
        uint256 _amount,
        uint256 _lockedUntil,
        ClaimParams[] calldata claims
    ) internal {
        if (_lockedUntil == 0) _lockedUntil = block.timestamp + minLockPeriod;
        else
            require(
                _lockedUntil >= block.timestamp + minLockPeriod,
                ""Vault: lock time is too small""
            );

        uint256 localTotalShares = totalShares();
        uint256 localTotalUnderlying = totalUnderlyingMinusSponsored();
        uint256 pct = 0;

        for (uint256 i = 0; i < claims.length; ++i) {
            ClaimParams memory data = claims[i];
            _createClaim(
                _depositGroupIds.current(),
                _amount,
                _lockedUntil,
                data,
                localTotalShares,
                localTotalUnderlying
            );
            pct += data.pct;
        }

        _depositGroupIds.increment();

        require(pct.is100Perc(), ""Vault: claims don't add up to 100%"");
    }

    function _createClaim(
        uint256 _depositGroupId,
        uint256 _amount,
        uint256 _lockedUntil,
        ClaimParams memory _claim,
        uint256 _localTotalShares,
        uint256 _localTotalPrincipal
    ) internal {
        uint256 amount = _amount.percOf(_claim.pct);

        uint256 newShares = _computeShares(
            amount,
            _localTotalShares,
            _localTotalPrincipal
        );

        uint256 claimerId = claimers.mint(
            _claim.beneficiary,
            amount,
            newShares
        );

        uint256 tokenId = depositors.mint(
            _msgSender(),
            amount,
            claimerId,
            _lockedUntil
        );

        if (_isIntegration(_claim.beneficiary)) {
            bytes4 ret = IIntegration(_claim.beneficiary).onDepositMinted(
                tokenId,
                newShares,
                _claim.data
            );

            require(
                ret == IIntegration(_claim.beneficiary).onDepositMinted.selector
            );
        }

        emit DepositMinted(
            tokenId,
            _depositGroupId,
            amount,
            newShares,
            _msgSender(),
            _claim.beneficiary,
            claimerId,
            _lockedUntil
        );
    }

    /**
     * Burns a deposit NFT and reduces the principal and shares of the claimer.
     * If there were any yield to be claimed, the claimer will also keep shares to withdraw later on.
     *
     * @notice This function doesn't transfer any funds, it only updates the state.
     *
     * @notice Only the owner of the deposit may call this function.
     *
     * @param _tokenId The deposit ID to withdraw from.
     * @param _totalShares The total shares to consider for the withdraw.
     * @param _totalUnderlyingMinusSponsored The total underlying to consider for the withdraw.
     *
     * @return the amount to withdraw.
     */
    function _withdrawDeposit(
        uint256 _tokenId,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored,
        address _to,
        bool _force
    ) internal returns (uint256) {
        require(
            depositors.ownerOf(_tokenId) == _msgSender(),
            ""Vault: you are not the owner of a deposit""
        );

        (
            uint256 depositAmount,
            uint256 claimerId,
            uint256 lockedUntil
        ) = depositors.deposits(_tokenId);
        require(lockedUntil <= block.timestamp, ""Vault: deposit is locked"");

        require(claimerId != 0, ""Vault: token id is not a withdraw"");

        uint256 claimerShares = claimers.sharesOf(claimerId);

        uint256 depositShares = _computeShares(
            depositAmount,
            _totalShares,
            _totalUnderlyingMinusSponsored
        );

        if (_force && depositShares > claimerShares) {
            depositShares = claimerShares;
        } else if (!_force) {
            require(
                claimerShares >= depositShares,
                ""Vault: cannot withdraw more than the available amount""
            );
        }

        claimers.onWithdraw(claimerId, depositAmount, depositShares);
        depositors.burn(_tokenId);

        address claimer = claimers.ownerOf(claimerId);

        if (_isIntegration(claimer)) {
            bytes4 ret = IIntegration(claimer).onDepositBurned(_tokenId);

            require(ret == IIntegration(claimer).onDepositBurned.selector);
        }

        emit DepositBurned(_tokenId, depositShares, _to);

        return
            _computeAmount(
                depositShares,
                _totalShares,
                _totalUnderlyingMinusSponsored
            );
    }

    function _transferAndCheckUnderlying(address _from, uint256 _amount)
        internal
    {
        uint256 balanceBefore = totalUnderlying();
        underlying.safeTransferFrom(_from, address(this), _amount);
        uint256 balanceAfter = totalUnderlying();

        require(
            balanceAfter == balanceBefore + _amount,
            ""Vault: amount received does not match params""
        );
    }

    function _blockTimestamp() public view returns (uint64) {
        return uint64(block.timestamp);
    }

    /**
     * Computes amount of shares that will be received for a given deposit amount
     *
     * @param _amount Amount of deposit to consider.
     * @param _totalShares Amount of existing shares to consider.
     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.
     * @return Amount of shares the deposit will receive.
     */
    function _computeShares(
        uint256 _amount,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored
    ) internal pure returns (uint256) {
        if (_amount == 0) return 0;
        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;

        require(
            _totalUnderlyingMinusSponsored > 0,
            ""Vault: cannot compute shares when there's no principal""
        );

        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;
    }

    /**
     * Computes the amount of underlying from a given number of shares
     *
     * @param _shares Number of shares.
     * @param _totalShares Amount of existing shares to consider.
     * @param _totalUnderlyingMinusSponsored Amounf of existing underlying to consider.
     * @return Amount that corresponds to the number of shares.
     */
    function _computeAmount(
        uint256 _shares,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored
    ) internal pure returns (uint256) {
        if (_totalShares == 0 || _totalUnderlyingMinusSponsored == 0) {
            return 0;
        } else {
            // TODO exclude sponsored assets
            return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);
        }
    }

    /**
     * Checks if the given address is a contract implementing IIntegration
     *
     * @param addr Address to check
     * @return true if contract is an IIntegraiont
     */
    function _isIntegration(address addr) internal view returns (bool) {
        return
            addr.doesContractImplementInterface(type(IIntegration).interfaceId);
    }
}",4418.0,652.0,"[H-01] `forceUnsponsor()` may open a window for attackers to manipulate the `_totalShares` and freeze users' funds at a certain deposit amount
function `_unsponsor()`, variables `totalSponsored`
When `sponsorAmount > totalUnderlying()`, the contract will transfer `totalUnderlying()` to `sponsorToTransfer`, even if there are other depositors and `totalShares` > 0.
After that, and before others despoiting into the Vault, the Attacker can send 1 wei underlying token, then cal `deposit()` with 0.1 * 1e18 , since `newShares = (_amount * _totalShares) / _totalUnderlyingMinusSponsored` and `_totalUnderlyingMinusSponsored` is 1, with a tiny amount of underlying token, newShares will become extremly large.
As we stated in issue #166, when the value of totalShares is manipulated precisely, the attacker can plant a bomb, and the contract will not work when the deposit/withdraw amount reaches a certain value, freezing the user's funds.

[H-02] Withdrawers can get more value returned than expected with reentrant call
The impact of this is that users can get significantly more UST withdrawn than they would be alotted if they had done non-reentrant withdraw calls.

[H-04] deposit() function is open to reentrancy attacks
In Vault.sol the `deposit()` function is left wide open to reentrancy attacks. The function eventually calls `_createDeposit()` => `_createClaim()` which calls `depositors.mint()` which will then mint an NFT. When the NFT is minted the sender will receive a callback which can then be used to call the `deposit()` function again before execution is finished. An attacker can do this minting multiple NFT's for themselves. claimers.mint() is also called in the same function which can also be used to call back into the deposit function before execution is complete. Since there are several state updates before and after NFT's are minted this can be used to further manipulate the protocol like with newShares which is called before minting. This is not counting what an attacker can do with cross function reentrancy entering into several other protocol functions (like withdraw) before code execution is complete further manipulating the system.

[H-05] sponsor() function in open to reentrancy attacks
In Vault.sol the `sponsor()` function does not have a reentrancy guard allowing an attacker to reenter the function because the depositors.mint() function has as callback to the msg.sender. Since there are state updates after the call to depositors.mint() function this is especially dangerous. An attacker can make it so the totalSponsored amount is only updated once after calling mint() several times since the update takes place after the callback. The same will be true for the Sponsored event that is emitted.

[M-04] `_unsponsor`, claimYield and withdraw might fail unexpectedly
`totalUnderlying()` includes the invested assets, they are not in the contract balance.
when a user calls withdraw, claimYield or unsponsor, the system might not have enough assets in the balance and the transfer would fail.
especially, force unsponsor will always fail, because it tries to transfer the entire `totalUnderlying()`, which the system doesn't have:

[M-06] `totalUnderlyingMinusSponsored()` may revert on underflow and malfunction the contract
As a function that many other functions depended on, `totalUnderlyingMinusSponsored()` can revert on underflow when `sponsorAmount > totalUnderlying()` which is possible and has been considered elsewhere in this contract:[M-07] Vault can't receive deposits if underlying token charges fees on transfer
`function _transferAndCheckUnderlying`
Some ERC20 tokens charge a fee for every transfer. If the underlying token of a vault is such a token any deposit to the protocol will fail.
Some tokens have the possibility of adding fees later on, e.g. USDT. So those have to be covered too.
Generally, the user would also receive fewer tokens on withdrawing in such a scenario but that's not the protocol's fault.

[M-15] Check `_to` is not empty
functions claimYield, `_withdraw`, and `_unsponsor` should validate that `_to` is not an empty 0x0 address to prevent accidental burns.",8.0,"pragma solidity ^0.8.10;

import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import {Context} from ""@openzeppelin/contracts/utils/Context.sol"";
import {Counters} from ""@openzeppelin/contracts/utils/Counters.sol"";
import {Address} from ""@openzeppelin/contracts/utils/Address.sol"";
import {ERC165} from ""@openzeppelin/contracts/utils/introspection/ERC165.sol"";
import {Trust} from ""@rari-capital/solmate/src/auth/Trust.sol"";

import {IVault} from ""./vault/IVault.sol"";
import {IVaultSponsoring} from ""./vault/IVaultSponsoring.sol"";
import {PercentMath} from ""./lib/PercentMath.sol"";
import {Depositors} from ""./vault/Depositors.sol"";
import {Claimers} from ""./vault/Claimers.sol"";
import {IIntegration} from ""./integrations/IIntegration.sol"";
import {IStrategy} from ""./strategy/IStrategy.sol"";
import {ERC165Query} from ""./lib/ERC165Query.sol"";

import ""hardhat/console.sol"";



contract Vault is IVault, IVaultSponsoring, Context, ERC165, Trust {
    using Counters for Counters.Counter;
    using SafeERC20 for IERC20;
    using PercentMath for uint256;
    using Address for address;
    using ERC165Query for address;

    
    
    

    uint256 public constant MIN_SPONSOR_LOCK_DURATION = 1209600; 
    uint256 public constant SHARES_MULTIPLIER = 10**18;

    
    
    

    
    
    IERC20 public override(IVault) underlying;

    
    IStrategy public strategy;

    
    uint256 public investPerc;

    
    uint256 public immutable override(IVault) minLockPeriod;

    
    uint256 public override(IVaultSponsoring) totalSponsored;

    
    Depositors public depositors;

    
    Claimers public claimers;

    
    Counters.Counter private _depositGroupIds;

    
    constructor(
        IERC20 _underlying,
        uint256 _minLockPeriod,
        uint256 _investPerc,
        address _owner
    ) Trust(_owner) {
        require(
            PercentMath.validPerc(_investPerc),
            ""Vault: invalid investPerc""
        );
        require(
            address(_underlying) != address(0x0),
            ""VaultContext: underlying cannot be 0x0""
        );
        investPerc = _investPerc;
        underlying = _underlying;
        minLockPeriod = _minLockPeriod;

        depositors = new Depositors(address(this), ""depositors"", ""p"");
        claimers = new Claimers(address(this));
    }

    
    
    

    
    function setStrategy(address _strategy)
        external
        override(IVault)
        requiresTrust
    {
        require(_strategy != address(0), ""Vault: strategy 0x"");
        require(
            IStrategy(_strategy).vault() == address(this),
            ""Vault: invalid vault""
        );
        require(
            address(strategy) == address(0) || strategy.investedAssets() == 0,
            ""Vault: strategy has invested funds""
        );

        strategy = IStrategy(_strategy);
    }

    
    function totalUnderlying() public view override(IVault) returns (uint256) {
        if (address(strategy) != address(0)) {
            return
                underlying.balanceOf(address(this)) + strategy.investedAssets();
        } else {
            return underlying.balanceOf(address(this));
        }
    }

    
    function totalShares() public view override(IVault) returns (uint256) {
        return claimers.totalShares();
    }

    
    function yieldFor(address _to)
        public
        view
        override(IVault)
        returns (uint256)
    {
        uint256 tokenId = claimers.addressToTokenID(_to);
        uint256 claimerPrincipal = claimers.principalOf(tokenId);
        uint256 claimerShares = claimers.sharesOf(tokenId);
        uint256 currentClaimerPrincipal = _computeAmount(
            claimerShares,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );

        if (currentClaimerPrincipal <= claimerPrincipal) {
            return 0;
        }

        return currentClaimerPrincipal - claimerPrincipal;
    }

    
    function deposit(DepositParams calldata _params) external {
        _createDeposit(_params.amount, _params.lockedUntil, _params.claims);
        _transferAndCheckUnderlying(_msgSender(), _params.amount);
    }

    
    function claimYield(address _to) external override(IVault) {
        uint256 yield = yieldFor(_msgSender());

        if (yield == 0) return;

        uint256 shares = _computeShares(
            yield,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );
        uint256 sharesAmount = _computeAmount(
            shares,
            totalShares(),
            totalUnderlyingMinusSponsored()
        );

        claimers.claimYield(_msgSender(), _to, sharesAmount, shares);

        underlying.safeTransfer(_to, sharesAmount);
    }

    
    function withdraw(address _to, uint256[] memory _ids)
        external
        override(IVault)
    {
        _withdraw(_to, _ids, false);
    }

    
    function forceWithdraw(address _to, uint256[] memory _ids) external {
        _withdraw(_to, _ids, true);
    }

    
    function setInvestPerc(uint16 _investPerc) external requiresTrust {
        require(
            PercentMath.validPerc(_investPerc),
            ""Vault: invalid investPerc""
        );

        emit InvestPercentageUpdated(_investPerc);

        investPerc = _investPerc;
    }

    
    function investableAmount() public view returns (uint256) {
        uint256 maxInvestableAssets = totalUnderlying().percOf(investPerc);

        uint256 alreadyInvested = strategy.investedAssets();

        if (alreadyInvested >= maxInvestableAssets) {
            return 0;
        } else {
            return maxInvestableAssets - alreadyInvested;
        }
    }

    
    function updateInvested() external requiresTrust {
        require(address(strategy) != address(0), ""Vault: strategy is not set"");

        uint256 _investable = investableAmount();

        if (_investable > 0) {
            underlying.safeTransfer(address(strategy), _investable);

            emit Invested(_investable);
        }

        strategy.doHardWork();
    }

    
    

    
    function sponsor(uint256 _amount, uint256 _lockedUntil)
        external
        override(IVaultSponsoring)
    {
        if (_lockedUntil == 0)
            _lockedUntil = block.timestamp + MIN_SPONSOR_LOCK_DURATION;
        else
            require(
                _lockedUntil >= block.timestamp + MIN_SPONSOR_LOCK_DURATION,
                ""Vault: lock time is too small""
            );

        uint256 tokenId = depositors.mint(
            _msgSender(),
            _amount,
            0,
            _lockedUntil
        );

        emit Sponsored(tokenId, _amount, _msgSender(), _lockedUntil);

        totalSponsored += _amount;
        _transferAndCheckUnderlying(_msgSender(), _amount);
    }

    
    function unsponsor(address _to, uint256[] memory _ids) external {
        _unsponsor(_to, _ids, false);
    }

    
    function forceUnsponsor(address _to, uint256[] memory _ids) external {
        _unsponsor(_to, _ids, true);
    }

    
    
    

    
    function totalUnderlyingMinusSponsored() public view returns (uint256) {
        
        return totalUnderlying() - totalSponsored;
    }

    
    
    

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC165)
        returns (bool)
    {
        return
            interfaceId == type(IVault).interfaceId ||
            interfaceId == type(IVaultSponsoring).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    
    

    
    function _withdraw(
        address _to,
        uint256[] memory _ids,
        bool _force
    ) internal {
        uint256 localTotalShares = totalShares();
        uint256 localTotalPrincipal = totalUnderlyingMinusSponsored();
        uint256 amount;

        for (uint8 i = 0; i < _ids.length; i++) {
            amount += _withdrawDeposit(
                _ids[i],
                localTotalShares,
                localTotalPrincipal,
                _to,
                _force
            );
        }

        underlying.safeTransfer(_to, amount);
    }

    
    function _unsponsor(
        address _to,
        uint256[] memory _ids,
        bool _force
    ) internal {
        uint256 sponsorAmount;

        for (uint8 i = 0; i < _ids.length; i++) {
            uint256 tokenId = _ids[i];

            require(
                depositors.ownerOf(tokenId) == _msgSender(),
                ""Vault: you are not the owner of a sponsor""
            );

            (
                uint256 depositAmount,
                uint256 claimerId,
                uint256 lockedUntil
            ) = depositors.deposits(tokenId);
            require(lockedUntil <= block.timestamp, ""Vault: amount is locked"");

            require(claimerId == 0, ""Vault: token id is not a sponsor"");

            depositors.burn(tokenId);

            emit Unsponsored(tokenId);

            sponsorAmount += depositAmount;
        }

        uint256 sponsorToTransfer = sponsorAmount;

        if (_force && sponsorAmount > totalUnderlying()) {
            sponsorToTransfer = totalUnderlying();
        } else if (!_force) {
            require(
                sponsorToTransfer <= totalUnderlying(),
                ""Vault: not enough funds to unsponsor""
            );
        }

        totalSponsored -= sponsorAmount;

        underlying.safeTransfer(_to, sponsorToTransfer);
    }

    
    function _createDeposit(
        uint256 _amount,
        uint256 _lockedUntil,
        ClaimParams[] calldata claims
    ) internal {
        if (_lockedUntil == 0) _lockedUntil = block.timestamp + minLockPeriod;
        else
            require(
                _lockedUntil >= block.timestamp + minLockPeriod,
                ""Vault: lock time is too small""
            );

        uint256 localTotalShares = totalShares();
        uint256 localTotalUnderlying = totalUnderlyingMinusSponsored();
        uint256 pct = 0;

        for (uint256 i = 0; i < claims.length; ++i) {
            ClaimParams memory data = claims[i];
            _createClaim(
                _depositGroupIds.current(),
                _amount,
                _lockedUntil,
                data,
                localTotalShares,
                localTotalUnderlying
            );
            pct += data.pct;
        }

        _depositGroupIds.increment();

        require(pct.is100Perc(), ""Vault: claims don't add up to 100%"");
    }

    function _createClaim(
        uint256 _depositGroupId,
        uint256 _amount,
        uint256 _lockedUntil,
        ClaimParams memory _claim,
        uint256 _localTotalShares,
        uint256 _localTotalPrincipal
    ) internal {
        uint256 amount = _amount.percOf(_claim.pct);

        uint256 newShares = _computeShares(
            amount,
            _localTotalShares,
            _localTotalPrincipal
        );

        uint256 claimerId = claimers.mint(
            _claim.beneficiary,
            amount,
            newShares
        );

        uint256 tokenId = depositors.mint(
            _msgSender(),
            amount,
            claimerId,
            _lockedUntil
        );

        if (_isIntegration(_claim.beneficiary)) {
            bytes4 ret = IIntegration(_claim.beneficiary).onDepositMinted(
                tokenId,
                newShares,
                _claim.data
            );

            require(
                ret == IIntegration(_claim.beneficiary).onDepositMinted.selector
            );
        }

        emit DepositMinted(
            tokenId,
            _depositGroupId,
            amount,
            newShares,
            _msgSender(),
            _claim.beneficiary,
            claimerId,
            _lockedUntil
        );
    }

    
    function _withdrawDeposit(
        uint256 _tokenId,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored,
        address _to,
        bool _force
    ) internal returns (uint256) {
        require(
            depositors.ownerOf(_tokenId) == _msgSender(),
            ""Vault: you are not the owner of a deposit""
        );

        (
            uint256 depositAmount,
            uint256 claimerId,
            uint256 lockedUntil
        ) = depositors.deposits(_tokenId);
        require(lockedUntil <= block.timestamp, ""Vault: deposit is locked"");

        require(claimerId != 0, ""Vault: token id is not a withdraw"");

        uint256 claimerShares = claimers.sharesOf(claimerId);

        uint256 depositShares = _computeShares(
            depositAmount,
            _totalShares,
            _totalUnderlyingMinusSponsored
        );

        if (_force && depositShares > claimerShares) {
            depositShares = claimerShares;
        } else if (!_force) {
            require(
                claimerShares >= depositShares,
                ""Vault: cannot withdraw more than the available amount""
            );
        }

        claimers.onWithdraw(claimerId, depositAmount, depositShares);
        depositors.burn(_tokenId);

        address claimer = claimers.ownerOf(claimerId);

        if (_isIntegration(claimer)) {
            bytes4 ret = IIntegration(claimer).onDepositBurned(_tokenId);

            require(ret == IIntegration(claimer).onDepositBurned.selector);
        }

        emit DepositBurned(_tokenId, depositShares, _to);

        return
            _computeAmount(
                depositShares,
                _totalShares,
                _totalUnderlyingMinusSponsored
            );
    }

    function _transferAndCheckUnderlying(address _from, uint256 _amount)
        internal
    {
        uint256 balanceBefore = totalUnderlying();
        underlying.safeTransferFrom(_from, address(this), _amount);
        uint256 balanceAfter = totalUnderlying();

        require(
            balanceAfter == balanceBefore + _amount,
            ""Vault: amount received does not match params""
        );
    }

    function _blockTimestamp() public view returns (uint64) {
        return uint64(block.timestamp);
    }

    
    function _computeShares(
        uint256 _amount,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored
    ) internal pure returns (uint256) {
        if (_amount == 0) return 0;
        if (_totalShares == 0) return _amount * SHARES_MULTIPLIER;

        require(
            _totalUnderlyingMinusSponsored > 0,
            ""Vault: cannot compute shares when there's no principal""
        );

        return (_amount * _totalShares) / _totalUnderlyingMinusSponsored;
    }

    
    function _computeAmount(
        uint256 _shares,
        uint256 _totalShares,
        uint256 _totalUnderlyingMinusSponsored
    ) internal pure returns (uint256) {
        if (_totalShares == 0 || _totalUnderlyingMinusSponsored == 0) {
            return 0;
        } else {
            
            return ((_totalUnderlyingMinusSponsored * _shares) / _totalShares);
        }
    }

    
    function _isIntegration(address addr) internal view returns (bool) {
        return
            addr.doesContractImplementInterface(type(IIntegration).interfaceId);
    }
}",3364.0,4,4,"Okay, let's break down the potential vulnerabilities in the provided `Vault.sol` smart contract.

**Critical / High Severity Vulnerabilities:**

1.  **Missing Access Control on `forceWithdraw` and `forceUnsponsor`:**
    *   **Location:** `forceWithdraw(address _to, uint256[] memory _ids)`, `forceUnsponsor(address _to, uint256[] memory _ids)`
    *   **Description:** These functions lack the `requiresTrust` modifier (or any other access control). This means *any* address can call them.
    *   **Impact:**
        *   `forceWithdraw`: Allows anyone to initiate a withdrawal bypassing the check `claimerShares >= depositShares` (though capped at the claimer's actual shares). While it still requires the caller to own the deposit NFT (`depositors.ownerOf(_tokenId) == _msgSender()`), the ""force"" aspect seems intended for privileged users. More importantly, it bypasses the standard safety check.
        *   `forceUnsponsor`: This is more critical. Anyone owning a sponsor NFT can call this. If the total `sponsorAmount` they try to withdraw via `_ids` exceeds `totalUnderlying()` in the vault (due to losses or funds being locked in strategy), the logic `if (_force && sponsorAmount > totalUnderlying()) { sponsorToTransfer = totalUnderlying(); }` allows the caller to drain *all* underlying tokens held directly by the vault contract, potentially taking funds belonging to regular depositors. Combined with the lack of access control, any sponsor can attempt to drain the vault's liquid balance if their lock has expired.
    *   **Recommendation:** Add the `requiresTrust` modifier or implement appropriate role-based access control for these functions.

2.  **Reentrancy Vulnerability in `updateInvested`:**
    *   **Location:** `updateInvested()`
    *   **Description:** The function first transfers funds to the strategy (`underlying.safeTransfer(address(strategy), _investable);`) and *then* calls an external function on the strategy (`strategy.doHardWork();`). If the `strategy` contract is malicious or compromised, the `doHardWork` function could call back into the `Vault` contract *before* its own execution finishes.
    *   **Impact:** A reentrant call could potentially allow the strategy to trigger another `updateInvested` or other state-changing functions (like withdrawing if the strategy somehow gained ownership of deposit NFTs), potentially leading to unexpected state or draining more funds than intended based on inconsistent state during the reentrant call (e.g., `investableAmount` might be calculated incorrectly mid-execution).
    *   **Recommendation:** Follow the Checks-Effects-Interactions pattern. Call `strategy.doHardWork()` *before* transferring the funds, or implement a reentrancy guard (like OpenZeppelin's `ReentrancyGuard`). Calling `doHardWork` first might be complex if it relies on receiving the funds beforehand. A reentrancy guard is likely the safer option.

**Medium Severity Vulnerabilities:**

3.  **Risk of Malicious or Buggy Strategy:**
    *   **Location:** `setStrategy(address _strategy)`, `updateInvested()`
    *   **Description:** The trusted owner (`Trust`) can set any address as the strategy, as long as it points back to the vault and the old strategy has no funds. The vault transfers funds to the strategy in `updateInvested`.
    *   **Impact:** A malicious strategy set by the owner could steal all funds transferred to it. A buggy strategy could permanently lock funds or incorrectly report `investedAssets()`, breaking vault accounting.
    *   **Recommendation:** Implement timelocks for strategy changes, use multi-sig for ownership, and ensure strategies are heavily audited. The checks in `setStrategy` are good but don't prevent a malicious owner/strategy.

4.  **Potential DoS via Large Arrays:**
    *   **Location:** `withdraw`, `forceWithdraw`, `unsponsor`, `forceUnsponsor`, `_createDeposit` (via `claims` array).
    *   **Description:** These functions iterate over arrays (`_ids`, `claims`) provided by the user. If a user provides a very large array, the transaction could consume more gas than the block gas limit, causing it to always fail.
    *   **Impact:** Users might be unable to withdraw/unsponsor multiple deposits/sponsorships at once if the array size required exceeds gas limits, forcing them to make multiple smaller transactions (increasing costs) or potentially making withdrawal impossible in extreme cases. `_createDeposit` could fail if the `claims` array is too large.
    *   **Recommendation:** Consider adding limits to the array lengths processed per transaction or documenting this limitation. For withdrawals/unsponsoring, this is often considered an acceptable limitation. For `_createDeposit`, limiting the number of claims might be prudent.

5.  **Incompatibility with Fee-on-Transfer / Rebasing Tokens:**
    *   **Location:** `_transferAndCheckUnderlying(address _from, uint256 _amount)`, general accounting.
    *   **Description:** The contract assumes the `underlying` token behaves like a standard ERC20.
        *   The check `balanceAfter == balanceBefore + _amount` in `_transferAndCheckUnderlying` will fail for tokens that take a fee on transfer, as the vault will receive less than `_amount`.
        *   Rebasing tokens (like stETH or aTokens) change balance automatically. The vault's accounting (`totalUnderlying`, share calculations) relies on explicit transfers and `balanceOf`/`investedAssets`, which doesn't account for implicit balance changes, leading to incorrect share prices and potential value leakage.
    *   **Impact:** Using such tokens as `underlying` could lead to failed deposits/sponsorships or incorrect share calculations, potentially benefiting some users at the expense of others or the vault itself.
    *   **Recommendation:** Explicitly disallow such tokens in documentation or add logic to handle them (which is complex, especially for rebasing tokens where share calculations need adjustments). The balance check should compare the vault's direct balance change: `uint256 balanceBefore = underlying.balanceOf(address(this)); ... uint256 balanceAfter = underlying.balanceOf(address(this)); require(balanceAfter > balanceBefore && balanceAfter - balanceBefore <= _amount /* or potentially == _amount if no fee expected */);` - adapting the check is crucial. Also, `totalUnderlying` calculation needs careful review for rebasing tokens.

6.  **External Call Risk (Integrations):**
    *   **Location:** `_createClaim`, `_withdrawDeposit`
    *   **Description:** The vault calls `onDepositMinted` and `onDepositBurned` on external `IIntegration` contracts.
    *   **Impact:** If the integration contract reverts (e.g., due to a bug, unmet condition, or running out of gas), the entire deposit or withdrawal operation will fail. This creates a dependency on potentially unknown external code. A malicious integration (if somehow whitelisted or if `_isIntegration` check is bypassed/fooled) could try to grief users, although the state changes happen *before* the call, mitigating reentrancy risks for stealing funds directly in these specific calls.
    *   **Recommendation:** Ensure integrations are vetted. Consider wrapping external calls in `try/catch` if graceful failure is desired (though this might complicate state management). Acknowledge this external dependency risk.

**Low Severity / Informational:**

7.  **Timestamp Dependence:**
    *   **Location:** `sponsor`, `_createDeposit`, `_withdrawDeposit`, `_unsponsor` (checking `lockedUntil <= block.timestamp`)
    *   **Description:** The contract relies on `block.timestamp` for deposit/sponsor lock periods. Miner manipulation of timestamps is possible, though usually limited to a few seconds.
    *   **Impact:** Minimal for long lock periods like `MIN_SPONSOR_LOCK_DURATION` (14 days). It's a standard practice in DeFi, but worth noting.
    *   **Recommendation:** Acceptable risk for typical lock durations.

8.  **Potential Centralization Risk (`Trust` Owner):**
    *   **Location:** Constructor, `requiresTrust` modifier.
    *   **Description:** A single owner (via the `Trust` contract) has significant power: setting the strategy, investment percentage, and potentially calling force operations (if access control is added).
    *   **Impact:** The security of the vault depends heavily on the owner's security and integrity.
    *   **Recommendation:** Use a multi-sig wallet or a decentralized governance process for the `Trust` owner role.

9.  **No Event for Strategy Change:**
    *   **Location:** `setStrategy`
    *   **Description:** The `setStrategy` function does not emit an event.
    *   **Impact:** Off-chain monitoring tools and users cannot easily track when the strategy is changed.
    *   **Recommendation:** Add an event like `event StrategyUpdated(address indexed oldStrategy, address indexed newStrategy);`

10. **Gas Intensive Calculations in `yieldFor`:**
    *   **Location:** `yieldFor`
    *   **Description:** This view function calculates `totalShares()` and `totalUnderlyingMinusSponsored()` (which itself calls `totalUnderlying()`, potentially involving an external call to `strategy.investedAssets()`).
    *   **Impact:** Calling `yieldFor` might be relatively gas-intensive for a view function, especially if the strategy call is heavy.
    *   **Recommendation:** This is likely acceptable, but be aware if this function is called frequently on-chain or if the strategy call is very expensive.

This list covers the most apparent vulnerabilities and areas of concern based on standard security practices and the provided code. A formal audit would involve more in-depth analysis and testing.","### **Comparison of Issue Report and Response List**

---

#### **[H-01] `forceUnsponsor()` may open a window for attackers to manipulate the `_totalShares` and freeze users' funds at a certain deposit amount**

**Report Description**:  
The `forceUnsponsor()` function allows an attacker to manipulate `_totalShares` by depositing a tiny amount of underlying tokens after `sponsorAmount > totalUnderlying()`. This can lead to an extremely large `newShares` value, potentially freezing users' funds when the deposit/withdraw amount reaches a certain value.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address this specific issue. While it discusses access control and potential draining of funds in `forceUnsponsor`, it does not cover the manipulation of `_totalShares` or the freezing of funds.

---

#### **[H-02] Withdrawers can get more value returned than expected with reentrant call**

**Report Description**:  
Users can exploit reentrancy in the withdrawal process to withdraw significantly more UST than expected.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address this specific reentrancy issue in the withdrawal process.

---

#### **[H-04] `deposit()` function is open to reentrancy attacks**

**Report Description**:  
The `deposit()` function in `Vault.sol` is vulnerable to reentrancy attacks due to callbacks during NFT minting, allowing attackers to manipulate the protocol state.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address reentrancy in the `deposit()` function.

---

#### **[H-05] `sponsor()` function is open to reentrancy attacks**

**Report Description**:  
The `sponsor()` function lacks a reentrancy guard, allowing attackers to reenter the function and manipulate the `totalSponsored` amount.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address reentrancy in the `sponsor()` function.

---

#### **[M-04] `_unsponsor`, `claimYield`, and `withdraw` might fail unexpectedly**

**Report Description**:  
These functions might fail if the system does not have enough assets in the balance, especially `forceUnsponsor`, which attempts to transfer the entire `totalUnderlying()`.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address this issue.

---

#### **[M-06] `totalUnderlyingMinusSponsored()` may revert on underflow and malfunction the contract**

**Report Description**:  
The function may revert on underflow when `sponsorAmount > totalUnderlying()`, causing the contract to malfunction.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address this issue.

---

#### **[M-07] Vault can't receive deposits if underlying token charges fees on transfer**

**Report Description**:  
If the underlying token charges fees on transfer, deposits will fail, as the vault does not account for such fees.

**Match in Response List**:  
Matches with the issue titled **""Incompatibility with Fee-on-Transfer / Rebasing Tokens""**.

**Validation**:  
**Correct**. The response accurately identifies the issue with fee-on-transfer tokens and explains the risks and potential solutions.

---

#### **[M-15] Check `_to` is not empty**

**Report Description**:  
Functions like `claimYield`, `_withdraw`, and `_unsponsor` should validate that `_to` is not an empty address to prevent accidental burns.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address this issue.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[M-07] Vault can't receive deposits if underlying token charges fees on transfer**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-01] `forceUnsponsor()` may open a window for attackers to manipulate the `_totalShares` and freeze users' funds at a certain deposit amount**
- **[H-02] Withdrawers can get more value returned than expected with reentrant call**
- **[H-04] `deposit()` function is open to reentrancy attacks**
- **[H-05] `sponsor()` function is open to reentrancy attacks**
- **[M-04] `_unsponsor`, `claimYield`, and `withdraw` might fail unexpectedly**
- **[M-06] `totalUnderlyingMinusSponsored()` may revert on underflow and malfunction the contract**
- **[M-15] Check `_to` is not empty**

---

### **Conclusion**

The response list covers only one issue ([M-07]) correctly but misses the majority of the issues in the report, particularly those related to reentrancy, state manipulation, and validation checks. A more comprehensive review is needed to address these vulnerabilities.",1,0,7,10,"```
1. Incompatibility with Fee-on-Transfer / Rebasing Tokens
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the rank of the true positive**:
   - The true positive is ""Incompatibility with Fee-on-Transfer / Rebasing Tokens"".
   - This appears at rank **5** in the ranked list of predictions.

2. **Calculate the precision at rank 5**:
   - Precision at rank \( k \) (\( P@k \)) is calculated as the number of true positives up to rank \( k \) divided by \( k \).
   - Up to rank 5, there is **1** true positive.
   - \( P@5 = \frac{1}{5} = 0.2 \).

3. **Compute the Average Precision (AP)**:
   - Since there is only one true positive, the AP is simply the precision at the rank where the true positive appears.
   - \( AP = 0.2 \).

**Output**:
```
0.2
```"
NonUSTStrategy.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import ""./curve/ICurve.sol"";
import ""./BaseStrategy.sol"";
import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";

/**
 * Strategy that handles non-UST tokens, by first converting them to UST via
 * Curve (https://curve.fi/), and only then depositing into EthAnchor
 */
contract NonUSTStrategy is BaseStrategy {
    using SafeERC20 for IERC20;

    // address of the Curve pool to use
    ICurve public curvePool;

    // index of the underlying token in the pool
    int128 public underlyingI;

    // index of the UST token in the pool
    int128 public ustI;

    constructor(
        address _vault,
        address _treasury,
        address _ethAnchorRouter,
        address _exchangeRateFeeder,
        IERC20 _ustToken,
        IERC20 _aUstToken,
        uint16 _perfFeePct,
        address _owner,
        address _curvePool,
        int128 _underlyingI,
        int128 _ustI
    )
        BaseStrategy(
            _vault,
            _treasury,
            _ethAnchorRouter,
            _exchangeRateFeeder,
            _ustToken,
            _aUstToken,
            _perfFeePct,
            _owner
        )
    {
        require(underlying != _ustToken, ""invalid underlying"");
        require(_curvePool != address(0), ""0x addr"");
        curvePool = ICurve(_curvePool);
        underlyingI = _underlyingI;
        ustI = _ustI;

        ustToken.safeApprove(_curvePool, type(uint256).max);
        underlying.safeApprove(_curvePool, type(uint256).max);
    }

    /**
     * Swaps the underlying currency for UST, and initiates a deposit of all
     * the converted UST into EthAnchor
     *
     * @notice since EthAnchor uses an asynchronous model, this function
     * only starts the deposit process, but does not finish it.
     */
    function doHardWork() external override(BaseStrategy) restricted {
        _swapUnderlyingToUst();
        _initDepositStable();
    }

    /**
     * Calls Curve to convert the existing underlying balance into UST
     */
    function _swapUnderlyingToUst() internal {
        uint256 underlyingBalance = _getUnderlyingBalance();
        if (underlyingBalance > 0) {
            // slither-disable-next-line unused-return
            curvePool.exchange_underlying(
                underlyingI,
                ustI,
                underlyingBalance,
                0
            );
        }
    }

    /**
     * Calls Curve to convert the existing UST back into the underlying token
     */
    function _swapUstToUnderlying() internal {
        uint256 ustBalance = _getUstBalance();
        if (ustBalance > 0) {
            // slither-disable-next-line unused-return
            curvePool.exchange_underlying(ustI, underlyingI, ustBalance, 0);
        }
    }

    /**
     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.
     * Once UST is retrieved, convert it back to underlying via Curve
     *
     * @notice Must be called some time after `initRedeemStable()`. Will only work if
     * the EthAnchor bridge has finished processing the deposit.
     *
     * @param idx Id of the pending redeem operation
     */
    function finishRedeemStable(uint256 idx) public override(BaseStrategy) {
        super.finishRedeemStable(idx);
        _swapUstToUnderlying();
    }

    /**
     * Amount, expressed in the underlying currency, currently in the strategy
     *
     * @notice both held and invested amounts are included here, using the
     * latest known exchange rates to the underlying currency
     *
     * @return The total amount of underlying
     */
    function investedAssets()
        external
        view
        override(BaseStrategy)
        returns (uint256)
    {
        uint256 underlyingBalance = _getUnderlyingBalance();
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;

        uint256 ustAssets = ((exchangeRateFeeder.exchangeRateOf(
            address(aUstToken),
            true
        ) * aUstBalance) / 1e18) + pendingDeposits;
        return
            underlyingBalance +
            curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);
    }
}",1005.0,137.0,"[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool
In short, the NonUSTStrategy is vulnerable to attacks by flash loans on curve pools.
- Here’s an outline of the attack:
- Assume there is a vault with DAI underlying and a NonUSTStrategy with a DAI / UST curve pool
- Take out a flash loan of DAI
- Exchange a ton of DAI for UST
- The exchange rate from DAI to UST has gone up (!!)
- Withdraw or deposit from vault with more favorable terms than market
- Transfer back UST to DAI
- Repay flash loan


[M-02] NonUSTStrategy.sol Improper handling of swap fees allows attacker to steal funds from other users
Function `_swapUnderlyingToUst`
NonUSTStrategy will swap the deposited non-UST assets into UST before depositing to EthAnchor. However, the swap fee is not attributed to the depositor correctly like many other yield farming vaults involving swaps (ZapIn).
An attacker can exploit it for the swap fees paid by other users by taking a majority share of the liquidity pool.


[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals
The `investedAssets()` function is implemented by the vault's strategy contracts as a way to express a vault's investments in terms of the underlying currency. While the implementation of this function in BaseStrategy.sol and NonUSTStrategy.sol is mostly correct. It does not account for the performance fee charged by the treasury as shown in `finishRedeemStable()`.",3.0,"pragma solidity ^0.8.10;

import ""./curve/ICurve.sol"";
import ""./BaseStrategy.sol"";
import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";


contract NonUSTStrategy is BaseStrategy {
    using SafeERC20 for IERC20;

    
    ICurve public curvePool;

    
    int128 public underlyingI;

    
    int128 public ustI;

    constructor(
        address _vault,
        address _treasury,
        address _ethAnchorRouter,
        address _exchangeRateFeeder,
        IERC20 _ustToken,
        IERC20 _aUstToken,
        uint16 _perfFeePct,
        address _owner,
        address _curvePool,
        int128 _underlyingI,
        int128 _ustI
    )
        BaseStrategy(
            _vault,
            _treasury,
            _ethAnchorRouter,
            _exchangeRateFeeder,
            _ustToken,
            _aUstToken,
            _perfFeePct,
            _owner
        )
    {
        require(underlying != _ustToken, ""invalid underlying"");
        require(_curvePool != address(0), ""0x addr"");
        curvePool = ICurve(_curvePool);
        underlyingI = _underlyingI;
        ustI = _ustI;

        ustToken.safeApprove(_curvePool, type(uint256).max);
        underlying.safeApprove(_curvePool, type(uint256).max);
    }

    
    function doHardWork() external override(BaseStrategy) restricted {
        _swapUnderlyingToUst();
        _initDepositStable();
    }

    
    function _swapUnderlyingToUst() internal {
        uint256 underlyingBalance = _getUnderlyingBalance();
        if (underlyingBalance > 0) {
            
            curvePool.exchange_underlying(
                underlyingI,
                ustI,
                underlyingBalance,
                0
            );
        }
    }

    
    function _swapUstToUnderlying() internal {
        uint256 ustBalance = _getUstBalance();
        if (ustBalance > 0) {
            
            curvePool.exchange_underlying(ustI, underlyingI, ustBalance, 0);
        }
    }

    
    function finishRedeemStable(uint256 idx) public override(BaseStrategy) {
        super.finishRedeemStable(idx);
        _swapUstToUnderlying();
    }

    
    function investedAssets()
        external
        view
        override(BaseStrategy)
        returns (uint256)
    {
        uint256 underlyingBalance = _getUnderlyingBalance();
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;

        uint256 ustAssets = ((exchangeRateFeeder.exchangeRateOf(
            address(aUstToken),
            true
        ) * aUstBalance) / 1e18) + pendingDeposits;
        return
            underlyingBalance +
            curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);
    }
}",664.0,1,2,"Okay, let's break down the potential vulnerabilities in the `NonUSTStrategy` smart contract.

**Major Vulnerabilities:**

1.  **Lack of Slippage Protection in Curve Swaps:**
    *   **Location:** `_swapUnderlyingToUst()` and `_swapUstToUnderlying()` functions.
    *   **Code:** `curvePool.exchange_underlying(..., underlyingBalance, 0);` and `curvePool.exchange_underlying(..., ustBalance, 0);`
    *   **Explanation:** The last argument `0` in `exchange_underlying` represents `min_dy`, the minimum amount of the output token the caller is willing to accept. Setting this to `0` means the contract accepts *any* amount of the output token, even if it's significantly less than expected due to price changes (slippage) between when the transaction is submitted and when it's mined.
    *   **Impact:** This makes the strategy highly vulnerable to **sandwich attacks** or **front-running**. An attacker can manipulate the Curve pool's price just before the strategy's swap, execute the strategy's swap at a terrible rate (because `min_dy` is 0), and then restore the price, profiting from the strategy's loss. This can lead to significant loss of funds during both the conversion *to* UST (`doHardWork`) and the conversion *back* to the underlying token (`finishRedeemStable`).

**Medium Vulnerabilities / Potential Issues:**

2.  **Infinite/Unlimited Token Approval:**
    *   **Location:** `constructor`
    *   **Code:**
        ```solidity
        ustToken.safeApprove(_curvePool, type(uint256).max);
        underlying.safeApprove(_curvePool, type(uint256).max);
        ```
    *   **Explanation:** The strategy grants the `curvePool` contract an unlimited allowance to spend its `ustToken` and `underlying` tokens. While common for gas efficiency in strategies, this poses a risk.
    *   **Impact:** If the specific `curvePool` contract ever has a vulnerability exploited, or if it's a malicious/upgradable proxy that gets compromised, the attacker could potentially drain *all* `ustToken` and `underlying` held by this strategy contract using the approved allowance.

3.  **Reliance on External Contracts & Oracle Risk:**
    *   **Location:** Throughout the contract (`constructor`, `investedAssets`, swaps).
    *   **Explanation:** The strategy heavily relies on several external components:
        *   `curvePool`: Assumes the pool address is correct, the pool functions as expected, and the provided indices (`underlyingI`, `ustI`) match the actual tokens in that pool.
        *   `exchangeRateFeeder`: Used in `investedAssets` to determine the value of aUST.
        *   `ethAnchorRouter`: Used implicitly via `BaseStrategy` for Anchor deposits/withdrawals.
        *   `BaseStrategy`: The core logic, access control (`restricted`), and Anchor interactions depend on this base contract, whose code isn't provided.
    *   **Impact:**
        *   **Incorrect Configuration:** If deployed with the wrong `curvePool` address or incorrect `underlyingI`/`ustI` indices, swaps will fail or swap the wrong assets.
        *   **External Contract Failure/Manipulation:** If `curvePool` is paused, drained, or malicious, swaps fail or lose funds. If `exchangeRateFeeder` provides incorrect/stale data (oracle manipulation or failure), `investedAssets` will report incorrect values, potentially impacting vault share price calculations or monitoring. Vulnerabilities in `BaseStrategy` or `ethAnchorRouter` could lead to loss of funds during Anchor interactions.

4.  **Potential Mismatch in `investedAssets` Calculation:**
    *   **Location:** `investedAssets()`
    *   **Code:** `curvePool.get_dy_underlying(ustI, underlyingI, ustAssets)`
    *   **Explanation:** The function uses `get_dy_underlying` to estimate the value of the UST-denominated assets (`ustAssets`) if they were swapped back to the `underlying` token *at the current pool price*. However, the actual swaps (`_swapUstToUnderlying`) are performed with zero slippage protection (`min_dy = 0`).
    *   **Impact:** The reported `investedAssets` might be an overestimate of the amount actually recoverable, especially if the pool experiences slippage or is manipulated during a withdrawal (`finishRedeemStable`). This discrepancy can mislead users or vault managers about the true value held by the strategy.

**Minor Vulnerabilities / Considerations:**

5.  **No Validation of Curve Pool Indices:**
    *   **Location:** `constructor`
    *   **Explanation:** The constructor takes `_curvePool`, `_underlyingI`, and `_ustI` but doesn't validate that these indices actually correspond to the `underlying` and `ustToken` addresses within that specific Curve pool.
    *   **Impact:** An incorrect deployment configuration could lead to the strategy attempting to swap the wrong assets or reverting transactions. While more of a configuration risk than an exploitable vulnerability post-deployment, it's a weakness in the deployment process safety.

**Summary:**

The most critical vulnerability is the **lack of slippage protection** during Curve swaps, which exposes the strategy to sandwich attacks and potential significant fund loss. The reliance on external contracts and infinite approvals are also notable risks inherent in DeFi composability.","### **Output**

---

**[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool**

**Report Description**:
The `NonUSTStrategy` is vulnerable to flash loan attacks on Curve pools. An attacker can manipulate the exchange rate between the non-UST asset (e.g., DAI) and UST by taking out a flash loan, swapping a large amount of DAI for UST, and then withdrawing or depositing from the vault with favorable terms. This manipulation can lead to significant financial losses for the vault and its users.

**Match in Response List**:
No match found.

**Validation**:
**Incorrect**. The response list does not address the specific flash loan attack vector described in the issue. While it mentions the lack of slippage protection in Curve swaps, it does not cover the broader implications of flash loan attacks on the strategy. This is a critical oversight, as flash loan attacks are a well-known risk in DeFi protocols.

---

**[M-02] NonUSTStrategy.sol Improper handling of swap fees allows attacker to steal funds from other users**

**Report Description**:
The `_swapUnderlyingToUst` function in `NonUSTStrategy.sol` does not correctly attribute swap fees to the depositor. This allows an attacker to exploit the swap fees paid by other users by taking a majority share of the liquidity pool, potentially leading to fund theft.

**Match in Response List**:
No match found.

**Validation**:
**Incorrect**. The response list does not address the issue of improper handling of swap fees. This is a significant oversight, as the misattribution of swap fees can lead to financial losses for users and create an exploitable vulnerability in the strategy.

---

**[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals**

**Report Description**:
The `investedAssets()` function in `BaseStrategy.sol` and `NonUSTStrategy.sol` does not account for the performance fee charged by the treasury during strategy withdrawals. This can lead to inaccurate reporting of the vault's investments and mislead users about the true value of their holdings.

**Match in Response List**:
Matches with the issue titled **""Potential Mismatch in `investedAssets` Calculation""**.

**Validation**:
**Partially Correct**. The response identifies a potential mismatch in the `investedAssets` calculation due to slippage in Curve swaps. However, it does not address the specific issue of performance fees not being accounted for in the calculation. While the response touches on a related issue, it misses the core problem described in the report.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- **[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals**

**Missed Issues from Issue Report**:
- **[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool**
- **[M-02] NonUSTStrategy.sol Improper handling of swap fees allows attacker to steal funds from other users**

---

### **Conclusion**
The response list partially addresses one issue but misses two critical vulnerabilities. The lack of coverage for flash loan attacks and improper handling of swap fees represents significant gaps in the response. These issues should be prioritized for remediation to ensure the security and integrity of the `NonUSTStrategy` contract.",0,1,2,5,"```
None.
```","Given that there are no true positives in the ranked list of predictions, the **Average Precision (AP)** is calculated as follows:

- Since there are no true positives, the precision at any rank is 0.
- The average of these precision values is also 0.

Therefore, the **Average Precision (AP)** is:

```
0.0
```"
BaseStrategy.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import {Trust} from ""@rari-capital/solmate/src/auth/Trust.sol"";

import ""../lib/PercentMath.sol"";
import ""../vault/IVault.sol"";
import ""./IStrategy.sol"";
import ""./anchor/IEthAnchorRouter.sol"";
import ""./anchor/IExchangeRateFeeder.sol"";

// import ""./Controllable.sol"";

/**
 * Base strategy that handles UST tokens and invests them via the EthAnchor
 * protocol (https://docs.anchorprotocol.com/ethanchor/ethanchor)
 */
abstract contract BaseStrategy is IStrategy, Trust {
    using SafeERC20 for IERC20;
    using PercentMath for uint256;

    event PerfFeeClaimed(uint256 amount);
    event PerfFeePctUpdated(uint256 pct);

    struct Operation {
        address operator;
        uint256 amount;
    }

    IERC20 public override(IStrategy) underlying;
    // Vault address
    address public override(IStrategy) vault;

    // address of the treasury
    address public treasury;

    // address for the UST token
    IERC20 public ustToken;

    // address for the aUST token (wrapped Anchor UST, received to accrue interest for an Anchor deposit)
    IERC20 public aUstToken;

    // performance fee taken by the treasury on profits
    uint16 public perfFeePct;

    // external contract to interact with EthAnchor
    IEthAnchorRouter public ethAnchorRouter;

    // external exchange rate provider
    IExchangeRateFeeder public exchangeRateFeeder;

    // amount currently pending in deposits to EthAnchor
    uint256 public pendingDeposits;

    // amount currently pending redeemption from EthAnchor
    uint256 public pendingRedeems;

    // deposit operations history
    Operation[] public depositOperations;

    // redeem operations history
    Operation[] public redeemOperations;

    // amount of UST converted (used to calculate yield)
    uint256 public convertedUst;

    // restructs a function to be called only by the vault or governance
    modifier restricted() {
        require(msg.sender == vault || isTrusted[msg.sender], ""restricted"");

        _;
    }

    modifier onlyVault() {
        require(msg.sender == vault, ""only vault"");

        _;
    }

    constructor(
        address _vault,
        address _treasury,
        address _ethAnchorRouter,
        address _exchangeRateFeeder,
        IERC20 _ustToken,
        IERC20 _aUstToken,
        uint16 _perfFeePct,
        address _owner
    ) Trust(_owner) {
        require(_ethAnchorRouter != address(0), ""0x addr"");
        require(_exchangeRateFeeder != address(0), ""0x addr"");
        require(address(_ustToken) != address(0), ""0x addr"");
        require(address(_aUstToken) != address(0), ""0x addr"");
        require(PercentMath.validPerc(_perfFeePct), ""invalid pct"");

        treasury = _treasury;
        vault = _vault;
        underlying = IVault(_vault).underlying();
        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);
        exchangeRateFeeder = IExchangeRateFeeder(_exchangeRateFeeder);
        ustToken = _ustToken;
        aUstToken = _aUstToken;
        perfFeePct = _perfFeePct;

        // pre-approve EthAnchor router to transact all UST and aUST
        ustToken.safeApprove(_ethAnchorRouter, type(uint256).max);
        aUstToken.safeApprove(_ethAnchorRouter, type(uint256).max);
    }

    /**
     * Initiates a deposit of all the currently held UST into EthAnchor
     *
     * @notice since EthAnchor uses an asynchronous model, this function
     * only starts the deposit process, but does not finish it.
     */
    function doHardWork() external virtual override(IStrategy) restricted {
        _initDepositStable();
    }

    function _initDepositStable() internal {
        uint256 ustBalance = _getUstBalance();
        require(ustBalance > 0, ""balance 0"");
        pendingDeposits += ustBalance;
        address _operator = ethAnchorRouter.initDepositStable(ustBalance);
        depositOperations.push(
            Operation({operator: _operator, amount: ustBalance})
        );
    }

    /**
     * Calls EthAnchor with a pending deposit ID, and attempts to finish it.
     *
     * @notice Must be called some time after `doHardWork()`. Will only work if
     * the EthAnchor bridge has finished processing the deposit.
     *
     * @param idx Id of the pending deposit operation
     */
    function finishDepositStable(uint256 idx) external {
        require(depositOperations.length > idx, ""not running"");
        Operation storage operation = depositOperations[idx];
        ethAnchorRouter.finishDepositStable(operation.operator);

        pendingDeposits -= operation.amount;
        convertedUst += operation.amount;

        operation.operator = depositOperations[depositOperations.length - 1]
            .operator;
        operation.amount = depositOperations[depositOperations.length - 1]
            .amount;
        depositOperations.pop();
    }

    /**
     * Initiates a withdrawal of UST from EthAnchor
     *
     * @notice since EthAnchor uses an asynchronous model, this function
     * only starts the redeem process, but does not finish it.
     *
     * @param amount Amount of aUST to redeem
     */
    function initRedeemStable(uint256 amount) public restricted {
        uint256 aUstBalance = _getAUstBalance();
        require(amount > 0, ""amount 0"");
        require(aUstBalance >= amount, ""insufficient"");
        pendingRedeems += amount;
        address _operator = ethAnchorRouter.initRedeemStable(amount);
        redeemOperations.push(Operation({operator: _operator, amount: amount}));
    }

    /**
     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.
     *
     * @notice Must be called some time after `initRedeemStable()`. Will only work if
     * the EthAnchor bridge has finished processing the deposit.
     *
     * @param idx Id of the pending redeem operation
     */
    function finishRedeemStable(uint256 idx) public virtual {
        require(redeemOperations.length > idx, ""not running"");
        Operation storage operation = redeemOperations[idx];
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;
        uint256 originalUst = (convertedUst * operation.amount) / aUstBalance;
        uint256 ustBalanceBefore = _getUstBalance();

        ethAnchorRouter.finishRedeemStable(operation.operator);

        uint256 redeemedAmount = _getUstBalance() - ustBalanceBefore;
        uint256 perfFee = redeemedAmount > originalUst
            ? (redeemedAmount - originalUst).percOf(perfFeePct)
            : 0;
        if (perfFee > 0) {
            ustToken.safeTransfer(treasury, perfFee);
            emit PerfFeeClaimed(perfFee);
        }
        convertedUst -= originalUst;
        pendingRedeems -= operation.amount;

        operation.operator = redeemOperations[redeemOperations.length - 1]
            .operator;
        operation.amount = redeemOperations[redeemOperations.length - 1].amount;
        redeemOperations.pop();
    }

    /**
     * Withdraws the entire amount back to the vault
     *
     * @notice since some of the amount may be deposited into EthAnchor, this
     * call may not withdraw all the funds right away. It will start a redeem
     * process on EthAnchor, but this function must be called again a second
     * time once that is finished.
     */
    function withdrawAllToVault() external override(IStrategy) restricted {
        uint256 aUstBalance = _getAUstBalance();
        if (aUstBalance > 0) {
            initRedeemStable(aUstBalance);
        }
        uint256 underlyingBalance = _getUnderlyingBalance();
        if (underlyingBalance > 0) {
            underlying.safeTransfer(vault, underlyingBalance);
        }
    }

    /**
     * Withdraws a specified amount back to the vault
     *
     * @notice Unlike `withdrawToVault`, this function only considers the
     * amount currently not invested, but only what is currently held by the
     * strategy
     *
     * @param amount Amount to withdraw
     */
    function withdrawToVault(uint256 amount)
        external
        override(IStrategy)
        restricted
    {
        underlying.safeTransfer(vault, amount);
    }

    /**
     * Updates the performance fee
     *
     * @notice Can only be called by governance
     *
     * @param _perfFeePct The new performance fee %
     */
    function setPerfFeePct(uint16 _perfFeePct) external restricted {
        require(PercentMath.validPerc(_perfFeePct), ""invalid pct"");
        perfFeePct = _perfFeePct;
        emit PerfFeePctUpdated(_perfFeePct);
    }

    /**
     * Amount, expressed in the underlying currency, currently in the strategy
     *
     * @notice both held and invested amounts are included here, using the
     * latest known exchange rates to the underlying currency
     *
     * @return The total amount of underlying
     */
    function investedAssets()
        external
        view
        virtual
        override(IStrategy)
        returns (uint256)
    {
        uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;

        return
            underlyingBalance +
            ((exchangeRateFeeder.exchangeRateOf(address(aUstToken), true) *
                aUstBalance) / 1e18);
    }

    // Amount of underlying tokens in the strategy
    function _getUnderlyingBalance() internal view returns (uint256) {
        return underlying.balanceOf(address(this));
    }

    // Amount of UST tokens in the strategy
    function _getUstBalance() internal view returns (uint256) {
        return ustToken.balanceOf(address(this));
    }

    // Amount of aUST tokens in the strategy
    function _getAUstBalance() internal view returns (uint256) {
        return aUstToken.balanceOf(address(this));
    }

    // Amount of pending deposit operations
    function depositOperationLength() external view returns (uint256) {
        return depositOperations.length;
    }

    // Amount of pending redeem operations
    function redeemOperationLength() external view returns (uint256) {
        return redeemOperations.length;
    }
}",2363.0,303.0,"[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys
The current implementation requires trusted key holders (`isTrusted[msg.sender]`) to send transactions (`initRedeemStable()`) to initialize withdrawals from EthAnchor before the users can withdraw funds from the contract.

[M-05] Add a timelock to BaseStrategy:`setPerfFeePct`
To give more trust to users: functions that set key/critical variables should be put behind a timelock.

[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals
The `investedAssets()` function is implemented by the vault's strategy contracts as a way to express a vault's investments in terms of the underlying currency. While the implementation of this function in BaseStrategy.sol and NonUSTStrategy.sol is mostly correct. It does not account for the performance fee charged by the treasury as shown in `finishRedeemStable()`.Therefore, an attacker could avoid paying their fair share of the performance fee by withdrawing their assets before several calls to finishRedeemStable() are made and reenter the vault once the fee is charged.",3.0,"pragma solidity ^0.8.10;

import {IERC20} from ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import {SafeERC20} from ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import {Trust} from ""@rari-capital/solmate/src/auth/Trust.sol"";

import ""../lib/PercentMath.sol"";
import ""../vault/IVault.sol"";
import ""./IStrategy.sol"";
import ""./anchor/IEtxhAnchorRouter.sol"";
import ""./anchor/IExchangeRateFeeder.sol"";




abstract contract BaseStrategy is IStrategy, Trust {
    using SafeERC20 for IERC20;
    using PercentMath for uint256;

    event PerfFeeClaimed(uint256 amount);
    event PerfFeePctUpdated(uint256 pct);

    struct Operation {
        address operator;
        uint256 amount;
    }

    IERC20 public override(IStrategy) underlying;
    
    address public override(IStrategy) vault;

    
    address public treasury;

    
    IERC20 public ustToken;

    
    IERC20 public aUstToken;

    
    uint16 public perfFeePct;

    
    IEthAnchorRouter public ethAnchorRouter;

    
    IExchangeRateFeeder public exchangeRateFeeder;

    
    uint256 public pendingDeposits;

    
    uint256 public pendingRedeems;

    
    Operation[] public depositOperations;

    
    Operation[] public redeemOperations;

    
    uint256 public convertedUst;

    
    modifier restricted() {
        require(msg.sender == vault || isTrusted[msg.sender], ""restricted"");

        _;
    }

    modifier onlyVault() {
        require(msg.sender == vault, ""only vault"");

        _;
    }

    constructor(
        address _vault,
        address _treasury,
        address _ethAnchorRouter,
        address _exchangeRateFeeder,
        IERC20 _ustToken,
        IERC20 _aUstToken,
        uint16 _perfFeePct,
        address _owner
    ) Trust(_owner) {
        require(_ethAnchorRouter != address(0), ""0x addr"");
        require(_exchangeRateFeeder != address(0), ""0x addr"");
        require(address(_ustToken) != address(0), ""0x addr"");
        require(address(_aUstToken) != address(0), ""0x addr"");
        require(PercentMath.validPerc(_perfFeePct), ""invalid pct"");

        treasury = _treasury;
        vault = _vault;
        underlying = IVault(_vault).underlying();
        ethAnchorRouter = IEthAnchorRouter(_ethAnchorRouter);
        exchangeRateFeeder = IExchangeRateFeeder(_exchangeRateFeeder);
        ustToken = _ustToken;
        aUstToken = _aUstToken;
        perfFeePct = _perfFeePct;

        
        ustToken.safeApprove(_ethAnchorRouter, type(uint256).max);
        aUstToken.safeApprove(_ethAnchorRouter, type(uint256).max);
    }

    
    function doHardWork() external virtual override(IStrategy) restricted {
        _initDepositStable();
    }

    function _initDepositStable() internal {
        uint256 ustBalance = _getUstBalance();
        require(ustBalance > 0, ""balance 0"");
        pendingDeposits += ustBalance;
        address _operator = ethAnchorRouter.initDepositStable(ustBalance);
        depositOperations.push(
            Operation({operator: _operator, amount: ustBalance})
        );
    }

    
    function finishDepositStable(uint256 idx) external {
        require(depositOperations.length > idx, ""not running"");
        Operation storage operation = depositOperations[idx];
        ethAnchorRouter.finishDepositStable(operation.operator);

        pendingDeposits -= operation.amount;
        convertedUst += operation.amount;

        operation.operator = depositOperations[depositOperations.length - 1]
            .operator;
        operation.amount = depositOperations[depositOperations.length - 1]
            .amount;
        depositOperations.pop();
    }

    
    function initRedeemStable(uint256 amount) public restricted {
        uint256 aUstBalance = _getAUstBalance();
        require(amount > 0, ""amount 0"");
        require(aUstBalance >= amount, ""insufficient"");
        pendingRedeems += amount;
        address _operator = ethAnchorRouter.initRedeemStable(amount);
        redeemOperations.push(Operation({operator: _operator, amount: amount}));
    }

    
    function finishRedeemStable(uint256 idx) public virtual {
        require(redeemOperations.length > idx, ""not running"");
        Operation storage operation = redeemOperations[idx];
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;
        uint256 originalUst = (convertedUst * operation.amount) / aUstBalance;
        uint256 ustBalanceBefore = _getUstBalance();

        ethAnchorRouter.finishRedeemStable(operation.operator);

        uint256 redeemedAmount = _getUstBalance() - ustBalanceBefore;
        uint256 perfFee = redeemedAmount > originalUst
            ? (redeemedAmount - originalUst).percOf(perfFeePct)
            : 0;
        if (perfFee > 0) {
            ustToken.safeTransfer(treasury, perfFee);
            emit PerfFeeClaimed(perfFee);
        }
        convertedUst -= originalUst;
        pendingRedeems -= operation.amount;

        operation.operator = redeemOperations[redeemOperations.length - 1]
            .operator;
        operation.amount = redeemOperations[redeemOperations.length - 1].amount;
        redeemOperations.pop();
    }

    
    function withdrawAllToVault() external override(IStrategy) restricted {
        uint256 aUstBalance = _getAUstBalance();
        if (aUstBalance > 0) {
            initRedeemStable(aUstBalance);
        }
        uint256 underlyingBalance = _getUnderlyingBalance();
        if (underlyingBalance > 0) {
            underlying.safeTransfer(vault, underlyingBalance);
        }
    }

    
    function withdrawToVault(uint256 amount)
        external
        override(IStrategy)
        restricted
    {
        underlying.safeTransfer(vault, amount);
    }

    
    function setPerfFeePct(uint16 _perfFeePct) external restricted {
        require(PercentMath.validPerc(_perfFeePct), ""invalid pct"");
        perfFeePct = _perfFeePct;
        emit PerfFeePctUpdated(_perfFeePct);
    }

    
    function investedAssets()
        external
        view
        virtual
        override(IStrategy)
        returns (uint256)
    {
        uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;
        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;

        return
            underlyingBalance +
            ((exchangeRateFeeder.exchangeRateOf(address(aUstToken), true) *
                aUstBalance) / 1e18);
    }

    
    function _getUnderlyingBalance() internal view returns (uint256) {
        return underlying.balanceOf(address(this));
    }

    
    function _getUstBalance() internal view returns (uint256) {
        return ustToken.balanceOf(address(this));
    }

    
    function _getAUstBalance() internal view returns (uint256) {
        return aUstToken.balanceOf(address(this));
    }

    
    function depositOperationLength() external view returns (uint256) {
        return depositOperations.length;
    }

    
    function redeemOperationLength() external view returns (uint256) {
        return redeemOperations.length;
    }
}",1636.0,0,3,"Okay, let's break down the vulnerabilities in the `BaseStrategy` smart contract.

**High Severity:**

1.  **Centralization Risk / Trust Issues:**
    *   The `Trust` contract grants significant power to the `owner` and potentially `trusted` addresses (set by the owner). The owner can change `isTrusted` status for any address.
    *   `restricted` functions (`doHardWork`, `initRedeemStable`, `withdrawAllToVault`, `withdrawToVault`, `setPerfFeePct`) can be called by any `trusted` address, not just the `vault`. If a trusted address is compromised or malicious, it can drain funds, halt operations, or change critical parameters like the performance fee.
    *   **Impact:** Complete loss of funds, denial of service, unexpected behaviour.

2.  **Design Flaw in `withdrawAllToVault`:**
    *   The `withdrawAllToVault` function calls `initRedeemStable` for the entire aUST balance but *does not* wait for or trigger `finishRedeemStable`.
    *   This means the UST resulting from the redemption is *not* immediately transferred to the vault. It remains in the strategy contract until someone calls `finishRedeemStable` for that specific operation.
    *   The vault might assume `withdrawAllToVault` synchronously returns *all* assets, which is not the case for the portion invested in Anchor. This could break vault logic or user expectations during emergency withdrawals or strategy migrations.
    *   **Impact:** Locked funds (UST portion) during critical withdrawal scenarios, potential inconsistencies in vault accounting.

**Medium Severity:**

1.  **Public `finishDepositStable` / `finishRedeemStable` (Potential Griefing/MEV):**
    *   These functions are `public` or `external` and only check if the operation index (`idx`) is valid. Anyone can monitor the cross-chain messages from Anchor and call these functions once the operation is ready to be finalized.
    *   *Griefing:* An attacker could potentially call `finish*` repeatedly in a way that causes transactions by legitimate keeper bots to revert (e.g., due to nonce issues or slight state changes), increasing operational costs or causing delays.
    *   *MEV:* While less likely to be directly profitable via sandwiching the state change itself (as the core logic seems robust), front-running the `finish` call might be advantageous in specific broader market scenarios or if integrated with other protocols.
    *   *Lack of Access Control:* Ideally, state-changing functions that finalize operations should have some access control (e.g., `restricted`, or a dedicated keeper role) to prevent unexpected calls or potential interference.
    *   **Impact:** Increased operational friction, potential minor MEV extraction, deviation from intended operational flow.

2.  **Oracle Risk (`investedAssets`):**
    *   The `investedAssets` function relies entirely on `exchangeRateFeeder.exchangeRateOf` to determine the value of aUST holdings.
    *   If this oracle is manipulated, provides stale data, or experiences downtime, the reported `investedAssets` will be incorrect.
    *   While this doesn't directly impact the deposit/redeem flow (which uses actual balances), it can affect vault-level operations that rely on accurate strategy value reporting (e.g., calculating share prices, triggering rebalances, monitoring health).
    *   **Impact:** Incorrect vault reporting, potentially leading to flawed decisions based on strategy value.

3.  **Dependency on `ethAnchorRouter`:**
    *   The entire strategy relies on the `ethAnchorRouter` contract for cross-chain interactions with Anchor. Any bugs, exploits, or operational failures (e.g., bridge issues) in the router or the underlying bridge mechanism directly impact the strategy's ability to deposit and withdraw funds from Anchor.
    *   The infinite approval granted in the constructor also means a compromise of the `ethAnchorRouter` could lead to draining UST/aUST from this strategy contract.
    *   **Impact:** Potential loss of funds held in UST/aUST, inability to deposit/withdraw from Anchor.

**Low Severity / Informational:**

1.  **Unbounded Operation Arrays (Potential Gas Issues/DoS):**
    *   The `depositOperations` and `redeemOperations` arrays grow each time `_initDepositStable` or `initRedeemStable` is called. They only shrink when the corresponding `finish*` function is called.
    *   If `finish*` calls lag significantly behind `init*` calls (e.g., due to cross-chain delays or keeper failures), these arrays could grow very large.
    *   While the current code only accesses elements by index (using swap-and-pop for deletion, which is gas-efficient), a very large array *could* become problematic if future logic required iteration or if gas costs for storage writes/reads increase substantially. It primarily poses a risk if the `finish*` process breaks down.
    *   **Impact:** Potential for high gas costs in edge cases, theoretical DoS if arrays become unmanageably large (unlikely with current usage).

2.  **Missing Event Emission in `_initDepositStable` / `initRedeemStable`:**
    *   These functions initiate significant operations (cross-chain transfers) but do not emit events. Events are helpful for off-chain monitoring and tracking the strategy's state transitions.
    *   **Impact:** Reduced off-chain observability.

3.  **Integer Division Precision:**
    *   The calculation `originalUst = (convertedUst * operation.amount) / aUstBalance` uses integer division, which truncates any remainder.
    *   Over many redemption operations, this could lead to minor inaccuracies (dust amounts) in the `convertedUst` accounting.
    *   **Impact:** Negligible value drift over time, unlikely to be exploitable.

4.  **No Check for `treasury == address(0)`:**
    *   The constructor checks other addresses but not `_treasury`. If set to the zero address, performance fees would be burned (or revert depending on the ERC20 implementation). While unlikely to be a vulnerability exploited by attackers, it's a potential configuration error.
    *   **Impact:** Loss of performance fees if misconfigured.

**External Risks (Not Code Vulnerabilities but Critical Context):**

1.  **UST/Anchor Protocol Risk:** The strategy is entirely dependent on the stability of the UST peg and the continued operation and solvency of the Anchor Protocol on Terra. A de-peg event or Anchor failure would likely lead to a total loss of funds invested via this strategy.
2.  **Cross-Chain Bridge Risk:** The underlying bridge used by `ethAnchorRouter` has its own security assumptions and risks.

In summary, the most critical issues relate to the centralized control via the `Trust` pattern and the design flaw in `withdrawAllToVault` which could impede emergency withdrawals. The reliance on external systems (oracles, bridges, Anchor itself) also presents significant risks.","### **Output**

---

**[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys**

**Report Description**:
The current implementation requires trusted key holders (`isTrusted[msg.sender]`) to send transactions (`initRedeemStable()`) to initialize withdrawals from EthAnchor before users can withdraw funds from the contract. If these key holders lose access to their keys, funds could be frozen, leading to a denial of service for users.

**Match in Response List**:
Matches with the issue titled **""Centralization Risk / Trust Issues""**.

**Validation**:
**Correct**. The response accurately identifies the centralization risk associated with trusted key holders. It highlights the potential for funds to be frozen or misused if a trusted address is compromised or loses access, which aligns with the issue described in the report.

---

**[M-05] Add a timelock to BaseStrategy:`setPerfFeePct`**

**Report Description**:
To increase user trust, functions that set key or critical variables, such as `setPerfFeePct`, should be put behind a timelock. This would allow users to react to changes in critical parameters, reducing the risk of sudden or malicious modifications.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response does not address the need for a timelock on critical functions like `setPerfFeePct`. This is a significant oversight, as timelocks are a standard best practice for mitigating risks associated with privileged functions.

---

**[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals**

**Report Description**:
The `investedAssets()` function, implemented by the vault's strategy contracts, does not account for the performance fee charged by the treasury as shown in `finishRedeemStable()`. This oversight could allow an attacker to avoid paying their fair share of the performance fee by withdrawing assets before the fee is charged and reentering the vault afterward.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response does not address the issue of `investedAssets()` failing to account for performance fees. This is a critical flaw that could lead to unfair fee avoidance and misrepresentation of the vault's actual investments.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[M-05] Add a timelock to BaseStrategy:`setPerfFeePct`**
- **[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals**

---

### **Conclusion**

The response list effectively addresses the centralization risk associated with trusted key holders but fails to cover the need for a timelock on critical functions and the accounting flaw in `investedAssets()`. These gaps highlight areas where the response list could be improved to provide more comprehensive coverage of the issues identified in the report.",1,0,2,12,"```
1. Centralization Risk / Trust Issues
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the rank of the true positive**:
   - The true positive is ""Centralization Risk / Trust Issues"".
   - This appears at **rank 1** in the ranked list of predictions.

2. **Calculate the precision at that rank**:
   - Precision at rank 1 (\( P@1 \)) is calculated as the number of true positives up to that rank divided by the rank.
   - Since there is 1 true positive at rank 1, \( P@1 = \frac{1}{1} = 1.0 \).

3. **Average the precision values**:
   - Since there is only one true positive, the **Average Precision (AP)** is simply the precision at that rank.

**Average Precision (AP)**: 1.0"
,,,,,,,,5,9,,,2,1,11,27,,