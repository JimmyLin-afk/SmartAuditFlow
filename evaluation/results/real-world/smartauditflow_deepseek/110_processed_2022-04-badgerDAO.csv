nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,total_tokens,total_steps,Comparison,matchList,MAP
StakedCitadel.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {IERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import {AddressUpgradeable} from ""openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol"";
import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import {PausableUpgradeable} from ""openzeppelin-contracts-upgradeable/security/PausableUpgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./lib/SettAccessControl.sol"";

import {IVault} from ""./interfaces/badger/IVault.sol"";
import {IVesting} from ""./interfaces/citadel/IVesting.sol"";
import {IStrategy} from ""./interfaces/badger/IStrategy.sol"";
import {IERC20} from ""./interfaces/erc20/IERC20.sol"";
import {IBadgerGuestlist} from ""./interfaces/badger/IBadgerGuestlist.sol"";

/*
    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol
    
    Changelog:

    V1.1
    * Strategist no longer has special function calling permissions
    * Version function added to contract
    * All write functions, with the exception of transfer, are pausable
    * Keeper or governance can pause
    * Only governance can unpause

    V1.2
    * Transfer functions are now pausable along with all other non-permissioned write functions
    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well

    V1.3
    * Add guest list functionality
    * All deposits can be optionally gated by external guestList approval logic on set guestList contract

    V1.4
    * Add depositFor() to deposit on the half of other users. That user will then be blockLocked.

    V1.5
    * Removed Controller
        - Removed harvest from vault (only on strategy)
    * Params added to track autocompounded rewards (lifeTimeEarned, lastHarvestedAt, lastHarvestAmount, assetsAtLastHarvest)
      this would work in sync with autoCompoundRatio to help us track harvests better.
    * Fees
        - Strategy would report the autocompounded harvest amount to the vault
        - Calculation performanceFeeGovernance, performanceFeeStrategist, withdrawalFee, managementFee moved to the vault.
        - Vault mints shares for performanceFees and managementFee to the respective recipient (treasury, strategist)
        - withdrawal fees is transferred to the rewards address set
    * Permission:
        - Strategist can now set performance, withdrawal and management fees
        - Governance will determine maxPerformanceFee, maxWithdrawalFee, maxManagementFee that can be set to prevent rug of funds.
    * Strategy would take the actors from the vault it is connected to
    * All governance related fees goes to treasury
*/

contract StakedCitadel is
    ERC20Upgradeable,
    SettAccessControl,
    PausableUpgradeable,
    ReentrancyGuardUpgradeable
{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using AddressUpgradeable for address;

    uint256 constant ONE_ETH = 1e18;

    /// ===== Storage Variables ====

    IERC20Upgradeable public token; // Token used for deposits
    IBadgerGuestlist public guestList; // guestlist when vault is in experiment/ guarded state

    bool public pausedDeposit; // false by default Allows to only block deposits, use pause for the normal pause state

    address public strategy; // address of the strategy connected to the vault
    address public guardian; // guardian of vault and strategy
    address public treasury; // set by governance ... any fees go there

    address public badgerTree; // Address we send tokens too via reportAdditionalTokens
    address public vesting; // Address of the vesting contract where after withdrawal we send CTDL to vest for 21 days

    /// @dev name and symbol prefixes for lpcomponent token of vault
    string internal constant _defaultNamePrefix = ""Staked "";
    string internal constant _symbolSymbolPrefix = ""x"";

    /// Params to track autocompounded rewards
    uint256 public lifeTimeEarned; // keeps track of total earnings
    uint256 public lastHarvestedAt; // timestamp of the last harvest
    uint256 public lastHarvestAmount; // amount harvested during last harvest
    uint256 public assetsAtLastHarvest; // assets for which the harvest took place.

    mapping(address => uint256) public additionalTokensEarned;
    mapping(address => uint256) public lastAdditionalTokenAmount;

    /// Fees ///
    /// @notice all fees will be in bps
    uint256 public performanceFeeGovernance; // Perf fee sent to `treasury`
    uint256 public performanceFeeStrategist; // Perf fee sent to `strategist`
    uint256 public withdrawalFee; // fee issued to `treasury` on withdrawal
    uint256 public managementFee; // fee issued to `treasury` on report (typically on harvest, but only if strat is autocompounding)

    uint256 public maxPerformanceFee; // maximum allowed performance fees
    uint256 public maxWithdrawalFee; // maximum allowed withdrawal fees
    uint256 public maxManagementFee; // maximum allowed management fees

    uint256 public toEarnBps; // NOTE: in BPS, minimum amount of token to deposit into strategy when earn is called

    /// ===== Constants ====

    uint256 public constant MAX_BPS = 10_000;
    uint256 public constant SECS_PER_YEAR = 31_556_952; // 365.2425 days

    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; // Never higher than 2%
    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; // Never higher than 30% // 30% maximum performance fee // We usually do 20, so this is insanely high already
    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; // Never higher than 2%

    /// ===== Events ====

    // Emitted when a token is sent to the badgerTree for emissions
    event TreeDistribution(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    // Emitted during a report, when there has been an increase in pricePerFullShare (ppfs)
    event Harvested(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    event SetTreasury(address indexed newTreasury);
    event SetStrategy(address indexed newStrategy);
    event SetToEarnBps(uint256 newEarnToBps);
    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);
    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);
    event SetMaxManagementFee(uint256 newMaxManagementFee);
    event SetGuardian(address indexed newGuardian);
    event SetVesting(address indexed newVesting);
    event SetGuestList(address indexed newGuestList);
    event SetWithdrawalFee(uint256 newWithdrawalFee);
    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);
    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);
    event SetManagementFee(uint256 newManagementFee);

    event PauseDeposits(address indexed pausedBy);
    event UnpauseDeposits(address indexed pausedBy);

    /// @notice Initializes the Sett. Can only be called once, ideally when the contract is deployed.
    /// @param _token Address of the token that can be deposited into the sett.
    /// @param _governance Address authorized as governance.
    /// @param _keeper Address authorized as keeper.
    /// @param _guardian Address authorized as guardian.
    /// @param _treasury Address to distribute governance fees/rewards to.
    /// @param _strategist Address authorized as strategist.
    /// @param _badgerTree Address of badgerTree used for emissions.
    /// @param _name Specify a custom sett name. Leave empty for default value.
    /// @param _symbol Specify a custom sett symbol. Leave empty for default value.
    /// @param _feeConfig Values for the 4 different types of fees charges by the sett
    ///         [performanceFeeGovernance, performanceFeeStrategist, withdrawToVault, managementFee]
    ///         Each fee should be less than the constant hard-caps defined above.
    function initialize(
        address _token,
        address _governance,
        address _keeper,
        address _guardian,
        address _treasury,
        address _strategist,
        address _badgerTree,
        address _vesting,
        string memory _name,
        string memory _symbol,
        uint256[4] memory _feeConfig
    ) public initializer whenNotPaused {
        require(_token != address(0)); // dev: _token address should not be zero
        require(_governance != address(0)); // dev: _governance address should not be zero
        require(_keeper != address(0)); // dev: _keeper address should not be zero
        require(_guardian != address(0)); // dev: _guardian address should not be zero
        require(_treasury != address(0)); // dev: _treasury address should not be zero
        require(_strategist != address(0)); // dev: _strategist address should not be zero
        require(_badgerTree != address(0)); // dev: _badgerTree address should not be zero
        require(_vesting != address(0)); // dev: _vesting address should not be zero

        // Check for fees being reasonable (see below for interpretation)
        require(
            _feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeGovernance too high""
        );
        require(
            _feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );
        require(
            _feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP,
            ""withdrawalFee too high""
        );
        require(
            _feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP,
            ""managementFee too high""
        );

        string memory name;
        string memory symbol;

        // If they are non empty string we'll use the custom names
        // Else just add the default prefix
        IERC20 namedToken = IERC20(_token);

        if (keccak256(abi.encodePacked(_name)) != keccak256("""")) {
            name = _name;
        } else {
            name = string(
                abi.encodePacked(_defaultNamePrefix, namedToken.name())
            );
        }

        if (keccak256(abi.encodePacked(_symbol)) != keccak256("""")) {
            symbol = _symbol;
        } else {
            symbol = string(
                abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol())
            );
        }

        // Initializing the lpcomponent token
        __ERC20_init(name, symbol);
        // Initialize the other contracts
        __Pausable_init();
        __ReentrancyGuard_init();

        token = IERC20Upgradeable(_token);
        governance = _governance;
        treasury = _treasury;
        strategist = _strategist;
        keeper = _keeper;
        guardian = _guardian;
        badgerTree = _badgerTree;
        vesting = _vesting;

        lastHarvestedAt = block.timestamp; // setting initial value to the time when the vault was deployed

        performanceFeeGovernance = _feeConfig[0];
        performanceFeeStrategist = _feeConfig[1];
        withdrawalFee = _feeConfig[2];
        managementFee = _feeConfig[3];
        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; // 30% max performance fee
        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; // 2% maximum withdrawal fee
        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; // 2% maximum management fee

        toEarnBps = 9_500; // initial value of toEarnBps // 95% is invested to the strategy, 5% for cheap withdrawals
    }

    /// ===== Modifiers ====

    /// @notice Checks whether a call is from guardian or governance.
    function _onlyAuthorizedPausers() internal view {
        require(
            msg.sender == guardian || msg.sender == governance,
            ""onlyPausers""
        );
    }

    /// @notice Checks whether a call is from the strategy.
    function _onlyStrategy() internal view {
        require(msg.sender == strategy, ""onlyStrategy"");
    }

    /// ===== View Functions =====

    /// @notice Used to track the deployed version of the contract.
    /// @return Current version of the contract.
    function version() external pure returns (string memory) {
        return ""1.5"";
    }

    /// @notice Gives the price for a single Sett share.
    /// @dev Sett starts with a price per share of 1.
    /// @return Value of a single share.
    function getPricePerFullShare() public view returns (uint256) {
        if (totalSupply() == 0) {
            return ONE_ETH;
        }
        return (balance() * ONE_ETH) / totalSupply();
    }

    /// @notice Gives the total balance of the underlying token within the sett and strategy system.
    /// @return Balance of token handled by the sett.
    function balance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    /// @notice Defines how much of the Setts' underlying is available for strategy to borrow.
    /// @return Amount of tokens that the sett can provide to the strategy.
    function available() public view returns (uint256) {
        return (token.balanceOf(address(this)) * toEarnBps) / MAX_BPS;
    }

    /// ===== Public Actions =====

    /// @notice Deposits `_amount` tokens, issuing shares.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    /// @param _amount Quantity of tokens to deposit.
    function deposit(uint256 _amount) external whenNotPaused {
        _depositWithAuthorization(_amount, new bytes32[](0));
    }

    /// @notice Deposits `_amount` tokens, issuing shares.
    ///         Checks the guestlist to verify that the calling account is authorized to make a deposit for the specified `_amount`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param _amount Quantity of tokens to deposit.
    /// @param proof Merkle proof to validate in the guestlist.
    function deposit(uint256 _amount, bytes32[] memory proof)
        external
        whenNotPaused
    {
        _depositWithAuthorization(_amount, proof);
    }

    /// @notice Deposits all tokens, issuing shares.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    function depositAll() external whenNotPaused {
        _depositWithAuthorization(
            token.balanceOf(msg.sender),
            new bytes32[](0)
        );
    }

    /// @notice Deposits all tokens, issuing shares.
    ///         Checks the guestlist to verify that the calling is authorized to make a full deposit.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param proof Merkle proof to validate in the guestlist.
    function depositAll(bytes32[] memory proof) external whenNotPaused {
        _depositWithAuthorization(token.balanceOf(msg.sender), proof);
    }

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function depositFor(address _recipient, uint256 _amount)
        external
        whenNotPaused
    {
        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));
    }

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Checks the guestlist to verify that `recipient` is authorized to make a deposit for the specified `_amount`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function depositFor(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) external whenNotPaused {
        _depositForWithAuthorization(_recipient, _amount, proof);
    }

    /// @notice Redeems `_shares` for an appropriate amount of tokens.
    ///         Note that withdrawals are not processed when the Sett is paused.
    /// @dev See `_withdraw` for details on how withdrawals are processed.
    /// @param _shares Quantity of shares to redeem.
    function withdraw(uint256 _shares) external whenNotPaused {
        _withdraw(_shares);
    }

    /// @notice Redeems all shares, issuing an appropriate amount of tokens.
    ///         Note that withdrawals are not processed when the Sett is paused.
    /// @dev See `_withdraw` for details on how withdrawals are processed.
    function withdrawAll() external whenNotPaused {
        _withdraw(balanceOf(msg.sender));
    }

    /// ===== Permissioned Actions: Strategy =====

    /// @notice Used by the strategy to report a harvest to the sett.
    ///         Issues shares for the strategist and treasury based on the performance fees and harvested amount.
    ///         Issues shares for the treasury based on the management fee and the time elapsed since last harvest.
    ///         Updates harvest variables for on-chain APR tracking.
    ///         This can only be called by the strategy.
    /// @dev This implicitly trusts that the strategy reports the correct amount.
    ///      Pausing on this function happens at the strategy level.
    /// @param _harvestedAmount Amount of underlying token harvested by the strategy.
    function reportHarvest(uint256 _harvestedAmount) external nonReentrant {
        _onlyStrategy();

        uint256 harvestTime = block.timestamp;
        uint256 assetsAtHarvest = balance() - _harvestedAmount; // Must be less than or equal or revert

        _handleFees(_harvestedAmount, harvestTime);

        // Updated lastHarvestAmount
        lastHarvestAmount = _harvestedAmount;

        // if we withdrawAll
        // we will have some yield left
        // having 0 for assets will inflate APY
        // Instead, have the last harvest report with the previous assets
        // And if you end up harvesting again, that report will have both 0s
        if (assetsAtHarvest != 0) {
            assetsAtLastHarvest = assetsAtHarvest;
        } else if (_harvestedAmount == 0) {
            // If zero
            assetsAtLastHarvest = 0;
        }

        lifeTimeEarned = lifeTimeEarned + _harvestedAmount;
        // Update time either way
        lastHarvestedAt = harvestTime;

        emit Harvested(
            address(token),
            _harvestedAmount,
            block.number,
            block.timestamp
        );
    }

    /// @notice Used by the strategy to report harvest of additional tokens to the sett.
    ///         Charges performance fees on the additional tokens and transfers fees to treasury and strategist.
    ///         The remaining amount is sent to badgerTree for emissions.
    ///         Updates harvest variables for on-chain APR tracking.
    ///         This can only be called by the strategy.
    /// @dev This function is called after the strategy sends the additional tokens to the sett.
    ///      Pausing on this function happens at the strategy level.
    /// @param _token Address of additional token harvested by the strategy.
    function reportAdditionalToken(address _token) external nonReentrant {
        _onlyStrategy();
        require(address(token) != _token, ""No want"");
        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(
            address(this)
        );

        additionalTokensEarned[_token] =
            additionalTokensEarned[_token] +
            tokenBalance;
        lastAdditionalTokenAmount[_token] = tokenBalance;

        // We may have more, but we still report only what the strat sent
        uint256 governanceRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeGovernance
        );
        uint256 strategistRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeStrategist
        );

        IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);
        IERC20Upgradeable(_token).safeTransfer(
            strategist,
            strategistRewardsFee
        );

        // Send rest to tree
        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));
        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);
        emit TreeDistribution(
            _token,
            newBalance,
            block.number,
            block.timestamp
        );
    }

    /// ===== Permissioned Actions: Governance =====

    /// @notice Changes the treasury address.
    ///         Treasury is recipient of management and governance performance fees.
    ///         This can only be called by governance.
    ///         Note that this can only be called when sett is not paused.
    /// @param _treasury Address of the new treasury.
    function setTreasury(address _treasury) external whenNotPaused {
        _onlyGovernance();
        require(_treasury != address(0), ""Address 0"");

        treasury = _treasury;
        emit SetTreasury(_treasury);
    }

    /// @notice Changes the strategy address.
    ///         This can only be called by governance.
    ///         Note that this can only be called when sett is not paused.
    /// @dev This is a rug vector, pay extremely close attention to the next strategy being set.
    ///      Changing the strategy should happen only via timelock.
    ///      This function must not be callable when the sett is paused as this would force depositors into a strategy they may not want to use.
    /// @param _strategy Address of new strategy.
    function setStrategy(address _strategy) external whenNotPaused {
        _onlyGovernance();
        require(_strategy != address(0), ""Address 0"");

        /// NOTE: Migrate funds if settings strategy when already existing one
        if (strategy != address(0)) {
            require(
                IStrategy(strategy).balanceOf() == 0,
                ""Please withdrawToVault before changing strat""
            );
        }
        strategy = _strategy;
        emit SetStrategy(_strategy);
    }

    // === Setters that can be called by governance even when paused ===

    /// @notice Sets the max withdrawal fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `WITHDRAWAL_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for withdrawal fee.
    function setMaxWithdrawalFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, ""withdrawalFee too high"");

        maxWithdrawalFee = _fees;
        emit SetMaxWithdrawalFee(_fees);
    }

    /// @notice Sets the max performance fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `PERFORMANCE_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for performance fee.
    function setMaxPerformanceFee(uint256 _fees) external {
        _onlyGovernance();
        require(
            _fees <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );

        maxPerformanceFee = _fees;
        emit SetMaxPerformanceFee(_fees);
    }

    /// @notice Sets the max management fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `MANAGEMENT_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for management fee.
    function setMaxManagementFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= MANAGEMENT_FEE_HARD_CAP, ""managementFee too high"");

        maxManagementFee = _fees;
        emit SetMaxManagementFee(_fees);
    }

    /// @notice Changes the guardian address.
    ///         Guardian is an authorized actor that can pause the sett in case of an emergency.
    ///         This can only be called by governance.
    /// @param _guardian Address of the new guardian.
    function setGuardian(address _guardian) external {
        _onlyGovernance();
        require(_guardian != address(0), ""Address cannot be 0x0"");

        guardian = _guardian;
        emit SetGuardian(_guardian);
    }

    /// @notice Changes the vesting contract address.
    ///         Vesting contract is used to vest withdrawn tokens linearly over period of 21 days
    ///         This can only be called by governance.
    /// @param _vesting Address of the new guardian.
    function setVesting(address _vesting) external {
        _onlyGovernance();
        require(_vesting != address(0), ""Address cannot be 0x0"");

        vesting = _vesting;
        emit SetVesting(_vesting);
    }

    /// ===== Permissioned Functions: Trusted Actors =====

    /// @notice Sets the fraction of sett balance (in basis points) that the strategy can borrow.
    ///         This can be called by either governance or strategist.
    ///         Note that this can only be called when the sett is not paused.
    /// @param _newToEarnBps The new maximum cap for management fee.
    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_newToEarnBps <= MAX_BPS, ""toEarnBps should be <= MAX_BPS"");

        toEarnBps = _newToEarnBps;
        emit SetToEarnBps(_newToEarnBps);
    }

    /// @notice Changes the guestlist address.
    ///         The guestList is used to gate or limit deposits. If no guestlist is set then anyone can deposit any amount.
    ///         This can be called by either governance or strategist.
    ///         Note that this can only be called when the sett is not paused.
    /// @param _guestList Address of the new guestlist.
    function setGuestList(address _guestList) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        guestList = IBadgerGuestlist(_guestList);
        emit SetGuestList(_guestList);
    }

    /// @notice Sets the withdrawal fee charged by the Sett.
    ///         The fee is taken at the time of withdrawals in the underlying token which is then used to issue new shares for the treasury.
    ///         The new withdrawal fee should be less than `maxWithdrawalFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `_withdraw` to see how withdrawal fee is charged.
    /// @param _withdrawalFee The new withdrawal fee.
    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_withdrawalFee <= maxWithdrawalFee, ""Excessive withdrawal fee"");
        withdrawalFee = _withdrawalFee;
        emit SetWithdrawalFee(_withdrawalFee);
    }

    /// @notice Sets the performance fee taken by the strategist on the harvests.
    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.
    ///         For the underlying token, the fee is used to issue new shares for the strategist.
    ///         The new performance fee should be less than `maxPerformanceFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.
    /// @param _performanceFeeStrategist The new performance fee.
    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeStrategist <= maxPerformanceFee,
            ""Excessive strategist performance fee""
        );
        performanceFeeStrategist = _performanceFeeStrategist;
        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);
    }

    /// @notice Sets the performance fee taken by the treasury on the harvests.
    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.
    ///         For the underlying token, the fee is used to issue new shares for the treasury.
    ///         The new performance fee should be less than `maxPerformanceFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.
    /// @param _performanceFeeGovernance The new performance fee.
    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeGovernance <= maxPerformanceFee,
            ""Excessive governance performance fee""
        );
        performanceFeeGovernance = _performanceFeeGovernance;
        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);
    }

    /// @notice Sets the management fee taken by the treasury on the AUM in the sett.
    ///         The fee is calculated at the time of `reportHarvest` and is used to issue new shares for the treasury.
    ///         The new management fee should be less than `maxManagementFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `_handleFees` to see how the management fee is calculated.
    /// @param _fees The new management fee.
    function setManagementFee(uint256 _fees) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_fees <= maxManagementFee, ""Excessive management fee"");
        managementFee = _fees;
        emit SetManagementFee(_fees);
    }

    /// === Strategist level operations that can be done even when paused ==

    /// @notice Withdraws all funds from the strategy back to the sett.
    ///         This can be called by either governance or strategist.
    /// @dev This calls `_withdrawAll` on the strategy and transfers the balance to the sett.
    function withdrawToVault() external {
        _onlyGovernanceOrStrategist();
        IStrategy(strategy).withdrawToVault();
    }

    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.)
    ///         to the badgerTree for emissions.
    ///         The `_token` should be different from any tokens managed by the strategy.
    ///         This can only be called by either strategist or governance.
    /// @dev See `BaseStrategy.emitNonProtectedToken` for details.
    /// @param _token Address of the token to be emitted.
    function emitNonProtectedToken(address _token) external {
        _onlyGovernanceOrStrategist();

        IStrategy(strategy).emitNonProtectedToken(_token);
    }

    /// @notice Sweeps the balance of an extra token from the vault and strategy and sends it to governance.
    ///         The `_token` should be different from any tokens managed by the strategy.
    ///         This can only be called by either strategist or governance.
    /// @dev Sweeping doesn't take any fee.
    /// @param _token Address of the token to be swept.
    function sweepExtraToken(address _token) external {
        _onlyGovernanceOrStrategist();
        require(address(token) != _token, ""No want"");

        IStrategy(strategy).withdrawOther(_token);
        // Send all `_token` we have
        // Safe because `withdrawOther` will revert on protected tokens
        // Done this way works for both a donation to strategy or to vault
        IERC20Upgradeable(_token).safeTransfer(
            governance,
            IERC20Upgradeable(_token).balanceOf(address(this))
        );
    }

    /// @notice Deposits the available balance of the underlying token into the strategy.
    ///         The strategy then uses the amount for yield-generating activities.
    ///         This can be called by either the keeper or governance.
    ///         Note that earn cannot be called when deposits are paused.
    /// @dev Pause is enforced at the Strategy level (this allows to still earn yield when the Vault is paused)
    function earn() external {
        require(!pausedDeposit, ""pausedDeposit""); // dev: deposits are paused, we don't earn as well
        _onlyAuthorizedActors();

        uint256 _bal = available();
        token.safeTransfer(strategy, _bal);
        IStrategy(strategy).earn();
    }

    /// @notice Pauses only deposits.
    ///         This can be called by either guardian or governance.
    function pauseDeposits() external {
        _onlyAuthorizedPausers();
        pausedDeposit = true;
        emit PauseDeposits(msg.sender);
    }

    /// @notice Unpauses deposits.
    ///         This can only be called by governance.
    function unpauseDeposits() external {
        _onlyGovernance();
        pausedDeposit = false;
        emit UnpauseDeposits(msg.sender);
    }

    /// @notice Pauses everything.
    ///         This can be called by either guardian or governance.
    function pause() external {
        _onlyAuthorizedPausers();
        _pause();
    }

    /// @notice Unpauses everything
    ///         This can only be called by governance.
    function unpause() external {
        _onlyGovernance();
        _unpause();
    }

    /// ===== Internal Implementations =====

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Note that deposits are not accepted when `pausedDeposit` is true.
    /// @dev This is the actual deposit operation.
    ///      Deposits are based on the realized value of underlying assets between Sett & associated Strategy
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function _depositFor(address _recipient, uint256 _amount)
        internal
        nonReentrant
    {
        require(_recipient != address(0), ""Address 0"");
        require(_amount != 0, ""Amount 0"");
        require(!pausedDeposit, ""pausedDeposit""); // dev: deposits are paused

        uint256 _pool = balance();
        uint256 _before = token.balanceOf(address(this));
        token.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 _after = token.balanceOf(address(this));
        _mintSharesFor(_recipient, _after - _before, _pool);
    }

    /// @dev See `_depositWithAuthorization`
    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof)
        internal
    {
        _depositForWithAuthorization(msg.sender, _amount, proof);
    }

    /// @dev Verifies that `_recipient` is authorized to deposit `_amount` based on the guestlist.
    ///      See `_depositFor` for deposit details.
    function _depositForWithAuthorization(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) internal {
        if (address(guestList) != address(0)) {
            require(
                guestList.authorized(_recipient, _amount, proof),
                ""GuestList: Not Authorized""
            );
        }
        _depositFor(_recipient, _amount);
    }

    /// @notice Redeems `_shares` for an appropriate amount of tokens.
    /// @dev This is the actual withdraw operation.
    ///      Withdraws from strategy positions if sett doesn't contain enough tokens to process the withdrawal.
    ///      Calculates withdrawal fees and issues corresponding shares to treasury.
    ///      No rebalance implementation for lower fees and faster swaps
    /// @param _shares Quantity of shares to redeem.
    function _withdraw(uint256 _shares) internal nonReentrant {
        require(_shares != 0, ""0 Shares"");

        uint256 r = (balance() * _shares) / totalSupply();
        _burn(msg.sender, _shares);

        // Check balance
        uint256 b = token.balanceOf(address(this));
        if (b < r) {
            uint256 _toWithdraw = r - b;
            IStrategy(strategy).withdraw(_toWithdraw);
            uint256 _after = token.balanceOf(address(this));
            uint256 _diff = _after - b;
            if (_diff < _toWithdraw) {
                r = b + _diff;
            }
        }

        uint256 _fee = _calculateFee(r, withdrawalFee);
        uint256 _amount = r - _fee;

        // Send funds to vesting contract and setup vesting
        IVesting(vesting).setupVesting(msg.sender, _amount, block.timestamp);
        token.safeTransfer(vesting, _amount);

        // After you burned the shares, and you have sent the funds, adding here is equivalent to depositing
        // Process withdrawal fee
        if(_fee > 0) {
            _mintSharesFor(treasury, _fee, balance() - _fee);
        }
    }

    /// @dev Helper function to calculate fees.
    /// @param amount Amount to calculate fee on.
    /// @param feeBps The fee to be charged in basis points.
    /// @return Amount of fees to take.
    function _calculateFee(uint256 amount, uint256 feeBps)
        internal
        pure
        returns (uint256)
    {
        if (feeBps == 0) {
            return 0;
        }
        uint256 fee = (amount * feeBps) / MAX_BPS;
        return fee;
    }

    /// @dev Helper function to calculate governance and strategist performance fees. Make sure to use it to get paid!
    /// @param _amount Amount to calculate fee on.
    /// @return Tuple containing amount of (governance, strategist) fees to take.
    function _calculatePerformanceFee(uint256 _amount)
        internal
        view
        returns (uint256, uint256)
    {
        uint256 governancePerformanceFee = _calculateFee(
            _amount,
            performanceFeeGovernance
        );

        uint256 strategistPerformanceFee = _calculateFee(
            _amount,
            performanceFeeStrategist
        );

        return (governancePerformanceFee, strategistPerformanceFee);
    }

    /// @dev Helper function to issue shares to `recipient` based on an input `_amount` and `_pool` size.
    /// @param recipient Address to issue shares to.
    /// @param _amount Amount to issue shares on.
    /// @param _pool Pool size to use while calculating amount of shares to mint.
    function _mintSharesFor(
        address recipient,
        uint256 _amount,
        uint256 _pool
    ) internal {
        uint256 shares;
        if (totalSupply() == 0) {
            shares = _amount;
        } else {
            shares = (_amount * totalSupply()) / _pool;
        }
        _mint(recipient, shares);
    }

    /// @dev Helper function that issues shares based on performance and management fee when a harvest is reported.
    /// @param _harvestedAmount The harvested amount to take fee on.
    /// @param harvestTime Time of harvest (block.timestamp).
    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime)
        internal
    {
        (
            uint256 feeGovernance,
            uint256 feeStrategist
        ) = _calculatePerformanceFee(_harvestedAmount);
        uint256 duration = harvestTime - lastHarvestedAt;

        // Management fee is calculated against the assets before harvest, to make it fair to depositors
        uint256 management_fee = managementFee > 0
            ? (managementFee * (balance() - _harvestedAmount) * duration) /
                SECS_PER_YEAR /
                MAX_BPS
            : 0;
        uint256 totalGovernanceFee = feeGovernance + management_fee;

        // Pool size is the size of the pool minus the fees, this way
        // it's equivalent to sending the tokens as rewards after the harvest
        // and depositing them again
        uint256 _pool = balance() - totalGovernanceFee - feeStrategist;

        // uint != is cheaper and equivalent to >
        if (totalGovernanceFee != 0) {
            _mintSharesFor(treasury, totalGovernanceFee, _pool);
        }

        if (feeStrategist != 0 && strategist != address(0)) {
            /// NOTE: adding feeGovernance backed to _pool as shares would have been issued for it.
            _mintSharesFor(
                strategist,
                feeStrategist,
                _pool + totalGovernanceFee
            );
        }
    }
}",9080,934,"[H-01] StakedCitadel doesn't use correct balance for internal accounting
The StakedCitadel contract's `balance()` function is supposed to return the balance of the vault + the balance of the strategy. But, it only returns the balance of the vault. The balance is used to determine the number of shares that should be minted when depositing funds into the vault and the number of shares that should be burned when withdrawing funds from it.
Since most of the funds will be located in the strategy, the vault's balance will be very low. Some of the issues that arise from this:
  [H-02] StakedCitadel: wrong setupVesting function name
In the `_withdraw` function of the StakedCitadel contract, the setupVesting function of vesting is called, while in the StakedCitadelVester contract, the function name is vest, which will cause the `_withdraw` function to fail, so that the user cannot withdraw the tokens.
  [H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination
`deposit()` -> `_depositFor()` -> `_mintSharesFor()` call doesn't require minimum amount and mints according to the provided amount:
Any deposit lower than total attacker's stake will be fully stolen from the depositor as 0 vault tokens will be issued in this case.",3,,"pragma solidity 0.8.12;

import {IERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import {AddressUpgradeable} from ""openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol"";
import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import {PausableUpgradeable} from ""openzeppelin-contracts-upgradeable/security/PausableUpgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./lib/SettAccessControl.sol"";

import {IVault} from ""./interfaces/badger/IVault.sol"";
import {IVesting} from ""./interfaces/citadel/IVesting.sol"";
import {IStrategy} from ""./interfaces/badger/IStrategy.sol"";
import {IERC20} from ""./interfaces/erc20/IERC20.sol"";
import {IBadgerGuestlist} from ""./interfaces/badger/IBadgerGuestlist.sol"";



contract StakedCitadel is
    ERC20Upgradeable,
    SettAccessControl,
    PausableUpgradeable,
    ReentrancyGuardUpgradeable
{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using AddressUpgradeable for address;

    uint256 constant ONE_ETH = 1e18;

    

    IERC20Upgradeable public token; 
    IBadgerGuestlist public guestList; 

    bool public pausedDeposit; 

    address public strategy; 
    address public guardian; 
    address public treasury; 

    address public badgerTree; 
    address public vesting; 

    
    string internal constant _defaultNamePrefix = ""Staked "";
    string internal constant _symbolSymbolPrefix = ""x"";

    
    uint256 public lifeTimeEarned; 
    uint256 public lastHarvestedAt; 
    uint256 public lastHarvestAmount; 
    uint256 public assetsAtLastHarvest; 

    mapping(address => uint256) public additionalTokensEarned;
    mapping(address => uint256) public lastAdditionalTokenAmount;

    
    
    uint256 public performanceFeeGovernance; 
    uint256 public performanceFeeStrategist; 
    uint256 public withdrawalFee; 
    uint256 public managementFee; 

    uint256 public maxPerformanceFee; 
    uint256 public maxWithdrawalFee; 
    uint256 public maxManagementFee; 

    uint256 public toEarnBps; 

    

    uint256 public constant MAX_BPS = 10_000;
    uint256 public constant SECS_PER_YEAR = 31_556_952; 

    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; 
    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; 
    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; 

    

    
    event TreeDistribution(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    
    event Harvested(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    event SetTreasury(address indexed newTreasury);
    event SetStrategy(address indexed newStrategy);
    event SetToEarnBps(uint256 newEarnToBps);
    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);
    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);
    event SetMaxManagementFee(uint256 newMaxManagementFee);
    event SetGuardian(address indexed newGuardian);
    event SetVesting(address indexed newVesting);
    event SetGuestList(address indexed newGuestList);
    event SetWithdrawalFee(uint256 newWithdrawalFee);
    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);
    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);
    event SetManagementFee(uint256 newManagementFee);

    event PauseDeposits(address indexed pausedBy);
    event UnpauseDeposits(address indexed pausedBy);

    
    
    
    
    
    
    
    
    
    
    
    
    
    function initialize(
        address _token,
        address _governance,
        address _keeper,
        address _guardian,
        address _treasury,
        address _strategist,
        address _badgerTree,
        address _vesting,
        string memory _name,
        string memory _symbol,
        uint256[4] memory _feeConfig
    ) public initializer whenNotPaused {
        require(_token != address(0)); 
        require(_governance != address(0)); 
        require(_keeper != address(0)); 
        require(_guardian != address(0)); 
        require(_treasury != address(0)); 
        require(_strategist != address(0)); 
        require(_badgerTree != address(0)); 
        require(_vesting != address(0)); 

        
        require(
            _feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeGovernance too high""
        );
        require(
            _feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );
        require(
            _feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP,
            ""withdrawalFee too high""
        );
        require(
            _feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP,
            ""managementFee too high""
        );

        string memory name;
        string memory symbol;

        
        
        IERC20 namedToken = IERC20(_token);

        if (keccak256(abi.encodePacked(_name)) != keccak256("""")) {
            name = _name;
        } else {
            name = string(
                abi.encodePacked(_defaultNamePrefix, namedToken.name())
            );
        }

        if (keccak256(abi.encodePacked(_symbol)) != keccak256("""")) {
            symbol = _symbol;
        } else {
            symbol = string(
                abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol())
            );
        }

        
        __ERC20_init(name, symbol);
        
        __Pausable_init();
        __ReentrancyGuard_init();

        token = IERC20Upgradeable(_token);
        governance = _governance;
        treasury = _treasury;
        strategist = _strategist;
        keeper = _keeper;
        guardian = _guardian;
        badgerTree = _badgerTree;
        vesting = _vesting;

        lastHarvestedAt = block.timestamp; 

        performanceFeeGovernance = _feeConfig[0];
        performanceFeeStrategist = _feeConfig[1];
        withdrawalFee = _feeConfig[2];
        managementFee = _feeConfig[3];
        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; 
        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; 
        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; 

        toEarnBps = 9_500; 
    }

    

    
    function _onlyAuthorizedPausers() internal view {
        require(
            msg.sender == guardian || msg.sender == governance,
            ""onlyPausers""
        );
    }

    
    function _onlyStrategy() internal view {
        require(msg.sender == strategy, ""onlyStrategy"");
    }

    

    
    
    function version() external pure returns (string memory) {
        return ""1.5"";
    }

    
    
    
    function getPricePerFullShare() public view returns (uint256) {
        if (totalSupply() == 0) {
            return ONE_ETH;
        }
        return (balance() * ONE_ETH) / totalSupply();
    }

    
    
    function balance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    
    
    function available() public view returns (uint256) {
        return (token.balanceOf(address(this)) * toEarnBps) / MAX_BPS;
    }

    

    
    
    
    
    function deposit(uint256 _amount) external whenNotPaused {
        _depositWithAuthorization(_amount, new bytes32[](0));
    }

    
    
    
    
    
    
    function deposit(uint256 _amount, bytes32[] memory proof)
        external
        whenNotPaused
    {
        _depositWithAuthorization(_amount, proof);
    }

    
    
    
    function depositAll() external whenNotPaused {
        _depositWithAuthorization(
            token.balanceOf(msg.sender),
            new bytes32[](0)
        );
    }

    
    
    
    
    
    function depositAll(bytes32[] memory proof) external whenNotPaused {
        _depositWithAuthorization(token.balanceOf(msg.sender), proof);
    }

    
    
    
    
    
    function depositFor(address _recipient, uint256 _amount)
        external
        whenNotPaused
    {
        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));
    }

    
    
    
    
    
    
    function depositFor(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) external whenNotPaused {
        _depositForWithAuthorization(_recipient, _amount, proof);
    }

    
    
    
    
    function withdraw(uint256 _shares) external whenNotPaused {
        _withdraw(_shares);
    }

    
    
    
    function withdrawAll() external whenNotPaused {
        _withdraw(balanceOf(msg.sender));
    }

    

    
    
    
    
    
    
    
    
    function reportHarvest(uint256 _harvestedAmount) external nonReentrant {
        _onlyStrategy();

        uint256 harvestTime = block.timestamp;
        uint256 assetsAtHarvest = balance() - _harvestedAmount; 

        _handleFees(_harvestedAmount, harvestTime);

        
        lastHarvestAmount = _harvestedAmount;

        
        
        
        
        
        if (assetsAtHarvest != 0) {
            assetsAtLastHarvest = assetsAtHarvest;
        } else if (_harvestedAmount == 0) {
            
            assetsAtLastHarvest = 0;
        }

        lifeTimeEarned = lifeTimeEarned + _harvestedAmount;
        
        lastHarvestedAt = harvestTime;

        emit Harvested(
            address(token),
            _harvestedAmount,
            block.number,
            block.timestamp
        );
    }

    
    
    
    
    
    
    
    
    function reportAdditionalToken(address _token) external nonReentrant {
        _onlyStrategy();
        require(address(token) != _token, ""No want"");
        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(
            address(this)
        );

        additionalTokensEarned[_token] =
            additionalTokensEarned[_token] +
            tokenBalance;
        lastAdditionalTokenAmount[_token] = tokenBalance;

        
        uint256 governanceRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeGovernance
        );
        uint256 strategistRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeStrategist
        );

        IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);
        IERC20Upgradeable(_token).safeTransfer(
            strategist,
            strategistRewardsFee
        );

        
        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));
        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);
        emit TreeDistribution(
            _token,
            newBalance,
            block.number,
            block.timestamp
        );
    }

    

    
    
    
    
    
    function setTreasury(address _treasury) external whenNotPaused {
        _onlyGovernance();
        require(_treasury != address(0), ""Address 0"");

        treasury = _treasury;
        emit SetTreasury(_treasury);
    }

    
    
    
    
    
    
    
    function setStrategy(address _strategy) external whenNotPaused {
        _onlyGovernance();
        require(_strategy != address(0), ""Address 0"");

        
        if (strategy != address(0)) {
            require(
                IStrategy(strategy).balanceOf() == 0,
                ""Please withdrawToVault before changing strat""
            );
        }
        strategy = _strategy;
        emit SetStrategy(_strategy);
    }

    

    
    
    
    
    function setMaxWithdrawalFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, ""withdrawalFee too high"");

        maxWithdrawalFee = _fees;
        emit SetMaxWithdrawalFee(_fees);
    }

    
    
    
    
    function setMaxPerformanceFee(uint256 _fees) external {
        _onlyGovernance();
        require(
            _fees <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );

        maxPerformanceFee = _fees;
        emit SetMaxPerformanceFee(_fees);
    }

    
    
    
    
    function setMaxManagementFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= MANAGEMENT_FEE_HARD_CAP, ""managementFee too high"");

        maxManagementFee = _fees;
        emit SetMaxManagementFee(_fees);
    }

    
    
    
    
    function setGuardian(address _guardian) external {
        _onlyGovernance();
        require(_guardian != address(0), ""Address cannot be 0x0"");

        guardian = _guardian;
        emit SetGuardian(_guardian);
    }

    
    
    
    
    function setVesting(address _vesting) external {
        _onlyGovernance();
        require(_vesting != address(0), ""Address cannot be 0x0"");

        vesting = _vesting;
        emit SetVesting(_vesting);
    }

    

    
    
    
    
    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_newToEarnBps <= MAX_BPS, ""toEarnBps should be <= MAX_BPS"");

        toEarnBps = _newToEarnBps;
        emit SetToEarnBps(_newToEarnBps);
    }

    
    
    
    
    
    function setGuestList(address _guestList) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        guestList = IBadgerGuestlist(_guestList);
        emit SetGuestList(_guestList);
    }

    
    
    
    
    
    
    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_withdrawalFee <= maxWithdrawalFee, ""Excessive withdrawal fee"");
        withdrawalFee = _withdrawalFee;
        emit SetWithdrawalFee(_withdrawalFee);
    }

    
    
    
    
    
    
    
    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeStrategist <= maxPerformanceFee,
            ""Excessive strategist performance fee""
        );
        performanceFeeStrategist = _performanceFeeStrategist;
        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);
    }

    
    
    
    
    
    
    
    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeGovernance <= maxPerformanceFee,
            ""Excessive governance performance fee""
        );
        performanceFeeGovernance = _performanceFeeGovernance;
        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);
    }

    
    
    
    
    
    
    function setManagementFee(uint256 _fees) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_fees <= maxManagementFee, ""Excessive management fee"");
        managementFee = _fees;
        emit SetManagementFee(_fees);
    }

    

    
    
    
    function withdrawToVault() external {
        _onlyGovernanceOrStrategist();
        IStrategy(strategy).withdrawToVault();
    }

    
    
    
    
    
    
    function emitNonProtectedToken(address _token) external {
        _onlyGovernanceOrStrategist();

        IStrategy(strategy).emitNonProtectedToken(_token);
    }

    
    
    
    
    
    function sweepExtraToken(address _token) external {
        _onlyGovernanceOrStrategist();
        require(address(token) != _token, ""No want"");

        IStrategy(strategy).withdrawOther(_token);
        
        
        
        IERC20Upgradeable(_token).safeTransfer(
            governance,
            IERC20Upgradeable(_token).balanceOf(address(this))
        );
    }

    
    
    
    
    
    function earn() external {
        require(!pausedDeposit, ""pausedDeposit""); 
        _onlyAuthorizedActors();

        uint256 _bal = available();
        token.safeTransfer(strategy, _bal);
        IStrategy(strategy).earn();
    }

    
    
    function pauseDeposits() external {
        _onlyAuthorizedPausers();
        pausedDeposit = true;
        emit PauseDeposits(msg.sender);
    }

    
    
    function unpauseDeposits() external {
        _onlyGovernance();
        pausedDeposit = false;
        emit UnpauseDeposits(msg.sender);
    }

    
    
    function pause() external {
        _onlyAuthorizedPausers();
        _pause();
    }

    
    
    function unpause() external {
        _onlyGovernance();
        _unpause();
    }

    

    
    
    
    
    
    
    function _depositFor(address _recipient, uint256 _amount)
        internal
        nonReentrant
    {
        require(_recipient != address(0), ""Address 0"");
        require(_amount != 0, ""Amount 0"");
        require(!pausedDeposit, ""pausedDeposit""); 

        uint256 _pool = balance();
        uint256 _before = token.balanceOf(address(this));
        token.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 _after = token.balanceOf(address(this));
        _mintSharesFor(_recipient, _after - _before, _pool);
    }

    
    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof)
        internal
    {
        _depositForWithAuthorization(msg.sender, _amount, proof);
    }

    
    
    function _depositForWithAuthorization(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) internal {
        if (address(guestList) != address(0)) {
            require(
                guestList.authorized(_recipient, _amount, proof),
                ""GuestList: Not Authorized""
            );
        }
        _depositFor(_recipient, _amount);
    }

    
    
    
    
    
    
    function _withdraw(uint256 _shares) internal nonReentrant {
        require(_shares != 0, ""0 Shares"");

        uint256 r = (balance() * _shares) / totalSupply();
        _burn(msg.sender, _shares);

        
        uint256 b = token.balanceOf(address(this));
        if (b < r) {
            uint256 _toWithdraw = r - b;
            IStrategy(strategy).withdraw(_toWithdraw);
            uint256 _after = token.balanceOf(address(this));
            uint256 _diff = _after - b;
            if (_diff < _toWithdraw) {
                r = b + _diff;
            }
        }

        uint256 _fee = _calculateFee(r, withdrawalFee);
        uint256 _amount = r - _fee;

        
        IVesting(vesting).setupVesting(msg.sender, _amount, block.timestamp);
        token.safeTransfer(vesting, _amount);

        
        
        if(_fee > 0) {
            _mintSharesFor(treasury, _fee, balance() - _fee);
        }
    }

    
    
    
    
    function _calculateFee(uint256 amount, uint256 feeBps)
        internal
        pure
        returns (uint256)
    {
        if (feeBps == 0) {
            return 0;
        }
        uint256 fee = (amount * feeBps) / MAX_BPS;
        return fee;
    }

    
    
    
    function _calculatePerformanceFee(uint256 _amount)
        internal
        view
        returns (uint256, uint256)
    {
        uint256 governancePerformanceFee = _calculateFee(
            _amount,
            performanceFeeGovernance
        );

        uint256 strategistPerformanceFee = _calculateFee(
            _amount,
            performanceFeeStrategist
        );

        return (governancePerformanceFee, strategistPerformanceFee);
    }

    
    
    
    
    function _mintSharesFor(
        address recipient,
        uint256 _amount,
        uint256 _pool
    ) internal {
        uint256 shares;
        if (totalSupply() == 0) {
            shares = _amount;
        } else {
            shares = (_amount * totalSupply()) / _pool;
        }
        _mint(recipient, shares);
    }

    
    
    
    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime)
        internal
    {
        (
            uint256 feeGovernance,
            uint256 feeStrategist
        ) = _calculatePerformanceFee(_harvestedAmount);
        uint256 duration = harvestTime - lastHarvestedAt;

        
        uint256 management_fee = managementFee > 0
            ? (managementFee * (balance() - _harvestedAmount) * duration) /
                SECS_PER_YEAR /
                MAX_BPS
            : 0;
        uint256 totalGovernanceFee = feeGovernance + management_fee;

        
        
        
        uint256 _pool = balance() - totalGovernanceFee - feeStrategist;

        
        if (totalGovernanceFee != 0) {
            _mintSharesFor(treasury, totalGovernanceFee, _pool);
        }

        if (feeStrategist != 0 && strategist != address(0)) {
            
            _mintSharesFor(
                strategist,
                feeStrategist,
                _pool + totalGovernanceFee
            );
        }
    }
}",4603,3,0,"{
  ""task_list"": [
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Check for potential reentrancy attacks in functions involving external calls (e.g., `deposit`, `withdraw`, `reportHarvest`)."",
        ""Verify that all arithmetic operations are protected against overflow/underflow using SafeMath or Solidity 0.8.x built-in checks."",
        ""Ensure that all external contract calls (e.g., `IStrategy`, `IVesting`) are validated and handle potential failures gracefully."",
        ""Review the use of `nonReentrant` modifier to ensure it is applied correctly in all relevant functions.""
      ]
    },
    {
      ""Area"": ""Compliance"",
      ""Tasks"": [
        ""Confirm that the contract adheres to the ERC-20 standard, particularly in the `ERC20Upgradeable` implementation."",
        ""Verify that the contract's upgradeable nature does not violate any standards or introduce unexpected behavior.""
      ]
    },
    {
      ""Area"": ""Complex Logic/Algorithms"",
      ""Tasks"": [
        ""Audit the fee calculation logic in `_calculateFee`, `_calculatePerformanceFee`, and `_handleFees` to ensure accuracy and prevent edge cases."",
        ""Review the share minting logic in `_mintSharesFor` to ensure it correctly calculates shares based on the pool size and amount."",
        ""Examine the deposit and withdrawal logic to ensure it handles edge cases like zero amounts or zero shares correctly.""
      ]
    },
    {
      ""Area"": ""External Interactions"",
      ""Tasks"": [
        ""Verify that all interactions with external contracts (e.g., `IStrategy`, `IVesting`, `IBadgerGuestlist`) are secure and handle potential failures."",
        ""Ensure that the `guestList` contract's authorization mechanism is correctly implemented and does not introduce vulnerabilities."",
        ""Review the vesting contract (`IVesting`) interaction to ensure it correctly handles withdrawn tokens and does not introduce delays or failures.""
      ]
    },
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Check that only authorized roles (e.g., `governance`, `strategist`, `guardian`) can call sensitive functions like `setStrategy`, `setTreasury`, `pause`, etc."",
        ""Verify that the `_onlyAuthorizedPausers` and `_onlyStrategy` modifiers are correctly implemented and enforced."",
        ""Ensure that the `initialize` function can only be called once and is protected from unauthorized access.""
      ]
    },
    {
      ""Area"": ""Gas Optimization"",
      ""Tasks"": [
        ""Identify and optimize gas-intensive operations, particularly in loops or complex calculations."",
        ""Review the use of storage variables and consider using memory or local variables where possible to reduce gas costs.""
      ]
    },
    {
      ""Area"": ""Liquidity Pools & AMM Risks"",
      ""Tasks"": [
        ""Ensure that the contract's staking mechanism does not expose it to liquidity pool risks or impermanent loss."",
        ""Verify that the contract's interaction with the strategy contract does not introduce vulnerabilities related to liquidity manipulation.""
      ]
    },
    {
      ""Area"": ""Flash Loan Protection"",
      ""Tasks"": [
        ""Check that the contract is protected against flash loan attacks, particularly in functions that calculate fees or distribute rewards.""
      ]
    },
    {
      ""Area"": ""Oracle Integrity"",
      ""Tasks"": [
        ""Verify that any price or value calculations (e.g., `getPricePerFullShare`) are secure and not susceptible to oracle manipulation.""
      ]
    },
    {
      ""Area"": ""Governance & Voting Security"",
      ""Tasks"": [
        ""Review the governance mechanism to ensure it is secure and not susceptible to manipulation or attacks.""
      ]
    },
    {
      ""Area"": ""Staking/Rewards"",
      ""Tasks"": [
        ""Ensure that the reward distribution mechanism in `reportHarvest` and `reportAdditionalToken` is secure and correctly distributes rewards."",
        ""Verify that the vesting mechanism for withdrawals is correctly implemented and does not introduce vulnerabilities.""
      ]
    },
    {
      ""Area"": ""Tokenomics Risks"",
      ""Tasks"": [
        ""Review the tokenomics of the staked token to ensure it does not introduce inflationary risks or other economic vulnerabilities.""
      ]
    },
    {
      ""Area"": ""Transaction Ordering & Front-running"",
      ""Tasks"": [
        ""Check that the contract is protected against front-running attacks, particularly in deposit and withdrawal functions.""
      ]
    },
    {
      ""Area"": ""Exit Scams/Rug Pulls"",
      ""Tasks"": [
        ""Ensure that the contract does not have any mechanisms that could be exploited for a rug pull, such as unauthorized withdrawal of funds.""
      ]
    },
    {
      ""Area"": ""Fallback/Emergency Stops"",
      ""Tasks"": [
        ""Verify that the pause and unpause mechanisms are correctly implemented and can be used to halt the contract in case of an emergency."",
        ""Ensure that the `pauseDeposits` and `unpauseDeposits` functions are secure and can only be called by authorized roles.""
      ]
    }
  ]
}","{
  ""ReviewingTheCode"": ""The provided code is a Solidity smart contract named 'StakedCitadel' that inherits from multiple OpenZeppelin upgradeable contracts and implements a staking mechanism for a specific token. The contract allows users to deposit, withdraw, and manage staked tokens, while also handling fees, harvests, and additional token rewards. The contract is designed to be upgradeable and includes security features like pausing, reentrancy guards, and access control."",
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""StakedCitadel"",
    ""Purpose"": ""To manage staking of a specific token, handle fees, distribute rewards, and interact with a strategy contract for yield optimization."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [
        ""ERC20Upgradeable"",
        ""SettAccessControl"",
        ""PausableUpgradeable"",
        ""ReentrancyGuardUpgradeable""
      ],
      ""Imports"": [
        ""IERC20Upgradeable"",
        ""AddressUpgradeable"",
        ""SafeERC20Upgradeable"",
        ""ERC20Upgradeable"",
        ""PausableUpgradeable"",
        ""ReentrancyGuardUpgradeable"",
        ""IVault"",
        ""IVesting"",
        ""IStrategy"",
        ""IERC20"",
        ""IBadgerGuestlist""
      ]
    },
    ""StateVariables"": [
      {
        ""Name"": ""token"",
        ""Type"": ""IERC20Upgradeable"",
        ""Purpose"": ""The token being staked.""
      },
      {
        ""Name"": ""guestList"",
        ""Type"": ""IBadgerGuestlist"",
        ""Purpose"": ""Guest list for authorized deposits.""
      },
      {
        ""Name"": ""pausedDeposit"",
        ""Type"": ""bool"",
        ""Purpose"": ""Flag to pause deposits.""
      },
      {
        ""Name"": ""strategy"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the strategy contract.""
      },
      {
        ""Name"": ""guardian"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the guardian role.""
      },
      {
        ""Name"": ""treasury"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the treasury.""
      },
      {
        ""Name"": ""badgerTree"",
        ""Type"": ""address"",
        ""Purpose"": ""Address for distributing additional rewards.""
      },
      {
        ""Name"": ""vesting"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the vesting contract.""
      },
      {
        ""Name"": ""lifeTimeEarned"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Total amount of tokens earned over the lifetime of the contract.""
      },
      {
        ""Name"": ""lastHarvestedAt"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Timestamp of the last harvest.""
      },
      {
        ""Name"": ""lastHarvestAmount"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Amount harvested in the last harvest.""
      },
      {
        ""Name"": ""assetsAtLastHarvest"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Total assets at the time of the last harvest.""
      },
      {
        ""Name"": ""performanceFeeGovernance"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Performance fee for governance.""
      },
      {
        ""Name"": ""performanceFeeStrategist"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Performance fee for strategist.""
      },
      {
        ""Name"": ""withdrawalFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Fee for withdrawals.""
      },
      {
        ""Name"": ""managementFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Management fee.""
      },
      {
        ""Name"": ""maxPerformanceFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Maximum performance fee allowed.""
      },
      {
        ""Name"": ""maxWithdrawalFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Maximum withdrawal fee allowed.""
      },
      {
        ""Name"": ""maxManagementFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Maximum management fee allowed.""
      },
      {
        ""Name"": ""toEarnBps"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Basis points for earning.""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""initialize"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Initializes the contract with initial parameters."",
        ""Parameters"": [
          ""_token"",
          ""_governance"",
          ""_keeper"",
          ""_guardian"",
          ""_treasury"",
          ""_strategist"",
          ""_badgerTree"",
          ""_vesting"",
          ""_name"",
          ""_symbol"",
          ""_feeConfig""
        ],
        ""Returns"": []
      },
      {
        ""Name"": ""_onlyAuthorizedPausers"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Ensures only authorized pausers can call certain functions."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""_onlyStrategy"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Ensures only the strategy contract can call certain functions."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""version"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Returns the version of the contract."",
        ""Parameters"": [],
        ""Returns"": [""string""]
      },
      {
        ""Name"": ""getPricePerFullShare"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Returns the price per full share."",
        ""Parameters"": [],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""balance"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Returns the balance of the token in the contract."",
        ""Parameters"": [],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""available"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Returns the available balance for earning."",
        ""Parameters"": [],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""deposit"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens into the contract."",
        ""Parameters"": [""_amount""],
        ""Returns"": []
      },
      {
        ""Name"": ""depositAll"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits all tokens of the sender into the contract."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""depositFor"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens on behalf of another address."",
        ""Parameters"": [""_recipient"", ""_amount""],
        ""Returns"": []
      },
      {
        ""Name"": ""withdraw"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws staked tokens."",
        ""Parameters"": [""_shares""],
        ""Returns"": []
      },
      {
        ""Name"": ""withdrawAll"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws all staked tokens of the sender."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""reportHarvest"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Reports a harvest event and handles fees."",
        ""Parameters"": [""_harvestedAmount""],
        ""Returns"": []
      },
      {
        ""Name"": ""reportAdditionalToken"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Reports additional tokens earned and distributes rewards."",
        ""Parameters"": [""_token""],
        ""Returns"": []
      },
      {
        ""Name"": ""setTreasury"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the treasury address."",
        ""Parameters"": [""_treasury""],
        ""Returns"": []
      },
      {
        ""Name"": ""setStrategy"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the strategy address."",
        ""Parameters"": [""_strategy""],
        ""Returns"": []
      },
      {
        ""Name"": ""setMaxWithdrawalFee"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the maximum withdrawal fee."",
        ""Parameters"": [""_fees""],
        ""Returns"": []
      },
      {
        ""Name"": ""setMaxPerformanceFee"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the maximum performance fee."",
        ""Parameters"": [""_fees""],
        ""Returns"": []
      },
      {
        ""Name"": ""setMaxManagementFee"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the maximum management fee."",
        ""Parameters"": [""_fees""],
        ""Returns"": []
      },
      {
        ""Name"": ""setGuardian"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the guardian address."",
        ""Parameters"": [""_guardian""],
        ""Returns"": []
      },
      {
        ""Name"": ""setVesting"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the vesting address."",
        ""Parameters"": [""_vesting""],
        ""Returns"": []
      },
      {
        ""Name"": ""setToEarnBps"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the basis points for earning."",
        ""Parameters"": [""_newToEarnBps""],
        ""Returns"": []
      },
      {
        ""Name"": ""setGuestList"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the guest list address."",
        ""Parameters"": [""_guestList""],
        ""Returns"": []
      },
      {
        ""Name"": ""setWithdrawalFee"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the withdrawal fee."",
        ""Parameters"": [""_withdrawalFee""],
        ""Returns"": []
      },
      {
        ""Name"": ""setPerformanceFeeStrategist"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the strategist performance fee."",
        ""Parameters"": [""_performanceFeeStrategist""],
        ""Returns"": []
      },
      {
        ""Name"": ""setPerformanceFeeGovernance"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the governance performance fee."",
        ""Parameters"": [""_performanceFeeGovernance""],
        ""Returns"": []
      },
      {
        ""Name"": ""setManagementFee"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the management fee."",
        ""Parameters"": [""_fees""],
        ""Returns"": []
      },
      {
        ""Name"": ""withdrawToVault"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws tokens to the vault."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""emitNonProtectedToken"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Emits non-protected tokens."",
        ""Parameters"": [""_token""],
        ""Returns"": []
      },
      {
        ""Name"": ""sweepExtraToken"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sweeps extra tokens to the governance address."",
        ""Parameters"": [""_token""],
        ""Returns"": []
      },
      {
        ""Name"": ""earn"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Transfers available tokens to the strategy for earning."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""pauseDeposits"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Pauses deposits."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""unpauseDeposits"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Unpauses deposits."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""pause"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Pauses the contract."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""unpause"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Unpauses the contract."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""_depositFor"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Internal function to handle deposits."",
        ""Parameters"": [""_recipient"", ""_amount""],
        ""Returns"": []
      },
      {
        ""Name"": ""_depositWithAuthorization"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Internal function to handle deposits with authorization."",
        ""Parameters"": [""_amount"", ""proof""],
        ""Returns"": []
      },
      {
        ""Name"": ""_depositForWithAuthorization"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Internal function to handle deposits for another address with authorization."",
        ""Parameters"": [""_recipient"", ""_amount"", ""proof""],
        ""Returns"": []
      },
      {
        ""Name"": ""_withdraw"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Internal function to handle withdrawals."",
        ""Parameters"": [""_shares""],
        ""Returns"": []
      },
      {
        ""Name"": ""_calculateFee"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Calculates the fee based on the amount and fee basis points."",
        ""Parameters"": [""amount"", ""feeBps""],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""_calculatePerformanceFee"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Calculates the performance fee for governance and strategist."",
        ""Parameters"": [""_amount""],
        ""Returns"": [""uint256"", ""uint256""]
      },
      {
        ""Name"": ""_mintSharesFor"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Mints shares for a recipient based on the amount and pool."",
        ""Parameters"": [""recipient"", ""_amount"", ""_pool""],
        ""Returns"": []
      },
      {
        ""Name"": ""_handleFees"",
        ""Visibility"": ""internal"",
        ""Purpose"": ""Handles the distribution of fees after a harvest."",
        ""Parameters"": [""_harvestedAmount"", ""harvestTime""],
        ""Returns"": []
      }
    ]
  },
  ""ExternalInteractions"": [
    ""IERC20Upgradeable"",
    ""IBadgerGuestlist"",
    ""IStrategy"",
    ""IVesting"",
    ""IVault""
  ],
  ""SpecialMechanisms"": [
    ""Upgradeable contract pattern"",
    ""Access control with roles (governance, strategist, keeper, guardian)"",
    ""Reentrancy protection"",
    ""Pausable functionality"",
    ""Fee distribution mechanism"",
    ""Guest list for authorized deposits"",
    ""Vesting mechanism for withdrawals""
  ],
  ""Questions"": [
    ""How is the guest list contract (IBadgerGuestlist) implemented and what are the specific rules for authorization?"",
    ""What is the exact role of the vesting contract (IVesting) and how does it handle the distribution of withdrawn tokens?"",
    ""Are there any specific security considerations for the upgradeable nature of the contract?"",
    ""How are the performance fees calculated and distributed in detail?"",
    ""What are the specific conditions under which the contract can be paused or unpaused?""
  ]
}","{
  ""Findings"": [
    {
      ""Issue"": ""Potential Reentrancy Vulnerability in `_withdraw` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `_withdraw` function interacts with an external strategy contract before updating the state, which could potentially lead to a reentrancy attack if the strategy contract is malicious or compromised. Although the function uses the `nonReentrant` modifier, it is still good practice to follow the checks-effects-interactions pattern to minimize risks."",
      ""Impact"": ""An attacker could potentially re-enter the `_withdraw` function and manipulate the contract state, leading to loss of funds or other unintended behavior."",
      ""Location"": ""Function `_withdraw`""
    },
    {
      ""Issue"": ""Lack of Input Validation in `setStrategy` Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `setStrategy` function does not validate the new strategy address beyond checking if it is not the zero address. This could lead to setting a malicious or non-functional strategy contract, potentially compromising the entire system."",
      ""Impact"": ""Setting a malicious or non-functional strategy could lead to loss of funds, manipulation of contract state, or other unintended consequences."",
      ""Location"": ""Function `setStrategy`""
    },
    {
      ""Issue"": ""Unrestricted Access to Fee-Setting Functions"",
      ""Severity"": ""Medium"",
      ""Description"": ""Functions like `setMaxWithdrawalFee`, `setMaxPerformanceFee`, and `setMaxManagementFee` can be called by the governance address without any upper limit checks beyond the hard caps. This could lead to setting excessively high fees, negatively impacting users."",
      ""Impact"": ""Excessively high fees could deter users from using the contract, leading to reduced liquidity and potential loss of trust in the platform."",
      ""Location"": ""Functions `setMaxWithdrawalFee`, `setMaxPerformanceFee`, `setMaxManagementFee`""
    },
    {
      ""Issue"": ""Potential Front-Running in Deposit and Withdraw Functions"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `deposit` and `withdraw` functions are susceptible to front-running attacks due to the lack of mechanisms to protect against transaction ordering dependencies. An attacker could monitor the mempool and front-run these transactions to their advantage."",
      ""Impact"": ""Front-running could lead to users receiving less favorable rates or losing out on expected returns, potentially leading to financial losses."",
      ""Location"": ""Functions `deposit`, `depositAll`, `withdraw`, `withdrawAll`""
    },
    {
      ""Issue"": ""Lack of Input Validation in `initialize` Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `initialize` function does not validate the `_feeConfig` array length or its elements sufficiently, which could lead to unexpected behavior or out-of-bounds errors if the array is not of the expected length."",
      ""Impact"": ""Potential runtime errors or incorrect fee configurations, leading to financial losses or contract malfunction."",
      ""Location"": ""Function `initialize`""
    },
    {
      ""Issue"": ""Potential Integer Overflow in `_calculateFee` Function"",
      ""Severity"": ""Low"",
      ""Description"": ""The `_calculateFee` function performs arithmetic operations without explicit checks for potential integer overflow. While Solidity 0.8.x has built-in overflow checks, it is still good practice to handle such cases to prevent unexpected behavior."",
      ""Impact"": ""Potential for integer overflow, leading to incorrect fee calculations."",
      ""Location"": ""Function `_calculateFee`""
    },
    {
      ""Issue"": ""Lack of Event Emission in Critical State Changes"",
      ""Severity"": ""Low"",
      ""Description"": ""Several critical state changes, such as setting the `guestList`, `vesting`, and `guardian` addresses, do not emit events. This makes it difficult to track changes and could lead to transparency issues."",
      ""Impact"": ""Lack of transparency in state changes could lead to mistrust among users and make it difficult to audit the contract."",
      ""Location"": ""Functions `setGuestList`, `setVesting`, `setGuardian`""
    },
    {
      ""Issue"": ""Unrestricted Access to `sweepExtraToken` Function"",
      ""Severity"": ""Low"",
      ""Description"": ""The `sweepExtraToken` function allows the governance or strategist to sweep any token (except the main token) to the governance address. This could be abused to sweep tokens that were not intended to be swept."",
      ""Impact"": ""Potential loss of funds if the function is misused or if the governance address is compromised."",
      ""Location"": ""Function `sweepExtraToken`""
    },
    {
      ""Issue"": ""Potential Denial of Service in `reportHarvest` Function"",
      ""Severity"": ""Low"",
      ""Description"": ""The `reportHarvest` function is vulnerable to a potential denial of service attack if the `_harvestedAmount` is set to a very large value, causing arithmetic overflow or underflow. Although Solidity 0.8.x has built-in overflow checks, it is still important to handle edge cases carefully."",
      ""Impact"": ""A malicious actor could potentially cause the function to fail, disrupting the normal operation of the contract."",
      ""Location"": ""Function `reportHarvest`""
    }
  ],
  ""IssueNumber"": 35,
  ""OutputList"": 9
}",539.5303061008453,121586.0,24.0,"### **[H-01] StakedCitadel doesn't use correct balance for internal accounting**

**Report Description**:
The `balance()` function in the StakedCitadel contract is supposed to return the balance of the vault plus the balance of the strategy. However, it only returns the balance of the vault. Since most funds are located in the strategy, the vault's balance will be very low. This incorrect accounting can lead to issues such as incorrect minting and burning of shares during deposits and withdrawals, potentially causing financial discrepancies and vulnerabilities.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of incorrect balance accounting in the `balance()` function. This is a critical oversight, as it directly impacts the contract's financial integrity and user trust.

---

### **[H-02] StakedCitadel: wrong setupVesting function name**

**Report Description**:
In the `_withdraw` function of the StakedCitadel contract, the `setupVesting` function of the vesting contract is called. However, the correct function name in the StakedCitadelVester contract is `vest`. This mismatch will cause the `_withdraw` function to fail, preventing users from withdrawing their tokens.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of the incorrect function name in the `_withdraw` function. This is a critical bug that prevents users from withdrawing their tokens, leading to a loss of functionality and user trust.

---

### **[H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination**

**Report Description**:
The `deposit()` -> `_depositFor()` -> `_mintSharesFor()` call does not require a minimum deposit amount and mints shares according to the provided amount. If the first depositor stakes a large amount, any subsequent deposit lower than the attacker's stake will result in 0 vault tokens being issued, effectively stealing the depositor's funds.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of potential token denomination attacks in the deposit mechanism. This is a significant vulnerability that could lead to financial losses for users.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-01] StakedCitadel doesn't use correct balance for internal accounting**
- **[H-02] StakedCitadel: wrong setupVesting function name**
- **[H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination**

---

### **Conclusion**
The response list does not adequately address the issues reported in the `issue` list. Critical vulnerabilities related to balance accounting, function naming, and deposit mechanisms are entirely missed. This indicates a significant gap in the coverage and accuracy of the responses, which could lead to unresolved security risks in the smart contract.","```
None.
```","Given that there are no true positives in the provided list, the **Average Precision (AP)** for the query is:

**0.0**"
Funding.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./interfaces/badger/IVault.sol"";
import ""./interfaces/erc20/IERC20.sol"";
import ""./lib/GlobalAccessControlManaged.sol"";
import ""./lib/SafeERC20.sol"";
import ""./interfaces/citadel/IMedianOracle.sol"";

/**
 * @notice Sells a token at a predetermined price to whitelisted buyers.
 * TODO: Better revert strings
 */
contract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {
    using SafeERC20 for IERC20;

    // Roles used from GAC
    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =
        keccak256(""CONTRACT_GOVERNANCE_ROLE"");
    bytes32 public constant POLICY_OPERATIONS_ROLE =
        keccak256(""POLICY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(""TREASURY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_VAULT_ROLE =
        keccak256(""TREASURY_VAULT_ROLE"");
    bytes32 public constant KEEPER_ROLE = keccak256(""KEEPER_ROLE"");

    uint256 public constant MAX_BPS = 10000;

    IERC20 public citadel; /// token to distribute (in vested xCitadel form)
    IVault public xCitadel; /// wrapped citadel form that is actually distributed
    IERC20 public asset; /// token to take in WBTC / bibbtc LP / CVX / bveCVX

    uint256 public citadelPriceInAsset; /// asset per citadel price eg. 1 WBTC (8 decimals) = 40,000 CTDL ==> price = 10^8 / 40,000
    uint256 public minCitadelPriceInAsset; /// Lower bound on expected citadel price in asset terms. Used as circuit breaker oracle.
    uint256 public maxCitadelPriceInAsset; /// Upper bound on expected citadel price in asset terms. Used as circuit breaker oracle.
    bool public citadelPriceFlag; /// Flag citadel price for review by guardian if it exceeds min and max bounds;

    uint256 public assetDecimalsNormalizationValue;

    address public citadelPriceInAssetOracle;
    address public saleRecipient;

    struct FundingParams {
        uint256 discount;
        uint256 minDiscount;
        uint256 maxDiscount;
        address discountManager;
        uint256 assetCumulativeFunded; /// persistent sum of asset amount in over lifetime of contract.
        uint256 assetCap; /// Max asset token that can be taken in by the contract (defines the cap for citadel sold)
    }

    FundingParams public funding;

    /// ==================
    /// ===== Events =====
    /// ==================

    // TODO: we should conform to some interface here
    event Deposit(
        address indexed buyer,
        uint256 assetIn,
        uint256 citadelOutValue
    );

    event CitadelPriceInAssetUpdated(uint256 citadelPrice);

    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);
    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);

    event SaleRecipientUpdated(address indexed recipient);
    event AssetCapUpdated(uint256 assetCap);

    event Sweep(address indexed token, uint256 amount);
    event ClaimToTreasury(address indexed token, uint256 amount);

    modifier onlyCitadelPriceInAssetOracle() {
        require(
            msg.sender == citadelPriceInAssetOracle,
            ""onlyCitadelPriceInAssetOracle""
        );
        _;
    }

    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);
    event DiscountSet(uint256 discount);
    event DiscountManagerSet(address discountManager);

    /// =======================
    /// ===== Initializer =====
    /// =======================

    /**
     * @notice Initializer.
     * @param _gac Global access control
     * @param _citadel The token this contract will return in a trade
     * @param _asset The token this contract will receive in a trade
     * @param _xCitadel Staked citadel, citadel will be granted to funders in this form
     * @param _saleRecipient The address receiving the proceeds of the sale - will be citadel multisig
     * @param _assetCap The max asset that the contract can take
     */
    function initialize(
        address _gac,
        address _citadel,
        address _asset,
        address _xCitadel,
        address _saleRecipient,
        address _citadelPriceInAssetOracle,
        uint256 _assetCap
    ) external initializer {
        require(
            _saleRecipient != address(0),
            ""Funding: 0 sale""
        );
        require(
            _citadelPriceInAssetOracle != address(0),
            ""Funding: 0 oracle""
        );

        __GlobalAccessControlManaged_init(_gac);
        __ReentrancyGuard_init();

        citadel = IERC20(_citadel);
        xCitadel = IVault(_xCitadel);
        asset = IERC20(_asset);
        saleRecipient = _saleRecipient;

        citadelPriceInAssetOracle = _citadelPriceInAssetOracle;

        funding = FundingParams(0, 0, 0, address(0), 0, _assetCap);

        assetDecimalsNormalizationValue = 10**asset.decimals();

        // No circuit breaker on price by default
        minCitadelPriceInAsset = 0;
        maxCitadelPriceInAsset = type(uint256).max;

        // Allow to deposit in vault
        // Done last for reEntrancy concerns
        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);
    }

    modifier onlyWhenPriceNotFlagged() {
        require(
            citadelPriceFlag == false,
            ""Funding: citadel price from oracle flagged and pending review""
        );
        _;
    }

    /// ==========================
    /// ===== Public actions =====
    /// ==========================

    /**
     * @notice Exchange `_assetAmountIn` of `asset` for `citadel`
     * @param _assetAmountIn Amount of `asset` to give
     * @param _minCitadelOut ID of DAO to vote for
     * @return citadelAmount_ Amount of `xCitadel` bought
     */
    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)
        external
        onlyWhenPriceNotFlagged
        gacPausable
        nonReentrant
        returns (uint256 citadelAmount_)
    {
        require(_assetAmountIn > 0, ""_assetAmountIn must not be 0"");
        require(
            funding.assetCumulativeFunded + _assetAmountIn <= funding.assetCap,
            ""asset funding cap exceeded""
        );
        funding.assetCumulativeFunded = funding.assetCumulativeFunded + _assetAmountIn;
        // Take in asset from user
        citadelAmount_ = getAmountOut(_assetAmountIn);
        require(citadelAmount_ >= _minCitadelOut, ""minCitadelOut"");

        asset.safeTransferFrom(msg.sender, saleRecipient, _assetAmountIn);
        
        // Deposit xCitadel and send to user
        // TODO: Check gas costs. How does this relate to market buying if you do want to deposit to xCTDL?
        xCitadel.depositFor(msg.sender, citadelAmount_);

        emit Deposit(
            msg.sender,
            _assetAmountIn,
            citadelAmount_
        );
    }

    /// =======================
    /// ===== Public view =====
    /// =======================

    /**
     * @notice Get the amount received when exchanging `asset`
     * @param _assetAmountIn Amount of `asset` to exchange
     * @return citadelAmount_ Amount of `citadel` received
     */
    function getAmountOut(uint256 _assetAmountIn)
        public
        view
        returns (uint256 citadelAmount_)
    {
        uint256 citadelAmountWithoutDiscount = _assetAmountIn * citadelPriceInAsset;

        if (funding.discount > 0) {
            citadelAmount_ =
                (citadelAmountWithoutDiscount * MAX_BPS) /
                (MAX_BPS - funding.discount);
        }

        citadelAmount_ = citadelAmount_ / assetDecimalsNormalizationValue;
    }

    /**
     * @notice Get the amount received when exchanging `asset`, in terms of xCitadel at current price per share
     * @param _assetAmountIn Amount of `asset` to exchange
     * @return xCitadelAmount_ Amount of `xCitadel` received at current price per share
     */
    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {
        uint citadelAmount = getAmountOut(_assetAmountIn);
        xCitadelAmount_ = citadelAmount * 10**citadel.decimals() / xCitadel.getPricePerFullShare();
    }

    /**
     * @notice Check how much `asset` can still be taken in, based on cap and cumulative amount funded
     * @return limitLeft_ Amount of `asset` that can still be exchanged for citadel
     */
    function getRemainingFundable() external view returns (uint256 limitLeft_) {
        uint256 assetCumulativeFunded = funding.assetCumulativeFunded;
        uint256 assetCap = funding.assetCap;
        if (assetCumulativeFunded < assetCap) {
            limitLeft_ = assetCap - assetCumulativeFunded;
        }
    }

    /**
     * @notice Get all funding params
     * @return funding all funding params
     */
    function getFundingParams() external view returns (FundingParams memory) {
        return funding;
    }

    /**
     * @notice Convenience function to get current discount rate
     * @return discount current discount rate
     */
    function getDiscount() external view returns (uint256) {
        return funding.discount;
    }

    /// ==============================
    /// ===== Policy Ops actions =====
    /// ==============================

    /**
     * @notice Set discount manually, within the constraints of min and max discount values
     * @dev managed by policy operations for rapid response to market conditions
     * @param _discount active discount (in bps)
     */
    function setDiscount(uint256 _discount)
        external
        gacPausable
        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)
    {
        require(_discount >= funding.minDiscount, ""discount < minDiscount"");
        require(_discount <= funding.maxDiscount, ""discount > maxDiscount"");

        funding.discount = _discount;

        emit DiscountSet(_discount);
    }

    function clearCitadelPriceFlag()
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        citadelPriceFlag = false;
    }

    /**
     * @notice Modify the max asset amount that this contract can take. Managed by policy governance.
     * @dev This is cumulative asset cap, so must take into account the asset amount already funded.
     * @param _assetCap New max cumulatiive amountIn
     */
    function setAssetCap(uint256 _assetCap)
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        require(
            _assetCap > funding.assetCumulativeFunded,
            ""cannot decrease cap below global sum of assets in""
        );
        funding.assetCap = _assetCap;
        emit AssetCapUpdated(_assetCap);
    }

    /// ================================
    /// ===== Treasury Ops actions =====
    /// ================================

    /**
     * @notice Transfers out any tokens accidentally sent to the contract. Can only be called by owner
     * @dev The contract transfers all `asset` directly to `saleRecipient` during a sale so it's safe
     *      to sweep `asset`. For `citadel`, the function only sweeps the extra amount
     *      (current contract balance - amount left to be claimed)
     * @param _token The token to sweep
     */
    function sweep(address _token)
        external
        gacPausable
        nonReentrant
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount > 0, ""nothing to sweep"");
        require(
            _token != address(asset),
            ""cannot sweep funding asset, use claimAssetToTreasury()""
        );

        emit Sweep(_token, amount);
        IERC20(_token).safeTransfer(saleRecipient, amount);
    }

    /// @notice Claim accumulated asset token to treasury
    /// @dev We let assets accumulate and batch transfer to treasury (rather than transfer atomically on each deposi)t for user gas savings
    function claimAssetToTreasury()
        external
        gacPausable
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = asset.balanceOf(address(this));
        require(amount > 0, ""nothing to claim"");
        asset.safeTransfer(saleRecipient, amount);

        emit ClaimToTreasury(address(asset), amount);
    }

    /// ==============================
    /// ===== Governance actions =====
    /// ==============================

    /**
     * @notice Set minimum and maximum discount
     * @dev managed by contract governance to place constraints around the parameter for policy operations to play within
     * @param _minDiscount minimum discount (in bps)
     * @param _maxDiscount maximum discount (in bps)
     */
    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(_maxDiscount < MAX_BPS , ""maxDiscount >= MAX_BPS"");
        funding.minDiscount = _minDiscount;
        funding.maxDiscount = _maxDiscount;

        emit DiscountLimitsSet(_minDiscount, _maxDiscount);
    }

    /**
     * @notice Set a discount manager address
     * @dev This is intended to be used for an automated discount manager contract to supplement or replace manual calls
     * @param _discountManager discount manager address
     */
    function setDiscountManager(address _discountManager)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        funding.discountManager = _discountManager;

        emit DiscountManagerSet(_discountManager);
    }

    function setSaleRecipient(address _saleRecipient)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(
            _saleRecipient != address(0),
            ""Funding: sale recipient should not be zero""
        );

        saleRecipient = _saleRecipient;
        emit SaleRecipientUpdated(_saleRecipient);
    }

    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        minCitadelPriceInAsset = _minPrice;
        maxCitadelPriceInAsset = _maxPrice;

        emit CitadelPriceBoundsSet(_minPrice, _maxPrice);
    }

    /// ==========================
    /// ===== Oracle actions =====
    /// ==========================

    /// @notice Update citadel price in asset terms from oracle source
    /// @dev Note that the oracle mechanics are abstracted to the oracle address
    function updateCitadelPriceInAsset()
        external
        gacPausable
        onlyRole(KEEPER_ROLE)
    {   
        uint _citadelPriceInAsset;
        bool _valid;

        (_citadelPriceInAsset, _valid) = IMedianOracle(citadelPriceInAssetOracle).getData();

        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");
        require(_valid, ""oracle data must be valid"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }


    /// @dev OUT OF AUDIT SCOPE: This is a test function that will be removed in final code
    /// @notice Update citadel price in asset terms from oracle source
    /// @dev Note that the oracle mechanics are abstracted to the oracle address
    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)
        external
        gacPausable
        onlyCitadelPriceInAssetOracle
    {
        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }
}",3777,469,"[M-02] Funding.deposit() doesn't work if there is no discount set
The Funding contract's `deposit()` function uses the `getAmountOut()` function to determine how many citadel tokens the user should receive for their deposit. But, if no discount is set, the function always returns 0. Now the `deposit()` function tries to deposit 0 tokens for the user through the StakedCitadel contract. But, that function requires the number of tokens to be `!= 0`. The transaction reverts.
",1,,"pragma solidity 0.8.12;

import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./interfaces/badger/IVault.sol"";
import ""./interfaces/erc20/IERC20.sol"";
import ""./lib/GlobalAccessControlManaged.sol"";
import ""./lib/SafeERC20.sol"";
import ""./interfaces/citadel/IMedianOracle.sol"";


contract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {
    using SafeERC20 for IERC20;

    
    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =
        keccak256(""CONTRACT_GOVERNANCE_ROLE"");
    bytes32 public constant POLICY_OPERATIONS_ROLE =
        keccak256(""POLICY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(""TREASURY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_VAULT_ROLE =
        keccak256(""TREASURY_VAULT_ROLE"");
    bytes32 public constant KEEPER_ROLE = keccak256(""KEEPER_ROLE"");

    uint256 public constant MAX_BPS = 10000;

    IERC20 public citadel; 
    IVault public xCitadel; 
    IERC20 public asset; 

    uint256 public citadelPriceInAsset; 
    uint256 public minCitadelPriceInAsset; 
    uint256 public maxCitadelPriceInAsset; 
    bool public citadelPriceFlag; 

    uint256 public assetDecimalsNormalizationValue;

    address public citadelPriceInAssetOracle;
    address public saleRecipient;

    struct FundingParams {
        uint256 discount;
        uint256 minDiscount;
        uint256 maxDiscount;
        address discountManager;
        uint256 assetCumulativeFunded; 
        uint256 assetCap; 
    }

    FundingParams public funding;

    
    
    

    
    event Deposit(
        address indexed buyer,
        uint256 assetIn,
        uint256 citadelOutValue
    );

    event CitadelPriceInAssetUpdated(uint256 citadelPrice);

    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);
    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);

    event SaleRecipientUpdated(address indexed recipient);
    event AssetCapUpdated(uint256 assetCap);

    event Sweep(address indexed token, uint256 amount);
    event ClaimToTreasury(address indexed token, uint256 amount);

    modifier onlyCitadelPriceInAssetOracle() {
        require(
            msg.sender == citadelPriceInAssetOracle,
            ""onlyCitadelPriceInAssetOracle""
        );
        _;
    }

    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);
    event DiscountSet(uint256 discount);
    event DiscountManagerSet(address discountManager);

    
    
    

    
    function initialize(
        address _gac,
        address _citadel,
        address _asset,
        address _xCitadel,
        address _saleRecipient,
        address _citadelPriceInAssetOracle,
        uint256 _assetCap
    ) external initializer {
        require(
            _saleRecipient != address(0),
            ""Funding: 0 sale""
        );
        require(
            _citadelPriceInAssetOracle != address(0),
            ""Funding: 0 oracle""
        );

        __GlobalAccessControlManaged_init(_gac);
        __ReentrancyGuard_init();

        citadel = IERC20(_citadel);
        xCitadel = IVault(_xCitadel);
        asset = IERC20(_asset);
        saleRecipient = _saleRecipient;

        citadelPriceInAssetOracle = _citadelPriceInAssetOracle;

        funding = FundingParams(0, 0, 0, address(0), 0, _assetCap);

        assetDecimalsNormalizationValue = 10**asset.decimals();

        
        minCitadelPriceInAsset = 0;
        maxCitadelPriceInAsset = type(uint256).max;

        
        
        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);
    }

    modifier onlyWhenPriceNotFlagged() {
        require(
            citadelPriceFlag == false,
            ""Funding: citadel price from oracle flagged and pending review""
        );
        _;
    }

    
    
    

    
    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)
        external
        onlyWhenPriceNotFlagged
        gacPausable
        nonReentrant
        returns (uint256 citadelAmount_)
    {
        require(_assetAmountIn > 0, ""_assetAmountIn must not be 0"");
        require(
            funding.assetCumulativeFunded + _assetAmountIn <= funding.assetCap,
            ""asset funding cap exceeded""
        );
        funding.assetCumulativeFunded = funding.assetCumulativeFunded + _assetAmountIn;
        
        citadelAmount_ = getAmountOut(_assetAmountIn);
        require(citadelAmount_ >= _minCitadelOut, ""minCitadelOut"");

        asset.safeTransferFrom(msg.sender, saleRecipient, _assetAmountIn);
        
        
        
        xCitadel.depositFor(msg.sender, citadelAmount_);

        emit Deposit(
            msg.sender,
            _assetAmountIn,
            citadelAmount_
        );
    }

    
    
    

    
    function getAmountOut(uint256 _assetAmountIn)
        public
        view
        returns (uint256 citadelAmount_)
    {
        uint256 citadelAmountWithoutDiscount = _assetAmountIn * citadelPriceInAsset;

        if (funding.discount > 0) {
            citadelAmount_ =
                (citadelAmountWithoutDiscount * MAX_BPS) /
                (MAX_BPS - funding.discount);
        }

        citadelAmount_ = citadelAmount_ / assetDecimalsNormalizationValue;
    }

    
    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {
        uint citadelAmount = getAmountOut(_assetAmountIn);
        xCitadelAmount_ = citadelAmount * 10**citadel.decimals() / xCitadel.getPricePerFullShare();
    }

    
    function getRemainingFundable() external view returns (uint256 limitLeft_) {
        uint256 assetCumulativeFunded = funding.assetCumulativeFunded;
        uint256 assetCap = funding.assetCap;
        if (assetCumulativeFunded < assetCap) {
            limitLeft_ = assetCap - assetCumulativeFunded;
        }
    }

    
    function getFundingParams() external view returns (FundingParams memory) {
        return funding;
    }

    
    function getDiscount() external view returns (uint256) {
        return funding.discount;
    }

    
    
    

    
    function setDiscount(uint256 _discount)
        external
        gacPausable
        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)
    {
        require(_discount >= funding.minDiscount, ""discount < minDiscount"");
        require(_discount <= funding.maxDiscount, ""discount > maxDiscount"");

        funding.discount = _discount;

        emit DiscountSet(_discount);
    }

    function clearCitadelPriceFlag()
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        citadelPriceFlag = false;
    }

    
    function setAssetCap(uint256 _assetCap)
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        require(
            _assetCap > funding.assetCumulativeFunded,
            ""cannot decrease cap below global sum of assets in""
        );
        funding.assetCap = _assetCap;
        emit AssetCapUpdated(_assetCap);
    }

    
    
    

    
    function sweep(address _token)
        external
        gacPausable
        nonReentrant
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount > 0, ""nothing to sweep"");
        require(
            _token != address(asset),
            ""cannot sweep funding asset, use claimAssetToTreasury()""
        );

        emit Sweep(_token, amount);
        IERC20(_token).safeTransfer(saleRecipient, amount);
    }

    
    
    function claimAssetToTreasury()
        external
        gacPausable
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = asset.balanceOf(address(this));
        require(amount > 0, ""nothing to claim"");
        asset.safeTransfer(saleRecipient, amount);

        emit ClaimToTreasury(address(asset), amount);
    }

    
    
    

    
    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(_maxDiscount < MAX_BPS , ""maxDiscount >= MAX_BPS"");
        funding.minDiscount = _minDiscount;
        funding.maxDiscount = _maxDiscount;

        emit DiscountLimitsSet(_minDiscount, _maxDiscount);
    }

    
    function setDiscountManager(address _discountManager)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        funding.discountManager = _discountManager;

        emit DiscountManagerSet(_discountManager);
    }

    function setSaleRecipient(address _saleRecipient)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(
            _saleRecipient != address(0),
            ""Funding: sale recipient should not be zero""
        );

        saleRecipient = _saleRecipient;
        emit SaleRecipientUpdated(_saleRecipient);
    }

    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        minCitadelPriceInAsset = _minPrice;
        maxCitadelPriceInAsset = _maxPrice;

        emit CitadelPriceBoundsSet(_minPrice, _maxPrice);
    }

    
    
    

    
    
    function updateCitadelPriceInAsset()
        external
        gacPausable
        onlyRole(KEEPER_ROLE)
    {   
        uint _citadelPriceInAsset;
        bool _valid;

        (_citadelPriceInAsset, _valid) = IMedianOracle(citadelPriceInAssetOracle).getData();

        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");
        require(_valid, ""oracle data must be valid"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }


    
    
    
    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)
        external
        gacPausable
        onlyCitadelPriceInAssetOracle
    {
        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }
}",2553,0,1,"{
  ""task_list"": [
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Check for reentrancy vulnerabilities in the `deposit` function despite the `nonReentrant` modifier."",
        ""Verify that all arithmetic operations are safe from overflow/underflow, especially in `getAmountOut` and `getStakedCitadelAmountOut`."",
        ""Ensure that external calls (e.g., `safeTransferFrom`, `depositFor`) are handled securely and cannot be exploited."",
        ""Review the `sweep` function to ensure it cannot be used to drain unintended tokens.""
      ]
    },
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Verify that role-based access controls (e.g., `onlyRole`, `onlyCitadelPriceInAssetOracle`) are correctly implemented and enforced."",
        ""Ensure that sensitive functions like `setDiscount`, `setAssetCap`, and `updateCitadelPriceInAsset` are properly restricted to authorized roles."",
        ""Check that the `initialize` function can only be called once and is not susceptible to re-initialization attacks.""
      ]
    },
    {
      ""Area"": ""Oracle Integrity"",
      ""Tasks"": [
        ""Validate that the `IMedianOracle` interface is correctly implemented and that the oracle data is trustworthy."",
        ""Ensure that the `citadelPriceFlag` mechanism effectively prevents out-of-bound price updates."",
        ""Verify that the oracle address (`citadelPriceInAssetOracle`) cannot be manipulated to provide malicious data.""
      ]
    },
    {
      ""Area"": ""Complex Logic/Algorithms"",
      ""Tasks"": [
        ""Review the `getAmountOut` function to ensure the discount calculation is accurate and cannot be exploited."",
        ""Verify that the `assetDecimalsNormalizationValue` is correctly calculated and applied in all relevant functions."",
        ""Ensure that the `getStakedCitadelAmountOut` function correctly handles the conversion between `citadel` and `xCitadel`.""
      ]
    },
    {
      ""Area"": ""Gas Optimization"",
      ""Tasks"": [
        ""Identify and optimize gas-intensive operations, such as repeated state variable reads in `deposit` and `getAmountOut`."",
        ""Review the use of `SafeERC20` to ensure it does not introduce unnecessary gas overhead."",
        ""Check for opportunities to reduce gas costs in the `updateCitadelPriceInAsset` function.""
      ]
    },
    {
      ""Area"": ""Compliance"",
      ""Tasks"": [
        ""Ensure that the contract adheres to ERC-20 standards for token transfers and approvals."",
        ""Verify that the contract follows best practices for upgradeable contracts (e.g., `initializer` modifier).""
      ]
    },
    {
      ""Area"": ""Governance & Voting Security"",
      ""Tasks"": [
        ""Review the role assignment and management mechanisms to ensure they cannot be abused."",
        ""Verify that governance functions (e.g., `setDiscountLimits`, `setDiscountManager`) are secure and cannot be exploited.""
      ]
    },
    {
      ""Area"": ""Fallback/Emergency Stops"",
      ""Tasks"": [
        ""Ensure that the `gacPausable` modifier effectively halts critical functions in case of emergencies."",
        ""Verify that there are mechanisms to recover funds or halt operations in case of a security breach.""
      ]
    },
    {
      ""Area"": ""Tokenomics Risks"",
      ""Tasks"": [
        ""Review the `assetCap` mechanism to ensure it cannot be manipulated to disrupt funding operations."",
        ""Verify that the discount mechanism does not create unintended economic incentives or risks.""
      ]
    },
    {
      ""Area"": ""Transaction Ordering & Front-running"",
      ""Tasks"": [
        ""Check for potential front-running vulnerabilities in the `deposit` function, especially in the calculation of `citadelAmount_`."",
        ""Ensure that the `minCitadelOut` parameter effectively protects users from unfavorable price changes.""
      ]
    },
    {
      ""Area"": ""Exit Scams/Rug Pulls"",
      ""Tasks"": [
        ""Verify that the `saleRecipient` address cannot be maliciously changed to drain funds."",
        ""Ensure that the `claimAssetToTreasury` function cannot be abused to transfer funds to unauthorized addresses.""
      ]
    }
  ]
}","{
  ""ReviewingTheCode"": ""The contract 'Funding' is designed to manage funding operations, including depositing assets, calculating output amounts, and handling price updates for a token called 'citadel'. It integrates with external oracles for price updates and uses role-based access control to manage permissions."",
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""Funding"",
    ""Purpose"": ""To manage funding operations, including asset deposits, token price updates, and role-based access control for various operations."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [""GlobalAccessControlManaged"", ""ReentrancyGuardUpgradeable""],
      ""Imports"": [
        ""SafeERC20Upgradeable"",
        ""ReentrancyGuardUpgradeable"",
        ""IVault"",
        ""IERC20"",
        ""GlobalAccessControlManaged"",
        ""SafeERC20"",
        ""IMedianOracle""
      ]
    },
    ""StateVariables"": [
      {
        ""Name"": ""citadel"",
        ""Type"": ""IERC20"",
        ""Purpose"": ""The token being funded.""
      },
      {
        ""Name"": ""xCitadel"",
        ""Type"": ""IVault"",
        ""Purpose"": ""The vault for staking citadel tokens.""
      },
      {
        ""Name"": ""asset"",
        ""Type"": ""IERC20"",
        ""Purpose"": ""The asset used for funding.""
      },
      {
        ""Name"": ""citadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Current price of citadel in terms of the asset.""
      },
      {
        ""Name"": ""minCitadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Minimum acceptable price for citadel.""
      },
      {
        ""Name"": ""maxCitadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Maximum acceptable price for citadel.""
      },
      {
        ""Name"": ""citadelPriceFlag"",
        ""Type"": ""bool"",
        ""Purpose"": ""Flag indicating if the citadel price is out of bounds.""
      },
      {
        ""Name"": ""assetDecimalsNormalizationValue"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Normalization factor for asset decimals.""
      },
      {
        ""Name"": ""citadelPriceInAssetOracle"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the oracle providing citadel price data.""
      },
      {
        ""Name"": ""saleRecipient"",
        ""Type"": ""address"",
        ""Purpose"": ""Recipient address for the sale proceeds.""
      },
      {
        ""Name"": ""funding"",
        ""Type"": ""FundingParams"",
        ""Purpose"": ""Parameters related to funding operations.""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""initialize"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Initializes the contract with necessary parameters."",
        ""Parameters"": [""_gac"", ""_citadel"", ""_asset"", ""_xCitadel"", ""_saleRecipient"", ""_citadelPriceInAssetOracle"", ""_assetCap""],
        ""Returns"": []
      },
      {
        ""Name"": ""deposit"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Allows users to deposit assets and receive citadel tokens."",
        ""Parameters"": [""_assetAmountIn"", ""_minCitadelOut""],
        ""Returns"": [""citadelAmount_""]
      },
      {
        ""Name"": ""getAmountOut"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Calculates the amount of citadel tokens to be received for a given asset amount."",
        ""Parameters"": [""_assetAmountIn""],
        ""Returns"": [""citadelAmount_""]
      },
      {
        ""Name"": ""getStakedCitadelAmountOut"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Calculates the amount of staked citadel tokens to be received for a given asset amount."",
        ""Parameters"": [""_assetAmountIn""],
        ""Returns"": [""xCitadelAmount_""]
      },
      {
        ""Name"": ""getRemainingFundable"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Returns the remaining amount of assets that can be funded."",
        ""Parameters"": [],
        ""Returns"": [""limitLeft_""]
      },
      {
        ""Name"": ""getFundingParams"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Returns the current funding parameters."",
        ""Parameters"": [],
        ""Returns"": [""FundingParams""]
      },
      {
        ""Name"": ""getDiscount"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Returns the current discount rate."",
        ""Parameters"": [],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""setDiscount"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the discount rate for funding."",
        ""Parameters"": [""_discount""],
        ""Returns"": []
      },
      {
        ""Name"": ""clearCitadelPriceFlag"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Clears the citadel price flag."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""setAssetCap"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the asset cap for funding."",
        ""Parameters"": [""_assetCap""],
        ""Returns"": []
      },
      {
        ""Name"": ""sweep"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Transfers tokens from the contract to the sale recipient."",
        ""Parameters"": [""_token""],
        ""Returns"": []
      },
      {
        ""Name"": ""claimAssetToTreasury"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Transfers the asset from the contract to the sale recipient."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""setDiscountLimits"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the minimum and maximum discount rates."",
        ""Parameters"": [""_minDiscount"", ""_maxDiscount""],
        ""Returns"": []
      },
      {
        ""Name"": ""setDiscountManager"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the discount manager address."",
        ""Parameters"": [""_discountManager""],
        ""Returns"": []
      },
      {
        ""Name"": ""setSaleRecipient"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the sale recipient address."",
        ""Parameters"": [""_saleRecipient""],
        ""Returns"": []
      },
      {
        ""Name"": ""setCitadelAssetPriceBounds"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the minimum and maximum price bounds for citadel."",
        ""Parameters"": [""_minPrice"", ""_maxPrice""],
        ""Returns"": []
      },
      {
        ""Name"": ""updateCitadelPriceInAsset"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Updates the citadel price from the oracle."",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""updateCitadelPriceInAsset"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Updates the citadel price directly from the oracle address."",
        ""Parameters"": [""_citadelPriceInAsset""],
        ""Returns"": []
      }
    ]
  },
  ""ExternalInteractions"": [
    ""IVault (xCitadel)"",
    ""IERC20 (citadel, asset)"",
    ""IMedianOracle (citadelPriceInAssetOracle)""
  ],
  ""SpecialMechanisms"": [
    ""Role-based access control using GlobalAccessControlManaged."",
    ""Reentrancy protection using ReentrancyGuardUpgradeable."",
    ""Price bounds and flagging mechanism for citadel price updates.""
  ],
  ""Questions"": [
    ""How is the assetDecimalsNormalizationValue calculated and used in practice?"",
    ""What is the specific role of the 'discountManager' and how is it managed?"",
    ""Are there any additional safety checks needed for the oracle price updates?""
  ]
}","{
  ""Findings"": [
    {
      ""Issue"": ""Unrestricted Approval for xCitadel Vault"",
      ""Severity"": ""High"",
      ""Description"": ""The `initialize` function grants unlimited approval to the xCitadel vault for the Citadel token. This could lead to a potential risk if the xCitadel vault is compromised or behaves maliciously, as it could drain all Citadel tokens from the contract."",
      ""Impact"": ""Potential loss of all Citadel tokens held by the contract."",
      ""Location"": ""initialize function, line: 88, 98""
    },
    {
      ""Issue"": ""Reentrancy Risk in `deposit` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `deposit` function transfers assets to the sale recipient before depositing Citadel tokens into the xCitadel vault. Although the function is marked as `nonReentrant`, the order of operations could still be manipulated in a way that affects the contract's state. Additionally, the external call to `xCitadel.depositFor` could be exploited if the xCitadel contract is malicious or compromised."",
      ""Impact"": ""Potential manipulation of the contract's state leading to financial losses or loss of funds."",
      ""Location"": ""deposit function, line: 102, 126, 141""
    },
    {
      ""Issue"": ""Potential Division by Zero in `getAmountOut` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `getAmountOut` function divides by `assetDecimalsNormalizationValue`, which is derived from `asset.decimals()`. If `asset.decimals()` returns 0, this could lead to a division by zero error. Additionally, the function may incorrectly apply the discount or suffer from precision loss."",
      ""Impact"": ""Potential division by zero error leading to transaction failure or incorrect calculation of Citadel amounts."",
      ""Location"": ""getAmountOut function, line: 130, 159, 165""
    },
    {
      ""Issue"": ""Incorrect Calculation in `getAmountOut` Function"",
      ""Severity"": ""High"",
      ""Description"": ""The `getAmountOut` function calculates the amount of Citadel tokens a user should receive based on the input asset amount. However, the calculation does not correctly apply the discount or may suffer from precision loss due to incorrect normalization."",
      ""Impact"": ""Users may receive incorrect amounts of Citadel tokens, leading to financial losses or unfair advantages."",
      ""Location"": ""getAmountOut function""
    },
    {
      ""Issue"": ""Lack of Input Validation in `updateCitadelPriceInAsset`"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `updateCitadelPriceInAsset` function does not validate the input `_citadelPriceInAsset` beyond checking if it is greater than zero. It also does not validate against `minCitadelPriceInAsset` and `maxCitadelPriceInAsset` bounds or ensure the oracle's address is valid."",
      ""Impact"": ""Incorrect pricing data could lead to financial losses or exploitation."",
      ""Location"": ""updateCitadelPriceInAsset function, line: 300, 306, 316""
    },
    {
      ""Issue"": ""Insufficient Access Control in `setDiscount`"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `setDiscount` function allows the discount to be set by either the `POLICY_OPERATIONS_ROLE` or the discount manager. It does not validate if the new discount is within the allowed range or if the discount manager's address is valid."",
      ""Impact"": ""Unauthorized changes to the discount could lead to financial losses or exploitation."",
      ""Location"": ""setDiscount function, line: 184, 206""
    },
    {
      ""Issue"": ""Potential Integer Overflow in `getAmountOut` Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `getAmountOut` function performs multiplication and division operations which could potentially lead to integer overflow if the inputs are large enough. Although Solidity 0.8.x has built-in overflow checks, it's still a good practice to ensure that such scenarios are handled gracefully."",
      ""Impact"": ""Potential incorrect calculation of Citadel amounts, leading to financial discrepancies."",
      ""Location"": ""getAmountOut function, line: 130, 165""
    },
    {
      ""Issue"": ""Unrestricted Access to `sweep` Function"",
      ""Severity"": ""Medium"",
      ""Description"": ""The `sweep` function allows the `TREASURY_OPERATIONS_ROLE` to transfer any token (except the funding asset) to the `saleRecipient`. This could be exploited if the role is compromised, allowing an attacker to drain tokens from the contract."",
      ""Impact"": ""Potential loss of tokens if the `TREASURY_OPERATIONS_ROLE` is compromised or if an invalid token address is provided."",
      ""Location"": ""sweep function, line: 210""
    },
    {
      ""Issue"": ""Lack of Event Emission in Critical Functions"",
      ""Severity"": ""Low"",
      ""Description"": ""Several critical functions, such as `initialize`, `clearCitadelPriceFlag`, `setAssetCap`, `setDiscount`, and `setDiscountLimits`, do not emit events after modifying state variables. This reduces transparency and makes it difficult to track changes."",
      ""Impact"": ""Reduced auditability and transparency, making it harder to detect unauthorized changes."",
      ""Location"": ""initialize, clearCitadelPriceFlag, setAssetCap, setDiscount, setDiscountLimits functions""
    },
    {
      ""Issue"": ""Inconsistent Use of SafeERC20"",
      ""Severity"": ""Low"",
      ""Description"": ""The contract uses both `SafeERC20Upgradeable` and `SafeERC20` libraries, which could lead to inconsistencies in how token transfers are handled."",
      ""Impact"": ""Potential inconsistencies in token transfer handling, leading to unexpected behavior."",
      ""Location"": ""Imports and usage throughout the contract""
    },
    {
      ""Issue"": ""Potential Front-Running in `updateCitadelPriceInAsset` Function"",
      ""Severity"": ""Low"",
      ""Description"": ""The `updateCitadelPriceInAsset` function updates the Citadel price based on input from the oracle without any protection against front-running."",
      ""Impact"": ""Front-running could allow an attacker to manipulate the price of Citadel for their benefit."",
      ""Location"": ""updateCitadelPriceInAsset function""
    }
  ],
  ""IssueNumber"": 42,
  ""OutputList"": 11
}",486.9842069149017,75763.0,24.0,"### **[M-02] Funding.deposit() doesn't work if there is no discount set**

**Report Description**:
The `deposit()` function in the `Funding` contract relies on the `getAmountOut()` function to determine the number of Citadel tokens a user should receive for their deposit. However, if no discount is set, `getAmountOut()` always returns 0. Consequently, the `deposit()` function attempts to deposit 0 tokens into the `StakedCitadel` contract, which requires the number of tokens to be `!= 0`. This causes the transaction to revert, rendering the `deposit()` function non-functional when no discount is set.

**Match in Response List**:
No match found.

**Validation**:
**Incorrect**. The response list does not address the specific issue of the `deposit()` function failing when no discount is set. While there are responses related to the `getAmountOut()` function (e.g., ""Potential Division by Zero in `getAmountOut` Function"" and ""Incorrect Calculation in `getAmountOut` Function""), none of them specifically address the scenario where no discount is set, leading to a return value of 0 and a subsequent transaction revert. This issue is unique and not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[M-02] Funding.deposit() doesn't work if there is no discount set**

---

The response list does not adequately address the issue described in the report. The specific scenario of the `deposit()` function failing due to a lack of discount is entirely missed, highlighting a gap in the coverage of the response list.","```
None.
```",0.0
