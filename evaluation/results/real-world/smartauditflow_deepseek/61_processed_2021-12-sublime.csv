nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,Comparison,matchList,MAP
CreditLine.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '../interfaces/IPriceOracle.sol';
import '../interfaces/IYield.sol';
import '../interfaces/ISavingsAccount.sol';
import '../SavingsAccount/SavingsAccountUtil.sol';
import '../interfaces/IStrategyRegistry.sol';

/**
 * @title Credit Line contract with Methods related to credit Line
 * @notice Implements the functions related to Credit Line
 * @author Sublime
 **/

contract CreditLine is ReentrancyGuard, OwnableUpgradeable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    enum CreditLineStatus {
        NOT_CREATED,
        REQUESTED,
        ACTIVE,
        CLOSED,
        CANCELLED,
        LIQUIDATED
    }

    /**
     * @notice counter that tracks the number of credit lines created
     * @dev used to create unique identifier for credit lines
     **/
    uint256 public creditLineCounter;

    uint256 constant YEAR_IN_SECONDS = 365 days;

    struct CreditLineVariables {
        CreditLineStatus status;
        uint256 principal;
        uint256 totalInterestRepaid;
        uint256 lastPrincipalUpdateTime;
        uint256 interestAccruedTillLastPrincipalUpdate;
    }

    struct CreditLineConstants {
        address lender;
        address borrower;
        uint256 borrowLimit;
        uint256 idealCollateralRatio;
        uint256 borrowRate;
        address borrowAsset;
        address collateralAsset;
        bool autoLiquidation;
        bool requestByLender;
    }
    /**
     * @notice stores the collateral shares in a credit line per strategy
     * @dev creditLineId => Strategy => collateralShares
     **/
    mapping(uint256 => mapping(address => uint256)) public collateralShareInStrategy;

    /**
     * @notice stores the variables to maintain a credit line
     **/
    mapping(uint256 => CreditLineVariables) public creditLineVariables;

    /**
     * @notice stores the constants related to a credit line
     **/
    mapping(uint256 => CreditLineConstants) public creditLineConstants;

    /**
     * @notice stores the address of savings account contract
     **/
    address public savingsAccount;

    /**
     * @notice stores the address of price oracle contract
     **/
    address public priceOracle;

    /**
     * @notice stores the address of strategy registry contract
     **/
    address public strategyRegistry;

    /**
     * @notice stores the address of default strategy
     **/
    address public defaultStrategy;

    /**
     * @notice stores the fraction of borrowed amount charged as fee by protocol
     * @dev it is multiplied by 10**30
     **/
    uint256 public protocolFeeFraction;

    /**
     * @notice address where protocol fee is collected
     **/
    address public protocolFeeCollector;

    /**
     * @notice stores the fraction of amount liquidated given as reward to liquidator
     * @dev it is multiplied by 10**30
     **/
    uint256 public liquidatorRewardFraction;
    /**
     * @dev checks if Credit Line exists
     * @param _id identifier for the credit line
     **/
    modifier ifCreditLineExists(uint256 _id) {
        require(creditLineVariables[_id].status != CreditLineStatus.NOT_CREATED, 'Credit line does not exist');
        _;
    }

    /**
     * @dev checks if called by credit Line Borrower
     * @param _id creditLine identifier
     **/
    modifier onlyCreditLineBorrower(uint256 _id) {
        require(creditLineConstants[_id].borrower == msg.sender, 'Only credit line Borrower can access');
        _;
    }

    /**
     * @dev checks if called by credit Line Lender
     * @param _id creditLine identifier
     **/
    modifier onlyCreditLineLender(uint256 _id) {
        require(creditLineConstants[_id].lender == msg.sender, 'Only credit line Lender can access');
        _;
    }

    /**
     * @notice emitted when a collateral is deposited into credit line
     * @param id id of the credit line
     * @param amount amount of collateral deposited
     * @param strategy address of the strategy into which collateral is deposited
     */
    event CollateralDeposited(uint256 indexed id, uint256 amount, address indexed strategy);

    /**
     * @notice emitted when collateral is withdrawn from credit line
     * @param id id of the credit line
     * @param amount amount of collateral withdrawn
     */
    event CollateralWithdrawn(uint256 indexed id, uint256 amount);

    /**
     * @notice emitted when a request for new credit line is placed
     * @param id id of the credit line for which request was made
     * @param lender address of the lender for credit line
     * @param borrower address of the borrower for credit line
     */
    event CreditLineRequested(uint256 indexed id, address indexed lender, address indexed borrower);

    /**
     * @notice emitted when a credit line is liquidated
     * @param id id of the credit line which is liquidated
     * @param liquidator address of the liquidator
     */
    event CreditLineLiquidated(uint256 indexed id, address indexed liquidator);

    /**
     * @notice emitted when tokens are borrowed from credit line
     * @param id id of the credit line from which tokens are borrowed
     * @param borrowAmount amount of tokens borrowed
     */
    event BorrowedFromCreditLine(uint256 indexed id, uint256 borrowAmount);

    /**
     * @notice emitted when credit line is accepted
     * @param id id of the credit line that was accepted
     */
    event CreditLineAccepted(uint256 indexed id);

    /**
     * @notice emitted when credit line is completely repaid and reset
     * @param id id of the credit line that is reset
     */
    event CreditLineReset(uint256 indexed id);

    /**
     * @notice emitted when the credit line is partially repaid
     * @param id id of the credit line
     * @param repayAmount amount repaid
     */
    event PartialCreditLineRepaid(uint256 indexed id, uint256 repayAmount);

    /**
     * @notice emitted when the credit line is completely repaid
     * @param id id of the credit line
     * @param repayAmount amount repaid
     */
    event CompleteCreditLineRepaid(uint256 indexed id, uint256 repayAmount);

    /**
     * @notice emitted when the credit line is closed by one of the parties of credit line
     * @param id id of the credit line
     */
    event CreditLineClosed(uint256 indexed id);

    /**
     * @notice emitted when default strategy for the credit line is updated
     * @param defaultStrategy address of the strategy contract that is used as default by credit lines
     */
    event DefaultStrategyUpdated(address indexed defaultStrategy);

    /**
     * @notice emitted when the price oracle is updated
     * @param priceOracle address of the updated price oracle
     */
    event PriceOracleUpdated(address indexed priceOracle);

    /**
     * @notice emitted when the savings account address is updated
     * @param savingsAccount address of the updated savingsAccount
     */
    event SavingsAccountUpdated(address indexed savingsAccount);

    /**
     * @notice emitted when strategy registry address is updated
     * @param strategyRegistry address of the updated strategy registry
     */
    event StrategyRegistryUpdated(address indexed strategyRegistry);

    /**
     * @notice emitted when fee that protocol charges for credit line is updated
     * @param updatedProtocolFee updated value of protocolFeeFraction
     */
    event ProtocolFeeFractionUpdated(uint256 updatedProtocolFee);

    /**
     * @notice emitted when address which receives fee that protocol changes for pools is updated
     * @param updatedProtocolFeeCollector updated value of protocolFeeCollector
     */
    event ProtocolFeeCollectorUpdated(address indexed updatedProtocolFeeCollector);

    /**
     * @notice emitted when liquidatorRewardFraction is updated
     * @param liquidatorRewardFraction fraction of the liquidated amount given as reward to the liquidator
     */
    event LiquidationRewardFractionUpdated(uint256 liquidatorRewardFraction);

    /**
     * @notice used to initialize the contract
     * @dev can only be called once during the life cycle of the contract
     * @param _defaultStrategy default strategy used in credit lines
     * @param _priceOracle address of the priceOracle
     * @param _savingsAccount address of  the savings account contract
     * @param _strategyRegistry address of the strategy registry contract
     * @param _owner address of owner who can change global variables
     * @param _protocolFeeFraction fraction of the fee charged by protocol
     * @param _protocolFeeCollector address to which protocol fee is charged to
     * @param _liquidatorRewardFraction fraction of the liquidated amount given as reward to the liquidator
     */
    function initialize(
        address _defaultStrategy,
        address _priceOracle,
        address _savingsAccount,
        address _strategyRegistry,
        address _owner,
        uint256 _protocolFeeFraction,
        address _protocolFeeCollector,
        uint256 _liquidatorRewardFraction
    ) external initializer {
        OwnableUpgradeable.__Ownable_init();
        OwnableUpgradeable.transferOwnership(_owner);

        _updateDefaultStrategy(_defaultStrategy);
        _updatePriceOracle(_priceOracle);
        _updateSavingsAccount(_savingsAccount);
        _updateStrategyRegistry(_strategyRegistry);
        _updateProtocolFeeFraction(_protocolFeeFraction);
        _updateProtocolFeeCollector(_protocolFeeCollector);
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
    }

    /**
     * @notice used to update the default strategy
     * @dev can only be updated by owner
     * @param _defaultStrategy address of the updated default strategy
     */
    function updateDefaultStrategy(address _defaultStrategy) external onlyOwner {
        _updateDefaultStrategy(_defaultStrategy);
    }

    function _updateDefaultStrategy(address _defaultStrategy) internal {
        defaultStrategy = _defaultStrategy;
        emit DefaultStrategyUpdated(_defaultStrategy);
    }

    /**
     * @notice used to update the price oracle
     * @dev can only be updated by owner
     * @param _priceOracle address of the updated price oracle
     */
    function updatePriceOracle(address _priceOracle) external onlyOwner {
        _updatePriceOracle(_priceOracle);
    }

    function _updatePriceOracle(address _priceOracle) internal {
        priceOracle = _priceOracle;
        emit PriceOracleUpdated(_priceOracle);
    }

    /**
     * @notice used to update the savings account address
     * @dev can only be updated by owner
     * @param _savingsAccount address of the updated savings account
     */
    function updateSavingsAccount(address _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address _savingsAccount) internal {
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    /**
     * @notice used to update the protocol fee fraction
     * @dev can only be updated by owner
     * @param _protocolFee fraction of the borrower amount collected as protocol fee
     */
    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {
        _updateProtocolFeeFraction(_protocolFee);
    }

    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {
        protocolFeeFraction = _protocolFee;
        emit ProtocolFeeFractionUpdated(_protocolFee);
    }

    /**
     * @notice used to update the protocol fee collector
     * @dev can only be updated by owner
     * @param _protocolFeeCollector address in which protocol fee is collected
     */
    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {
        _updateProtocolFeeCollector(_protocolFeeCollector);
    }

    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {
        require(_protocolFeeCollector != address(0), 'cant be 0 address');
        protocolFeeCollector = _protocolFeeCollector;
        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);
    }

    /**
     * @notice used to update the strategy registry address
     * @dev can only be updated by owner
     * @param _strategyRegistry address of the updated strategy registry
     */
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        require(_strategyRegistry != address(0), 'CL::I zero address');
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    /**
     * @notice used to update the liquidatorRewardFraction
     * @dev can only be updated by owner
     * @param _rewardFraction fraction of liquidated amount given to liquidator as reward
     */
    function updateLiquidatorRewardFraction(uint256 _rewardFraction) external onlyOwner {
        _updateLiquidatorRewardFraction(_rewardFraction);
    }

    function _updateLiquidatorRewardFraction(uint256 _rewardFraction) internal {
        require(_rewardFraction <= 10**30, 'Fraction has to be less than 1');
        liquidatorRewardFraction = _rewardFraction;
        emit LiquidationRewardFractionUpdated(_rewardFraction);
    }

    /**
     * @dev Used to Calculate Interest Per second on given principal and Interest rate
     * @param _principal principal Amount for which interest has to be calculated.
     * @param _borrowRate It is the Interest Rate at which Credit Line is approved
     * @return interest per second for the given parameters
     */
    function calculateInterest(
        uint256 _principal,
        uint256 _borrowRate,
        uint256 _timeElapsed
    ) public pure returns (uint256) {
        uint256 _interest = _principal.mul(_borrowRate).mul(_timeElapsed).div(10**30).div(YEAR_IN_SECONDS);

        return _interest;
    }

    /**
     * @dev Used to calculate interest accrued since last repayment
     * @param _id identifier for the credit line
     * @return interest accrued over current borrowed amount since last repayment
     */

    function calculateInterestAccrued(uint256 _id) public view returns (uint256) {
        uint256 _lastPrincipalUpdateTime = creditLineVariables[_id].lastPrincipalUpdateTime;
        if (_lastPrincipalUpdateTime == 0) return 0;
        uint256 _timeElapsed = (block.timestamp).sub(_lastPrincipalUpdateTime);
        uint256 _interestAccrued = calculateInterest(creditLineVariables[_id].principal, creditLineConstants[_id].borrowRate, _timeElapsed);
        return _interestAccrued;
    }

    /**
     * @dev Used to calculate current debt of borrower against a credit line.
     * @param _id identifier for the credit line
     * @return current debt of borrower
     */
    function calculateCurrentDebt(uint256 _id) public view returns (uint256) {
        uint256 _interestAccrued = calculateInterestAccrued(_id);
        uint256 _currentDebt = (creditLineVariables[_id].principal)
            .add(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate)
            .add(_interestAccrued)
            .sub(creditLineVariables[_id].totalInterestRepaid);
        return _currentDebt;
    }

    /**
     * @notice used to calculate amount that can be borrowed by the borrower
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view.
            borrowableAmount changes per block as interest changes per block.
     * @param _id identifier for the credit line
     * @return amount that can be borrowed from the credit line
     */
    function calculateBorrowableAmount(uint256 _id) public returns (uint256) {
        CreditLineStatus _status = creditLineVariables[_id].status;
        require(
            _status == CreditLineStatus.ACTIVE || _status == CreditLineStatus.REQUESTED,
            'CreditLine: Cannot only if credit line ACTIVE or REQUESTED'
        );
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 _totalCollateralToken = calculateTotalCollateralTokens(_id);

        uint256 _currentDebt = calculateCurrentDebt(_id);

        uint256 _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(creditLineConstants[_id].idealCollateralRatio).mul(10**30).div(
            10**_decimals
        );

        uint256 _borrowLimit = creditLineConstants[_id].borrowLimit;

        if (_maxPossible > _borrowLimit) {
            _maxPossible = _borrowLimit;
        }
        if (_maxPossible > _currentDebt) {
            return _maxPossible.sub(_currentDebt);
        }
        return 0;
    }

    function updateinterestAccruedTillLastPrincipalUpdate(uint256 _id) internal {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');

        uint256 _interestAccrued = calculateInterestAccrued(_id);
        uint256 _newInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(_interestAccrued);
        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued;
    }

    function _depositCollateralFromSavingsAccount(
        uint256 _id,
        uint256 _amount,
        address _sender
    ) internal {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;

        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            address _strategy = _strategyList[_index];
            uint256 _liquidityShares = _savingsAccount.balanceInShares(_sender, _collateralAsset, _strategy);
            if (_liquidityShares == 0 || _strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);

            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) >= _amount) {
                _tokensToTransfer = (_amount.sub(_activeAmount));
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            _savingsAccount.transferFrom(_tokensToTransfer, _collateralAsset, _strategy, _sender, address(this));

            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(
                _liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy)
            );

            if (_amount == _activeAmount) {
                return;
            }
        }
        revert('CreditLine::_depositCollateralFromSavingsAccount - Insufficient balance');
    }

    /**
     * @notice used to request a credit line either by borrower or lender
     * @param _requestTo Address to which creditLine is requested, 
                        if borrower creates request then lender address and 
                        if lender creates then borrower address
     * @param _borrowLimit maximum borrow amount in a credit line
     * @param _borrowRate Interest Rate at which credit Line is requested
     * @param _autoLiquidation if true, anyone can liquidate loan, otherwise only lender
     * @param _collateralRatio ratio of the collateral to the debt below which credit line can be liquidated
     * @param _borrowAsset address of the token to be borrowed
     * @param _collateralAsset address of the token provided as collateral
     * @param _requestAsLender if true, lender is placing request, otherwise borrower
     * @return identifier for the credit line
     */

    function request(
        address _requestTo,
        uint256 _borrowLimit,
        uint256 _borrowRate,
        bool _autoLiquidation,
        uint256 _collateralRatio,
        address _borrowAsset,
        address _collateralAsset,
        bool _requestAsLender
    ) external returns (uint256) {
        require(_borrowAsset != _collateralAsset, 'R: cant borrow lent token');
        require(IPriceOracle(priceOracle).doesFeedExist(_borrowAsset, _collateralAsset), 'R: No price feed');

        address _lender = _requestTo;
        address _borrower = msg.sender;
        if (_requestAsLender) {
            _lender = msg.sender;
            _borrower = _requestTo;
        }

        uint256 _id = _createRequest(
            _lender,
            _borrower,
            _borrowLimit,
            _borrowRate,
            _autoLiquidation,
            _collateralRatio,
            _borrowAsset,
            _collateralAsset,
            _requestAsLender
        );

        emit CreditLineRequested(_id, _lender, _borrower);
        return _id;
    }

    function _createRequest(
        address _lender,
        address _borrower,
        uint256 _borrowLimit,
        uint256 _borrowRate,
        bool _autoLiquidation,
        uint256 _collateralRatio,
        address _borrowAsset,
        address _collateralAsset,
        bool _requestByLender
    ) internal returns (uint256) {
        require(_lender != _borrower, 'Lender and Borrower cannot be same addresses');
        uint256 _id = creditLineCounter + 1;
        creditLineCounter = _id;
        creditLineVariables[_id].status = CreditLineStatus.REQUESTED;
        creditLineConstants[_id].borrower = _borrower;
        creditLineConstants[_id].lender = _lender;
        creditLineConstants[_id].borrowLimit = _borrowLimit;
        creditLineConstants[_id].autoLiquidation = _autoLiquidation;
        creditLineConstants[_id].idealCollateralRatio = _collateralRatio;
        creditLineConstants[_id].borrowRate = _borrowRate;
        creditLineConstants[_id].borrowAsset = _borrowAsset;
        creditLineConstants[_id].collateralAsset = _collateralAsset;
        creditLineConstants[_id].requestByLender = _requestByLender;
        return _id;
    }

    /**
     * @notice used to accept a credit line
     * @dev if borrower places request, lender can accept and vice versa
     * @param _id identifier for the credit line
     */
    function accept(uint256 _id) external {
        require(
            creditLineVariables[_id].status == CreditLineStatus.REQUESTED,
            'CreditLine::acceptCreditLineLender - CreditLine is already accepted'
        );
        bool _requestByLender = creditLineConstants[_id].requestByLender;
        require(
            (msg.sender == creditLineConstants[_id].borrower && _requestByLender) ||
                (msg.sender == creditLineConstants[_id].lender && !_requestByLender),
            ""Only Borrower or Lender who hasn't requested can accept""
        );
        creditLineVariables[_id].status = CreditLineStatus.ACTIVE;
        emit CreditLineAccepted(_id);
    }

    /**
     * @notice used to deposit collateral into the credit line
     * @dev collateral tokens have to be approved in savingsAccount or token contract(unless ether).
            If transferred from savings account, the tokens are transferred from strategies in the 
            order prespecified in strategy registry
     * @param _id identifier for the credit line
     * @param _amount amount of collateral being deposited
     * @param _strategy strategy to which collateral is to be deposited in case transfer is not from savings account
     * @param _fromSavingsAccount if true, tokens are transferred from savingsAccount 
                                otherwise direct from collateral token contract
     */
    function depositCollateral(
        uint256 _id,
        uint256 _amount,
        address _strategy,
        bool _fromSavingsAccount
    ) external payable nonReentrant ifCreditLineExists(_id) {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine not active');
        _depositCollateral(_id, _amount, _strategy, _fromSavingsAccount);
        emit CollateralDeposited(_id, _amount, _strategy);
    }

    function _depositCollateral(
        uint256 _id,
        uint256 _amount,
        address _strategy,
        bool _fromSavingsAccount
    ) internal {
        require(creditLineConstants[_id].lender != msg.sender, 'lender cant deposit collateral');
        if (_fromSavingsAccount) {
            _depositCollateralFromSavingsAccount(_id, _amount, msg.sender);
        } else {
            address _collateralAsset = creditLineConstants[_id].collateralAsset;
            ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
            if (_collateralAsset == address(0)) {
                require(msg.value == _amount, ""CreditLine::_depositCollateral - value to transfer doesn't match argument"");
            } else {
                IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);
                IERC20(_collateralAsset).approve(_strategy, _amount);
            }
            uint256 _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount, _collateralAsset, _strategy, address(this));
            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_sharesReceived);
        }
    }

    function _withdrawBorrowAmount(
        address _asset,
        uint256 _amountInTokens,
        address _lender
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;
        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            if (_strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _liquidityShares = _savingsAccount.balanceInShares(_lender, _asset, _strategyList[_index]);
            if (_liquidityShares != 0) {
                uint256 tokenInStrategy = _liquidityShares;
                tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);
                uint256 _tokensToTransfer = tokenInStrategy;
                if (_activeAmount.add(tokenInStrategy) >= _amountInTokens) {
                    _tokensToTransfer = (_amountInTokens.sub(_activeAmount));
                }
                _activeAmount = _activeAmount.add(_tokensToTransfer);
                _savingsAccount.withdrawFrom(_tokensToTransfer, _asset, _strategyList[_index], _lender, address(this), false);
                if (_activeAmount == _amountInTokens) {
                    return;
                }
            }
        }
        require(_activeAmount == _amountInTokens, 'insufficient balance');
    }

    /**
     * @notice used to borrow tokens from credit line by borrower
     * @dev only borrower can call this function. Amount that can actually be borrowed is 
            min(amount based on borrowLimit, allowance to creditLine contract, balance of lender)
     * @param _id identifier for the credit line
     * @param _amount amount of tokens to borrow
     */
    function borrow(uint256 _id, uint256 _amount) external payable nonReentrant onlyCreditLineBorrower(_id) {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');
        uint256 _borrowableAmount = calculateBorrowableAmount(_id);
        require(_amount <= _borrowableAmount, ""CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount"");
        address _borrowAsset = creditLineConstants[_id].borrowAsset;
        address _lender = creditLineConstants[_id].lender;

        updateinterestAccruedTillLastPrincipalUpdate(_id);
        creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount);
        creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;

        uint256 _tokenDiffBalance;
        if (_borrowAsset != address(0)) {
            uint256 _balanceBefore = IERC20(_borrowAsset).balanceOf(address(this));
            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);
            uint256 _balanceAfter = IERC20(_borrowAsset).balanceOf(address(this));
            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);
        } else {
            uint256 _balanceBefore = address(this).balance;
            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);
            uint256 _balanceAfter = address(this).balance;
            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);
        }
        uint256 _protocolFee = _tokenDiffBalance.mul(protocolFeeFraction).div(10**30);
        _tokenDiffBalance = _tokenDiffBalance.sub(_protocolFee);

        if (_borrowAsset == address(0)) {
            (bool feeSuccess, ) = protocolFeeCollector.call{value: _protocolFee}('');
            require(feeSuccess, 'Transfer fail');
            (bool success, ) = msg.sender.call{value: _tokenDiffBalance}('');
            require(success, 'Transfer fail');
        } else {
            IERC20(_borrowAsset).safeTransfer(protocolFeeCollector, _protocolFee);
            IERC20(_borrowAsset).safeTransfer(msg.sender, _tokenDiffBalance);
        }
        emit BorrowedFromCreditLine(_id, _tokenDiffBalance);
    }

    function _repayFromSavingsAccount(
        uint256 _amount,
        address _asset,
        address _lender
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;

        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            if (_strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _liquidityShares = _savingsAccount.balanceInShares(msg.sender, _asset, _strategyList[_index]);
            if (_liquidityShares == 0) {
                continue;
            }
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);

            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) >= _amount) {
                _tokensToTransfer = (_amount.sub(_activeAmount));
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            _savingsAccount.transferFrom(_tokensToTransfer, _asset, _strategyList[_index], msg.sender, _lender);

            if (_amount == _activeAmount) {
                return;
            }
        }
        revert('CreditLine::_repayFromSavingsAccount - Insufficient balance');
    }

    function _repay(
        uint256 _id,
        uint256 _amount,
        bool _fromSavingsAccount,
        uint256 _principalPaid
    ) internal {
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        address _defaultStrategy = defaultStrategy;
        address _borrowAsset = creditLineConstants[_id].borrowAsset;
        address _lender = creditLineConstants[_id].lender;
        if (!_fromSavingsAccount) {
            if (_borrowAsset == address(0)) {
                require(msg.value == _amount, 'creditLine::repay - Ether sent not equal to repay amount');
                _savingsAccount.deposit{value: _amount}(_amount, _borrowAsset, _defaultStrategy, _lender);
            } else {
                IERC20(_borrowAsset).safeTransferFrom(msg.sender, address(this), _amount);
                IERC20(_borrowAsset).approve(_defaultStrategy, _amount);
                _savingsAccount.deposit(_amount, _borrowAsset, _defaultStrategy, _lender);
            }
        } else {
            _repayFromSavingsAccount(_amount, _borrowAsset, _lender);
        }
        if (_principalPaid != 0) {
            _savingsAccount.increaseAllowanceToCreditLine(_principalPaid, _borrowAsset, _lender);
        }
    }

    /**
     * @notice used to repay interest and principal to credit line. Interest has to be repaid before repaying principal
     * @dev partial repayments possible
     * @param _id identifier for the credit line
     * @param _amount amount being repaid
     * @param _fromSavingsAccount if true, tokens are transferred from savingsAccount 
                                otherwise direct from collateral token contract
     */
    function repay(
        uint256 _id,
        uint256 _amount,
        bool _fromSavingsAccount
    ) external payable nonReentrant {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');
        require(creditLineConstants[_id].lender != msg.sender, 'Lender cant repay');

        uint256 _interestSincePrincipalUpdate = calculateInterestAccrued(_id);
        uint256 _totalInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(
            _interestSincePrincipalUpdate
        );
        uint256 _interestToPay = _totalInterestAccrued.sub(creditLineVariables[_id].totalInterestRepaid);
        uint256 _totalCurrentDebt = _interestToPay.add(creditLineVariables[_id].principal);
        uint256 _principalPaid = 0;

        if (_amount >= _totalCurrentDebt) {
            _amount = _totalCurrentDebt;
            emit CompleteCreditLineRepaid(_id, _amount);
        } else {
            emit PartialCreditLineRepaid(_id, _amount);
        }

        if (_amount > _interestToPay) {
            creditLineVariables[_id].principal = _totalCurrentDebt.sub(_amount);
            creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _totalInterestAccrued;
            creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;
            creditLineVariables[_id].totalInterestRepaid = _totalInterestAccrued;
            _principalPaid = _amount.sub(_interestToPay);
        } else {
            creditLineVariables[_id].totalInterestRepaid = creditLineVariables[_id].totalInterestRepaid.add(_amount);
        }

        _repay(_id, _amount, _fromSavingsAccount, _principalPaid);

        if (creditLineVariables[_id].principal == 0) {
            _resetCreditLine(_id);
        }
    }

    function _resetCreditLine(uint256 _id) internal {
        creditLineVariables[_id].lastPrincipalUpdateTime = 0;
        creditLineVariables[_id].totalInterestRepaid = 0;
        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = 0;
        emit CreditLineReset(_id);
    }

    /**
     * @dev used to close credit line by borrower or lender
     * @param _id identifier for the credit line
     */
    function close(uint256 _id) external ifCreditLineExists(_id) {
        require(
            msg.sender == creditLineConstants[_id].borrower || msg.sender == creditLineConstants[_id].lender,
            'CreditLine: Permission denied while closing Line of credit'
        );
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');
        require(creditLineVariables[_id].principal == 0, 'CreditLine: Cannot be closed since not repaid.');
        require(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate == 0, 'CreditLine: Cannot be closed since not repaid.');
        creditLineVariables[_id].status = CreditLineStatus.CLOSED;
        emit CreditLineClosed(_id);
    }

    /**
     * @notice used to calculate the current collateral ratio
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view.
            Interest is also considered while calculating debt
     * @param _id identifier for the credit line
     * @return collateral ratio multiplied by 10**30 to retain precision
     */
    function calculateCurrentCollateralRatio(uint256 _id) public ifCreditLineExists(_id) returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 currentDebt = calculateCurrentDebt(_id);
        uint256 currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(currentDebt).mul(10**30).div(
            10**_decimals
        );

        return currentCollateralRatio;
    }

    /**
     * @notice used to calculate the total collateral tokens
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @param _id identifier for the credit line
     * @return _amount total collateral tokens deposited into the credit line
     */
    function calculateTotalCollateralTokens(uint256 _id) public returns (uint256 _amount) {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        uint256 _liquidityShares;
        for (uint256 index = 0; index < _strategyList.length; index++) {
            if (_strategyList[index] == address(0)) {
                continue;
            }
            _liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares, _collateralAsset);

            _amount = _amount.add(_tokenInStrategy);
        }
    }

    /**
     * @notice used to withdraw any excess collateral
     * @dev collateral can't be withdraw if collateralRatio goes below the ideal value. Only borrower can withdraw
     * @param _id identifier for the credit line
     * @param _amount amount of collateral to withdraw
     * @param _toSavingsAccount if true, tokens are transferred from savingsAccount 
                                otherwise direct from collateral token contract
     */
    function withdrawCollateral(
        uint256 _id,
        uint256 _amount,
        bool _toSavingsAccount
    ) external nonReentrant onlyCreditLineBorrower(_id) {
        uint256 _withdrawableCollateral = withdrawableCollateral(_id);
        require(_amount <= _withdrawableCollateral, 'Collateral ratio cant go below ideal');
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        _transferCollateral(_id, _collateralAsset, _amount, _toSavingsAccount);
        emit CollateralWithdrawn(_id, _amount);
    }

    /**
     * @notice used to calculate the collateral that can be withdrawn
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @param _id identifier for the credit line
     * @return total collateral withdrawable by borrower
     */
    function withdrawableCollateral(uint256 _id) public returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        uint256 _currentDebt = calculateCurrentDebt(_id);

        uint256 _collateralNeeded = _currentDebt
            .mul(creditLineConstants[_id].idealCollateralRatio)
            .div(_ratioOfPrices)
            .mul(10**_decimals)
            .div(10**30);

        if (_collateralNeeded >= _totalCollateralTokens) {
            return 0;
        }
        return _totalCollateralTokens.sub(_collateralNeeded);
    }

    function _transferCollateral(
        uint256 _id,
        address _asset,
        uint256 _amountInTokens,
        bool _toSavingsAccount
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        uint256 _activeAmount;
        for (uint256 index = 0; index < _strategyList.length; index++) {
            uint256 liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];
            if (liquidityShares == 0 || _strategyList[index] == address(0)) {
                continue;
            }
            uint256 _tokenInStrategy = liquidityShares;
            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares, _asset);
            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) > _amountInTokens) {
                _tokensToTransfer = _amountInTokens.sub(_activeAmount);
                liquidityShares = liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy);
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(
                liquidityShares
            );
            if (_toSavingsAccount) {
                ISavingsAccount(savingsAccount).transfer(_tokensToTransfer, _asset, _strategyList[index], msg.sender);
            } else {
                ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer, _asset, _strategyList[index], msg.sender, false);
            }

            if (_activeAmount == _amountInTokens) {
                return;
            }
        }
        revert('insufficient collateral');
    }

    /**
     * @notice used to liquidate credit line in case collateral ratio goes below the threshold
     * @dev if lender liquidates, then collateral is directly transferred. 
            If autoLiquidation is true, anyone can liquidate by providing enough borrow tokens
     * @param _id identifier for the credit line
     * @param _toSavingsAccount if true, tokens are transferred from savingsAccount 
                                otherwise direct from collateral token contract
     */
    function liquidate(uint256 _id, bool _toSavingsAccount) external payable nonReentrant {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');
        require(creditLineVariables[_id].principal != 0, 'CreditLine: cannot liquidate if principal is 0');

        uint256 currentCollateralRatio = calculateCurrentCollateralRatio(_id);
        require(
            currentCollateralRatio < creditLineConstants[_id].idealCollateralRatio,
            'CreditLine: Collateral ratio is higher than ideal value'
        );

        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address _lender = creditLineConstants[_id].lender;
        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        address _borrowAsset = creditLineConstants[_id].borrowAsset;

        creditLineVariables[_id].status = CreditLineStatus.LIQUIDATED;

        if (creditLineConstants[_id].autoLiquidation && _lender != msg.sender) {
            uint256 _borrowTokens = _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);
            if (_borrowAsset == address(0)) {
                uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');
                if (_returnETH != 0) {
                    (bool success, ) = msg.sender.call{value: _returnETH}('');
                    require(success, 'Transfer fail');
                }
            } else {
                IERC20(_borrowAsset).safeTransferFrom(msg.sender, _lender, _borrowTokens);
            }
        }

        _transferCollateral(_id, _collateralAsset, _totalCollateralTokens, _toSavingsAccount);

        emit CreditLineLiquidated(_id, msg.sender);
    }

    /**
     * @notice used to calculate the borrow tokens necessary for liquidator to liquidate
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @param _id identifier for the credit line
     * @return borrow tokens necessary for liquidator to liquidate
     */
    function borrowTokensToLiquidate(uint256 _id) external returns (uint256) {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        address _borrowAsset = creditLineConstants[_id].borrowAsset;

        return _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);
    }

    function _borrowTokensToLiquidate(
        address _borrowAsset,
        address _collateralAsset,
        uint256 _totalCollateralTokens
    ) internal view returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset);
        uint256 _borrowTokens = (
            _totalCollateralTokens.mul(uint256(10**30).sub(liquidatorRewardFraction)).div(10**30).mul(_ratioOfPrices).div(10**_decimals)
        );

        return _borrowTokens;
    }

    receive() external payable {
        require(msg.sender == savingsAccount, 'CreditLine::receive invalid transaction');
    }
}",10034,1061,"[H-01] In CreditLine#_borrowTokensToLiquidate, oracle is used wrong way

Submitted by 0x0x0x
Current implementation to get the price is as follows: 
(uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset); 
https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L1050
But it should not consult `borrowToken / collateralToken`, rather it should consult the invers
  [H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens

Submitted by harleythedog
Impact

It is intended that if a credit line has autoLiquidation as false, then only the lender can be the liquidator (see docs here: https://docs.sublime.finance/sublime-docs/smart-contracts/creditlines). However, this is not correctly implemented, and anyone can liquidate a position that has autoLiquidation set to false.
Even worse, when autoLiquidation is set to false, the liquidator does not have to supply the initial amount of borrow tokens (determined by _borrowTokensToLiquidate) that normally have to be transferred when autoLiquidation is true. This means that the liquidator will be sent all of the collateral that is supposed to be sent to the lender, so this represents a huge loss to the lender. Since the lender will lose all of the collateral that they are owed, this is a high severity issue.
  [M-02] CreditLine.liquidate doesn't transfer borrowed ETH to a lender

Submitted by hyh, also found by 0x0x0x
Impact

Funds that are acquired from a liquidator and should be sent to a lender are left with the contract instead. The funds aren't lost, but after the fact mitigation will require manual accounting and fund transfer for each CreditLine.liquidate usage.
  [M-08] Missing approve(0)

There are 3 instances where the IERC20.approve() function is called only once without setting the allowance to zero. Some tokens, like USDT, require first reducing the address' allowance to zero by calling approve(_spender, 0). Transactions will revert when using an unsupported token like USDT (see the approve() function requirement at line 199).
",4,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '../interfaces/IPriceOracle.sol';
import '../interfaces/IYield.sol';
import '../interfaces/ISavingsAccount.sol';
import '../SavingsAccount/SavingsAccountUtil.sol';
import '../interfaces/IStrategyRegistry.sol';



contract CreditLine is ReentrancyGuard, OwnableUpgradeable {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    enum CreditLineStatus {
        NOT_CREATED,
        REQUESTED,
        ACTIVE,
        CLOSED,
        CANCELLED,
        LIQUIDATED
    }

    
    uint256 public creditLineCounter;

    uint256 constant YEAR_IN_SECONDS = 365 days;

    struct CreditLineVariables {
        CreditLineStatus status;
        uint256 principal;
        uint256 totalInterestRepaid;
        uint256 lastPrincipalUpdateTime;
        uint256 interestAccruedTillLastPrincipalUpdate;
    }

    struct CreditLineConstants {
        address lender;
        address borrower;
        uint256 borrowLimit;
        uint256 idealCollateralRatio;
        uint256 borrowRate;
        address borrowAsset;
        address collateralAsset;
        bool autoLiquidation;
        bool requestByLender;
    }
    
    mapping(uint256 => mapping(address => uint256)) public collateralShareInStrategy;

    
    mapping(uint256 => CreditLineVariables) public creditLineVariables;

    
    mapping(uint256 => CreditLineConstants) public creditLineConstants;

    
    address public savingsAccount;

    
    address public priceOracle;

    
    address public strategyRegistry;

    
    address public defaultStrategy;

    
    uint256 public protocolFeeFraction;

    
    address public protocolFeeCollector;

    
    uint256 public liquidatorRewardFraction;
    
    modifier ifCreditLineExists(uint256 _id) {
        require(creditLineVariables[_id].status != CreditLineStatus.NOT_CREATED, 'Credit line does not exist');
        _;
    }

    
    modifier onlyCreditLineBorrower(uint256 _id) {
        require(creditLineConstants[_id].borrower == msg.sender, 'Only credit line Borrower can access');
        _;
    }

    
    modifier onlyCreditLineLender(uint256 _id) {
        require(creditLineConstants[_id].lender == msg.sender, 'Only credit line Lender can access');
        _;
    }

    
    event CollateralDeposited(uint256 indexed id, uint256 amount, address indexed strategy);

    
    event CollateralWithdrawn(uint256 indexed id, uint256 amount);

    
    event CreditLineRequested(uint256 indexed id, address indexed lender, address indexed borrower);

    
    event CreditLineLiquidated(uint256 indexed id, address indexed liquidator);

    
    event BorrowedFromCreditLine(uint256 indexed id, uint256 borrowAmount);

    
    event CreditLineAccepted(uint256 indexed id);

    
    event CreditLineReset(uint256 indexed id);

    
    event PartialCreditLineRepaid(uint256 indexed id, uint256 repayAmount);

    
    event CompleteCreditLineRepaid(uint256 indexed id, uint256 repayAmount);

    
    event CreditLineClosed(uint256 indexed id);

    
    event DefaultStrategyUpdated(address indexed defaultStrategy);

    
    event PriceOracleUpdated(address indexed priceOracle);

    
    event SavingsAccountUpdated(address indexed savingsAccount);

    
    event StrategyRegistryUpdated(address indexed strategyRegistry);

    
    event ProtocolFeeFractionUpdated(uint256 updatedProtocolFee);

    
    event ProtocolFeeCollectorUpdated(address indexed updatedProtocolFeeCollector);

    
    event LiquidationRewardFractionUpdated(uint256 liquidatorRewardFraction);

    
    function initialize(
        address _defaultStrategy,
        address _priceOracle,
        address _savingsAccount,
        address _strategyRegistry,
        address _owner,
        uint256 _protocolFeeFraction,
        address _protocolFeeCollector,
        uint256 _liquidatorRewardFraction
    ) external initializer {
        OwnableUpgradeable.__Ownable_init();
        OwnableUpgradeable.transferOwnership(_owner);

        _updateDefaultStrategy(_defaultStrategy);
        _updatePriceOracle(_priceOracle);
        _updateSavingsAccount(_savingsAccount);
        _updateStrategyRegistry(_strategyRegistry);
        _updateProtocolFeeFraction(_protocolFeeFraction);
        _updateProtocolFeeCollector(_protocolFeeCollector);
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
    }

    
    function updateDefaultStrategy(address _defaultStrategy) external onlyOwner {
        _updateDefaultStrategy(_defaultStrategy);
    }

    function _updateDefaultStrategy(address _defaultStrategy) internal {
        defaultStrategy = _defaultStrategy;
        emit DefaultStrategyUpdated(_defaultStrategy);
    }

    
    function updatePriceOracle(address _priceOracle) external onlyOwner {
        _updatePriceOracle(_priceOracle);
    }

    function _updatePriceOracle(address _priceOracle) internal {
        priceOracle = _priceOracle;
        emit PriceOracleUpdated(_priceOracle);
    }

    
    function updateSavingsAccount(address _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address _savingsAccount) internal {
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    
    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {
        _updateProtocolFeeFraction(_protocolFee);
    }

    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {
        protocolFeeFraction = _protocolFee;
        emit ProtocolFeeFractionUpdated(_protocolFee);
    }

    
    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {
        _updateProtocolFeeCollector(_protocolFeeCollector);
    }

    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {
        require(_protocolFeeCollector != address(0), 'cant be 0 address');
        protocolFeeCollector = _protocolFeeCollector;
        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);
    }

    
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        require(_strategyRegistry != address(0), 'CL::I zero address');
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    
    function updateLiquidatorRewardFraction(uint256 _rewardFraction) external onlyOwner {
        _updateLiquidatorRewardFraction(_rewardFraction);
    }

    function _updateLiquidatorRewardFraction(uint256 _rewardFraction) internal {
        require(_rewardFraction <= 10**30, 'Fraction has to be less than 1');
        liquidatorRewardFraction = _rewardFraction;
        emit LiquidationRewardFractionUpdated(_rewardFraction);
    }

    
    function calculateInterest(
        uint256 _principal,
        uint256 _borrowRate,
        uint256 _timeElapsed
    ) public pure returns (uint256) {
        uint256 _interest = _principal.mul(_borrowRate).mul(_timeElapsed).div(10**30).div(YEAR_IN_SECONDS);

        return _interest;
    }

    

    function calculateInterestAccrued(uint256 _id) public view returns (uint256) {
        uint256 _lastPrincipalUpdateTime = creditLineVariables[_id].lastPrincipalUpdateTime;
        if (_lastPrincipalUpdateTime == 0) return 0;
        uint256 _timeElapsed = (block.timestamp).sub(_lastPrincipalUpdateTime);
        uint256 _interestAccrued = calculateInterest(creditLineVariables[_id].principal, creditLineConstants[_id].borrowRate, _timeElapsed);
        return _interestAccrued;
    }

    
    function calculateCurrentDebt(uint256 _id) public view returns (uint256) {
        uint256 _interestAccrued = calculateInterestAccrued(_id);
        uint256 _currentDebt = (creditLineVariables[_id].principal)
            .add(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate)
            .add(_interestAccrued)
            .sub(creditLineVariables[_id].totalInterestRepaid);
        return _currentDebt;
    }

    
    function calculateBorrowableAmount(uint256 _id) public returns (uint256) {
        CreditLineStatus _status = creditLineVariables[_id].status;
        require(
            _status == CreditLineStatus.ACTIVE || _status == CreditLineStatus.REQUESTED,
            'CreditLine: Cannot only if credit line ACTIVE or REQUESTED'
        );
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 _totalCollateralToken = calculateTotalCollateralTokens(_id);

        uint256 _currentDebt = calculateCurrentDebt(_id);

        uint256 _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(creditLineConstants[_id].idealCollateralRatio).mul(10**30).div(
            10**_decimals
        );

        uint256 _borrowLimit = creditLineConstants[_id].borrowLimit;

        if (_maxPossible > _borrowLimit) {
            _maxPossible = _borrowLimit;
        }
        if (_maxPossible > _currentDebt) {
            return _maxPossible.sub(_currentDebt);
        }
        return 0;
    }

    function updateinterestAccruedTillLastPrincipalUpdate(uint256 _id) internal {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');

        uint256 _interestAccrued = calculateInterestAccrued(_id);
        uint256 _newInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(_interestAccrued);
        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued;
    }

    function _depositCollateralFromSavingsAccount(
        uint256 _id,
        uint256 _amount,
        address _sender
    ) internal {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;

        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            address _strategy = _strategyList[_index];
            uint256 _liquidityShares = _savingsAccount.balanceInShares(_sender, _collateralAsset, _strategy);
            if (_liquidityShares == 0 || _strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);

            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) >= _amount) {
                _tokensToTransfer = (_amount.sub(_activeAmount));
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            _savingsAccount.transferFrom(_tokensToTransfer, _collateralAsset, _strategy, _sender, address(this));

            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(
                _liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy)
            );

            if (_amount == _activeAmount) {
                return;
            }
        }
        revert('CreditLine::_depositCollateralFromSavingsAccount - Insufficient balance');
    }

    

    function request(
        address _requestTo,
        uint256 _borrowLimit,
        uint256 _borrowRate,
        bool _autoLiquidation,
        uint256 _collateralRatio,
        address _borrowAsset,
        address _collateralAsset,
        bool _requestAsLender
    ) external returns (uint256) {
        require(_borrowAsset != _collateralAsset, 'R: cant borrow lent token');
        require(IPriceOracle(priceOracle).doesFeedExist(_borrowAsset, _collateralAsset), 'R: No price feed');

        address _lender = _requestTo;
        address _borrower = msg.sender;
        if (_requestAsLender) {
            _lender = msg.sender;
            _borrower = _requestTo;
        }

        uint256 _id = _createRequest(
            _lender,
            _borrower,
            _borrowLimit,
            _borrowRate,
            _autoLiquidation,
            _collateralRatio,
            _borrowAsset,
            _collateralAsset,
            _requestAsLender
        );

        emit CreditLineRequested(_id, _lender, _borrower);
        return _id;
    }

    function _createRequest(
        address _lender,
        address _borrower,
        uint256 _borrowLimit,
        uint256 _borrowRate,
        bool _autoLiquidation,
        uint256 _collateralRatio,
        address _borrowAsset,
        address _collateralAsset,
        bool _requestByLender
    ) internal returns (uint256) {
        require(_lender != _borrower, 'Lender and Borrower cannot be same addresses');
        uint256 _id = creditLineCounter + 1;
        creditLineCounter = _id;
        creditLineVariables[_id].status = CreditLineStatus.REQUESTED;
        creditLineConstants[_id].borrower = _borrower;
        creditLineConstants[_id].lender = _lender;
        creditLineConstants[_id].borrowLimit = _borrowLimit;
        creditLineConstants[_id].autoLiquidation = _autoLiquidation;
        creditLineConstants[_id].idealCollateralRatio = _collateralRatio;
        creditLineConstants[_id].borrowRate = _borrowRate;
        creditLineConstants[_id].borrowAsset = _borrowAsset;
        creditLineConstants[_id].collateralAsset = _collateralAsset;
        creditLineConstants[_id].requestByLender = _requestByLender;
        return _id;
    }

    
    function accept(uint256 _id) external {
        require(
            creditLineVariables[_id].status == CreditLineStatus.REQUESTED,
            'CreditLine::acceptCreditLineLender - CreditLine is already accepted'
        );
        bool _requestByLender = creditLineConstants[_id].requestByLender;
        require(
            (msg.sender == creditLineConstants[_id].borrower && _requestByLender) ||
                (msg.sender == creditLineConstants[_id].lender && !_requestByLender),
            ""Only Borrower or Lender who hasn't requested can accept""
        );
        creditLineVariables[_id].status = CreditLineStatus.ACTIVE;
        emit CreditLineAccepted(_id);
    }

    
    function depositCollateral(
        uint256 _id,
        uint256 _amount,
        address _strategy,
        bool _fromSavingsAccount
    ) external payable nonReentrant ifCreditLineExists(_id) {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine not active');
        _depositCollateral(_id, _amount, _strategy, _fromSavingsAccount);
        emit CollateralDeposited(_id, _amount, _strategy);
    }

    function _depositCollateral(
        uint256 _id,
        uint256 _amount,
        address _strategy,
        bool _fromSavingsAccount
    ) internal {
        require(creditLineConstants[_id].lender != msg.sender, 'lender cant deposit collateral');
        if (_fromSavingsAccount) {
            _depositCollateralFromSavingsAccount(_id, _amount, msg.sender);
        } else {
            address _collateralAsset = creditLineConstants[_id].collateralAsset;
            ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
            if (_collateralAsset == address(0)) {
                require(msg.value == _amount, ""CreditLine::_depositCollateral - value to transfer doesn't match argument"");
            } else {
                IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);
                IERC20(_collateralAsset).approve(_strategy, _amount);
            }
            uint256 _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount, _collateralAsset, _strategy, address(this));
            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_sharesReceived);
        }
    }

    function _withdrawBorrowAmount(
        address _asset,
        uint256 _amountInTokens,
        address _lender
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;
        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            if (_strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _liquidityShares = _savingsAccount.balanceInShares(_lender, _asset, _strategyList[_index]);
            if (_liquidityShares != 0) {
                uint256 tokenInStrategy = _liquidityShares;
                tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);
                uint256 _tokensToTransfer = tokenInStrategy;
                if (_activeAmount.add(tokenInStrategy) >= _amountInTokens) {
                    _tokensToTransfer = (_amountInTokens.sub(_activeAmount));
                }
                _activeAmount = _activeAmount.add(_tokensToTransfer);
                _savingsAccount.withdrawFrom(_tokensToTransfer, _asset, _strategyList[_index], _lender, address(this), false);
                if (_activeAmount == _amountInTokens) {
                    return;
                }
            }
        }
        require(_activeAmount == _amountInTokens, 'insufficient balance');
    }

    
    function borrow(uint256 _id, uint256 _amount) external payable nonReentrant onlyCreditLineBorrower(_id) {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');
        uint256 _borrowableAmount = calculateBorrowableAmount(_id);
        require(_amount <= _borrowableAmount, ""CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount"");
        address _borrowAsset = creditLineConstants[_id].borrowAsset;
        address _lender = creditLineConstants[_id].lender;

        updateinterestAccruedTillLastPrincipalUpdate(_id);
        creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount);
        creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;

        uint256 _tokenDiffBalance;
        if (_borrowAsset != address(0)) {
            uint256 _balanceBefore = IERC20(_borrowAsset).balanceOf(address(this));
            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);
            uint256 _balanceAfter = IERC20(_borrowAsset).balanceOf(address(this));
            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);
        } else {
            uint256 _balanceBefore = address(this).balance;
            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);
            uint256 _balanceAfter = address(this).balance;
            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);
        }
        uint256 _protocolFee = _tokenDiffBalance.mul(protocolFeeFraction).div(10**30);
        _tokenDiffBalance = _tokenDiffBalance.sub(_protocolFee);

        if (_borrowAsset == address(0)) {
            (bool feeSuccess, ) = protocolFeeCollector.call{value: _protocolFee}('');
            require(feeSuccess, 'Transfer fail');
            (bool success, ) = msg.sender.call{value: _tokenDiffBalance}('');
            require(success, 'Transfer fail');
        } else {
            IERC20(_borrowAsset).safeTransfer(protocolFeeCollector, _protocolFee);
            IERC20(_borrowAsset).safeTransfer(msg.sender, _tokenDiffBalance);
        }
        emit BorrowedFromCreditLine(_id, _tokenDiffBalance);
    }

    function _repayFromSavingsAccount(
        uint256 _amount,
        address _asset,
        address _lender
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        uint256 _activeAmount;

        for (uint256 _index = 0; _index < _strategyList.length; _index++) {
            if (_strategyList[_index] == address(0)) {
                continue;
            }
            uint256 _liquidityShares = _savingsAccount.balanceInShares(msg.sender, _asset, _strategyList[_index]);
            if (_liquidityShares == 0) {
                continue;
            }
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);

            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) >= _amount) {
                _tokensToTransfer = (_amount.sub(_activeAmount));
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            _savingsAccount.transferFrom(_tokensToTransfer, _asset, _strategyList[_index], msg.sender, _lender);

            if (_amount == _activeAmount) {
                return;
            }
        }
        revert('CreditLine::_repayFromSavingsAccount - Insufficient balance');
    }

    function _repay(
        uint256 _id,
        uint256 _amount,
        bool _fromSavingsAccount,
        uint256 _principalPaid
    ) internal {
        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);
        address _defaultStrategy = defaultStrategy;
        address _borrowAsset = creditLineConstants[_id].borrowAsset;
        address _lender = creditLineConstants[_id].lender;
        if (!_fromSavingsAccount) {
            if (_borrowAsset == address(0)) {
                require(msg.value == _amount, 'creditLine::repay - Ether sent not equal to repay amount');
                _savingsAccount.deposit{value: _amount}(_amount, _borrowAsset, _defaultStrategy, _lender);
            } else {
                IERC20(_borrowAsset).safeTransferFrom(msg.sender, address(this), _amount);
                IERC20(_borrowAsset).approve(_defaultStrategy, _amount);
                _savingsAccount.deposit(_amount, _borrowAsset, _defaultStrategy, _lender);
            }
        } else {
            _repayFromSavingsAccount(_amount, _borrowAsset, _lender);
        }
        if (_principalPaid != 0) {
            _savingsAccount.increaseAllowanceToCreditLine(_principalPaid, _borrowAsset, _lender);
        }
    }

    
    function repay(
        uint256 _id,
        uint256 _amount,
        bool _fromSavingsAccount
    ) external payable nonReentrant {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');
        require(creditLineConstants[_id].lender != msg.sender, 'Lender cant repay');

        uint256 _interestSincePrincipalUpdate = calculateInterestAccrued(_id);
        uint256 _totalInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(
            _interestSincePrincipalUpdate
        );
        uint256 _interestToPay = _totalInterestAccrued.sub(creditLineVariables[_id].totalInterestRepaid);
        uint256 _totalCurrentDebt = _interestToPay.add(creditLineVariables[_id].principal);
        uint256 _principalPaid = 0;

        if (_amount >= _totalCurrentDebt) {
            _amount = _totalCurrentDebt;
            emit CompleteCreditLineRepaid(_id, _amount);
        } else {
            emit PartialCreditLineRepaid(_id, _amount);
        }

        if (_amount > _interestToPay) {
            creditLineVariables[_id].principal = _totalCurrentDebt.sub(_amount);
            creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _totalInterestAccrued;
            creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;
            creditLineVariables[_id].totalInterestRepaid = _totalInterestAccrued;
            _principalPaid = _amount.sub(_interestToPay);
        } else {
            creditLineVariables[_id].totalInterestRepaid = creditLineVariables[_id].totalInterestRepaid.add(_amount);
        }

        _repay(_id, _amount, _fromSavingsAccount, _principalPaid);

        if (creditLineVariables[_id].principal == 0) {
            _resetCreditLine(_id);
        }
    }

    function _resetCreditLine(uint256 _id) internal {
        creditLineVariables[_id].lastPrincipalUpdateTime = 0;
        creditLineVariables[_id].totalInterestRepaid = 0;
        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = 0;
        emit CreditLineReset(_id);
    }

    
    function close(uint256 _id) external ifCreditLineExists(_id) {
        require(
            msg.sender == creditLineConstants[_id].borrower || msg.sender == creditLineConstants[_id].lender,
            'CreditLine: Permission denied while closing Line of credit'
        );
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');
        require(creditLineVariables[_id].principal == 0, 'CreditLine: Cannot be closed since not repaid.');
        require(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate == 0, 'CreditLine: Cannot be closed since not repaid.');
        creditLineVariables[_id].status = CreditLineStatus.CLOSED;
        emit CreditLineClosed(_id);
    }

    
    function calculateCurrentCollateralRatio(uint256 _id) public ifCreditLineExists(_id) returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 currentDebt = calculateCurrentDebt(_id);
        uint256 currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(currentDebt).mul(10**30).div(
            10**_decimals
        );

        return currentCollateralRatio;
    }

    
    function calculateTotalCollateralTokens(uint256 _id) public returns (uint256 _amount) {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        uint256 _liquidityShares;
        for (uint256 index = 0; index < _strategyList.length; index++) {
            if (_strategyList[index] == address(0)) {
                continue;
            }
            _liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];
            uint256 _tokenInStrategy = _liquidityShares;
            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares, _collateralAsset);

            _amount = _amount.add(_tokenInStrategy);
        }
    }

    
    function withdrawCollateral(
        uint256 _id,
        uint256 _amount,
        bool _toSavingsAccount
    ) external nonReentrant onlyCreditLineBorrower(_id) {
        uint256 _withdrawableCollateral = withdrawableCollateral(_id);
        require(_amount <= _withdrawableCollateral, 'Collateral ratio cant go below ideal');
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        _transferCollateral(_id, _collateralAsset, _amount, _toSavingsAccount);
        emit CollateralWithdrawn(_id, _amount);
    }

    
    function withdrawableCollateral(uint256 _id) public returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(
            creditLineConstants[_id].collateralAsset,
            creditLineConstants[_id].borrowAsset
        );

        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        uint256 _currentDebt = calculateCurrentDebt(_id);

        uint256 _collateralNeeded = _currentDebt
            .mul(creditLineConstants[_id].idealCollateralRatio)
            .div(_ratioOfPrices)
            .mul(10**_decimals)
            .div(10**30);

        if (_collateralNeeded >= _totalCollateralTokens) {
            return 0;
        }
        return _totalCollateralTokens.sub(_collateralNeeded);
    }

    function _transferCollateral(
        uint256 _id,
        address _asset,
        uint256 _amountInTokens,
        bool _toSavingsAccount
    ) internal {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();
        uint256 _activeAmount;
        for (uint256 index = 0; index < _strategyList.length; index++) {
            uint256 liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];
            if (liquidityShares == 0 || _strategyList[index] == address(0)) {
                continue;
            }
            uint256 _tokenInStrategy = liquidityShares;
            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares, _asset);
            uint256 _tokensToTransfer = _tokenInStrategy;
            if (_activeAmount.add(_tokenInStrategy) > _amountInTokens) {
                _tokensToTransfer = _amountInTokens.sub(_activeAmount);
                liquidityShares = liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy);
            }
            _activeAmount = _activeAmount.add(_tokensToTransfer);
            collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(
                liquidityShares
            );
            if (_toSavingsAccount) {
                ISavingsAccount(savingsAccount).transfer(_tokensToTransfer, _asset, _strategyList[index], msg.sender);
            } else {
                ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer, _asset, _strategyList[index], msg.sender, false);
            }

            if (_activeAmount == _amountInTokens) {
                return;
            }
        }
        revert('insufficient collateral');
    }

    
    function liquidate(uint256 _id, bool _toSavingsAccount) external payable nonReentrant {
        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');
        require(creditLineVariables[_id].principal != 0, 'CreditLine: cannot liquidate if principal is 0');

        uint256 currentCollateralRatio = calculateCurrentCollateralRatio(_id);
        require(
            currentCollateralRatio < creditLineConstants[_id].idealCollateralRatio,
            'CreditLine: Collateral ratio is higher than ideal value'
        );

        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        address _lender = creditLineConstants[_id].lender;
        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        address _borrowAsset = creditLineConstants[_id].borrowAsset;

        creditLineVariables[_id].status = CreditLineStatus.LIQUIDATED;

        if (creditLineConstants[_id].autoLiquidation && _lender != msg.sender) {
            uint256 _borrowTokens = _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);
            if (_borrowAsset == address(0)) {
                uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');
                if (_returnETH != 0) {
                    (bool success, ) = msg.sender.call{value: _returnETH}('');
                    require(success, 'Transfer fail');
                }
            } else {
                IERC20(_borrowAsset).safeTransferFrom(msg.sender, _lender, _borrowTokens);
            }
        }

        _transferCollateral(_id, _collateralAsset, _totalCollateralTokens, _toSavingsAccount);

        emit CreditLineLiquidated(_id, msg.sender);
    }

    
    function borrowTokensToLiquidate(uint256 _id) external returns (uint256) {
        address _collateralAsset = creditLineConstants[_id].collateralAsset;
        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);
        address _borrowAsset = creditLineConstants[_id].borrowAsset;

        return _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);
    }

    function _borrowTokensToLiquidate(
        address _borrowAsset,
        address _collateralAsset,
        uint256 _totalCollateralTokens
    ) internal view returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset);
        uint256 _borrowTokens = (
            _totalCollateralTokens.mul(uint256(10**30).sub(liquidatorRewardFraction)).div(10**30).mul(_ratioOfPrices).div(10**_decimals)
        );

        return _borrowTokens;
    }

    receive() external payable {
        require(msg.sender == savingsAccount, 'CreditLine::receive invalid transaction');
    }
}",7331,2,2,,"{'ReviewingTheCode': ""The provided code is a Solidity smart contract named 'CreditLine' that facilitates the creation and management of credit lines between lenders and borrowers. It includes functionalities for requesting, accepting, depositing collateral, borrowing, repaying, and liquidating credit lines. The contract is designed to be upgradeable and uses several OpenZeppelin libraries for security and utility."", 'IdentifyingKeyComponents': {'ContractName': 'CreditLine', 'Purpose': 'To manage credit lines between lenders and borrowers, including collateral management, borrowing, repayment, and liquidation.', 'InheritanceAndImports': {'InheritsFrom': ['ReentrancyGuard', 'OwnableUpgradeable'], 'Imports': ['@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '../interfaces/IPriceOracle.sol', '../interfaces/IYield.sol', '../interfaces/ISavingsAccount.sol', '../SavingsAccount/SavingsAccountUtil.sol', '../interfaces/IStrategyRegistry.sol']}, 'StateVariables': [{'Name': 'creditLineCounter', 'Type': 'uint256', 'Purpose': 'Tracks the number of credit lines created.'}, {'Name': 'YEAR_IN_SECONDS', 'Type': 'uint256', 'Purpose': 'Constant representing the number of seconds in a year.'}, {'Name': 'creditLineVariables', 'Type': 'mapping(uint256 => CreditLineVariables)', 'Purpose': 'Stores the dynamic state of each credit line.'}, {'Name': 'creditLineConstants', 'Type': 'mapping(uint256 => CreditLineConstants)', 'Purpose': 'Stores the static parameters of each credit line.'}, {'Name': 'savingsAccount', 'Type': 'address', 'Purpose': 'Address of the savings account contract.'}, {'Name': 'priceOracle', 'Type': 'address', 'Purpose': 'Address of the price oracle contract.'}, {'Name': 'strategyRegistry', 'Type': 'address', 'Purpose': 'Address of the strategy registry contract.'}, {'Name': 'defaultStrategy', 'Type': 'address', 'Purpose': 'Default strategy for deposits.'}, {'Name': 'protocolFeeFraction', 'Type': 'uint256', 'Purpose': 'Fraction of the protocol fee.'}, {'Name': 'protocolFeeCollector', 'Type': 'address', 'Purpose': 'Address where protocol fees are collected.'}, {'Name': 'liquidatorRewardFraction', 'Type': 'uint256', 'Purpose': 'Fraction of the reward for liquidators.'}], 'FunctionsAndModifiers': [{'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with necessary parameters.', 'Parameters': ['address _defaultStrategy', 'address _priceOracle', 'address _savingsAccount', 'address _strategyRegistry', 'address _owner', 'uint256 _protocolFeeFraction', 'address _protocolFeeCollector', 'uint256 _liquidatorRewardFraction'], 'Returns': []}, {'Name': 'request', 'Visibility': 'external', 'Purpose': 'Requests a new credit line.', 'Parameters': ['address _requestTo', 'uint256 _borrowLimit', 'uint256 _borrowRate', 'bool _autoLiquidation', 'uint256 _collateralRatio', 'address _borrowAsset', 'address _collateralAsset', 'bool _requestAsLender'], 'Returns': ['uint256']}, {'Name': 'accept', 'Visibility': 'external', 'Purpose': 'Accepts a requested credit line.', 'Parameters': ['uint256 _id'], 'Returns': []}, {'Name': 'depositCollateral', 'Visibility': 'external', 'Purpose': 'Deposits collateral into a credit line.', 'Parameters': ['uint256 _id', 'uint256 _amount', 'address _strategy', 'bool _fromSavingsAccount'], 'Returns': []}, {'Name': 'borrow', 'Visibility': 'external', 'Purpose': 'Borrows funds from a credit line.', 'Parameters': ['uint256 _id', 'uint256 _amount'], 'Returns': []}, {'Name': 'repay', 'Visibility': 'external', 'Purpose': 'Repays borrowed funds.', 'Parameters': ['uint256 _id', 'uint256 _amount', 'bool _fromSavingsAccount'], 'Returns': []}, {'Name': 'close', 'Visibility': 'external', 'Purpose': 'Closes a credit line.', 'Parameters': ['uint256 _id'], 'Returns': []}, {'Name': 'liquidate', 'Visibility': 'external', 'Purpose': 'Liquidates a credit line.', 'Parameters': ['uint256 _id', 'bool _toSavingsAccount'], 'Returns': []}, {'Name': 'ifCreditLineExists', 'Visibility': 'modifier', 'Purpose': 'Ensures the credit line exists.', 'Parameters': ['uint256 _id'], 'Returns': []}, {'Name': 'onlyCreditLineBorrower', 'Visibility': 'modifier', 'Purpose': 'Restricts access to the credit line borrower.', 'Parameters': ['uint256 _id'], 'Returns': []}, {'Name': 'onlyCreditLineLender', 'Visibility': 'modifier', 'Purpose': 'Restricts access to the credit line lender.', 'Parameters': ['uint256 _id'], 'Returns': []}]}, 'ExternalInteractions': ['IPriceOracle', 'IYield', 'ISavingsAccount', 'IStrategyRegistry', 'IERC20'], 'SpecialMechanisms': ['ReentrancyGuard to prevent reentrancy attacks.', 'OwnableUpgradeable for upgradeability and ownership management.', 'SafeMath for arithmetic operations to prevent overflow/underflow.', 'SafeERC20 for safe ERC20 token transfers.'], 'Questions': ['How is the collateral ratio maintained during borrowing and repayment?', 'What is the exact mechanism for calculating the liquidator reward?', 'Are there any specific scenarios where the autoLiquidation flag is particularly useful?', 'How are the protocol fees calculated and distributed?']}","{'Findings': [{'Issue': 'Reentrancy Vulnerability in `borrow` Function', 'Severity': 'High', 'Description': 'The `borrow` function interacts with external contracts (e.g., `IERC20`, `ISavingsAccount`, `IYield`) before updating the state, making it susceptible to reentrancy attacks. Attackers could recursively call the function to drain funds or manipulate the contract state.', 'Impact': 'Potential loss of funds due to reentrancy attacks, leading to unauthorized fund transfers or state manipulation.', 'Location': 'Function: `borrow` in CreditLine.sol'}, {'Issue': 'Reentrancy Vulnerability in `repay` Function', 'Severity': 'High', 'Description': 'The `repay` function transfers funds before updating the state, allowing for reentrancy attacks. An attacker could exploit this to drain funds by recursively calling the function.', 'Impact': 'Potential loss of funds due to reentrancy attacks.', 'Location': 'Function: `repay`, Line: ~600'}, {'Issue': 'Reentrancy Vulnerability in `depositCollateral` Function', 'Severity': 'High', 'Description': 'The `depositCollateral` function uses `msg.value` and interacts with external contracts (e.g., `_savingsAccount.deposit`) without proper reentrancy guards, potentially allowing reentrancy attacks.', 'Impact': 'An attacker could exploit this to re-enter the function and manipulate the contract state, leading to loss of funds or unintended behavior.', 'Location': 'Function: `depositCollateral`'}, {'Issue': 'Reentrancy Vulnerability in `_depositCollateralFromSavingsAccount` Function', 'Severity': 'High', 'Description': 'The function interacts with external contracts (e.g., `ISavingsAccount`, `IYield`) without following checks-effects-interactions, making it vulnerable to reentrancy attacks.', 'Impact': 'An attacker could exploit this to drain funds or manipulate collateral shares in the strategy.', 'Location': 'Function: `_depositCollateralFromSavingsAccount`'}, {'Issue': 'Uninitialized State Variables', 'Severity': 'Medium', 'Description': 'State variables like `creditLineCounter` are not initialized in the constructor or `initialize` function, leading to unexpected behavior if the contract is not properly initialized.', 'Impact': 'Uninitialized variables could cause the contract to behave unpredictably, potentially leading to security vulnerabilities.', 'Location': 'State Variable: `creditLineCounter`'}, {'Issue': 'Insufficient Validation in `_depositCollateralFromSavingsAccount` Function', 'Severity': 'Medium', 'Description': 'The function does not validate the `_strategy` address properly, which could lead to loss of funds or unexpected behavior if the strategy is invalid or malicious.', 'Impact': 'Potential loss of funds or unexpected behavior due to invalid strategy addresses.', 'Location': 'Function: `_depositCollateralFromSavingsAccount`'}, {'Issue': 'Unrestricted Access to `updateDefaultStrategy` Function', 'Severity': 'Medium', 'Description': 'The `updateDefaultStrategy` function can be called by the owner without validating the new strategy address, potentially leading to the setting of a malicious or non-functional strategy.', 'Impact': ""Setting an invalid or malicious strategy could disrupt the contract's functionality and lead to loss of funds."", 'Location': 'Function: `updateDefaultStrategy`'}, {'Issue': 'Potential Integer Overflow in `calculateInterest` Function', 'Severity': 'Medium', 'Description': 'The `calculateInterest` function performs multiplication and division operations without explicit checks for integer overflow, which could lead to incorrect interest calculations.', 'Impact': 'Incorrect interest calculations could result in financial discrepancies or losses.', 'Location': 'Function: `calculateInterest`'}, {'Issue': 'Insufficient Collateral Check in `withdrawCollateral` Function', 'Severity': 'Medium', 'Description': 'The function allows withdrawal of collateral without ensuring the collateral ratio remains above the ideal threshold, potentially leading to under-collateralization.', 'Impact': 'Undercollateralization could increase the risk of default and financial losses for lenders.', 'Location': 'Function: `withdrawCollateral`'}, {'Issue': 'Lack of Input Validation in `request` Function', 'Severity': 'Medium', 'Description': 'The `request` function does not validate input parameters (e.g., `_borrowLimit`, `_borrowRate`, `_collateralRatio`), which could lead to invalid or risky credit line configurations.', 'Impact': 'Invalid or malicious configurations could cause financial losses or exploitation.', 'Location': 'Function: `request`'}, {'Issue': 'Unrestricted Ether Transfer in `liquidate` Function', 'Severity': 'Medium', 'Description': 'The `liquidate` function transfers Ether without checking the success of the transfer, which could lead to silent failures or loss of funds.', 'Impact': 'Potential loss of funds if the transfer fails or interacts with a malicious contract.', 'Location': 'Function: `liquidate`'}, {'Issue': 'Potential Front-Running in `accept` Function', 'Severity': 'Low', 'Description': 'The `accept` function lacks protection against front-running, allowing attackers to monitor and manipulate credit line acceptances.', 'Impact': 'Front-running could disrupt the credit line acceptance process, leading to unfair outcomes.', 'Location': 'Function: `accept`'}, {'Issue': 'Lack of Event Emission in Critical Functions', 'Severity': 'Low', 'Description': 'Critical state-changing functions (e.g., `_updateDefaultStrategy`, `_updatePriceOracle`) do not emit events, reducing transparency and auditability.', 'Impact': 'Lack of transparency makes it difficult to track changes and could lead to disputes.', 'Location': 'Functions: `_updateDefaultStrategy`, `_updatePriceOracle`'}], 'IssueNumber': 14, 'OutputList': 13}",608.2493441104889,"### **Comparison of Issues and Responses**

---

#### **[H-01] In CreditLine#_borrowTokensToLiquidate, oracle is used wrong way**

**Report Description**:  
The `_borrowTokensToLiquidate` function in `CreditLine.sol` incorrectly consults the price oracle for the ratio of `borrowToken / collateralToken`. Instead, it should consult the inverse (`collateralToken / borrowToken`). This misconfiguration could lead to incorrect liquidation calculations, potentially causing financial discrepancies or exploitation.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The misconfiguration of the price oracle is a critical vulnerability that could lead to incorrect liquidation calculations, but it is not covered in the response list.

---

#### **[H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens**

**Report Description**:  
When `autoLiquidation` is set to `false`, only the lender should be able to liquidate the credit line. However, the implementation allows anyone to liquidate without supplying the required borrow tokens. This oversight could result in the lender losing all collateral, representing a significant financial risk.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The improper access control and lack of enforcement of liquidation rules are high-severity vulnerabilities, but they are not covered in the response list.

---

#### **[M-02] CreditLine.liquidate doesn't transfer borrowed ETH to a lender**

**Report Description**:  
The `liquidate` function in `CreditLine.sol` fails to transfer borrowed ETH to the lender, leaving the funds in the contract. While the funds are not lost, this oversight requires manual intervention to resolve, increasing operational complexity and risk.

**Match in Response List**:  
Matches with the issue titled **""Unrestricted Ether Transfer in `liquidate` Function""**.

**Validation**:  
**Partially Correct**. The response identifies the issue with Ether transfers in the `liquidate` function but does not specifically address the failure to transfer funds to the lender. The response focuses on the lack of transfer success checks rather than the misdirection of funds.

---

#### **[M-08] Missing approve(0)**

**Report Description**:  
The `IERC20.approve()` function is called without first setting the allowance to zero in three instances. Some tokens, like USDT, require the allowance to be set to zero before updating it, and failing to do so could cause transactions to revert.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The lack of proper token approval handling is a medium-severity vulnerability, but it is not covered in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- **[M-02] CreditLine.liquidate doesn't transfer borrowed ETH to a lender**

**Missed Issues from Issue Report**:  
- **[H-01] In CreditLine#_borrowTokensToLiquidate, oracle is used wrong way**  
- **[H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens**  
- **[M-08] Missing approve(0)**

---

### **Conclusion**  
The response list primarily focuses on reentrancy vulnerabilities and some medium-severity issues but misses several critical and medium-severity vulnerabilities identified in the issue report. Specifically, the misconfiguration of the price oracle, improper access control in liquidation, and missing `approve(0)` calls are not addressed. The response list could be improved by including these issues and providing more detailed solutions for the vulnerabilities it does cover.","```
None.
```",0.0
SavingsAccountUtil.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import '../interfaces/ISavingsAccount.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';

library SavingsAccountUtil {
    using SafeERC20 for IERC20;

    function depositFromSavingsAccount(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy,
        bool _withdrawShares,
        bool _toSavingsAccount
    ) internal returns (uint256) {
        if (_toSavingsAccount) {
            return savingsAccountTransfer(_savingsAccount, _from, _to, _amount, _token, _strategy);
        } else {
            return withdrawFromSavingsAccount(_savingsAccount, _from, _to, _amount, _token, _strategy, _withdrawShares);
        }
    }

    function directDeposit(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        bool _toSavingsAccount,
        address _strategy
    ) internal returns (uint256) {
        if (_toSavingsAccount) {
            return directSavingsAccountDeposit(_savingsAccount, _from, _to, _amount, _token, _strategy);
        } else {
            return transferTokens(_token, _amount, _from, _to);
        }
    }

    function directSavingsAccountDeposit(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        transferTokens(_token, _amount, _from, address(this));
        uint256 _ethValue;
        if (_token == address(0)) {
            _ethValue = _amount;
        } else {
            address _approveTo = _strategy;
            if (_strategy == address(0)) {
                _approveTo = address(_savingsAccount);
            }
            IERC20(_token).safeApprove(_approveTo, _amount);
        }
        _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount, _token, _strategy, _to);
    }

    function savingsAccountTransfer(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256) {
        if (_from == address(this)) {
            _savingsAccount.transfer(_amount, _token, _strategy, _to);
        } else {
            _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);
        }
        return _amount;
    }

    function withdrawFromSavingsAccount(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy,
        bool _withdrawShares
    ) internal returns (uint256 _amountReceived) {
        if (_from == address(this)) {
            _amountReceived = _savingsAccount.withdraw(_amount, _token, _strategy, payable(_to), _withdrawShares);
        } else {
            _amountReceived = _savingsAccount.withdrawFrom(_amount, _token, _strategy, _from, payable(_to), _withdrawShares);
        }
    }

    function transferTokens(
        address _token,
        uint256 _amount,
        address _from,
        address _to
    ) internal returns (uint256) {
        if (_amount == 0) {
            return 0;
        }
        if (_token == address(0)) {
            require(msg.value >= _amount, 'ethers provided should be greater than _amount');

            if (_to != address(this)) {
                (bool success, ) = payable(_to).call{value: _amount}('');
                require(success, 'Transfer failed');
            }
            if (msg.value > _amount) {
                (bool success, ) = payable(address(msg.sender)).call{value: msg.value - _amount}('');
                require(success, 'Transfer failed');
            }
            return _amount;
        }
        if (_from == address(this)) {
            IERC20(_token).safeTransfer(_to, _amount);
        } else {
            //pool
            IERC20(_token).safeTransferFrom(_from, _to, _amount);
        }
        return _amount;
    }
}",989,128,"[H-02] Wrong returns of SavingsAccountUtil.depositFromSavingsAccount() can cause fund loss

Submitted by WatchPug
The function SavingsAccountUtil.depositFromSavingsAccount() is expected to return the number of equivalent shares for given _asset.
 However, since savingsAccountTransfer() does not return the result of _savingsAccount.transfer(), but returned _amount instead, which means that SavingsAccountUtil.depositFromSavingsAccount() may not return the actual shares (when pps is not 1).",1,,"pragma solidity 0.7.6;

import '../interfaces/ISavingsAccount.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';

library SavingsAccountUtil {
    using SafeERC20 for IERC20;

    function depositFromSavingsAccount(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy,
        bool _withdrawShares,
        bool _toSavingsAccount
    ) internal returns (uint256) {
        if (_toSavingsAccount) {
            return savingsAccountTransfer(_savingsAccount, _from, _to, _amount, _token, _strategy);
        } else {
            return withdrawFromSavingsAccount(_savingsAccount, _from, _to, _amount, _token, _strategy, _withdrawShares);
        }
    }

    function directDeposit(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        bool _toSavingsAccount,
        address _strategy
    ) internal returns (uint256) {
        if (_toSavingsAccount) {
            return directSavingsAccountDeposit(_savingsAccount, _from, _to, _amount, _token, _strategy);
        } else {
            return transferTokens(_token, _amount, _from, _to);
        }
    }

    function directSavingsAccountDeposit(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        transferTokens(_token, _amount, _from, address(this));
        uint256 _ethValue;
        if (_token == address(0)) {
            _ethValue = _amount;
        } else {
            address _approveTo = _strategy;
            if (_strategy == address(0)) {
                _approveTo = address(_savingsAccount);
            }
            IERC20(_token).safeApprove(_approveTo, _amount);
        }
        _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount, _token, _strategy, _to);
    }

    function savingsAccountTransfer(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256) {
        if (_from == address(this)) {
            _savingsAccount.transfer(_amount, _token, _strategy, _to);
        } else {
            _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);
        }
        return _amount;
    }

    function withdrawFromSavingsAccount(
        ISavingsAccount _savingsAccount,
        address _from,
        address _to,
        uint256 _amount,
        address _token,
        address _strategy,
        bool _withdrawShares
    ) internal returns (uint256 _amountReceived) {
        if (_from == address(this)) {
            _amountReceived = _savingsAccount.withdraw(_amount, _token, _strategy, payable(_to), _withdrawShares);
        } else {
            _amountReceived = _savingsAccount.withdrawFrom(_amount, _token, _strategy, _from, payable(_to), _withdrawShares);
        }
    }

    function transferTokens(
        address _token,
        uint256 _amount,
        address _from,
        address _to
    ) internal returns (uint256) {
        if (_amount == 0) {
            return 0;
        }
        if (_token == address(0)) {
            require(msg.value >= _amount, 'ethers provided should be greater than _amount');

            if (_to != address(this)) {
                (bool success, ) = payable(_to).call{value: _amount}('');
                require(success, 'Transfer failed');
            }
            if (msg.value > _amount) {
                (bool success, ) = payable(address(msg.sender)).call{value: msg.value - _amount}('');
                require(success, 'Transfer failed');
            }
            return _amount;
        }
        if (_from == address(this)) {
            IERC20(_token).safeTransfer(_to, _amount);
        } else {
            
            IERC20(_token).safeTransferFrom(_from, _to, _amount);
        }
        return _amount;
    }
}",979,1,0,,"{'ReviewingTheCode': ""The provided code snippet is a Solidity library named `SavingsAccountUtil` that facilitates interactions with a savings account contract. It includes functions for depositing, withdrawing, and transferring tokens, both directly and through a savings account. The library leverages OpenZeppelin's SafeERC20 and ReentrancyGuard for secure token handling and reentrancy protection."", 'IdentifyingKeyComponents': {'ContractName': 'SavingsAccountUtil', 'Purpose': 'To provide utility functions for interacting with a savings account, including depositing, withdrawing, and transferring tokens.', 'InheritanceAndImports': {'InheritsFrom': [], 'Imports': ['../interfaces/ISavingsAccount.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol']}, 'StateVariables': [], 'FunctionsAndModifiers': [{'Name': 'depositFromSavingsAccount', 'Visibility': 'internal', 'Purpose': 'Facilitates depositing tokens from a savings account to another address, either directly or through the savings account.', 'Parameters': ['ISavingsAccount _savingsAccount', 'address _from', 'address _to', 'uint256 _amount', 'address _token', 'address _strategy', 'bool _withdrawShares', 'bool _toSavingsAccount'], 'Returns': ['uint256']}, {'Name': 'directDeposit', 'Visibility': 'internal', 'Purpose': 'Handles direct deposits of tokens, either to a savings account or directly to an address.', 'Parameters': ['ISavingsAccount _savingsAccount', 'address _from', 'address _to', 'uint256 _amount', 'address _token', 'bool _toSavingsAccount', 'address _strategy'], 'Returns': ['uint256']}, {'Name': 'directSavingsAccountDeposit', 'Visibility': 'internal', 'Purpose': 'Executes a direct deposit into a savings account, handling token transfers and approvals.', 'Parameters': ['ISavingsAccount _savingsAccount', 'address _from', 'address _to', 'uint256 _amount', 'address _token', 'address _strategy'], 'Returns': ['uint256 _sharesReceived']}, {'Name': 'savingsAccountTransfer', 'Visibility': 'internal', 'Purpose': 'Transfers tokens within a savings account, either from the current contract or from another address.', 'Parameters': ['ISavingsAccount _savingsAccount', 'address _from', 'address _to', 'uint256 _amount', 'address _token', 'address _strategy'], 'Returns': ['uint256']}, {'Name': 'withdrawFromSavingsAccount', 'Visibility': 'internal', 'Purpose': 'Withdraws tokens from a savings account to a specified address, either as shares or as the underlying asset.', 'Parameters': ['ISavingsAccount _savingsAccount', 'address _from', 'address _to', 'uint256 _amount', 'address _token', 'address _strategy', 'bool _withdrawShares'], 'Returns': ['uint256 _amountReceived']}, {'Name': 'transferTokens', 'Visibility': 'internal', 'Purpose': 'Transfers tokens from one address to another, handling both ERC20 tokens and Ether.', 'Parameters': ['address _token', 'uint256 _amount', 'address _from', 'address _to'], 'Returns': ['uint256']}]}, 'ExternalInteractions': ['ISavingsAccount interface for interacting with the savings account contract.', ""OpenZeppelin's SafeERC20 for secure ERC20 token transfers."", ""OpenZeppelin's ReentrancyGuard for protection against reentrancy attacks.""], 'SpecialMechanisms': ['Use of SafeERC20 for secure token transfers.', 'Handling of both ERC20 tokens and Ether within the same transfer function.', 'Conditional logic for handling deposits and withdrawals based on the destination (savings account or direct transfer).'], 'Questions': ['What is the purpose of the `_strategy` parameter in the deposit and withdrawal functions?', 'How does the contract handle the case where `_token` is address(0) in the `directSavingsAccountDeposit` function?', 'Is there any specific reason for not using the `ReentrancyGuard` modifier in the functions, despite importing it?']}","{'Findings': [{'Issue': 'Reentrancy Risk in `transferTokens` Function', 'Severity': 'High', 'Description': 'The `transferTokens` function handles Ether transfers using `call` without any reentrancy protection. This could allow an attacker to perform a reentrancy attack by recursively calling the function before the state is updated, potentially draining funds.', 'Impact': 'An attacker could exploit this vulnerability to drain Ether from the contract, leading to significant financial loss.', 'Location': 'SavingsAccountUtil::transferTokens'}, {'Issue': 'Unchecked Call Return Value in `transferTokens` Function', 'Severity': 'Medium', 'Description': 'The `transferTokens` function uses `call` for Ether transfers but does not check the return value of the `call` operation. If the transfer fails, the function will still proceed, potentially leading to inconsistent state or loss of funds.', 'Impact': 'If an Ether transfer fails, the contract may not handle the failure appropriately, leading to potential loss of funds or inconsistent state.', 'Location': 'SavingsAccountUtil::transferTokens'}, {'Issue': 'Improper Handling of Ether in `directSavingsAccountDeposit` Function', 'Severity': 'Medium', 'Description': 'The `directSavingsAccountDeposit` function does not properly handle Ether transfers when `_token` is set to `address(0)`. It assumes that `msg.value` will always be equal to `_amount`, which may not be the case, leading to potential loss of Ether.', 'Impact': 'If `msg.value` is greater than `_amount`, the excess Ether will be lost, leading to financial loss.', 'Location': 'SavingsAccountUtil::directSavingsAccountDeposit'}, {'Issue': 'Unrestricted Approval in `directSavingsAccountDeposit` Function', 'Severity': 'Medium', 'Description': 'The `directSavingsAccountDeposit` function grants unlimited approval to the `_strategy` or `_savingsAccount` for the token. If the `_strategy` or `_savingsAccount` is malicious or compromised, it could transfer tokens from the contract without limits.', 'Impact': 'A malicious or compromised strategy or savings account could drain tokens from the contract, leading to financial loss.', 'Location': 'SavingsAccountUtil::directSavingsAccountDeposit'}, {'Issue': 'Lack of Input Validation in `depositFromSavingsAccount` Function', 'Severity': 'Medium', 'Description': 'The `depositFromSavingsAccount` function does not validate the input parameters such as `_from`, `_to`, `_amount`, `_token`, and `_strategy`. This could lead to unexpected behavior or vulnerabilities if invalid or malicious inputs are provided.', 'Impact': 'Invalid or malicious inputs could lead to unexpected behavior, such as unauthorized transfers or loss of funds.', 'Location': 'SavingsAccountUtil::depositFromSavingsAccount'}, {'Issue': 'Potential Front-Running in `savingsAccountTransfer` Function', 'Severity': 'Low', 'Description': 'The `savingsAccountTransfer` function does not include any protection against front-running attacks. An attacker could observe the transaction in the mempool and submit a transaction with a higher gas price to alter the outcome.', 'Impact': 'An attacker could manipulate the order of transactions, potentially leading to unauthorized transfers or other unintended consequences.', 'Location': 'SavingsAccountUtil::savingsAccountTransfer'}, {'Issue': 'Potential Integer Overflow/Underflow', 'Severity': 'Low', 'Description': 'The code does not use SafeMath or similar protections for arithmetic operations. While Solidity 0.7.6 has built-in overflow/underflow checks, it is still a good practice to use SafeMath or similar libraries to ensure that arithmetic operations are safe.', 'Impact': 'Integer overflow/underflow could lead to unexpected behavior, such as incorrect token transfers or fund losses.', 'Location': 'Throughout the code, especially in functions handling arithmetic operations'}, {'Issue': 'Inconsistent Handling of Zero Amount in `transferTokens` Function', 'Severity': 'Low', 'Description': 'The `transferTokens` function returns early if `_amount` is zero, but it does not handle the case where `msg.value` is non-zero. This could lead to unexpected behavior if `msg.value` is sent but `_amount` is zero.', 'Impact': 'Unexpected behavior could occur if `msg.value` is non-zero but `_amount` is zero, potentially leading to loss of Ether.', 'Location': 'SavingsAccountUtil::transferTokens'}], 'IssueNumber': 10, 'OutputList': 8}",517.8381497859955,"---

**[H-02] Wrong returns of SavingsAccountUtil.depositFromSavingsAccount() can cause fund loss**

**Report Description**:
The function `SavingsAccountUtil.depositFromSavingsAccount()` is expected to return the number of equivalent shares for a given `_asset`. However, the function `savingsAccountTransfer()` does not return the result of `_savingsAccount.transfer()` but instead returns `_amount`. This means that `SavingsAccountUtil.depositFromSavingsAccount()` may not return the actual shares when the price per share (pps) is not 1. This discrepancy can lead to incorrect accounting of shares, potentially causing fund loss or mismanagement of assets.

**Match in Response List**:
No match found.

**Validation**:
**Incorrect**. None of the responses in the `response_list` address the specific issue of incorrect returns in `SavingsAccountUtil.depositFromSavingsAccount()`. While some responses discuss related issues such as unchecked call return values or lack of input validation, none of them identify the core problem of mismatched returns and its potential impact on fund management. This issue is distinct and requires a specific focus on the return value handling in the context of share calculations.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-02] Wrong returns of SavingsAccountUtil.depositFromSavingsAccount() can cause fund loss**

---","```
None.
```",0.0
Pool.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';
import '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol';
import '../interfaces/IPoolFactory.sol';
import '../interfaces/IPriceOracle.sol';
import '../interfaces/IYield.sol';
import '../interfaces/IRepayment.sol';
import '../interfaces/ISavingsAccount.sol';
import '../SavingsAccount/SavingsAccountUtil.sol';
import '../interfaces/IPool.sol';
import '../interfaces/IExtension.sol';
import '../interfaces/IVerification.sol';

/**
 * @title Pool contract with Methods related to Pool
 * @notice Implements the functions related to Pool
 * @author Sublime
 */
contract Pool is Initializable, ERC20PausableUpgradeable, IPool, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    enum LoanStatus {
        COLLECTION, //denotes collection period
        ACTIVE, // denotes the active loan
        CLOSED, // Loan is repaid and closed
        CANCELLED, // Cancelled by borrower
        DEFAULTED, // Repayment defaulted by  borrower
        TERMINATED // Pool terminated by admin
    }

    address poolFactory;

    struct LendingDetails {
        uint256 effectiveInterestWithdrawn;
        uint256 marginCallEndTime;
        uint256 extraLiquidityShares;
    }

    // Pool constants
    struct PoolConstants {
        address borrower;
        uint256 borrowAmountRequested;
        uint256 loanStartTime;
        uint256 loanWithdrawalDeadline;
        address borrowAsset;
        uint256 idealCollateralRatio;
        uint256 borrowRate;
        uint256 noOfRepaymentIntervals;
        uint256 repaymentInterval;
        address collateralAsset;
        address poolSavingsStrategy; // invest contract
        address lenderVerifier;
    }

    struct PoolVariables {
        uint256 baseLiquidityShares;
        uint256 extraLiquidityShares;
        LoanStatus loanStatus;
        uint256 penaltyLiquidityAmount;
    }

    /**
     * @notice used to keep track of lenders' details
     */
    mapping(address => LendingDetails) public lenders;

    /**
     * @notice object of type PoolConstants
     */
    PoolConstants public poolConstants;

    /**
     * @notice object of type PoolVariables
     */
    PoolVariables public poolVariables;

    /**
     * @notice checks if the _user is pool's valid borrower
     * @param _user address of the borrower
     */
    modifier onlyBorrower(address _user) {
        require(_user == poolConstants.borrower, 'OB1');
        _;
    }

    /**
     * @notice checks if the _lender is pool's valid lender
     * @param _lender address of the lender
     */
    modifier isLender(address _lender) {
        require(balanceOf(_lender) != 0, 'IL1');
        _;
    }

    /**
     * @notice checks if the msg.sender is pool's valid owner
     */
    modifier onlyOwner() {
        require(msg.sender == IPoolFactory(poolFactory).owner(), 'OO1');
        _;
    }

    /**
     * @notice checks if the msg.sender is pool's latest repayment implementation
     */
    modifier onlyRepaymentImpl() {
        require(msg.sender == IPoolFactory(poolFactory).repaymentImpl(), 'OR1');
        _;
    }

    /**
     * @notice initializing the pool and adding initial collateral
     * @param _borrowAmountRequested the amount of borrow asset requested by the borrower
     * @param _borrower address of the borrower
     * @param _borrowAsset address of the borrow asset
     * @param _collateralAsset address of the collateral asset
     * @param _idealCollateralRatio the ideal collateral ratio of the pool
     * @param _borrowRate the borrow rate as specified by borrower
     * @param _repaymentInterval the interval between to repayments
     * @param _noOfRepaymentIntervals number of repayments to be done by borrower
     * @param _poolSavingsStrategy address of the savings strategy preferred
     * @param _collateralAmount amount of collateral to be deposited by the borrower
     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet
     * @param _loanWithdrawalDuration time interval for the borrower to withdraw the lent amount in borrow asset
     * @param _collectionPeriod time interval where lender lend into the borrow pool
     */
    function initialize(
        uint256 _borrowAmountRequested,
        uint256 _borrowRate,
        address _borrower,
        address _borrowAsset,
        address _collateralAsset,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        address _lenderVerifier,
        uint256 _loanWithdrawalDuration,
        uint256 _collectionPeriod
    ) external payable initializer {
        poolFactory = msg.sender;
        poolConstants.borrowAsset = _borrowAsset;
        poolConstants.idealCollateralRatio = _idealCollateralRatio;
        poolConstants.collateralAsset = _collateralAsset;
        poolConstants.poolSavingsStrategy = _poolSavingsStrategy;
        poolConstants.borrowAmountRequested = _borrowAmountRequested;
        _initialDeposit(_borrower, _collateralAmount, _transferFromSavingsAccount);
        poolConstants.borrower = _borrower;
        poolConstants.borrowRate = _borrowRate;
        poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals;
        poolConstants.repaymentInterval = _repaymentInterval;
        poolConstants.lenderVerifier = _lenderVerifier;

        poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod);
        poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration);
        __ERC20_init('Pool Tokens', 'PT');
        try ERC20Upgradeable(_borrowAsset).decimals() returns(uint8 _decimals) {
            _setupDecimals(_decimals);
        } catch(bytes memory) {}
    }

    /**
     * @notice add collateral to a pool
     * @param _amount amount of collateral to be deposited denominated in collateral asset
     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet
     */
    function depositCollateral(uint256 _amount, bool _transferFromSavingsAccount) external payable override {
        require(_amount != 0, 'DC1');
        require(balanceOf(msg.sender) == 0, 'DC2');
        _depositCollateral(msg.sender, _amount, _transferFromSavingsAccount);
    }

    /**
     * @notice called when borrow pool is initialized to make initial collateral deposit
     * @param _borrower address of the borrower
     * @param _amount amount of collateral getting deposited denominated in collateral asset
     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet
     */
    function _initialDeposit(
        address _borrower,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) internal {
        uint256 _equivalentCollateral = getEquivalentTokens(
            poolConstants.borrowAsset,
            poolConstants.collateralAsset,
            poolConstants.borrowAmountRequested
        );
        require(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30), 'ID1');
        _depositCollateral(_borrower, _amount, _transferFromSavingsAccount);
    }

    /**
     * @notice internal function used to deposit collateral from _borrower to pool
     * @param _depositor address transferring the collateral
     * @param _amount amount of collateral to be transferred denominated in collateral asset
     * @param _transferFromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet
     */
    function _depositCollateral(
        address _depositor,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) internal nonReentrant {
        uint256 _sharesReceived = _deposit(
            _transferFromSavingsAccount,
            true,
            poolConstants.collateralAsset,
            _amount,
            poolConstants.poolSavingsStrategy,
            _depositor,
            address(this)
        );
        poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived);
        emit CollateralAdded(_depositor, _amount, _sharesReceived);
    }

    /**
     * @notice internal function used to get amount of collateral deposited to the pool
     * @param _fromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet
     * @param _toSavingsAccount if true, collateral is transferred to pool's savings account, if false, it is withdrawn from _sender's savings account
     * @param _asset address of the asset to be deposited
     * @param _amount amount of tokens to be deposited in the pool
     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit
     * @param _depositFrom address which makes the deposit
     * @param _depositTo address to which the tokens are deposited
     * @return _sharesReceived number of equivalent shares for given _asset
     */
    function _deposit(
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        address _asset,
        uint256 _amount,
        address _poolSavingsStrategy,
        address _depositFrom,
        address _depositTo
    ) internal returns (uint256 _sharesReceived) {
        if (_fromSavingsAccount) {
            _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(
                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),
                _depositFrom,
                _depositTo,
                _amount,
                _asset,
                _poolSavingsStrategy,
                true,
                _toSavingsAccount
            );
        } else {
            _sharesReceived = SavingsAccountUtil.directDeposit(
                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),
                _depositFrom,
                _depositTo,
                _amount,
                _asset,
                _toSavingsAccount,
                _poolSavingsStrategy
            );
        }
    }

    /**
     * @notice used to add extra collateral deposit during margin calls
     * @param _lender the address of the _lender who has requested for margin call
     * @param _amount amount of tokens requested for the margin call
     * @param _transferFromSavingsAccount if true, collateral is transferred from borrower's savings account, if false, it is transferred from borrower's wallet
     */
    function addCollateralInMarginCall(
        address _lender,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) external payable override nonReentrant {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'ACMC1');
        require(balanceOf(msg.sender) == 0, 'ACMC2');
        require(getMarginCallEndTime(_lender) >= block.timestamp, 'ACMC3');

        require(_amount != 0, 'ACMC4');

        uint256 _sharesReceived = _deposit(
            _transferFromSavingsAccount,
            true,
            poolConstants.collateralAsset,
            _amount,
            poolConstants.poolSavingsStrategy,
            msg.sender,
            address(this)
        );

        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived);

        lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived);

        if (getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio) {
            delete lenders[_lender].marginCallEndTime;
        }

        emit MarginCallCollateralAdded(msg.sender, _lender, _amount, _sharesReceived);
    }

    /**
     * @notice used by the borrower to withdraw tokens from the pool when loan is active
     */
    function withdrawBorrowedAmount() external override onlyBorrower(msg.sender) nonReentrant {
        LoanStatus _poolStatus = poolVariables.loanStatus;
        uint256 _tokensLent = totalSupply();
        require(
            _poolStatus == LoanStatus.COLLECTION &&
                poolConstants.loanStartTime < block.timestamp &&
                block.timestamp < poolConstants.loanWithdrawalDeadline,
            'WBA1'
        );
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30), 'WBA2');

        poolVariables.loanStatus = LoanStatus.ACTIVE;
        uint256 _currentCollateralRatio = getCurrentCollateralRatio();
        require(_currentCollateralRatio >= poolConstants.idealCollateralRatio, 'WBA3');

        uint256 _noOfRepaymentIntervals = poolConstants.noOfRepaymentIntervals;
        uint256 _repaymentInterval = poolConstants.repaymentInterval;
        IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(
            _noOfRepaymentIntervals,
            _repaymentInterval,
            poolConstants.borrowRate,
            poolConstants.loanStartTime,
            poolConstants.borrowAsset
        );
        IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval);

        address _borrowAsset = poolConstants.borrowAsset;
        (uint256 _protocolFeeFraction, address _collector) = _poolFactory.getProtocolFeeData();
        uint256 _protocolFee = _tokensLent.mul(_protocolFeeFraction).div(10**30);
        delete poolConstants.loanWithdrawalDeadline;

        uint256 _feeAdjustedWithdrawalAmount = _tokensLent.sub(_protocolFee);

        SavingsAccountUtil.transferTokens(_borrowAsset, _protocolFee, address(this), _collector);
        SavingsAccountUtil.transferTokens(_borrowAsset, _feeAdjustedWithdrawalAmount, address(this), msg.sender);

        emit AmountBorrowed(_feeAdjustedWithdrawalAmount, _protocolFee);
    }

    /**
     * @notice internal function used to withdraw all collateral tokens from the pool (minus penalty)
     * @param _receiver address which receives all the collateral tokens
     * @param _penalty amount of penalty incurred by the borrower when pool is cancelled
     */
    function _withdrawAllCollateral(address _receiver, uint256 _penalty) internal {
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        address _collateralAsset = poolConstants.collateralAsset;
        uint256 _collateralShares = 0;
        if (poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty) {
            _collateralShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares).sub(_penalty);
        }
        // uint256 _collateralTokens = _collateralShares;
        uint256 _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares, _collateralAsset);

        poolVariables.baseLiquidityShares = _penalty;
        delete poolVariables.extraLiquidityShares;

        uint256 _sharesReceived;
        if (_collateralShares != 0) {
            ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());
            _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(
                _savingsAccount,
                address(this),
                _receiver,
                _collateralTokens,
                _collateralAsset,
                _poolSavingsStrategy
            );
        }
        emit CollateralWithdrawn(_receiver, _sharesReceived);
    }

    /**
     * @notice used by lender to supply liquidity to a borrow pool
     * @param _lender address of the lender
     * @param _amount amount of liquidity supplied by the _lender
     * @param _strategy address of strategy from which tokens are lent if done from savings account, 
     *                  in case of direct deposits, zeroAddress should be used
     */
    function lend(
        address _lender,
        uint256 _amount,
        address _strategy
    ) external payable nonReentrant {
        address _lenderVerifier = poolConstants.lenderVerifier;
        address _borrower = poolConstants.borrower;
        require(_lender != _borrower && _borrower != msg.sender, 'L1');
        if (_lenderVerifier != address(0)) {
            require(IVerification(IPoolFactory(poolFactory).userRegistry()).isUser(_lender, _lenderVerifier), 'L2');
        }
        require(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime, 'L3');
        uint256 _borrowAmountNeeded = poolConstants.borrowAmountRequested;
        uint256 _lentAmount = totalSupply();
        if (_amount.add(_lentAmount) > _borrowAmountNeeded) {
            _amount = _borrowAmountNeeded.sub(_lentAmount);
        }

        address _borrowToken = poolConstants.borrowAsset;
        bool _fromSavingsAccount;
        if(_strategy != address(0)) {
            _fromSavingsAccount = true;
        }
        _deposit(
            _fromSavingsAccount,
            false,
            _borrowToken,
            _amount,
            _strategy,
            msg.sender,
            address(this)
        );
        _mint(_lender, _amount);
        emit LiquiditySupplied(_amount, _lender);
    }

    /**
     * @notice used to transfer borrow pool tokens among lenders
     * @param _from address of the lender who sends the borrow pool tokens
     * @param _to addres of the lender who receives the borrow pool tokens
     * @param _amount amount of borrow pool tokens transfered
     */
    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _amount
    ) internal override {
        if (_to != address(0)) {
            require(!paused(), 'TT1');
        }
        require(_to != poolConstants.borrower, 'TT2');

        if (_from == address(0) || _to == address(0)) {
            return;
        }
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        address _lenderVerifier = poolConstants.lenderVerifier;
        if (_lenderVerifier != address(0)) {
            require(IVerification(_poolFactory.userRegistry()).isUser(_to, _lenderVerifier), 'TT5');
        }
        require(getMarginCallEndTime(_from) == 0, 'TT3');
        require(getMarginCallEndTime(_to) == 0, 'TT4');

        //Withdraw repayments for user

        //We enforce pending interest withdrawals before the transfers
        
        //effectiveInterestWithdrawn stores the interest we assume addresses have withdrawn to simplify future interest withdrawals.
        // For eg, if _from has 100 pool tokens, _to has 50 pool tokens, and _amount is 50, the effectiveInterestWithdrawn for 
        // _from is done using 50 pool tokens, since future interest repayment withdrawals are done with respect to 50 tokens for _from
        // Similarly, we use 100 for _to's effectiveInterestWithdrawn calculation since their future interest withdrawals are calculated
        // based on 100 pool tokens. Refer calculateRepaymentWithdrawable()
        _withdrawRepayment(_from);
        _withdrawRepayment(_to);
        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));
        uint256 _totalSupply = totalSupply();
        uint256 _fromBalance = balanceOf(_from);
        uint256 _toBalance = balanceOf(_to);
        lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply);
        lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply);

        IExtension(_poolFactory.extension()).removeVotes(_from, _to, _amount);

        //transfer extra liquidity shares
        uint256 _liquidityShare = lenders[_from].extraLiquidityShares;
        if (_liquidityShare == 0) return;

        uint256 toTransfer = _liquidityShare;
        if (_amount != _fromBalance) {
            toTransfer = (_amount.mul(_liquidityShare)).div(_fromBalance);
        }

        lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer);
        lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer);
    }

    function _calculatePenaltyTime(uint256 _loanStartTime, uint256 _loanWithdrawalDeadline) internal view returns (uint256) {
        uint256 _penaltyTime = poolConstants.repaymentInterval;
        if (block.timestamp > _loanStartTime) {
            uint256 _penaltyEndTime = block.timestamp;
            if (block.timestamp > _loanWithdrawalDeadline) {
                _penaltyEndTime = _loanWithdrawalDeadline;
            }
            _penaltyTime = _penaltyTime.add(_penaltyEndTime.sub(_loanStartTime));
        }
        return _penaltyTime;
    }

    /**
     * @notice used to cancel pool when the minimum borrow amount is not met
     */
    function cancelPool() external {
        LoanStatus _poolStatus = poolVariables.loanStatus;
        require(_poolStatus == LoanStatus.COLLECTION, 'CP1');
        uint256 _loanStartTime = poolConstants.loanStartTime;
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);

        if (
            _loanStartTime < block.timestamp &&
            totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30)
        ) {
            return _cancelPool(0);
        }

        uint256 _loanWithdrawalDeadline = poolConstants.loanWithdrawalDeadline;

        if (_loanWithdrawalDeadline > block.timestamp) {
            require(msg.sender == poolConstants.borrower, 'CP2');
        }
        // note: extra liquidity shares are not applicable as the loan never reaches active state
        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares;
        uint256 _penaltyTime = _calculatePenaltyTime(_loanStartTime, _loanWithdrawalDeadline);
        uint256 _cancelPenaltyMultiple = _poolFactory.poolCancelPenaltyMultiple();
        uint256 penalty = _cancelPenaltyMultiple
            .mul(poolConstants.borrowRate)
            .div(10**30)
            .mul(_collateralLiquidityShare)
            .div(10**30)
            .mul(_penaltyTime)
            .div(365 days);
        _cancelPool(penalty);
    }

    /**
     * @notice internal function to cancel borrow pool
     * @param _penalty amount to be paid as penalty to cancel pool
     */
    function _cancelPool(uint256 _penalty) internal {
        poolVariables.loanStatus = LoanStatus.CANCELLED;
        _withdrawAllCollateral(poolConstants.borrower, _penalty);
        _pause();
        emit PoolCancelled();
    }

    /**
     * @notice used to liquidate the penalty amount when pool is calcelled
     * @dev _receiveLiquidityShares doesn't matter when _toSavingsAccount is true
     * @param _toSavingsAccount if true, liquidity transfered to lender's savings account. If false, liquidity transfered to lender's wallet
     * @param _receiveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn
     */
    function liquidateCancelPenalty(bool _toSavingsAccount, bool _receiveLiquidityShare) external nonReentrant {
        require(poolVariables.loanStatus == LoanStatus.CANCELLED, 'LCP1');
        require(poolVariables.penaltyLiquidityAmount == 0, 'LCP2');
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        address _collateralAsset = poolConstants.collateralAsset;
        // note: extra liquidity shares are not applicable as the loan never reaches active state
        uint256 _collateralTokens = poolVariables.baseLiquidityShares;
        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens, _collateralAsset);

        uint256 _liquidationTokens = correspondingBorrowTokens(
            _collateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );
        poolVariables.penaltyLiquidityAmount = _liquidationTokens;
        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _liquidationTokens, msg.sender, address(this));
        _withdraw(
            _toSavingsAccount,
            _receiveLiquidityShare,
            poolConstants.collateralAsset,
            poolConstants.poolSavingsStrategy,
            _collateralTokens
        );
    }

    /**
     * @notice used to terminate the pool
     * @dev kill switch for owner to terminate the pool
     */
    function terminatePool() external onlyOwner {
        _withdrawAllCollateral(msg.sender, 0);
        _pause();
        poolVariables.loanStatus = LoanStatus.TERMINATED;
        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();
        emit PoolTerminated();
    }

    /**
     * @notice called to close the loan after repayment of principal
     */
    function closeLoan() external payable override nonReentrant onlyRepaymentImpl {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'CL1');

        poolVariables.loanStatus = LoanStatus.CLOSED;

        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();
        _withdrawAllCollateral(poolConstants.borrower, 0);
        _pause();

        emit PoolClosed();
    }

    /**
     * @notice used to return total remaining repayments along with provided liquidity to the lender
     * @dev burns all shares and returns total remaining repayments along with provided liquidity
     */
    function withdrawLiquidity() external isLender(msg.sender) nonReentrant {
        LoanStatus _loanStatus = poolVariables.loanStatus;

        require(
            _loanStatus == LoanStatus.CLOSED ||
                _loanStatus == LoanStatus.CANCELLED ||
                _loanStatus == LoanStatus.DEFAULTED ||
                _loanStatus == LoanStatus.TERMINATED,
            'WL1'
        );

        //gets amount through liquidity shares
        uint256 _actualBalance = balanceOf(msg.sender);
        uint256 _toTransfer = _actualBalance;

        if (_loanStatus == LoanStatus.DEFAULTED || _loanStatus == LoanStatus.TERMINATED) {
            uint256 _totalAsset;
            if (poolConstants.borrowAsset != address(0)) {
                _totalAsset = IERC20(poolConstants.borrowAsset).balanceOf(address(this));
            } else {
                _totalAsset = address(this).balance;
            }
            //assuming their will be no tokens in pool in any case except liquidation (to be checked) or we should store the amount in liquidate()
            _toTransfer = _toTransfer.mul(_totalAsset).div(totalSupply());
        }

        if (_loanStatus == LoanStatus.CANCELLED) {
            _toTransfer = _toTransfer.add(_toTransfer.mul(poolVariables.penaltyLiquidityAmount).div(totalSupply()));
        }

        if (_loanStatus == LoanStatus.CLOSED) {
            //transfer repayment
            _withdrawRepayment(msg.sender);
        }
        //to add transfer if not included in above (can be transferred with liquidity)
        _burn(msg.sender, _actualBalance);

        //transfer liquidity provided
        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _toTransfer, address(this), msg.sender);

        emit LiquidityWithdrawn(_toTransfer, msg.sender);
    }

    /**
     * @notice function is executed by lender to exercise margin call
     * @dev It will revert in case collateral ratio is not below expected value
     * or the lender has already called it.
     */

    function requestMarginCall() external isLender(msg.sender) {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'RMC1');

        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(getMarginCallEndTime(msg.sender) == 0, 'RMC2');
        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender), 'RMC3');

        lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration());

        emit MarginCalled(msg.sender);
    }

    /**
     * @notice used to get the interest accrued till current time in the current loan duration
     * @return ineterest accrued till current time
     */
    function interestToPay() public view returns (uint256) {
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        (uint256 _loanDurationCovered, uint256 _interestPerSecond) = IRepayment(_poolFactory.repaymentImpl()).getInterestCalculationVars(
            address(this)
        );
        uint256 _currentBlockTime = block.timestamp.mul(10**30);
        uint256 _loanDurationTillNow = _currentBlockTime.sub(poolConstants.loanStartTime.mul(10**30));
        if (_loanDurationTillNow <= _loanDurationCovered) {
            return 0;
        }
        uint256 _interestAccrued = _interestPerSecond.mul(_loanDurationTillNow.sub(_loanDurationCovered)).div(10**60);

        return _interestAccrued;
    }

    /**
     * @notice used to calculate the collateral ratio
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @param _balance the principal amount lent
     * @param _liquidityShares amount of collateral tokens available
     * @return _ratio the collateral ratio
     */
    function calculateCollateralRatio(uint256 _balance, uint256 _liquidityShares) public returns (uint256 _ratio) {
        uint256 _interest = interestToPay().mul(_balance).div(totalSupply());
        address _collateralAsset = poolConstants.collateralAsset;
        address _strategy = poolConstants.poolSavingsStrategy;
        uint256 _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);

        uint256 _equivalentCollateral = getEquivalentTokens(_collateralAsset, poolConstants.borrowAsset, _currentCollateralTokens);
        _ratio = _equivalentCollateral.mul(10**30).div(_balance.add(_interest));
    }

    /**
     * @notice used to get the current collateral ratio of the borrow pool
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @return _ratio the current collateral ratio of the borrow pool
     */
    function getCurrentCollateralRatio() public returns (uint256 _ratio) {
        uint256 _liquidityShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);

        _ratio = calculateCollateralRatio(totalSupply(), _liquidityShares);
    }

    /**
     * @notice used to get the current collateral ratio of a lender
     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view
     * @return _ratio the current collateral ratio of the lender
     */
    function getCurrentCollateralRatio(address _lender) public returns (uint256 _ratio) {
        uint256 _balanceOfLender = balanceOf(_lender);
        uint256 _liquidityShares = (poolVariables.baseLiquidityShares.mul(_balanceOfLender).div(totalSupply())).add(
            lenders[_lender].extraLiquidityShares
        );

        return (calculateCollateralRatio(_balanceOfLender, _liquidityShares));
    }

    /**
     * @notice used to liquidate the pool if the borrower has defaulted
     * @param _fromSavingsAccount if true, collateral is transferred from sender's savings account, if false, it is transferred from sender's wallet
     * @param _toSavingsAccount if true, liquidity transfered to sender's savings account. If false, liquidity transfered to sender's wallet
     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn
     */
    function liquidatePool(
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        bool _recieveLiquidityShare
    ) external payable nonReentrant {
        LoanStatus _currentPoolStatus = poolVariables.loanStatus;
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(_currentPoolStatus == LoanStatus.ACTIVE, 'LP1');
        require(IRepayment(_poolFactory.repaymentImpl()).didBorrowerDefault(address(this)), 'LP2');
        poolVariables.loanStatus = LoanStatus.DEFAULTED;

        address _collateralAsset = poolConstants.collateralAsset;
        address _borrowAsset = poolConstants.borrowAsset;
        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;

        uint256 _collateralTokens = _collateralLiquidityShare;
        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare, _collateralAsset);

        uint256 _poolBorrowTokens = correspondingBorrowTokens(
            _collateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );
        delete poolVariables.extraLiquidityShares;
        delete poolVariables.baseLiquidityShares;

        _deposit(_fromSavingsAccount, false, _borrowAsset, _poolBorrowTokens, _poolFactory.noStrategyAddress(), msg.sender, address(this));
        _withdraw(_toSavingsAccount, _recieveLiquidityShare, _collateralAsset, _poolSavingsStrategy, _collateralTokens);
        emit PoolLiquidated(msg.sender);
    }

    /**
     * @notice internal function used to withdraw tokens
     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet
     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn
     * @param _asset address of the asset to be withdrawn
     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit
     * @param _amountInTokens amount of tokens to be withdrawn from the pool
     * @return amount of equivalent shares from given asset
     */
    function _withdraw(
        bool _toSavingsAccount,
        bool _recieveLiquidityShare,
        address _asset,
        address _poolSavingsStrategy,
        uint256 _amountInTokens
    ) internal returns (uint256) {
        ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());
        return
            SavingsAccountUtil.depositFromSavingsAccount(
                _savingsAccount,
                address(this),
                msg.sender,
                _amountInTokens,
                _asset,
                _poolSavingsStrategy,
                _recieveLiquidityShare,
                _toSavingsAccount
            );
    }

    /**
     * @notice used to ensure if a lender can be liquidated
     * @param _lender address of the lender to be liquidated
     */
    function _canLenderBeLiquidated(address _lender) internal {
        require((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline), 'CLBL1');
        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;
        require(getMarginCallEndTime(_lender) != 0, 'CLBL2');
        require(_marginCallEndTime < block.timestamp, 'CLBL3');

        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender), 'CLBL4');
        require(balanceOf(_lender) != 0, 'CLBL5');
    }

    /**
     * @notice used to add extra liquidity shares to lender's share
     * @param _lender address of the lender to be liquidated
     * @return _lenderCollateralLPShare share of the lender in collateral tokens
     * @return _lenderBalance balance of lender in pool tokens
     */
    function _updateLenderSharesDuringLiquidation(address _lender)
        internal
        returns (uint256 _lenderCollateralLPShare, uint256 _lenderBalance)
    {
        uint256 _poolBaseLPShares = poolVariables.baseLiquidityShares;
        _lenderBalance = balanceOf(_lender);

        uint256 _lenderBaseLPShares = (_poolBaseLPShares.mul(_lenderBalance)).div(totalSupply());
        uint256 _lenderExtraLPShares = lenders[_lender].extraLiquidityShares;
        poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares);
        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares);

        _lenderCollateralLPShare = _lenderBaseLPShares.add(_lenderExtraLPShares);
    }

    /**
     * @notice internal function to liquidate lender of the borrow pool
     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet
     * @param _lender address of the lender to be liquidated
     * @param _lenderCollateralTokens share of the lender in collateral tokens
     */
    function _liquidateForLender(
        bool _fromSavingsAccount,
        address _lender,
        uint256 _lenderCollateralTokens
    ) internal {
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;

        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        uint256 _lenderLiquidationTokens = correspondingBorrowTokens(
            _lenderCollateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );

        address _borrowAsset = poolConstants.borrowAsset;
        _deposit(_fromSavingsAccount, false, _borrowAsset, _lenderLiquidationTokens, _poolSavingsStrategy, msg.sender, _lender);
        _withdrawRepayment(_lender);
    }

    /**
     * @notice used to liquidate lender and burn lender's shares
     * @param _lender address of the lender to be liquidated
     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet
     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet
     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn
     */
    function liquidateForLender(
        address _lender,
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        bool _recieveLiquidityShare
    ) external payable nonReentrant {
        _canLenderBeLiquidated(_lender);

        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        (uint256 _lenderCollateralLPShare, uint256 _lenderBalance) = _updateLenderSharesDuringLiquidation(_lender);

        uint256 _lenderCollateralTokens = _lenderCollateralLPShare;
        _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare, poolConstants.collateralAsset);

        _liquidateForLender(_fromSavingsAccount, _lender, _lenderCollateralTokens);

        uint256 _amountReceived = _withdraw(
            _toSavingsAccount,
            _recieveLiquidityShare,
            poolConstants.collateralAsset,
            _poolSavingsStrategy,
            _lenderCollateralTokens
        );
        _burn(_lender, _lenderBalance);
        delete lenders[_lender];
        emit LenderLiquidated(msg.sender, _lender, _amountReceived);
    }

    /**
     * @notice used to get corresponding borrow tokens for given collateral tokens
     * @param _totalCollateralTokens amount of collateral tokens
     * @param _priceOracle address of the pool
     * @param _fraction Incentivizing fraction for the liquidator
     * @return corresponding borrow tokens for collateral tokens
     */
    function correspondingBorrowTokens(
        uint256 _totalCollateralTokens,
        address _priceOracle,
        uint256 _fraction
    ) public view returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(_priceOracle).getLatestPrice(
            poolConstants.collateralAsset,
            poolConstants.borrowAsset
        );
        return _totalCollateralTokens.mul(_ratioOfPrices).div(10**_decimals).mul(uint256(10**30).sub(_fraction)).div(10**30);
    }

    /**
     * @notice used to get the interest per second on the principal amount
     * @param _principal amount of principal lent
     * @return interest accrued on the principal in a second
     */
    function interestPerSecond(uint256 _principal) public view returns (uint256) {
        uint256 _interest = ((_principal).mul(poolConstants.borrowRate)).div(365 days);
        return _interest;
    }

    /**
     * @notice used to get the interest per period on the principal amount
     * @param _balance amount of principal lent
     * @return interest accrued on the principal in a period
     */
    function interestPerPeriod(uint256 _balance) external view returns (uint256) {
        return (interestPerSecond(_balance).mul(poolConstants.repaymentInterval));
    }

    /**
     * @notice used to get the current repayment period for the borrow pool
     * @return current repayment period
     */
    function calculateCurrentPeriod() external view returns (uint256) {
        uint256 _currentPeriod = (block.timestamp.sub(poolConstants.loanStartTime, '34')).div(poolConstants.repaymentInterval);
        return _currentPeriod;
    }

    /**
     * @notice internal function used to get the withdrawable amount for a _lender
     * @param _lender address of the _lender
     * @return amount of withdrawable token from the borrow pool
     */
    function calculateRepaymentWithdrawable(address _lender) public view returns (uint256) {
        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));

        uint256 _amountWithdrawable = (balanceOf(_lender).mul(_totalRepaidAmount).div(totalSupply())).sub(
            lenders[_lender].effectiveInterestWithdrawn
        );

        return _amountWithdrawable;
    }

    /**
     * @notice used to get the withdrawable amount of borrow token for a lender
     */
    function withdrawRepayment() external isLender(msg.sender) nonReentrant {
        _withdrawRepayment(msg.sender);
    }

    /**
     * @notice internal function used to withdraw borrow asset from the pool by _lender
     * @param _lender address of the _lender
     */
    function _withdrawRepayment(address _lender) internal {
        uint256 _amountToWithdraw = calculateRepaymentWithdrawable(_lender);

        if (_amountToWithdraw == 0) {
            return;
        }
        lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw);

        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _amountToWithdraw, address(this), _lender);
    }

    /**
     * @notice used to get the end time for a margin call
     * @param _lender address of the lender who has requested a margin call
     * @return the time at which the margin call ends
     */
    function getMarginCallEndTime(address _lender) public view override returns (uint256) {
        uint256 _marginCallDuration = IPoolFactory(poolFactory).marginCallDuration();
        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;

        if (block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2))) {
            _marginCallEndTime = 0;
        }
        return _marginCallEndTime;
    }

    /**
     * @notice used to get the balance details of a _lender
     * @param _lender address of the _lender
     * @return amount of pool tokens available with the _lender
     * @return amount of pool tokens available in the pool
     */
    function getBalanceDetails(address _lender) external view override returns (uint256, uint256) {
        return (balanceOf(_lender), totalSupply());
    }

    /**
     * @notice used to get the loan status of the borrow pool
     * @return integer respresenting loan status
     */
    function getLoanStatus() external view override returns (uint256) {
        return uint256(poolVariables.loanStatus);
    }

    /**
     * @notice used to receive ethers from savings accounts
     */
    receive() external payable {}

    /**
     * @notice used to get the equivalent amount of tokens from source to target tokens
     * @param _source address of the tokens to be converted
     * @param _target address of target conversion token
     * @param _amount amount of tokens to be converted
     * @return the equivalent amount of target tokens for given source tokens
     */
    function getEquivalentTokens(
        address _source,
        address _target,
        uint256 _amount
    ) public view returns (uint256) {
        (uint256 _price, uint256 _decimals) = IPriceOracle(IPoolFactory(poolFactory).priceOracle()).getLatestPrice(_source, _target);
        return _amount.mul(_price).div(10**_decimals);
    }

    /**
     * @notice used to get the address of the borrower of the pool
     * @return address of the borrower
     */
    function borrower() external view override returns (address) {
        return poolConstants.borrower;
    }

    /**
     * @notice used to total supply of pool tokens for the pool
     * @return total supply of pool tokens
     */
    function totalSupply() public view override(ERC20Upgradeable, IPool) returns (uint256) {
        return ERC20Upgradeable.totalSupply();
    }
}",10152,1045,"[H-03] denial of service

Submitted by certora
https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/Pool.sol#L645 if the borrow token is address(0) (ether), and someone calls withdrawLiquidity, it calls SavingsAccountUtil.transferTokens which will transfer to msg.sender, msg.value (of withdrawLiquidity, because it's an internal function). In other words, the liquidity provided will pay to themselves and their liquidity tokens will still be burned. therefore they will never be able to get their funds back.
  [M-03] Collateral can be deposited in a finished pool

The `_depositCollateral` function doesn't check the status of the pool so collateral can be deposited in a finished loan. This can happen by mistake and all funds will be lost.
https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207

",2,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';
import '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol';
import '../interfaces/IPoolFactory.sol';
import '../interfaces/IPriceOracle.sol';
import '../interfaces/IYield.sol';
import '../interfaces/IRepayment.sol';
import '../interfaces/ISavingsAccount.sol';
import '../SavingsAccount/SavingsAccountUtil.sol';
import '../interfaces/IPool.sol';
import '../interfaces/IExtension.sol';
import '../interfaces/IVerification.sol';


contract Pool is Initializable, ERC20PausableUpgradeable, IPool, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    enum LoanStatus {
        COLLECTION, 
        ACTIVE, 
        CLOSED, 
        CANCELLED, 
        DEFAULTED, 
        TERMINATED 
    }

    address poolFactory;

    struct LendingDetails {
        uint256 effectiveInterestWithdrawn;
        uint256 marginCallEndTime;
        uint256 extraLiquidityShares;
    }

    
    struct PoolConstants {
        address borrower;
        uint256 borrowAmountRequested;
        uint256 loanStartTime;
        uint256 loanWithdrawalDeadline;
        address borrowAsset;
        uint256 idealCollateralRatio;
        uint256 borrowRate;
        uint256 noOfRepaymentIntervals;
        uint256 repaymentInterval;
        address collateralAsset;
        address poolSavingsStrategy; 
        address lenderVerifier;
    }

    struct PoolVariables {
        uint256 baseLiquidityShares;
        uint256 extraLiquidityShares;
        LoanStatus loanStatus;
        uint256 penaltyLiquidityAmount;
    }

    
    mapping(address => LendingDetails) public lenders;

    
    PoolConstants public poolConstants;

    
    PoolVariables public poolVariables;

    
    modifier onlyBorrower(address _user) {
        require(_user == poolConstants.borrower, 'OB1');
        _;
    }

    
    modifier isLender(address _lender) {
        require(balanceOf(_lender) != 0, 'IL1');
        _;
    }

    
    modifier onlyOwner() {
        require(msg.sender == IPoolFactory(poolFactory).owner(), 'OO1');
        _;
    }

    
    modifier onlyRepaymentImpl() {
        require(msg.sender == IPoolFactory(poolFactory).repaymentImpl(), 'OR1');
        _;
    }

    
    function initialize(
        uint256 _borrowAmountRequested,
        uint256 _borrowRate,
        address _borrower,
        address _borrowAsset,
        address _collateralAsset,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        address _lenderVerifier,
        uint256 _loanWithdrawalDuration,
        uint256 _collectionPeriod
    ) external payable initializer {
        poolFactory = msg.sender;
        poolConstants.borrowAsset = _borrowAsset;
        poolConstants.idealCollateralRatio = _idealCollateralRatio;
        poolConstants.collateralAsset = _collateralAsset;
        poolConstants.poolSavingsStrategy = _poolSavingsStrategy;
        poolConstants.borrowAmountRequested = _borrowAmountRequested;
        _initialDeposit(_borrower, _collateralAmount, _transferFromSavingsAccount);
        poolConstants.borrower = _borrower;
        poolConstants.borrowRate = _borrowRate;
        poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals;
        poolConstants.repaymentInterval = _repaymentInterval;
        poolConstants.lenderVerifier = _lenderVerifier;

        poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod);
        poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration);
        __ERC20_init('Pool Tokens', 'PT');
        try ERC20Upgradeable(_borrowAsset).decimals() returns(uint8 _decimals) {
            _setupDecimals(_decimals);
        } catch(bytes memory) {}
    }

    
    function depositCollateral(uint256 _amount, bool _transferFromSavingsAccount) external payable override {
        require(_amount != 0, 'DC1');
        require(balanceOf(msg.sender) == 0, 'DC2');
        _depositCollateral(msg.sender, _amount, _transferFromSavingsAccount);
    }

    
    function _initialDeposit(
        address _borrower,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) internal {
        uint256 _equivalentCollateral = getEquivalentTokens(
            poolConstants.borrowAsset,
            poolConstants.collateralAsset,
            poolConstants.borrowAmountRequested
        );
        require(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30), 'ID1');
        _depositCollateral(_borrower, _amount, _transferFromSavingsAccount);
    }

    
    function _depositCollateral(
        address _depositor,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) internal nonReentrant {
        uint256 _sharesReceived = _deposit(
            _transferFromSavingsAccount,
            true,
            poolConstants.collateralAsset,
            _amount,
            poolConstants.poolSavingsStrategy,
            _depositor,
            address(this)
        );
        poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived);
        emit CollateralAdded(_depositor, _amount, _sharesReceived);
    }

    
    function _deposit(
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        address _asset,
        uint256 _amount,
        address _poolSavingsStrategy,
        address _depositFrom,
        address _depositTo
    ) internal returns (uint256 _sharesReceived) {
        if (_fromSavingsAccount) {
            _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(
                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),
                _depositFrom,
                _depositTo,
                _amount,
                _asset,
                _poolSavingsStrategy,
                true,
                _toSavingsAccount
            );
        } else {
            _sharesReceived = SavingsAccountUtil.directDeposit(
                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),
                _depositFrom,
                _depositTo,
                _amount,
                _asset,
                _toSavingsAccount,
                _poolSavingsStrategy
            );
        }
    }

    
    function addCollateralInMarginCall(
        address _lender,
        uint256 _amount,
        bool _transferFromSavingsAccount
    ) external payable override nonReentrant {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'ACMC1');
        require(balanceOf(msg.sender) == 0, 'ACMC2');
        require(getMarginCallEndTime(_lender) >= block.timestamp, 'ACMC3');

        require(_amount != 0, 'ACMC4');

        uint256 _sharesReceived = _deposit(
            _transferFromSavingsAccount,
            true,
            poolConstants.collateralAsset,
            _amount,
            poolConstants.poolSavingsStrategy,
            msg.sender,
            address(this)
        );

        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived);

        lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived);

        if (getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio) {
            delete lenders[_lender].marginCallEndTime;
        }

        emit MarginCallCollateralAdded(msg.sender, _lender, _amount, _sharesReceived);
    }

    
    function withdrawBorrowedAmount() external override onlyBorrower(msg.sender) nonReentrant {
        LoanStatus _poolStatus = poolVariables.loanStatus;
        uint256 _tokensLent = totalSupply();
        require(
            _poolStatus == LoanStatus.COLLECTION &&
                poolConstants.loanStartTime < block.timestamp &&
                block.timestamp < poolConstants.loanWithdrawalDeadline,
            'WBA1'
        );
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30), 'WBA2');

        poolVariables.loanStatus = LoanStatus.ACTIVE;
        uint256 _currentCollateralRatio = getCurrentCollateralRatio();
        require(_currentCollateralRatio >= poolConstants.idealCollateralRatio, 'WBA3');

        uint256 _noOfRepaymentIntervals = poolConstants.noOfRepaymentIntervals;
        uint256 _repaymentInterval = poolConstants.repaymentInterval;
        IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(
            _noOfRepaymentIntervals,
            _repaymentInterval,
            poolConstants.borrowRate,
            poolConstants.loanStartTime,
            poolConstants.borrowAsset
        );
        IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval);

        address _borrowAsset = poolConstants.borrowAsset;
        (uint256 _protocolFeeFraction, address _collector) = _poolFactory.getProtocolFeeData();
        uint256 _protocolFee = _tokensLent.mul(_protocolFeeFraction).div(10**30);
        delete poolConstants.loanWithdrawalDeadline;

        uint256 _feeAdjustedWithdrawalAmount = _tokensLent.sub(_protocolFee);

        SavingsAccountUtil.transferTokens(_borrowAsset, _protocolFee, address(this), _collector);
        SavingsAccountUtil.transferTokens(_borrowAsset, _feeAdjustedWithdrawalAmount, address(this), msg.sender);

        emit AmountBorrowed(_feeAdjustedWithdrawalAmount, _protocolFee);
    }

    
    function _withdrawAllCollateral(address _receiver, uint256 _penalty) internal {
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        address _collateralAsset = poolConstants.collateralAsset;
        uint256 _collateralShares = 0;
        if (poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty) {
            _collateralShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares).sub(_penalty);
        }
        
        uint256 _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares, _collateralAsset);

        poolVariables.baseLiquidityShares = _penalty;
        delete poolVariables.extraLiquidityShares;

        uint256 _sharesReceived;
        if (_collateralShares != 0) {
            ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());
            _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(
                _savingsAccount,
                address(this),
                _receiver,
                _collateralTokens,
                _collateralAsset,
                _poolSavingsStrategy
            );
        }
        emit CollateralWithdrawn(_receiver, _sharesReceived);
    }

    
    function lend(
        address _lender,
        uint256 _amount,
        address _strategy
    ) external payable nonReentrant {
        address _lenderVerifier = poolConstants.lenderVerifier;
        address _borrower = poolConstants.borrower;
        require(_lender != _borrower && _borrower != msg.sender, 'L1');
        if (_lenderVerifier != address(0)) {
            require(IVerification(IPoolFactory(poolFactory).userRegistry()).isUser(_lender, _lenderVerifier), 'L2');
        }
        require(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime, 'L3');
        uint256 _borrowAmountNeeded = poolConstants.borrowAmountRequested;
        uint256 _lentAmount = totalSupply();
        if (_amount.add(_lentAmount) > _borrowAmountNeeded) {
            _amount = _borrowAmountNeeded.sub(_lentAmount);
        }

        address _borrowToken = poolConstants.borrowAsset;
        bool _fromSavingsAccount;
        if(_strategy != address(0)) {
            _fromSavingsAccount = true;
        }
        _deposit(
            _fromSavingsAccount,
            false,
            _borrowToken,
            _amount,
            _strategy,
            msg.sender,
            address(this)
        );
        _mint(_lender, _amount);
        emit LiquiditySupplied(_amount, _lender);
    }

    
    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _amount
    ) internal override {
        if (_to != address(0)) {
            require(!paused(), 'TT1');
        }
        require(_to != poolConstants.borrower, 'TT2');

        if (_from == address(0) || _to == address(0)) {
            return;
        }
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        address _lenderVerifier = poolConstants.lenderVerifier;
        if (_lenderVerifier != address(0)) {
            require(IVerification(_poolFactory.userRegistry()).isUser(_to, _lenderVerifier), 'TT5');
        }
        require(getMarginCallEndTime(_from) == 0, 'TT3');
        require(getMarginCallEndTime(_to) == 0, 'TT4');

        

        
        
        
        
        
        
        
        _withdrawRepayment(_from);
        _withdrawRepayment(_to);
        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));
        uint256 _totalSupply = totalSupply();
        uint256 _fromBalance = balanceOf(_from);
        uint256 _toBalance = balanceOf(_to);
        lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply);
        lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply);

        IExtension(_poolFactory.extension()).removeVotes(_from, _to, _amount);

        
        uint256 _liquidityShare = lenders[_from].extraLiquidityShares;
        if (_liquidityShare == 0) return;

        uint256 toTransfer = _liquidityShare;
        if (_amount != _fromBalance) {
            toTransfer = (_amount.mul(_liquidityShare)).div(_fromBalance);
        }

        lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer);
        lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer);
    }

    function _calculatePenaltyTime(uint256 _loanStartTime, uint256 _loanWithdrawalDeadline) internal view returns (uint256) {
        uint256 _penaltyTime = poolConstants.repaymentInterval;
        if (block.timestamp > _loanStartTime) {
            uint256 _penaltyEndTime = block.timestamp;
            if (block.timestamp > _loanWithdrawalDeadline) {
                _penaltyEndTime = _loanWithdrawalDeadline;
            }
            _penaltyTime = _penaltyTime.add(_penaltyEndTime.sub(_loanStartTime));
        }
        return _penaltyTime;
    }

    
    function cancelPool() external {
        LoanStatus _poolStatus = poolVariables.loanStatus;
        require(_poolStatus == LoanStatus.COLLECTION, 'CP1');
        uint256 _loanStartTime = poolConstants.loanStartTime;
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);

        if (
            _loanStartTime < block.timestamp &&
            totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30)
        ) {
            return _cancelPool(0);
        }

        uint256 _loanWithdrawalDeadline = poolConstants.loanWithdrawalDeadline;

        if (_loanWithdrawalDeadline > block.timestamp) {
            require(msg.sender == poolConstants.borrower, 'CP2');
        }
        
        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares;
        uint256 _penaltyTime = _calculatePenaltyTime(_loanStartTime, _loanWithdrawalDeadline);
        uint256 _cancelPenaltyMultiple = _poolFactory.poolCancelPenaltyMultiple();
        uint256 penalty = _cancelPenaltyMultiple
            .mul(poolConstants.borrowRate)
            .div(10**30)
            .mul(_collateralLiquidityShare)
            .div(10**30)
            .mul(_penaltyTime)
            .div(365 days);
        _cancelPool(penalty);
    }

    
    function _cancelPool(uint256 _penalty) internal {
        poolVariables.loanStatus = LoanStatus.CANCELLED;
        _withdrawAllCollateral(poolConstants.borrower, _penalty);
        _pause();
        emit PoolCancelled();
    }

    
    function liquidateCancelPenalty(bool _toSavingsAccount, bool _receiveLiquidityShare) external nonReentrant {
        require(poolVariables.loanStatus == LoanStatus.CANCELLED, 'LCP1');
        require(poolVariables.penaltyLiquidityAmount == 0, 'LCP2');
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        address _collateralAsset = poolConstants.collateralAsset;
        
        uint256 _collateralTokens = poolVariables.baseLiquidityShares;
        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens, _collateralAsset);

        uint256 _liquidationTokens = correspondingBorrowTokens(
            _collateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );
        poolVariables.penaltyLiquidityAmount = _liquidationTokens;
        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _liquidationTokens, msg.sender, address(this));
        _withdraw(
            _toSavingsAccount,
            _receiveLiquidityShare,
            poolConstants.collateralAsset,
            poolConstants.poolSavingsStrategy,
            _collateralTokens
        );
    }

    
    function terminatePool() external onlyOwner {
        _withdrawAllCollateral(msg.sender, 0);
        _pause();
        poolVariables.loanStatus = LoanStatus.TERMINATED;
        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();
        emit PoolTerminated();
    }

    
    function closeLoan() external payable override nonReentrant onlyRepaymentImpl {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'CL1');

        poolVariables.loanStatus = LoanStatus.CLOSED;

        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();
        _withdrawAllCollateral(poolConstants.borrower, 0);
        _pause();

        emit PoolClosed();
    }

    
    function withdrawLiquidity() external isLender(msg.sender) nonReentrant {
        LoanStatus _loanStatus = poolVariables.loanStatus;

        require(
            _loanStatus == LoanStatus.CLOSED ||
                _loanStatus == LoanStatus.CANCELLED ||
                _loanStatus == LoanStatus.DEFAULTED ||
                _loanStatus == LoanStatus.TERMINATED,
            'WL1'
        );

        
        uint256 _actualBalance = balanceOf(msg.sender);
        uint256 _toTransfer = _actualBalance;

        if (_loanStatus == LoanStatus.DEFAULTED || _loanStatus == LoanStatus.TERMINATED) {
            uint256 _totalAsset;
            if (poolConstants.borrowAsset != address(0)) {
                _totalAsset = IERC20(poolConstants.borrowAsset).balanceOf(address(this));
            } else {
                _totalAsset = address(this).balance;
            }
            
            _toTransfer = _toTransfer.mul(_totalAsset).div(totalSupply());
        }

        if (_loanStatus == LoanStatus.CANCELLED) {
            _toTransfer = _toTransfer.add(_toTransfer.mul(poolVariables.penaltyLiquidityAmount).div(totalSupply()));
        }

        if (_loanStatus == LoanStatus.CLOSED) {
            
            _withdrawRepayment(msg.sender);
        }
        
        _burn(msg.sender, _actualBalance);

        
        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _toTransfer, address(this), msg.sender);

        emit LiquidityWithdrawn(_toTransfer, msg.sender);
    }

    

    function requestMarginCall() external isLender(msg.sender) {
        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'RMC1');

        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(getMarginCallEndTime(msg.sender) == 0, 'RMC2');
        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender), 'RMC3');

        lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration());

        emit MarginCalled(msg.sender);
    }

    
    function interestToPay() public view returns (uint256) {
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        (uint256 _loanDurationCovered, uint256 _interestPerSecond) = IRepayment(_poolFactory.repaymentImpl()).getInterestCalculationVars(
            address(this)
        );
        uint256 _currentBlockTime = block.timestamp.mul(10**30);
        uint256 _loanDurationTillNow = _currentBlockTime.sub(poolConstants.loanStartTime.mul(10**30));
        if (_loanDurationTillNow <= _loanDurationCovered) {
            return 0;
        }
        uint256 _interestAccrued = _interestPerSecond.mul(_loanDurationTillNow.sub(_loanDurationCovered)).div(10**60);

        return _interestAccrued;
    }

    
    function calculateCollateralRatio(uint256 _balance, uint256 _liquidityShares) public returns (uint256 _ratio) {
        uint256 _interest = interestToPay().mul(_balance).div(totalSupply());
        address _collateralAsset = poolConstants.collateralAsset;
        address _strategy = poolConstants.poolSavingsStrategy;
        uint256 _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);

        uint256 _equivalentCollateral = getEquivalentTokens(_collateralAsset, poolConstants.borrowAsset, _currentCollateralTokens);
        _ratio = _equivalentCollateral.mul(10**30).div(_balance.add(_interest));
    }

    
    function getCurrentCollateralRatio() public returns (uint256 _ratio) {
        uint256 _liquidityShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);

        _ratio = calculateCollateralRatio(totalSupply(), _liquidityShares);
    }

    
    function getCurrentCollateralRatio(address _lender) public returns (uint256 _ratio) {
        uint256 _balanceOfLender = balanceOf(_lender);
        uint256 _liquidityShares = (poolVariables.baseLiquidityShares.mul(_balanceOfLender).div(totalSupply())).add(
            lenders[_lender].extraLiquidityShares
        );

        return (calculateCollateralRatio(_balanceOfLender, _liquidityShares));
    }

    
    function liquidatePool(
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        bool _recieveLiquidityShare
    ) external payable nonReentrant {
        LoanStatus _currentPoolStatus = poolVariables.loanStatus;
        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        require(_currentPoolStatus == LoanStatus.ACTIVE, 'LP1');
        require(IRepayment(_poolFactory.repaymentImpl()).didBorrowerDefault(address(this)), 'LP2');
        poolVariables.loanStatus = LoanStatus.DEFAULTED;

        address _collateralAsset = poolConstants.collateralAsset;
        address _borrowAsset = poolConstants.borrowAsset;
        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;

        uint256 _collateralTokens = _collateralLiquidityShare;
        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare, _collateralAsset);

        uint256 _poolBorrowTokens = correspondingBorrowTokens(
            _collateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );
        delete poolVariables.extraLiquidityShares;
        delete poolVariables.baseLiquidityShares;

        _deposit(_fromSavingsAccount, false, _borrowAsset, _poolBorrowTokens, _poolFactory.noStrategyAddress(), msg.sender, address(this));
        _withdraw(_toSavingsAccount, _recieveLiquidityShare, _collateralAsset, _poolSavingsStrategy, _collateralTokens);
        emit PoolLiquidated(msg.sender);
    }

    
    function _withdraw(
        bool _toSavingsAccount,
        bool _recieveLiquidityShare,
        address _asset,
        address _poolSavingsStrategy,
        uint256 _amountInTokens
    ) internal returns (uint256) {
        ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());
        return
            SavingsAccountUtil.depositFromSavingsAccount(
                _savingsAccount,
                address(this),
                msg.sender,
                _amountInTokens,
                _asset,
                _poolSavingsStrategy,
                _recieveLiquidityShare,
                _toSavingsAccount
            );
    }

    
    function _canLenderBeLiquidated(address _lender) internal {
        require((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline), 'CLBL1');
        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;
        require(getMarginCallEndTime(_lender) != 0, 'CLBL2');
        require(_marginCallEndTime < block.timestamp, 'CLBL3');

        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender), 'CLBL4');
        require(balanceOf(_lender) != 0, 'CLBL5');
    }

    
    function _updateLenderSharesDuringLiquidation(address _lender)
        internal
        returns (uint256 _lenderCollateralLPShare, uint256 _lenderBalance)
    {
        uint256 _poolBaseLPShares = poolVariables.baseLiquidityShares;
        _lenderBalance = balanceOf(_lender);

        uint256 _lenderBaseLPShares = (_poolBaseLPShares.mul(_lenderBalance)).div(totalSupply());
        uint256 _lenderExtraLPShares = lenders[_lender].extraLiquidityShares;
        poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares);
        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares);

        _lenderCollateralLPShare = _lenderBaseLPShares.add(_lenderExtraLPShares);
    }

    
    function _liquidateForLender(
        bool _fromSavingsAccount,
        address _lender,
        uint256 _lenderCollateralTokens
    ) internal {
        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;

        IPoolFactory _poolFactory = IPoolFactory(poolFactory);
        uint256 _lenderLiquidationTokens = correspondingBorrowTokens(
            _lenderCollateralTokens,
            _poolFactory.priceOracle(),
            _poolFactory.liquidatorRewardFraction()
        );

        address _borrowAsset = poolConstants.borrowAsset;
        _deposit(_fromSavingsAccount, false, _borrowAsset, _lenderLiquidationTokens, _poolSavingsStrategy, msg.sender, _lender);
        _withdrawRepayment(_lender);
    }

    
    function liquidateForLender(
        address _lender,
        bool _fromSavingsAccount,
        bool _toSavingsAccount,
        bool _recieveLiquidityShare
    ) external payable nonReentrant {
        _canLenderBeLiquidated(_lender);

        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;
        (uint256 _lenderCollateralLPShare, uint256 _lenderBalance) = _updateLenderSharesDuringLiquidation(_lender);

        uint256 _lenderCollateralTokens = _lenderCollateralLPShare;
        _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare, poolConstants.collateralAsset);

        _liquidateForLender(_fromSavingsAccount, _lender, _lenderCollateralTokens);

        uint256 _amountReceived = _withdraw(
            _toSavingsAccount,
            _recieveLiquidityShare,
            poolConstants.collateralAsset,
            _poolSavingsStrategy,
            _lenderCollateralTokens
        );
        _burn(_lender, _lenderBalance);
        delete lenders[_lender];
        emit LenderLiquidated(msg.sender, _lender, _amountReceived);
    }

    
    function correspondingBorrowTokens(
        uint256 _totalCollateralTokens,
        address _priceOracle,
        uint256 _fraction
    ) public view returns (uint256) {
        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(_priceOracle).getLatestPrice(
            poolConstants.collateralAsset,
            poolConstants.borrowAsset
        );
        return _totalCollateralTokens.mul(_ratioOfPrices).div(10**_decimals).mul(uint256(10**30).sub(_fraction)).div(10**30);
    }

    
    function interestPerSecond(uint256 _principal) public view returns (uint256) {
        uint256 _interest = ((_principal).mul(poolConstants.borrowRate)).div(365 days);
        return _interest;
    }

    
    function interestPerPeriod(uint256 _balance) external view returns (uint256) {
        return (interestPerSecond(_balance).mul(poolConstants.repaymentInterval));
    }

    
    function calculateCurrentPeriod() external view returns (uint256) {
        uint256 _currentPeriod = (block.timestamp.sub(poolConstants.loanStartTime, '34')).div(poolConstants.repaymentInterval);
        return _currentPeriod;
    }

    
    function calculateRepaymentWithdrawable(address _lender) public view returns (uint256) {
        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));

        uint256 _amountWithdrawable = (balanceOf(_lender).mul(_totalRepaidAmount).div(totalSupply())).sub(
            lenders[_lender].effectiveInterestWithdrawn
        );

        return _amountWithdrawable;
    }

    
    function withdrawRepayment() external isLender(msg.sender) nonReentrant {
        _withdrawRepayment(msg.sender);
    }

    
    function _withdrawRepayment(address _lender) internal {
        uint256 _amountToWithdraw = calculateRepaymentWithdrawable(_lender);

        if (_amountToWithdraw == 0) {
            return;
        }
        lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw);

        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _amountToWithdraw, address(this), _lender);
    }

    
    function getMarginCallEndTime(address _lender) public view override returns (uint256) {
        uint256 _marginCallDuration = IPoolFactory(poolFactory).marginCallDuration();
        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;

        if (block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2))) {
            _marginCallEndTime = 0;
        }
        return _marginCallEndTime;
    }

    
    function getBalanceDetails(address _lender) external view override returns (uint256, uint256) {
        return (balanceOf(_lender), totalSupply());
    }

    
    function getLoanStatus() external view override returns (uint256) {
        return uint256(poolVariables.loanStatus);
    }

    
    receive() external payable {}

    
    function getEquivalentTokens(
        address _source,
        address _target,
        uint256 _amount
    ) public view returns (uint256) {
        (uint256 _price, uint256 _decimals) = IPriceOracle(IPoolFactory(poolFactory).priceOracle()).getLatestPrice(_source, _target);
        return _amount.mul(_price).div(10**_decimals);
    }

    
    function borrower() external view override returns (address) {
        return poolConstants.borrower;
    }

    
    function totalSupply() public view override(ERC20Upgradeable, IPool) returns (uint256) {
        return ERC20Upgradeable.totalSupply();
    }
}",7067,1,1,,"{'ReviewingTheCode': ""The provided code is a Solidity smart contract named 'Pool' that facilitates lending and borrowing operations. It integrates with various external contracts and libraries to manage collateral, loans, and repayments. The contract is upgradeable and uses OpenZeppelin libraries for security and reentrancy protection."", 'IdentifyingKeyComponents': {'ContractName': 'Pool', 'Purpose': 'The contract manages a lending pool where borrowers can request loans, and lenders can provide liquidity. It handles collateral deposits, loan disbursement, repayments, and liquidation processes.', 'InheritanceAndImports': {'InheritsFrom': ['Initializable', 'ERC20PausableUpgradeable', 'IPool', 'ReentrancyGuard'], 'Imports': ['@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol', '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol', '../interfaces/IPoolFactory.sol', '../interfaces/IPriceOracle.sol', '../interfaces/IYield.sol', '../interfaces/IRepayment.sol', '../interfaces/ISavingsAccount.sol', '../SavingsAccount/SavingsAccountUtil.sol', '../interfaces/IPool.sol', '../interfaces/IExtension.sol', '../interfaces/IVerification.sol']}, 'StateVariables': [{'Name': 'poolFactory', 'Type': 'address', 'Purpose': 'Address of the PoolFactory contract that manages the pool.'}, {'Name': 'lenders', 'Type': 'mapping(address => LendingDetails)', 'Purpose': 'Stores lending details for each lender.'}, {'Name': 'poolConstants', 'Type': 'PoolConstants', 'Purpose': 'Stores immutable parameters of the pool such as borrower, loan terms, and assets.'}, {'Name': 'poolVariables', 'Type': 'PoolVariables', 'Purpose': ""Stores mutable state variables related to the pool's status and liquidity shares.""}], 'FunctionsAndModifiers': [{'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the pool with borrower details, loan terms, and collateral.', 'Parameters': ['uint256 _borrowAmountRequested', 'uint256 _borrowRate', 'address _borrower', 'address _borrowAsset', 'address _collateralAsset', 'uint256 _idealCollateralRatio', 'uint256 _repaymentInterval', 'uint256 _noOfRepaymentIntervals', 'address _poolSavingsStrategy', 'uint256 _collateralAmount', 'bool _transferFromSavingsAccount', 'address _lenderVerifier', 'uint256 _loanWithdrawalDuration', 'uint256 _collectionPeriod'], 'Returns': []}, {'Name': 'depositCollateral', 'Visibility': 'external', 'Purpose': 'Allows the borrower to deposit collateral into the pool.', 'Parameters': ['uint256 _amount', 'bool _transferFromSavingsAccount'], 'Returns': []}, {'Name': 'lend', 'Visibility': 'external', 'Purpose': 'Allows lenders to provide liquidity to the pool.', 'Parameters': ['address _lender', 'uint256 _amount', 'address _strategy'], 'Returns': []}, {'Name': 'withdrawBorrowedAmount', 'Visibility': 'external', 'Purpose': 'Allows the borrower to withdraw the borrowed amount after the loan is approved.', 'Parameters': [], 'Returns': []}, {'Name': 'cancelPool', 'Visibility': 'external', 'Purpose': 'Cancels the pool and withdraws collateral to the borrower.', 'Parameters': [], 'Returns': []}, {'Name': 'liquidatePool', 'Visibility': 'external', 'Purpose': 'Liquidates the pool in case of default, transferring collateral to the liquidator.', 'Parameters': ['bool _fromSavingsAccount', 'bool _toSavingsAccount', 'bool _recieveLiquidityShare'], 'Returns': []}, {'Name': 'withdrawLiquidity', 'Visibility': 'external', 'Purpose': 'Allows lenders to withdraw their liquidity after the loan is closed or terminated.', 'Parameters': [], 'Returns': []}, {'Name': 'onlyBorrower', 'Visibility': 'modifier', 'Purpose': 'Restricts access to functions to only the borrower.', 'Parameters': ['address _user'], 'Returns': []}, {'Name': 'isLender', 'Visibility': 'modifier', 'Purpose': 'Restricts access to functions to only lenders with a balance.', 'Parameters': ['address _lender'], 'Returns': []}]}, 'ExternalInteractions': ['IPoolFactory', 'IPriceOracle', 'IYield', 'IRepayment', 'ISavingsAccount', 'IExtension', 'IVerification'], 'SpecialMechanisms': ['ReentrancyGuard: Prevents reentrancy attacks.', 'Initializable: Allows the contract to be initialized only once.', 'ERC20PausableUpgradeable: Implements pausable ERC20 token functionality.', 'SavingsAccountUtil: Handles deposits and withdrawals from a savings account.'], 'Questions': ['How is the loan interest calculated and distributed among lenders?', ""What is the purpose of the 'marginCallEndTime' in the LendingDetails struct?"", 'How does the contract handle partial liquidations for individual lenders?', ""What is the role of the 'poolSavingsStrategy' in the deposit and withdrawal processes?"", 'How are the penalty calculations for pool cancellation determined and enforced?']}","{'Findings': [{'Issue': 'Potential Reentrancy Vulnerability in External Calls', 'Severity': 'High', 'Description': 'Multiple functions (`_deposit`, `_withdraw`, `_withdrawAllCollateral`, `_depositCollateral`) interact with external contracts (`ISavingsAccount`, `IRepayment`) and are marked with the `nonReentrant` modifier. However, state changes occur after external calls, leaving them vulnerable to reentrancy attacks if the external contracts behave maliciously.', 'Impact': ""An attacker could exploit reentrancy to manipulate the contract's state, leading to loss of funds or unintended behavior."", 'Location': 'Pool.sol: `_deposit`, `_withdraw`, `_withdrawAllCollateral`, `_depositCollateral`'}, {'Issue': 'Price Oracle Manipulation Risk', 'Severity': 'Critical', 'Description': 'The contract relies on `IPriceOracle` for price data without validation, making it susceptible to manipulation. Functions like `getLatestPrice` and `getEquivalentTokens` use oracle data without checks.', 'Impact': 'Incorrect price data could lead to wrong collateralization ratios, liquidations, or borrowing amounts, causing financial losses.', 'Location': 'Functions using `IPriceOracle`: `correspondingBorrowTokens`, `getEquivalentTokens`, etc.'}, {'Issue': 'Incorrect Access Control Modifiers', 'Severity': 'High', 'Description': 'Modifiers like `onlyBorrower`, `onlyOwner`, and `onlyRepaymentImpl` have flawed checks (e.g., relying on parameters or mutable state), allowing unauthorized access to sensitive functions (e.g., `withdrawBorrowedAmount`, `terminatePool`, `closeLoan`).', 'Impact': 'Unauthorized users could execute critical functions, leading to fund loss or pool disruption.', 'Location': 'Modifiers: `onlyBorrower`, `onlyOwner`, `onlyRepaymentImpl`; Functions: `withdrawBorrowedAmount`, `terminatePool`, `closeLoan`'}, {'Issue': 'Arithmetic Vulnerabilities', 'Severity': 'High', 'Description': 'Arithmetic operations in `_calculatePenaltyTime` and `calculateCollateralRatio` lack `SafeMath` or checks for division by zero, risking overflows/underflows or reverts.', 'Impact': 'Incorrect calculations or transaction failures could affect penalties, collateral ratios, or liquidation fairness.', 'Location': 'Functions: `_calculatePenaltyTime`, `calculateCollateralRatio`'}, {'Issue': 'Lack of Input Validation in External Calls', 'Severity': 'High', 'Description': 'External calls (e.g., to `IPoolFactory`, `IRepayment`) lack validation of returned data or addresses, risking interactions with malicious contracts.', 'Impact': 'Malicious external contracts could manipulate state or cause failures.', 'Location': 'Functions: `initialize`, `withdrawBorrowedAmount`, etc.'}, {'Issue': 'Insufficient Initialization Checks', 'Severity': 'High', 'Description': 'The `initialize` function lacks validation of input parameters (e.g., `_borrower`, `_borrowAmountRequested`) and allows re-initialization, risking invalid setups.', 'Impact': 'Invalid or malicious initialization could compromise contract security.', 'Location': 'Function: `initialize`'}, {'Issue': 'Inaccurate Financial Calculations', 'Severity': 'Medium', 'Description': 'Functions like `interestToPay` and `_updateLenderSharesDuringLiquidation` have flawed logic (e.g., ignoring compounding interest or incorrect share calculations), leading to unfair outcomes.', 'Impact': 'Borrowers/lenders may be overcharged or undercompensated, reducing platform trust.', 'Location': 'Functions: `interestToPay`, `_updateLenderSharesDuringLiquidation`'}, {'Issue': 'Inefficient Gas Usage', 'Severity': 'Medium', 'Description': 'Redundant state reads, unoptimized loops, and excessive modifiers (e.g., `isLender`) increase gas costs. SafeMath could be replaced with Solidity 0.8+ checks.', 'Impact': 'Higher transaction costs for users.', 'Location': 'Throughout contract (e.g., `withdrawBorrowedAmount`, `liquidateForLender`)'}, {'Issue': 'Non-Compliance with ERC-20 Standards', 'Severity': 'Medium', 'Description': '`_beforeTokenTransfer` omits `super._beforeTokenTransfer` and lacks sender validation, potentially violating ERC-20 standards.', 'Impact': 'Token transfers may behave unexpectedly or allow unauthorized actions.', 'Location': 'Function: `_beforeTokenTransfer`'}, {'Issue': 'Unoptimized Storage Usage', 'Severity': 'Medium', 'Description': 'Storage is used for variables that could be memory-based (e.g., `poolVariables`), increasing gas costs for SSTORE/SLOAD operations.', 'Impact': 'Higher deployment and runtime costs.', 'Location': 'Variables: `poolVariables`, `lenders`'}, {'Issue': 'Lack of DeFi Protocol Compliance', 'Severity': 'High', 'Description': 'The contract does not explicitly adhere to DeFi/lending standards, risking integration issues with other protocols.', 'Impact': 'Incompatibility may lead to failed integrations or fund loss.', 'Location': 'Overall contract'}], 'IssueNumber': 38, 'OutputList': 11}",402.78576827049255,"### **[H-03] Denial of Service**

**Report Description**:  
If the borrow token is `address(0)` (ether), and someone calls `withdrawLiquidity`, it calls `SavingsAccountUtil.transferTokens`, which will transfer `msg.value` (of `withdrawLiquidity`, because it's an internal function) to `msg.sender`. This means the liquidity provided will pay to themselves, and their liquidity tokens will still be burned. As a result, they will never be able to get their funds back.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this specific issue. The described vulnerability involves a logical flaw in the `withdrawLiquidity` function when handling ether (`address(0)`), leading to a denial of service where users lose their funds. This issue is not covered in the response list, which focuses on reentrancy, price oracle manipulation, access control, arithmetic vulnerabilities, and other unrelated concerns.

---

### **[M-03] Collateral Can Be Deposited in a Finished Pool**

**Report Description**:  
The `_depositCollateral` function does not check the status of the pool, so collateral can be deposited in a finished loan. This can happen by mistake, and all funds will be lost.

**Match in Response List**:  
**No match found**.

**Validation**:  
**Incorrect**. The response list does not address this issue. The vulnerability arises from the lack of a status check in the `_depositCollateral` function, allowing deposits into finished pools, which could lead to fund loss. This specific issue is not mentioned in the response list, which focuses on reentrancy, access control, arithmetic vulnerabilities, and other unrelated concerns.

---

### **Summary of Matches and Gaps**

**Correct Matches**:  
- *None*

**Partially Correct Matches**:  
- *None*

**Missed Issues from Issue Report**:  
- **[H-03] Denial of Service**  
- **[M-03] Collateral Can Be Deposited in a Finished Pool**

---

### **Conclusion**  
The provided `response_list` does not adequately address the issues reported in the `issue` list. Both **[H-03] Denial of Service** and **[M-03] Collateral Can Be Deposited in a Finished Pool** are critical vulnerabilities that are entirely missed in the response list. The response list focuses on other areas of concern but fails to cover these specific risks, leaving significant gaps in the security analysis.","```
None.
```",0.0
YearnYield.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/IyVault.sol';

/**
 * @title Yield contract
 * @notice Implements the functions to lock/unlock tokens into YVault
 * @author Sublime
 **/
contract YearnYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    /**
     * @notice stores the address of savings account contract
     **/
    address payable public savingsAccount;

    /**
     * @notice stores the address of liquidity token for a given base token
     */
    mapping(address => address) public override liquidityToken;

    /**
     * @notice emitted when liquidity token address of an asset is updated
     * @param asset the address of asset
     * @param protocolToken address of the liquidity token for the asset
     **/
    event ProtocolAddressesUpdated(address indexed asset, address indexed protocolToken);

    /**
     * @notice checks if contract is invoked by savings account
     **/
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    /**
     * @notice used to initialize the variables in the contract
     * @dev can only be called once
     * @param _owner address of the owner
     * @param _savingsAccount address of the savings account contract
     **/
    function initialize(address _owner, address payable _savingsAccount) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
    }

    /**
     * @notice used to update savings account contract address
     * @dev can only be called by owner
     * @param _savingsAccount address of updated savings account contract
     **/
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    /**
     * @notice used to update liquidity token for a asset
     * @dev can only be called by owner
     * @param _asset address of the token
     * @param _liquidityToken address of the liquidityToken for the given token
     **/
    function updateProtocolAddresses(address _asset, address _liquidityToken) external onlyOwner {
        liquidityToken[_asset] = _liquidityToken;
        emit ProtocolAddressesUpdated(_asset, _liquidityToken);
    }

    /**
     * @notice used to withdraw all tokens of a type in case of emergencies
     * @dev only owner can withdraw
     * @param _asset address of the token being withdrawn
     * @param _wallet address to which tokens are withdrawn
     */
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner nonReentrant returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        address investedTo = liquidityToken[_asset];
        uint256 amount = IERC20(investedTo).balanceOf(address(this));

        if (_asset == address(0)) {
            received = _withdrawETH(investedTo, amount);
            (bool success, ) = _wallet.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(_asset, investedTo, amount);
            IERC20(_asset).safeTransfer(_wallet, received);
        }
    }

    /**
     * @notice Used to lock tokens in available protocol
     * @dev Asset Tokens to be locked must be approved to this contract by user
     * @param user the address of user
     * @param asset the address of token to invest
     * @param amount the amount of asset
     * @return sharesReceived amount of shares received
     **/
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');

        address investedTo = liquidityToken[asset];
        if (asset == address(0)) {
            require(msg.value == amount, 'Invest: ETH amount');
            sharesReceived = _depositETH(investedTo, amount);
        } else {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
            sharesReceived = _depositERC20(asset, investedTo, amount);
        }

        emit LockedTokens(user, investedTo, sharesReceived);
    }

    /**
     * @notice Used to unlock tokens from available protocol
     * @param asset the address of underlying token
     * @param amount the amount of asset
     * @return received amount of tokens received
     **/
    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        require(amount != 0, 'Invest: amount');
        address investedTo = liquidityToken[asset];

        if (asset == address(0)) {
            received = _withdrawETH(investedTo, amount);
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(asset, investedTo, amount);
            IERC20(asset).safeTransfer(savingsAccount, received);
        }

        emit UnlockedTokens(asset, received);
    }

    /**
     * @notice Used to unlock shares
     * @param asset the address of underlying token
     * @param amount the amount of shares to unlock
     * @return received amount of shares received
     **/
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        require(asset != address(0), 'Asset address cannot be address(0)');
        IERC20(asset).safeTransfer(savingsAccount, amount);

        emit UnlockedShares(asset, amount);
        return amount;
    }

    /**
     * @dev Used to get amount of underlying tokens for current number of shares
     * @param shares the amount of shares
     * @return amount amount of underlying tokens
     **/
    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
        if (shares == 0) return 0;
        amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);
    }

    /**
     * @notice Used to get number of shares from an amount of underlying tokens
     * @param amount the amount of tokens
     * @param asset the address of token
     * @return shares amount of shares for given tokens
     **/
    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {
        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));
    }

    function _depositETH(address vault, uint256 amount) internal returns (uint256 sharesReceived) {
        uint256 initialTokenBalance = IERC20(vault).balanceOf(address(this));

        //mint vault
        IyVault(vault).depositETH{value: amount}();

        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(initialTokenBalance);
    }

    function _depositERC20(
        address asset,
        address vault,
        uint256 amount
    ) internal returns (uint256 sharesReceived) {
        uint256 sharesBefore = IERC20(vault).balanceOf(address(this));

        //lock collateral in vault
        IERC20(asset).approve(vault, 0);
        IERC20(asset).approve(vault, amount);
        IyVault(vault).deposit(amount);

        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(sharesBefore);
    }

    function _withdrawETH(address vault, uint256 amount) internal returns (uint256 received) {
        uint256 ethBalance = address(this).balance;

        IyVault(vault).withdrawETH(amount);

        received = address(this).balance.sub(ethBalance);
    }

    function _withdrawERC(
        address asset,
        address vault,
        uint256 amount
    ) internal returns (uint256 tokensReceived) {
        uint256 initialAssetBalance = IERC20(asset).balanceOf(address(this));

        IyVault(vault).withdraw(amount);

        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(initialAssetBalance);
    }

    receive() external payable {}
}

",1949,240,"[H-04] Yearn token <> shares conversion decimal issue

Submitted by cmichel
The yearn strategy YearnYield converts shares to tokens by doing pricePerFullShare * shares / 1e18:
``` function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
    if (shares == 0) return 0;
    // @audit should divided by vaultDecimals 
    amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);
}
```
But Yearn's getPricePerFullShare seems to be in vault.decimals() precision, i.e., it should convert it as pricePerFullShare * shares / (10 ** vault.decimals()). The vault decimals are the same as the underlying token decimals
",1,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/IyVault.sol';


contract YearnYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    
    address payable public savingsAccount;

    
    mapping(address => address) public override liquidityToken;

    
    event ProtocolAddressesUpdated(address indexed asset, address indexed protocolToken);

    
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    
    function initialize(address _owner, address payable _savingsAccount) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
    }

    
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    
    function updateProtocolAddresses(address _asset, address _liquidityToken) external onlyOwner {
        liquidityToken[_asset] = _liquidityToken;
        emit ProtocolAddressesUpdated(_asset, _liquidityToken);
    }

    
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner nonReentrant returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        address investedTo = liquidityToken[_asset];
        uint256 amount = IERC20(investedTo).balanceOf(address(this));

        if (_asset == address(0)) {
            received = _withdrawETH(investedTo, amount);
            (bool success, ) = _wallet.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(_asset, investedTo, amount);
            IERC20(_asset).safeTransfer(_wallet, received);
        }
    }

    
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');

        address investedTo = liquidityToken[asset];
        if (asset == address(0)) {
            require(msg.value == amount, 'Invest: ETH amount');
            sharesReceived = _depositETH(investedTo, amount);
        } else {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
            sharesReceived = _depositERC20(asset, investedTo, amount);
        }

        emit LockedTokens(user, investedTo, sharesReceived);
    }

    
    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        require(amount != 0, 'Invest: amount');
        address investedTo = liquidityToken[asset];

        if (asset == address(0)) {
            received = _withdrawETH(investedTo, amount);
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(asset, investedTo, amount);
            IERC20(asset).safeTransfer(savingsAccount, received);
        }

        emit UnlockedTokens(asset, received);
    }

    
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        require(asset != address(0), 'Asset address cannot be address(0)');
        IERC20(asset).safeTransfer(savingsAccount, amount);

        emit UnlockedShares(asset, amount);
        return amount;
    }

    
    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
        if (shares == 0) return 0;
        amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);
    }

    
    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {
        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));
    }

    function _depositETH(address vault, uint256 amount) internal returns (uint256 sharesReceived) {
        uint256 initialTokenBalance = IERC20(vault).balanceOf(address(this));

        
        IyVault(vault).depositETH{value: amount}();

        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(initialTokenBalance);
    }

    function _depositERC20(
        address asset,
        address vault,
        uint256 amount
    ) internal returns (uint256 sharesReceived) {
        uint256 sharesBefore = IERC20(vault).balanceOf(address(this));

        
        IERC20(asset).approve(vault, 0);
        IERC20(asset).approve(vault, amount);
        IyVault(vault).deposit(amount);

        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(sharesBefore);
    }

    function _withdrawETH(address vault, uint256 amount) internal returns (uint256 received) {
        uint256 ethBalance = address(this).balance;

        IyVault(vault).withdrawETH(amount);

        received = address(this).balance.sub(ethBalance);
    }

    function _withdrawERC(
        address asset,
        address vault,
        uint256 amount
    ) internal returns (uint256 tokensReceived) {
        uint256 initialAssetBalance = IERC20(asset).balanceOf(address(this));

        IyVault(vault).withdraw(amount);

        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(initialAssetBalance);
    }

    receive() external payable {}
}",1345,1,0,,"{'ReviewingTheCode': ""The provided smart contract is named 'YearnYield' and appears to be designed to manage yield farming strategies, particularly for integrating with Yearn Finance vaults. It allows users to lock and unlock tokens, deposit and withdraw assets, and manage liquidity tokens. The contract is upgradeable and leverages OpenZeppelin libraries for security and reentrancy protection."", 'IdentifyingKeyComponents': {'ContractName': 'YearnYield', 'Purpose': 'To manage yield farming strategies, particularly for integrating with Yearn Finance vaults, allowing users to lock and unlock tokens, deposit and withdraw assets, and manage liquidity tokens.', 'InheritanceAndImports': {'InheritsFrom': ['IYield', 'Initializable', 'OwnableUpgradeable', 'ReentrancyGuard'], 'Imports': ['@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '../interfaces/IYield.sol', '../interfaces/Invest/IyVault.sol']}, 'StateVariables': [{'Name': 'savingsAccount', 'Type': 'address payable', 'Purpose': 'Stores the address of the savings account that can interact with the contract.'}, {'Name': 'liquidityToken', 'Type': 'mapping(address => address)', 'Purpose': 'Maps an asset address to its corresponding liquidity token address.'}], 'FunctionsAndModifiers': [{'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with the owner and savings account addresses.', 'Parameters': ['address _owner', 'address payable _savingsAccount'], 'Returns': []}, {'Name': 'updateSavingsAccount', 'Visibility': 'external', 'Purpose': 'Updates the savings account address.', 'Parameters': ['address payable _savingsAccount'], 'Returns': []}, {'Name': '_updateSavingsAccount', 'Visibility': 'internal', 'Purpose': 'Internal function to update the savings account address.', 'Parameters': ['address payable _savingsAccount'], 'Returns': []}, {'Name': 'updateProtocolAddresses', 'Visibility': 'external', 'Purpose': 'Updates the protocol addresses for a given asset and its liquidity token.', 'Parameters': ['address _asset', 'address _liquidityToken'], 'Returns': []}, {'Name': 'emergencyWithdraw', 'Visibility': 'external', 'Purpose': 'Allows the owner to withdraw assets in case of an emergency.', 'Parameters': ['address _asset', 'address payable _wallet'], 'Returns': ['uint256 received']}, {'Name': 'lockTokens', 'Visibility': 'external', 'Purpose': 'Locks tokens for a user and deposits them into a Yearn vault.', 'Parameters': ['address user', 'address asset', 'uint256 amount'], 'Returns': ['uint256 sharesReceived']}, {'Name': 'unlockTokens', 'Visibility': 'external', 'Purpose': 'Unlocks tokens from a Yearn vault and returns them to the savings account.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256 received']}, {'Name': 'unlockShares', 'Visibility': 'external', 'Purpose': 'Unlocks shares and transfers them to the savings account.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256']}, {'Name': 'getTokensForShares', 'Visibility': 'public', 'Purpose': 'Calculates the amount of tokens for a given number of shares.', 'Parameters': ['uint256 shares', 'address asset'], 'Returns': ['uint256 amount']}, {'Name': 'getSharesForTokens', 'Visibility': 'external', 'Purpose': 'Calculates the number of shares for a given amount of tokens.', 'Parameters': ['uint256 amount', 'address asset'], 'Returns': ['uint256 shares']}, {'Name': '_depositETH', 'Visibility': 'internal', 'Purpose': 'Internal function to deposit ETH into a Yearn vault.', 'Parameters': ['address vault', 'uint256 amount'], 'Returns': ['uint256 sharesReceived']}, {'Name': '_depositERC20', 'Visibility': 'internal', 'Purpose': 'Internal function to deposit ERC20 tokens into a Yearn vault.', 'Parameters': ['address asset', 'address vault', 'uint256 amount'], 'Returns': ['uint256 sharesReceived']}, {'Name': '_withdrawETH', 'Visibility': 'internal', 'Purpose': 'Internal function to withdraw ETH from a Yearn vault.', 'Parameters': ['address vault', 'uint256 amount'], 'Returns': ['uint256 received']}, {'Name': '_withdrawERC', 'Visibility': 'internal', 'Purpose': 'Internal function to withdraw ERC20 tokens from a Yearn vault.', 'Parameters': ['address asset', 'address vault', 'uint256 amount'], 'Returns': ['uint256 tokensReceived']}, {'Name': 'onlySavingsAccount', 'Visibility': 'modifier', 'Purpose': 'Restricts function access to the savings account.', 'Parameters': [], 'Returns': []}]}, 'ExternalInteractions': ['IyVault: Used for interacting with Yearn Finance vaults.', 'IERC20: Used for handling ERC20 token transfers and approvals.'], 'SpecialMechanisms': [""Upgradeable: The contract is designed to be upgradeable using OpenZeppelin's Initializable and OwnableUpgradeable patterns."", 'ReentrancyGuard: Protects against reentrancy attacks.', 'SafeMath: Ensures safe arithmetic operations.', 'SafeERC20: Provides safe ERC20 token transfer functionality.'], 'Questions': ['How are the liquidity tokens managed and updated?', 'Are there any specific considerations for the Yearn vault interactions?', 'Is there any additional documentation or context for the IYield and IyVault interfaces?']}","{'Findings': [{'Issue': 'Potential Reentrancy Vulnerability in `emergencyWithdraw`', 'Severity': 'High', 'Description': ""The `emergencyWithdraw` function transfers ETH or ERC20 tokens to a specified wallet after withdrawing them from the vault. Although the function uses the `nonReentrant` modifier, the external call to `_wallet.call{value: received}('')` could potentially be exploited if the receiving contract has a fallback function that re-enters the `emergencyWithdraw` function. This could lead to reentrancy attacks."", 'Impact': ""An attacker could potentially drain the contract's funds by exploiting the reentrancy vulnerability."", 'Location': '`emergencyWithdraw` function'}, {'Issue': 'Lack of Input Validation in `updateProtocolAddresses`', 'Severity': 'Medium', 'Description': 'The `updateProtocolAddresses` function allows the owner to update the `liquidityToken` mapping without validating the input addresses. If a zero address or an invalid address is provided, it could lead to unexpected behavior or loss of funds.', 'Impact': 'Invalid or zero addresses could cause the contract to malfunction, leading to potential loss of funds or inability to interact with the intended protocol.', 'Location': '`updateProtocolAddresses` function'}, {'Issue': 'Potential Division by Zero in `getSharesForTokens`', 'Severity': 'Medium', 'Description': 'The `getSharesForTokens` function calculates shares by dividing `amount.mul(1e18)` by `getTokensForShares(1e18, asset)`. If `getTokensForShares(1e18, asset)` returns zero, this will result in a division by zero error, causing the transaction to revert.', 'Impact': 'This could lead to a denial of service or unexpected reverts when calculating shares for tokens.', 'Location': '`getSharesForTokens` function'}, {'Issue': 'Potential Front-Running in `lockTokens` and `unlockTokens`', 'Severity': 'Medium', 'Description': 'The `lockTokens` and `unlockTokens` functions do not include mechanisms to prevent front-running. An attacker could observe a pending transaction and submit their own transaction with a higher gas fee to manipulate the outcome.', 'Impact': 'Front-running could lead to unfair advantages or financial losses for users.', 'Location': '`lockTokens` and `unlockTokens` functions'}, {'Issue': 'Incorrect Use of `super.transferOwnership` in `initialize`', 'Severity': 'Low', 'Description': 'The `initialize` function uses `super.transferOwnership(_owner)` instead of `transferOwnership(_owner)`. This is redundant and could lead to confusion or unintended behavior in the ownership transfer process.', 'Impact': 'The ownership transfer might not work as expected, potentially leading to issues in managing the contract.', 'Location': '`initialize` function'}, {'Issue': 'Missing Event Emission in `_updateSavingsAccount`', 'Severity': 'Low', 'Description': ""The `_updateSavingsAccount` function updates the `savingsAccount` address but does not emit an event to log this change. This could make it difficult to track changes to the `savingsAccount` address in the contract's history."", 'Impact': 'Lack of transparency and auditability in tracking changes to the `savingsAccount` address.', 'Location': '`_updateSavingsAccount` function'}, {'Issue': 'Use of Deprecated `SafeMath` Library', 'Severity': 'Low', 'Description': 'The contract uses the `SafeMath` library, which is no longer necessary in Solidity 0.8.0 and above. While this is not a security issue, it indicates that the contract could be modernized.', 'Impact': ""None, but it suggests that the contract could be updated to use Solidity's built-in overflow checks."", 'Location': 'Entire contract'}], 'IssueNumber': 14, 'OutputList': 7}",521.7135407924652,"---

**[H-04] Yearn token <> shares conversion decimal issue**

**Report Description**:
The `YearnYield` strategy converts shares to tokens using the formula `pricePerFullShare * shares / 1e18`. However, Yearn's `getPricePerFullShare` function returns the value in `vault.decimals()` precision, meaning the correct conversion should be `pricePerFullShare * shares / (10 ** vault.decimals())`. The current implementation assumes a fixed precision of `1e18`, which is incorrect if the vault decimals differ from 18. This could lead to incorrect token calculations, especially when dealing with tokens that have different decimal precisions.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of incorrect decimal handling in the `YearnYield` strategy. None of the findings in the response list mention or relate to the specific problem of token-to-shares conversion precision, which is a critical vulnerability in this context. The issue remains unaddressed.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-04] Yearn token <> shares conversion decimal issue**

---","```
None.
```",0.0
AaveYield.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/IWETHGateway.sol';
import '../interfaces/Invest/AaveLendingPool.sol';
import '../interfaces/Invest/IScaledBalanceToken.sol';
import '../interfaces/Invest/IProtocolDataProvider.sol';

/**
 * @title Yield contract
 * @notice Implements the functions to lock/unlock tokens into Aave protocol
 * @author Sublime
 **/
contract AaveYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    /**
     * @notice address of wethGateway used to deposit ETH to aave
     */
    address public wethGateway;

    /**
     * @notice address of protocolDataProvider which provides info about aTokens related to any token
     */
    address public protocolDataProvider;

    /**
     * @notice address of lendingPoolAddressesProvider used to get the pool related to any token
     */
    address public lendingPoolAddressesProvider;

    /**
     * @notice address of savings account contract
     */
    address payable public savingsAccount;

    /**
     * @notice aave referral code to represent sublime
     */
    uint16 public referralCode;

    /**
     * @notice emitted when aave protocol related addresses are updated
     * @param wethGateway address of wethGateway
     * @param protocolDataProvider address of protocol data provider
     * @param lendingPoolAddressesProvider address of lending pool addresses provider
     */
    event AaveAddressesUpdated(
        address indexed wethGateway,
        address indexed protocolDataProvider,
        address indexed lendingPoolAddressesProvider
    );

    /**
     * @notice emitted when aave referral code is updated
     * @param referralCode updated referral code
     */
    event ReferralCodeUpdated(uint16 referralCode);

    /**
     * @notice verifies if savings account invoked the contract
     */
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    /**
     * @notice To initialize the contract addresses interacting with this contract
     * @dev can only be initialized once
     * @param _owner address of owner
     * @param _savingsAccount address of the savings account contract
     * @param _wethGateway address of wethGateway
     * @param _protocolDataProvider the address of ProtocolDataProvider
     * @param _lendingPoolAddressesProvider the address of LendingPoolAddressesProvider
     **/
    function initialize(
        address _owner,
        address payable _savingsAccount,
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    /**
     * @notice Used to get liquidity token address from asset address
     * @param asset the address of underlying token
     * @return aToken address of liquidity token
     **/
    function liquidityToken(address asset) public view override returns (address aToken) {
        if (asset == address(0)) {
            aToken = IWETHGateway(wethGateway).getAWETHAddress();
        } else {
            (aToken, , ) = IProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(asset);
        }
    }

    /**
     * @notice used to update savings account address
     * @dev only owner can update
     * @param _savingsAccount address of the updated savings account
     */
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    /**
     * @notice used to update aave protocol related addresses
     * @dev only owner can update
     * @param _wethGateway address of wethGateway
     * @param _protocolDataProvider address of protocol data provider
     * @param _lendingPoolAddressesProvider address of lending pool addresses provider
     */
    function updateAaveAddresses(
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) external onlyOwner {
        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    function _updateAaveAddresses(
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) internal {
        require(_wethGateway != address(0), 'Invest: WETHGateway:: zero address');
        require(_protocolDataProvider != address(0), 'Invest: protocolDataProvider:: zero address');
        require(_lendingPoolAddressesProvider != address(0), 'Invest: lendingPoolAddressesProvider:: zero address');
        wethGateway = _wethGateway;
        protocolDataProvider = _protocolDataProvider;
        lendingPoolAddressesProvider = _lendingPoolAddressesProvider;
        emit AaveAddressesUpdated(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    /**
     * @notice used to update referral code
     * @dev only owner can update
     * @param _referralCode updated referral code
     */
    function updateReferralCode(uint16 _referralCode) external onlyOwner {
        referralCode = _referralCode;
        emit ReferralCodeUpdated(_referralCode);
    }

    /**
     * @notice used to withdraw all tokens of a type in case of emergencies
     * @dev only owner can withdraw
     * @param _asset address of the token being withdrawn
     * @param _wallet address to which tokens are withdrawn
     */
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        uint256 amount = IERC20(liquidityToken(_asset)).balanceOf(address(this));

        if (_asset == address(0)) {
            received = _withdrawETH(amount);
            (bool success, ) = _wallet.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(_asset, amount);
            IERC20(_asset).safeTransfer(_wallet, received);
        }
    }

    /**
     * @notice Used to lock tokens in protocol
     * @dev Asset Tokens to be locked must be approved to this contract by user
     * @param asset the address of token to invest
     * @param amount the amount of asset
     * @return sharesReceived amount of shares received
     **/
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');

        address investedTo;
        if (asset == address(0)) {
            require(msg.value == amount, 'Invest: ETH amount');
            (investedTo, sharesReceived) = _depositETH(amount);
        } else {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
            (investedTo, sharesReceived) = _depositERC20(asset, amount);
        }

        emit LockedTokens(user, investedTo, sharesReceived);
    }

    /**
     * @notice Used to unlock tokens from available protocol
     * @param asset the address of underlying token
     * @param amount the amount of asset
     * @return received amount of tokens received
     **/
    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        require(amount != 0, 'Invest: amount');

        if (asset == address(0)) {
            received = _withdrawETH(amount);
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(asset, amount);
            IERC20(asset).safeTransfer(savingsAccount, received);
        }

        emit UnlockedTokens(asset, received);
    }

    /**
     * @notice Used to unlock shares
     * @param asset the address of underlying token
     * @param amount the amount of shares to unlock
     * @return received amount of shares received
     **/
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        require(asset != address(0), 'Asset address cannot be address(0)');
        IERC20(asset).safeTransfer(savingsAccount, amount);

        emit UnlockedShares(asset, amount);
        return amount;
    }

    /**
     * @notice Used to get amount of underlying tokens for current number of shares
     * @param shares the amount of shares
     * @param asset the address of token locked
     * @return amount amount of underlying tokens
     **/
    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
        if (shares == 0) return 0;
        address aToken = liquidityToken(asset);

        (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);

        amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(
            IERC20(aToken).balanceOf(address(this))
        );
    }

    /**
     * @notice Used to get number of shares from an amount of underlying tokens
     * @param amount the amount of tokens
     * @param asset the address of token
     * @return shares amount of shares for given tokens
     **/
    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {
        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));
    }

    function _depositETH(uint256 amount) internal returns (address aToken, uint256 sharesReceived) {
        aToken = IWETHGateway(wethGateway).getAWETHAddress();

        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        //lock collateral
        IWETHGateway(wethGateway).depositETH{value: amount}(lendingPool, address(this), referralCode);

        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);
    }

    function _depositERC20(address asset, uint256 amount) internal returns (address aToken, uint256 sharesReceived) {
        aToken = liquidityToken(asset);
        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        //approve collateral to vault
        IERC20(asset).approve(lendingPool, 0);
        IERC20(asset).approve(lendingPool, amount);

        //lock collateral in vault
        AaveLendingPool(lendingPool).deposit(asset, amount, address(this), referralCode);

        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);
    }

    function _withdrawETH(uint256 amount) internal returns (uint256 received) {
        IERC20(IWETHGateway(wethGateway).getAWETHAddress()).approve(wethGateway, amount);

        uint256 ethBalance = address(this).balance;

        //lock collateral
        IWETHGateway(wethGateway).withdrawETH(amount, address(this));

        received = address(this).balance.sub(ethBalance);
    }

    function _withdrawERC(address asset, uint256 amount) internal returns (uint256 tokensReceived) {
        address aToken = liquidityToken(asset);

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        uint256 tokensBefore = IERC20(asset).balanceOf(address(this));

        IERC20(aToken).approve(lendingPool, amount);

        //withdraw collateral from vault
        AaveLendingPool(lendingPool).withdraw(asset, amount, address(this));

        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(tokensBefore);
    }

    receive() external payable {}
}

",2772,335,"[H-05] Aave's share tokens are rebasing breaking current strategy code

When depositing into Aave through the `AaveYield.lockTokens` contract strategy, one receives the sharesReceived amount corresponding to the diff of aToken balance, which is just always the deposited amount as aave is a rebasing token and 1.0 aToken = 1.0 underlying at each deposit / withdrawal.
Note that this sharesReceived (the underlying deposit amount) is cached in a balanceInShares map in SavingsAccount.deposit which makes this share static and not dynamically rebasing anymore:
  [M-07] AaveYield: Misspelled external function name making functions fail

In AaveYield.sol the functions:
liquidityToken
_withdrawETH
_depositETH
Make a conditional call to `IWETHGateway(wethGateway).getAWETHAddress()`
This function does not exist in the wethGateway contract, causing these function to fail with the error ""Fallback not allowed"".
The function they should be calling is getWethAddress() without the ""A"".
Small yet dangerous typo.
",2,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/IWETHGateway.sol';
import '../interfaces/Invest/AaveLendingPool.sol';
import '../interfaces/Invest/IScaledBalanceToken.sol';
import '../interfaces/Invest/IProtocolDataProvider.sol';


contract AaveYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    
    address public wethGateway;

    
    address public protocolDataProvider;

    
    address public lendingPoolAddressesProvider;

    
    address payable public savingsAccount;

    
    uint16 public referralCode;

    
    event AaveAddressesUpdated(
        address indexed wethGateway,
        address indexed protocolDataProvider,
        address indexed lendingPoolAddressesProvider
    );

    
    event ReferralCodeUpdated(uint16 referralCode);

    
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    
    function initialize(
        address _owner,
        address payable _savingsAccount,
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    
    function liquidityToken(address asset) public view override returns (address aToken) {
        if (asset == address(0)) {
            aToken = IWETHGateway(wethGateway).getAWETHAddress();
        } else {
            (aToken, , ) = IProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(asset);
        }
    }

    
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    
    function updateAaveAddresses(
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) external onlyOwner {
        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    function _updateAaveAddresses(
        address _wethGateway,
        address _protocolDataProvider,
        address _lendingPoolAddressesProvider
    ) internal {
        require(_wethGateway != address(0), 'Invest: WETHGateway:: zero address');
        require(_protocolDataProvider != address(0), 'Invest: protocolDataProvider:: zero address');
        require(_lendingPoolAddressesProvider != address(0), 'Invest: lendingPoolAddressesProvider:: zero address');
        wethGateway = _wethGateway;
        protocolDataProvider = _protocolDataProvider;
        lendingPoolAddressesProvider = _lendingPoolAddressesProvider;
        emit AaveAddressesUpdated(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);
    }

    
    function updateReferralCode(uint16 _referralCode) external onlyOwner {
        referralCode = _referralCode;
        emit ReferralCodeUpdated(_referralCode);
    }

    
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        uint256 amount = IERC20(liquidityToken(_asset)).balanceOf(address(this));

        if (_asset == address(0)) {
            received = _withdrawETH(amount);
            (bool success, ) = _wallet.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(_asset, amount);
            IERC20(_asset).safeTransfer(_wallet, received);
        }
    }

    
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');

        address investedTo;
        if (asset == address(0)) {
            require(msg.value == amount, 'Invest: ETH amount');
            (investedTo, sharesReceived) = _depositETH(amount);
        } else {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
            (investedTo, sharesReceived) = _depositERC20(asset, amount);
        }

        emit LockedTokens(user, investedTo, sharesReceived);
    }

    
    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        require(amount != 0, 'Invest: amount');

        if (asset == address(0)) {
            received = _withdrawETH(amount);
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            received = _withdrawERC(asset, amount);
            IERC20(asset).safeTransfer(savingsAccount, received);
        }

        emit UnlockedTokens(asset, received);
    }

    
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {
        if (amount == 0) {
            return 0;
        }

        require(asset != address(0), 'Asset address cannot be address(0)');
        IERC20(asset).safeTransfer(savingsAccount, amount);

        emit UnlockedShares(asset, amount);
        return amount;
    }

    
    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {
        if (shares == 0) return 0;
        address aToken = liquidityToken(asset);

        (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);

        amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(
            IERC20(aToken).balanceOf(address(this))
        );
    }

    
    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {
        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));
    }

    function _depositETH(uint256 amount) internal returns (address aToken, uint256 sharesReceived) {
        aToken = IWETHGateway(wethGateway).getAWETHAddress();

        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        
        IWETHGateway(wethGateway).depositETH{value: amount}(lendingPool, address(this), referralCode);

        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);
    }

    function _depositERC20(address asset, uint256 amount) internal returns (address aToken, uint256 sharesReceived) {
        aToken = liquidityToken(asset);
        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        
        IERC20(asset).approve(lendingPool, 0);
        IERC20(asset).approve(lendingPool, amount);

        
        AaveLendingPool(lendingPool).deposit(asset, amount, address(this), referralCode);

        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);
    }

    function _withdrawETH(uint256 amount) internal returns (uint256 received) {
        IERC20(IWETHGateway(wethGateway).getAWETHAddress()).approve(wethGateway, amount);

        uint256 ethBalance = address(this).balance;

        
        IWETHGateway(wethGateway).withdrawETH(amount, address(this));

        received = address(this).balance.sub(ethBalance);
    }

    function _withdrawERC(address asset, uint256 amount) internal returns (uint256 tokensReceived) {
        address aToken = liquidityToken(asset);

        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();

        uint256 tokensBefore = IERC20(asset).balanceOf(address(this));

        IERC20(aToken).approve(lendingPool, amount);

        
        AaveLendingPool(lendingPool).withdraw(asset, amount, address(this));

        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(tokensBefore);
    }

    receive() external payable {}
}",1924,1,1,,"{'ReviewingTheCode': ""The provided Solidity smart contract, named 'AaveYield', is designed to interact with the Aave lending protocol. It allows users to deposit and withdraw assets, both ETH and ERC20 tokens, into Aave's lending pool to earn yield. The contract is upgradeable, uses OpenZeppelin libraries for security and ownership management, and includes mechanisms to handle reentrancy and safe token transfers."", 'IdentifyingKeyComponents': {'ContractName': 'AaveYield', 'Purpose': 'To facilitate the deposit and withdrawal of assets into the Aave lending protocol, enabling users to earn yield on their assets.', 'InheritanceAndImports': {'InheritsFrom': ['IYield', 'Initializable', 'OwnableUpgradeable', 'ReentrancyGuard'], 'Imports': ['@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '../interfaces/IYield.sol', '../interfaces/Invest/IWETHGateway.sol', '../interfaces/Invest/AaveLendingPool.sol', '../interfaces/Invest/IScaledBalanceToken.sol', '../interfaces/Invest/IProtocolDataProvider.sol']}, 'StateVariables': [{'Name': 'wethGateway', 'Type': 'address', 'Purpose': 'Address of the WETH Gateway contract for handling ETH deposits and withdrawals.'}, {'Name': 'protocolDataProvider', 'Type': 'address', 'Purpose': 'Address of the Aave Protocol Data Provider contract for fetching reserve data.'}, {'Name': 'lendingPoolAddressesProvider', 'Type': 'address', 'Purpose': 'Address of the Aave Lending Pool Addresses Provider contract for fetching the lending pool address.'}, {'Name': 'savingsAccount', 'Type': 'address payable', 'Purpose': 'Address of the savings account that interacts with this contract.'}, {'Name': 'referralCode', 'Type': 'uint16', 'Purpose': 'Referral code used when interacting with the Aave protocol.'}], 'FunctionsAndModifiers': [{'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with the owner, savings account, and Aave-related addresses.', 'Parameters': ['address _owner', 'address payable _savingsAccount', 'address _wethGateway', 'address _protocolDataProvider', 'address _lendingPoolAddressesProvider'], 'Returns': []}, {'Name': 'liquidityToken', 'Visibility': 'public', 'Purpose': 'Returns the address of the Aave liquidity token (aToken) for a given asset.', 'Parameters': ['address asset'], 'Returns': ['address aToken']}, {'Name': 'updateSavingsAccount', 'Visibility': 'external', 'Purpose': 'Updates the savings account address. Can only be called by the owner.', 'Parameters': ['address payable _savingsAccount'], 'Returns': []}, {'Name': 'updateAaveAddresses', 'Visibility': 'external', 'Purpose': 'Updates the Aave-related addresses. Can only be called by the owner.', 'Parameters': ['address _wethGateway', 'address _protocolDataProvider', 'address _lendingPoolAddressesProvider'], 'Returns': []}, {'Name': 'updateReferralCode', 'Visibility': 'external', 'Purpose': 'Updates the referral code. Can only be called by the owner.', 'Parameters': ['uint16 _referralCode'], 'Returns': []}, {'Name': 'emergencyWithdraw', 'Visibility': 'external', 'Purpose': 'Allows the owner to withdraw assets in case of an emergency.', 'Parameters': ['address _asset', 'address payable _wallet'], 'Returns': ['uint256 received']}, {'Name': 'lockTokens', 'Visibility': 'external', 'Purpose': 'Locks tokens (ETH or ERC20) into the Aave lending pool. Can only be called by the savings account.', 'Parameters': ['address user', 'address asset', 'uint256 amount'], 'Returns': ['uint256 sharesReceived']}, {'Name': 'unlockTokens', 'Visibility': 'external', 'Purpose': 'Unlocks tokens from the Aave lending pool. Can only be called by the savings account.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256 received']}, {'Name': 'unlockShares', 'Visibility': 'external', 'Purpose': 'Unlocks shares (aTokens) from the Aave lending pool. Can only be called by the savings account.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256']}, {'Name': 'getTokensForShares', 'Visibility': 'public', 'Purpose': 'Calculates the amount of tokens corresponding to a given number of shares.', 'Parameters': ['uint256 shares', 'address asset'], 'Returns': ['uint256 amount']}, {'Name': 'getSharesForTokens', 'Visibility': 'external', 'Purpose': 'Calculates the number of shares corresponding to a given amount of tokens.', 'Parameters': ['uint256 amount', 'address asset'], 'Returns': ['uint256 shares']}, {'Name': 'onlySavingsAccount', 'Visibility': 'modifier', 'Purpose': 'Restricts function access to the savings account.', 'Parameters': [], 'Returns': []}]}, 'ExternalInteractions': ['IWETHGateway: For handling ETH deposits and withdrawals.', 'IProtocolDataProvider: For fetching reserve data from Aave.', 'ILendingPoolAddressesProvider: For fetching the lending pool address.', 'AaveLendingPool: For interacting with the Aave lending pool.', ""IScaledBalanceToken: For interacting with Aave's scaled balance tokens (aTokens).""], 'SpecialMechanisms': [""Upgradeable Contract: Uses OpenZeppelin's Initializable and OwnableUpgradeable for upgradeability and ownership management."", ""Reentrancy Guard: Uses OpenZeppelin's ReentrancyGuard to prevent reentrancy attacks."", ""Safe Token Transfers: Uses OpenZeppelin's SafeERC20 for safe ERC20 token transfers."", ""Safe Math: Uses OpenZeppelin's SafeMath for arithmetic operations to prevent overflow and underflow.""], 'Questions': ['How is the referral code used in the Aave protocol, and what are its implications?', 'Are there any specific considerations for the emergencyWithdraw function, such as potential front-running attacks?', 'How does the contract handle the case where the Aave lending pool address changes after deployment?', 'Are there any gas optimization opportunities, especially in the lockTokens and unlockTokens functions?']}","{'Findings': [{'Issue': 'Reentrancy Vulnerability in `emergencyWithdraw`', 'Severity': 'High', 'Description': ""The `emergencyWithdraw` function does not use the `nonReentrant` modifier, making it susceptible to reentrancy attacks when transferring ETH or ERC20 tokens. This could allow an attacker to recursively call the function and drain the contract's funds."", 'Impact': 'Potential loss of funds if an attacker exploits the reentrancy vulnerability.', 'Location': 'Function `emergencyWithdraw`'}, {'Issue': 'Reentrancy Vulnerability in `unlockTokens`', 'Severity': 'High', 'Description': 'The `unlockTokens` function transfers ETH to the `savingsAccount` address without following the checks-effects-interactions pattern, potentially allowing reentrancy attacks if the `savingsAccount` is a malicious contract.', 'Impact': 'An attacker could exploit this to drain funds from the contract by recursively calling the `unlockTokens` function before the state is updated.', 'Location': 'Function `unlockTokens`'}, {'Issue': 'Potential Integer Overflow in `getTokensForShares`', 'Severity': 'Medium', 'Description': 'The `getTokensForShares` function performs multiplication operations without using SafeMath, which could lead to integer overflow or underflow if the values are large enough. Additionally, it may divide by zero if the aToken balance is zero.', 'Impact': 'Incorrect token amounts could be returned, leading to financial discrepancies or transaction reverts.', 'Location': 'Function `getTokensForShares`'}, {'Issue': 'Lack of Input Validation in `initialize`', 'Severity': 'Medium', 'Description': 'The `initialize` function does not validate input addresses (`_owner`, `_savingsAccount`, etc.), potentially allowing the contract to be initialized with zero or invalid addresses.', 'Impact': 'Initialization with invalid addresses could lead to contract malfunction or loss of funds.', 'Location': 'Function `initialize`'}, {'Issue': 'Insufficient Validation in `_updateSavingsAccount`', 'Severity': 'Medium', 'Description': 'The `_updateSavingsAccount` function does not validate if the new savings account address is different from the current one, leading to unnecessary state changes and event emissions.', 'Impact': 'Redundant updates could cause inefficiencies and potential issues in tracking the correct `savingsAccount` address.', 'Location': 'Function `_updateSavingsAccount`'}, {'Issue': 'Unchecked Call Return Value in `_withdrawETH`', 'Severity': 'Medium', 'Description': 'The `_withdrawETH` function performs an external call to `IWETHGateway(wethGateway).withdrawETH` without checking the return value, which could lead to silent failures.', 'Impact': 'Potential loss of funds or unexpected behavior if the external call fails.', 'Location': 'Function `_withdrawETH`'}, {'Issue': 'Insufficient Validation in `_depositERC20`', 'Severity': 'Medium', 'Description': 'The `_depositERC20` function does not validate if the `asset` address is a valid ERC20 token, which could lead to unexpected behavior or loss of funds.', 'Impact': 'Potential loss of funds or unexpected behavior if an invalid ERC20 token address is used.', 'Location': 'Function `_depositERC20`'}, {'Issue': 'Unrestricted `updateReferralCode` Function', 'Severity': 'Low', 'Description': 'The `updateReferralCode` function allows the owner to update the referral code without any restrictions or validation, potentially leading to misuse.', 'Impact': 'Potential misuse of referral code, though the impact is limited.', 'Location': 'Function `updateReferralCode`'}, {'Issue': 'Missing Event Emission in `_updateSavingsAccount`', 'Severity': 'Low', 'Description': 'The `_updateSavingsAccount` function updates the `savingsAccount` address but does not emit an event, reducing transparency and auditability.', 'Impact': 'Lack of event emission could hinder transparency and make it harder to audit changes.', 'Location': 'Function `_updateSavingsAccount`'}, {'Issue': 'Uninitialized Referral Code', 'Severity': 'Low', 'Description': 'The `referralCode` variable is not initialized in the `initialize` function, which could lead to unexpected behavior if the referral code is used before it is set.', 'Impact': 'Potential unexpected behavior or errors when using the referral code.', 'Location': 'Variable `referralCode` and Function `initialize`'}], 'IssueNumber': 10, 'OutputList': 10}",545.7483279705048,"### **Output**

---

**[H-05] Aave's share tokens are rebasing breaking current strategy code**

**Report Description**:
When depositing into Aave through the `AaveYield.lockTokens` contract strategy, the `sharesReceived` amount corresponds to the difference in `aToken` balance. However, since Aave is a rebasing token, `1.0 aToken = 1.0 underlying` at each deposit/withdrawal. The `sharesReceived` (the underlying deposit amount) is cached in a `balanceInShares` map in `SavingsAccount.deposit`, making this share static and not dynamically rebasing. This could lead to discrepancies in token balances and incorrect accounting of shares.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of rebasing tokens or the static caching of `sharesReceived`. This is a critical oversight, as it directly impacts the accounting and functionality of the contract when interacting with rebasing tokens like Aave.

---

**[M-07] AaveYield: Misspelled external function name making functions fail**

**Report Description**:
In `AaveYield.sol`, the functions `liquidityToken`, `_withdrawETH`, and `_depositETH` make a conditional call to `IWETHGateway(wethGateway).getAWETHAddress()`. However, this function does not exist in the `wethGateway` contract, causing these functions to fail with the error ""Fallback not allowed"". The correct function name should be `getWethAddress()` without the ""A"". This typo is small but dangerous, as it renders the functions unusable.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the issue of the misspelled function name in `AaveYield.sol`. This is a critical error that prevents the functions from executing correctly, and it is not covered in the provided responses.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-05] Aave's share tokens are rebasing breaking current strategy code**
- **[M-07] AaveYield: Misspelled external function name making functions fail**

---

### **Conclusion**
The provided `response_list` does not address the issues related to rebasing tokens in Aave or the misspelled function name in `AaveYield.sol`. These are significant vulnerabilities that need to be addressed to ensure the security and functionality of the smart contracts. The responses in the `response_list` focus on other issues, such as reentrancy vulnerabilities and unchecked call return values, but fail to cover the specific concerns raised in the `issue` report.","```
None.
```",0.0
SavingsAccount.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '../interfaces/ISavingsAccount.sol';
import '../interfaces/IStrategyRegistry.sol';
import '../interfaces/IYield.sol';

/**
 * @title Savings account contract with Methods related to savings account
 * @notice Implements the functions related to savings account
 * @author Sublime
 **/
contract SavingsAccount is ISavingsAccount, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    /**
     * @notice address of the strategy registry used to whitelist strategies
     */
    address public strategyRegistry;

    /**
     * @notice address of the credit lines contract
     */
    address public creditLine;

    /**
     * @notice mapping from user to token to strategy to balance of shares
     * @dev user -> token -> strategy (underlying address) -> amount (shares)
     */
    mapping(address => mapping(address => mapping(address => uint256))) public override balanceInShares;

    /**
     * @notice mapping from user to token to toAddress for approval to amount approved
     * @dev user => token => to => amount
     */
    mapping(address => mapping(address => mapping(address => uint256))) public allowance;

    /**
     * @notice modifier to check if address is the credit line
     * @param _caller address to check if credit line
     */
    modifier onlyCreditLine(address _caller) {
        require(_caller == creditLine, 'Invalid caller');
        _;
    }

    /**
     * @dev initialize the contract
     * @param _owner address of the owner of the savings account contract
     * @param _strategyRegistry address of the strategy registry
     * @param _creditLine address of the credit line contract
     **/
    function initialize(
        address _owner,
        address _strategyRegistry,
        address _creditLine
    ) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateCreditLine(_creditLine);
        _updateStrategyRegistry(_strategyRegistry);
    }

    /**
     * @notice used to update credit line contract address
     * @dev only owner can update
     * @param _creditLine updated address of credit lines
     */
    function updateCreditLine(address _creditLine) external onlyOwner {
        _updateCreditLine(_creditLine);
    }

    function _updateCreditLine(address _creditLine) internal {
        require(_creditLine != address(0), 'SavingsAccount::initialize zero address');
        creditLine = _creditLine;
        emit CreditLineUpdated(_creditLine);
    }

    /**
     * @notice used to update strategy registry address
     * @dev only owner can update
     * @param _strategyRegistry updated address of strategy registry
     */
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        require(_strategyRegistry != address(0), 'SavingsAccount::updateStrategyRegistry zero address');
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    /**
     * @notice used to deposit tokens into strategy via savings account
     * @dev if token is address(0), then it is Ether
     * @param _amount amount of tokens deposited
     * @param _token address of token contract
     * @param _strategy address of the strategy into which tokens are to be deposited
     * @param _to address to deposit to
     */
    function deposit(
        uint256 _amount,
        address _token,
        address _strategy,
        address _to
    ) external payable override nonReentrant returns (uint256) {
        require(_to != address(0), 'SavingsAccount::deposit receiver address should not be zero address');
        uint256 _sharesReceived = _deposit(_amount, _token, _strategy);
        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived);
        emit Deposited(_to, _sharesReceived, _token, _strategy);
        return _sharesReceived;
    }

    function _deposit(
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        require(_amount != 0, 'SavingsAccount::_deposit Amount must be greater than zero');
        _sharesReceived = _depositToYield(_amount, _token, _strategy);
    }

    function _depositToYield(
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        require(IStrategyRegistry(strategyRegistry).registry(_strategy), 'SavingsAccount::deposit strategy do not exist');
        uint256 _ethValue;

        if (_token == address(0)) {
            _ethValue = _amount;
            require(msg.value == _amount, 'SavingsAccount::deposit ETH sent must be equal to amount');
        }
        _sharesReceived = IYield(_strategy).lockTokens{value: _ethValue}(msg.sender, _token, _amount);
    }

    /**
     * @dev Used to switch saving strategy of an _token
     * @param _currentStrategy initial strategy of token
     * @param _newStrategy new strategy to invest
     * @param _token address of the token
     * @param _amount amount of tokens to be reinvested
     */
    function switchStrategy(
        uint256 _amount,
        address _token,
        address _currentStrategy,
        address _newStrategy
    ) external override nonReentrant {
        require(_currentStrategy != _newStrategy, 'SavingsAccount::switchStrategy Same strategy');
        require(IStrategyRegistry(strategyRegistry).registry(_newStrategy), 'SavingsAccount::_newStrategy do not exist');
        require(_amount != 0, 'SavingsAccount::switchStrategy Amount must be greater than zero');

        _amount = IYield(_currentStrategy).getSharesForTokens(_amount, _token);

        balanceInShares[msg.sender][_token][_currentStrategy] = balanceInShares[msg.sender][_token][_currentStrategy].sub(
            _amount,
            'SavingsAccount::switchStrategy Insufficient balance'
        );

        uint256 _tokensReceived = IYield(_currentStrategy).unlockTokens(_token, _amount);

        uint256 _ethValue;
        if (_token != address(0)) {
            IERC20(_token).safeApprove(_newStrategy, _tokensReceived);
        } else {
            _ethValue = _tokensReceived;
        }
        _amount = _tokensReceived;
        
        uint256 _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this), _token, _tokensReceived);

        balanceInShares[msg.sender][_token][_newStrategy] = balanceInShares[msg.sender][_token][_newStrategy].add(_sharesReceived);
        emit StrategySwitched(msg.sender, _token, _amount, _sharesReceived, _currentStrategy, _newStrategy);
    }

    /**
     * @dev Used to withdraw token from Saving Account
     * @param _to address to which token should be sent
     * @param _amount amount of tokens to withdraw
     * @param _token address of the token to be withdrawn
     * @param _strategy strategy from where token has to withdrawn(ex:- compound,Aave etc)
     * @param _withdrawShares boolean indicating to withdraw in liquidity share or underlying token
     */
    function withdraw(
        uint256 _amount,
        address _token,
        address _strategy,
        address payable _to,
        bool _withdrawShares
    ) external override nonReentrant returns (uint256) {
        require(_amount != 0, 'SavingsAccount::withdraw Amount must be greater than zero');

        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);

        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(
            _amount,
            'SavingsAccount::withdraw Insufficient amount'
        );

        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);

        emit Withdrawn(msg.sender, _to, _amount, _token, _strategy, _withdrawShares);
        return _amountReceived;
    }

    /**
     * @dev Used to withdraw token from allowance of Saving Account
     * @param _from address from which tokens will be withdrawn
     * @param _to address to which token should be withdrawn
     * @param _amount amount of tokens to withdraw
     * @param _token address of the token to be withdrawn
     * @param _strategy strategy from where token has to withdrawn(ex:- compound,Aave etc)
     * @param _withdrawShares boolean indicating to withdraw in liquidity share or underlying token
     */

    function withdrawFrom(
        uint256 _amount,
        address _token,
        address _strategy,
        address _from,
        address payable _to,
        bool _withdrawShares
    ) external override nonReentrant returns (uint256) {
        require(_amount != 0, 'SavingsAccount::withdrawFrom Amount must be greater than zero');

        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(
            _amount,
            'SavingsAccount::withdrawFrom allowance limit exceeding'
        );

        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);

        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(
            _amount,
            'SavingsAccount::withdrawFrom insufficient balance'
        );
        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);
        emit Withdrawn(_from, msg.sender, _amount, _token, _strategy, _withdrawShares);
        return _amountReceived;
    }

    function _withdraw(
        uint256 _amount,
        address _token,
        address _strategy,
        address payable _to,
        bool _withdrawShares
    ) internal returns (address _tokenReceived, uint256 _amountReceived) {
        if (_withdrawShares) {
            _tokenReceived = IYield(_strategy).liquidityToken(_token);
            require(_tokenReceived != address(0), 'Liquidity Tokens address cannot be address(0)');
            _amountReceived = IYield(_strategy).unlockShares(_tokenReceived, _amount);
        } else {
            _tokenReceived = _token;
            _amountReceived = IYield(_strategy).unlockTokens(_token, _amount);
        }
        _transfer(_amountReceived, _tokenReceived, _to);
    }

    function _transfer(
        uint256 _amount,
        address _token,
        address payable _to
    ) internal {
        if (_token == address(0)) {
            (bool _success, ) = _to.call{value: _amount}('');
            require(_success, 'Transfer failed');
        } else {
            IERC20(_token).safeTransfer(_to, _amount);
        }
    }

    /**
     * @notice used to withdraw a token from all strategies
     * @param _token address of token which is to be withdrawn
     */
    function withdrawAll(address _token) external override nonReentrant returns (uint256 _tokenReceived) {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();

        for (uint256 i = 0; i < _strategyList.length; i++) {
            if (balanceInShares[msg.sender][_token][_strategyList[i]] != 0 && _strategyList[i] != address(0)) {
                uint256 _amount = balanceInShares[msg.sender][_token][_strategyList[i]];
                _amount = IYield(_strategyList[i]).unlockTokens(_token, balanceInShares[msg.sender][_token][_strategyList[i]]);
                _tokenReceived = _tokenReceived.add(_amount);
                delete balanceInShares[msg.sender][_token][_strategyList[i]];
            }
        }

        if (_tokenReceived == 0) return 0;

        _transfer(_tokenReceived, _token, payable(msg.sender));

        emit WithdrawnAll(msg.sender, _tokenReceived, _token);
    }

    function withdrawAll(address _token, address _strategy) external override nonReentrant returns (uint256 _tokenReceived) {
        uint256 _sharesBalance = balanceInShares[msg.sender][_token][_strategy];

        if(_sharesBalance == 0) return 0;

        uint256 _amount = IYield(_strategy).unlockTokens(_token, _sharesBalance);

        delete balanceInShares[msg.sender][_token][_strategy];

        _transfer(_amount, _token, payable(msg.sender));

        emit Withdrawn(msg.sender, msg.sender, _amount, _token, _strategy, false);
    }

    /**
     * @notice used to approve allowance to an address
     * @dev this is prone to race condition, hence increaseAllowance is recommended
     * @param _amount amount of tokens approved
     * @param _token address of token approved
     * @param _to address of the user approved to
     */
    function approve(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        allowance[msg.sender][_token][_to] = _amount;

        emit Approved(_token, msg.sender, _to, _amount);
    }

    /**
     * @notice used to increase allowance to an address
     * @param _amount amount of tokens allowance is increased by
     * @param _token address of token approved
     * @param _to address of the address approved to
     */
    function increaseAllowance(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].add(_amount);
        allowance[msg.sender][_token][_to] = _updatedAllowance;

        emit Approved(_token, msg.sender, _to, _updatedAllowance);
    }

    /**
     * @notice used to decrease allowance to an address
     * @param _amount amount of tokens allowance is decreased by
     * @param _token address of token approved
     * @param _to address of the user approved to
     */
    function decreaseAllowance(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].sub(_amount);
        allowance[msg.sender][_token][_to] = _updatedAllowance;

        emit Approved(_token, msg.sender, _to, _updatedAllowance);
    }

    /**
     * @notice used by credit lines to replenish the allowance once the credit line pricinpal is repaid
     * @param _amount amount of tokens allowance is increased by
     * @param _token address of token approved
     * @param _from address of the lender of the credit line which is being replenished
     */
    function increaseAllowanceToCreditLine(
        uint256 _amount,
        address _token,
        address _from
    ) external override onlyCreditLine(msg.sender) {
        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].add(_amount);

        emit CreditLineAllowanceRefreshed(_token, _from, msg.sender, _amount);
    }

    /**
     * @notice used to transfer tokens
     * @param _amount amount of tokens transferred
     * @param _token address of token transferred
     * @param _strategy address of the strategy from which tokens are transferred
     * @param _to address of the user tokens are transferred to
     */
    function transfer(
        uint256 _amount,
        address _token,
        address _strategy,
        address _to
    ) external override returns (uint256) {
        require(_amount != 0, 'SavingsAccount::transfer zero amount');

        if (_strategy != address(0)) {
            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);
        }

        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(
            _amount,
            'SavingsAccount::transfer insufficient funds'
        );

        //update receiver's balance
        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_amount);

        emit Transfer(_token, _strategy, msg.sender, _to, _amount);

        return _amount;
    }

    /**
     * @notice used to transfer tokens from allowance by another address
     * @param _amount amount of tokens transferred
     * @param _token address of token transferred
     * @param _strategy address of the strategy from which tokens are transferred
     * @param _from address from whose allowance tokens are transferred
     * @param _to address of the user tokens are transferred to
     */
    function transferFrom(
        uint256 _amount,
        address _token,
        address _strategy,
        address _from,
        address _to
    ) external override returns (uint256) {
        require(_amount != 0, 'SavingsAccount::transferFrom zero amount');
        //update allowance
        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(
            _amount,
            'SavingsAccount::transferFrom allowance limit exceeding'
        );

        if (_strategy != address(0)) {
            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);
        }

        //reduce sender's balance
        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(
            _amount,
            'SavingsAccount::transferFrom insufficient allowance'
        );

        //update receiver's balance
        balanceInShares[_to][_token][_strategy] = (balanceInShares[_to][_token][_strategy]).add(_amount);

        emit Transfer(_token, _strategy, _from, _to, _amount);

        return _amount;
    }

    /**
     * @notice used to query total tokens of a token with a user
     * @param _user address of the user
     * @param _token address of token
     * @return _totalTokens total number of tokens of the token with the user
     */
    function getTotalTokens(address _user, address _token) external override returns (uint256 _totalTokens) {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();

        for (uint256 i = 0; i < _strategyList.length; i++) {
            uint256 _liquidityShares = balanceInShares[_user][_token][_strategyList[i]];

            if (_liquidityShares != 0) {
                uint256 _tokenInStrategy = _liquidityShares;
                if (_strategyList[i] != address(0)) {
                    _tokenInStrategy = IYield(_strategyList[i]).getTokensForShares(_liquidityShares, _token);
                }

                _totalTokens = _totalTokens.add(_tokenInStrategy);
            }
        }
    }

    receive() external payable {}
}",4178,482,"[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues

Function `withdrawAll()` `switchStrategy()`

Full withdrawal and moving funds between strategies can lead to wrong accounting if the corresponding market has tight liquidity, which can be the case at least for AaveYield. That is, as the whole amount is required to be moved at once from Aave, both withdrawAll and switchStrategy will incorrectly account for partial withdrawal as if it was full whenever the corresponding underlying yield pool had liquidity issues.
 `withdrawAll` will delete user entry, locking the user funds in the strategy: user will get partial withdrawal and have the corresponding accounting entry removed, while the remaining actual funds will be frozen within the system.
 `switchStrategy` will subtract full number of shares for the _amount requested from the old strategy, while adding lesser partial number of shares for _tokensReceived to the new one with the same effect of freezing user's funds within the system.
  [H-08] Possibility to drain SavingsAccount contract assets

A malicious actor can manipulate `switchStrategy()` function in a way to withdraw tokens that are locked in SavingsAccount contract (the risk severity should be reviewed)

",2,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '../interfaces/ISavingsAccount.sol';
import '../interfaces/IStrategyRegistry.sol';
import '../interfaces/IYield.sol';


contract SavingsAccount is ISavingsAccount, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    
    address public strategyRegistry;

    
    address public creditLine;

    
    mapping(address => mapping(address => mapping(address => uint256))) public override balanceInShares;

    
    mapping(address => mapping(address => mapping(address => uint256))) public allowance;

    
    modifier onlyCreditLine(address _caller) {
        require(_caller == creditLine, 'Invalid caller');
        _;
    }

    
    function initialize(
        address _owner,
        address _strategyRegistry,
        address _creditLine
    ) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateCreditLine(_creditLine);
        _updateStrategyRegistry(_strategyRegistry);
    }

    
    function updateCreditLine(address _creditLine) external onlyOwner {
        _updateCreditLine(_creditLine);
    }

    function _updateCreditLine(address _creditLine) internal {
        require(_creditLine != address(0), 'SavingsAccount::initialize zero address');
        creditLine = _creditLine;
        emit CreditLineUpdated(_creditLine);
    }

    
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        require(_strategyRegistry != address(0), 'SavingsAccount::updateStrategyRegistry zero address');
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    
    function deposit(
        uint256 _amount,
        address _token,
        address _strategy,
        address _to
    ) external payable override nonReentrant returns (uint256) {
        require(_to != address(0), 'SavingsAccount::deposit receiver address should not be zero address');
        uint256 _sharesReceived = _deposit(_amount, _token, _strategy);
        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived);
        emit Deposited(_to, _sharesReceived, _token, _strategy);
        return _sharesReceived;
    }

    function _deposit(
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        require(_amount != 0, 'SavingsAccount::_deposit Amount must be greater than zero');
        _sharesReceived = _depositToYield(_amount, _token, _strategy);
    }

    function _depositToYield(
        uint256 _amount,
        address _token,
        address _strategy
    ) internal returns (uint256 _sharesReceived) {
        require(IStrategyRegistry(strategyRegistry).registry(_strategy), 'SavingsAccount::deposit strategy do not exist');
        uint256 _ethValue;

        if (_token == address(0)) {
            _ethValue = _amount;
            require(msg.value == _amount, 'SavingsAccount::deposit ETH sent must be equal to amount');
        }
        _sharesReceived = IYield(_strategy).lockTokens{value: _ethValue}(msg.sender, _token, _amount);
    }

    
    function switchStrategy(
        uint256 _amount,
        address _token,
        address _currentStrategy,
        address _newStrategy
    ) external override nonReentrant {
        require(_currentStrategy != _newStrategy, 'SavingsAccount::switchStrategy Same strategy');
        require(IStrategyRegistry(strategyRegistry).registry(_newStrategy), 'SavingsAccount::_newStrategy do not exist');
        require(_amount != 0, 'SavingsAccount::switchStrategy Amount must be greater than zero');

        _amount = IYield(_currentStrategy).getSharesForTokens(_amount, _token);

        balanceInShares[msg.sender][_token][_currentStrategy] = balanceInShares[msg.sender][_token][_currentStrategy].sub(
            _amount,
            'SavingsAccount::switchStrategy Insufficient balance'
        );

        uint256 _tokensReceived = IYield(_currentStrategy).unlockTokens(_token, _amount);

        uint256 _ethValue;
        if (_token != address(0)) {
            IERC20(_token).safeApprove(_newStrategy, _tokensReceived);
        } else {
            _ethValue = _tokensReceived;
        }
        _amount = _tokensReceived;
        
        uint256 _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this), _token, _tokensReceived);

        balanceInShares[msg.sender][_token][_newStrategy] = balanceInShares[msg.sender][_token][_newStrategy].add(_sharesReceived);
        emit StrategySwitched(msg.sender, _token, _amount, _sharesReceived, _currentStrategy, _newStrategy);
    }

    
    function withdraw(
        uint256 _amount,
        address _token,
        address _strategy,
        address payable _to,
        bool _withdrawShares
    ) external override nonReentrant returns (uint256) {
        require(_amount != 0, 'SavingsAccount::withdraw Amount must be greater than zero');

        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);

        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(
            _amount,
            'SavingsAccount::withdraw Insufficient amount'
        );

        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);

        emit Withdrawn(msg.sender, _to, _amount, _token, _strategy, _withdrawShares);
        return _amountReceived;
    }

    

    function withdrawFrom(
        uint256 _amount,
        address _token,
        address _strategy,
        address _from,
        address payable _to,
        bool _withdrawShares
    ) external override nonReentrant returns (uint256) {
        require(_amount != 0, 'SavingsAccount::withdrawFrom Amount must be greater than zero');

        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(
            _amount,
            'SavingsAccount::withdrawFrom allowance limit exceeding'
        );

        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);

        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(
            _amount,
            'SavingsAccount::withdrawFrom insufficient balance'
        );
        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);
        emit Withdrawn(_from, msg.sender, _amount, _token, _strategy, _withdrawShares);
        return _amountReceived;
    }

    function _withdraw(
        uint256 _amount,
        address _token,
        address _strategy,
        address payable _to,
        bool _withdrawShares
    ) internal returns (address _tokenReceived, uint256 _amountReceived) {
        if (_withdrawShares) {
            _tokenReceived = IYield(_strategy).liquidityToken(_token);
            require(_tokenReceived != address(0), 'Liquidity Tokens address cannot be address(0)');
            _amountReceived = IYield(_strategy).unlockShares(_tokenReceived, _amount);
        } else {
            _tokenReceived = _token;
            _amountReceived = IYield(_strategy).unlockTokens(_token, _amount);
        }
        _transfer(_amountReceived, _tokenReceived, _to);
    }

    function _transfer(
        uint256 _amount,
        address _token,
        address payable _to
    ) internal {
        if (_token == address(0)) {
            (bool _success, ) = _to.call{value: _amount}('');
            require(_success, 'Transfer failed');
        } else {
            IERC20(_token).safeTransfer(_to, _amount);
        }
    }

    
    function withdrawAll(address _token) external override nonReentrant returns (uint256 _tokenReceived) {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();

        for (uint256 i = 0; i < _strategyList.length; i++) {
            if (balanceInShares[msg.sender][_token][_strategyList[i]] != 0 && _strategyList[i] != address(0)) {
                uint256 _amount = balanceInShares[msg.sender][_token][_strategyList[i]];
                _amount = IYield(_strategyList[i]).unlockTokens(_token, balanceInShares[msg.sender][_token][_strategyList[i]]);
                _tokenReceived = _tokenReceived.add(_amount);
                delete balanceInShares[msg.sender][_token][_strategyList[i]];
            }
        }

        if (_tokenReceived == 0) return 0;

        _transfer(_tokenReceived, _token, payable(msg.sender));

        emit WithdrawnAll(msg.sender, _tokenReceived, _token);
    }

    function withdrawAll(address _token, address _strategy) external override nonReentrant returns (uint256 _tokenReceived) {
        uint256 _sharesBalance = balanceInShares[msg.sender][_token][_strategy];

        if(_sharesBalance == 0) return 0;

        uint256 _amount = IYield(_strategy).unlockTokens(_token, _sharesBalance);

        delete balanceInShares[msg.sender][_token][_strategy];

        _transfer(_amount, _token, payable(msg.sender));

        emit Withdrawn(msg.sender, msg.sender, _amount, _token, _strategy, false);
    }

    
    function approve(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        allowance[msg.sender][_token][_to] = _amount;

        emit Approved(_token, msg.sender, _to, _amount);
    }

    
    function increaseAllowance(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].add(_amount);
        allowance[msg.sender][_token][_to] = _updatedAllowance;

        emit Approved(_token, msg.sender, _to, _updatedAllowance);
    }

    
    function decreaseAllowance(
        uint256 _amount,
        address _token,
        address _to
    ) external override {
        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].sub(_amount);
        allowance[msg.sender][_token][_to] = _updatedAllowance;

        emit Approved(_token, msg.sender, _to, _updatedAllowance);
    }

    
    function increaseAllowanceToCreditLine(
        uint256 _amount,
        address _token,
        address _from
    ) external override onlyCreditLine(msg.sender) {
        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].add(_amount);

        emit CreditLineAllowanceRefreshed(_token, _from, msg.sender, _amount);
    }

    
    function transfer(
        uint256 _amount,
        address _token,
        address _strategy,
        address _to
    ) external override returns (uint256) {
        require(_amount != 0, 'SavingsAccount::transfer zero amount');

        if (_strategy != address(0)) {
            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);
        }

        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(
            _amount,
            'SavingsAccount::transfer insufficient funds'
        );

        
        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_amount);

        emit Transfer(_token, _strategy, msg.sender, _to, _amount);

        return _amount;
    }

    
    function transferFrom(
        uint256 _amount,
        address _token,
        address _strategy,
        address _from,
        address _to
    ) external override returns (uint256) {
        require(_amount != 0, 'SavingsAccount::transferFrom zero amount');
        
        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(
            _amount,
            'SavingsAccount::transferFrom allowance limit exceeding'
        );

        if (_strategy != address(0)) {
            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);
        }

        
        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(
            _amount,
            'SavingsAccount::transferFrom insufficient allowance'
        );

        
        balanceInShares[_to][_token][_strategy] = (balanceInShares[_to][_token][_strategy]).add(_amount);

        emit Transfer(_token, _strategy, _from, _to, _amount);

        return _amount;
    }

    
    function getTotalTokens(address _user, address _token) external override returns (uint256 _totalTokens) {
        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();

        for (uint256 i = 0; i < _strategyList.length; i++) {
            uint256 _liquidityShares = balanceInShares[_user][_token][_strategyList[i]];

            if (_liquidityShares != 0) {
                uint256 _tokenInStrategy = _liquidityShares;
                if (_strategyList[i] != address(0)) {
                    _tokenInStrategy = IYield(_strategyList[i]).getTokensForShares(_liquidityShares, _token);
                }

                _totalTokens = _totalTokens.add(_tokenInStrategy);
            }
        }
    }

    receive() external payable {}
}",3020,2,0,,"{'ReviewingTheCode': 'The contract is a SavingsAccount that allows users to deposit, withdraw, and switch strategies for their tokens. It integrates with external strategies and registries to manage token allocations and yields. The contract uses OpenZeppelin libraries for security and upgradeability, including OwnableUpgradeable, ReentrancyGuard, SafeERC20, and SafeMath.', 'IdentifyingKeyComponents': {'ContractName': 'SavingsAccount', 'Purpose': 'To manage user deposits, withdrawals, and strategy switching for tokens, while interacting with external yield strategies and registries.', 'InheritanceAndImports': {'InheritsFrom': ['ISavingsAccount', 'Initializable', 'OwnableUpgradeable', 'ReentrancyGuard'], 'Imports': ['@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '../interfaces/ISavingsAccount.sol', '../interfaces/IStrategyRegistry.sol', '../interfaces/IYield.sol']}, 'StateVariables': [{'Name': 'strategyRegistry', 'Type': 'address', 'Purpose': 'Stores the address of the strategy registry contract.'}, {'Name': 'creditLine', 'Type': 'address', 'Purpose': 'Stores the address of the credit line contract.'}, {'Name': 'balanceInShares', 'Type': 'mapping(address => mapping(address => mapping(address => uint256)))', 'Purpose': 'Tracks the balance of shares for each user, token, and strategy.'}, {'Name': 'allowance', 'Type': 'mapping(address => mapping(address => mapping(address => uint256)))', 'Purpose': 'Tracks the allowance granted by users to other addresses for specific tokens.'}], 'FunctionsAndModifiers': [{'Name': 'onlyCreditLine', 'Visibility': 'modifier', 'Purpose': 'Restricts function access to the creditLine address.', 'Parameters': ['address _caller'], 'Returns': []}, {'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with owner, strategy registry, and credit line addresses.', 'Parameters': ['address _owner', 'address _strategyRegistry', 'address _creditLine'], 'Returns': []}, {'Name': 'updateCreditLine', 'Visibility': 'external', 'Purpose': 'Updates the credit line address.', 'Parameters': ['address _creditLine'], 'Returns': []}, {'Name': 'updateStrategyRegistry', 'Visibility': 'external', 'Purpose': 'Updates the strategy registry address.', 'Parameters': ['address _strategyRegistry'], 'Returns': []}, {'Name': 'deposit', 'Visibility': 'external', 'Purpose': 'Allows users to deposit tokens into a specific strategy.', 'Parameters': ['uint256 _amount', 'address _token', 'address _strategy', 'address _to'], 'Returns': ['uint256']}, {'Name': 'switchStrategy', 'Visibility': 'external', 'Purpose': 'Allows users to switch their tokens from one strategy to another.', 'Parameters': ['uint256 _amount', 'address _token', 'address _currentStrategy', 'address _newStrategy'], 'Returns': []}, {'Name': 'withdraw', 'Visibility': 'external', 'Purpose': 'Allows users to withdraw tokens from a specific strategy.', 'Parameters': ['uint256 _amount', 'address _token', 'address _strategy', 'address payable _to', 'bool _withdrawShares'], 'Returns': ['uint256']}, {'Name': 'withdrawFrom', 'Visibility': 'external', 'Purpose': 'Allows a third party to withdraw tokens on behalf of a user.', 'Parameters': ['uint256 _amount', 'address _token', 'address _strategy', 'address _from', 'address payable _to', 'bool _withdrawShares'], 'Returns': ['uint256']}, {'Name': 'approve', 'Visibility': 'external', 'Purpose': 'Allows users to approve another address to spend their tokens.', 'Parameters': ['uint256 _amount', 'address _token', 'address _to'], 'Returns': []}, {'Name': 'increaseAllowance', 'Visibility': 'external', 'Purpose': 'Increases the allowance granted to another address.', 'Parameters': ['uint256 _amount', 'address _token', 'address _to'], 'Returns': []}, {'Name': 'decreaseAllowance', 'Visibility': 'external', 'Purpose': 'Decreases the allowance granted to another address.', 'Parameters': ['uint256 _amount', 'address _token', 'address _to'], 'Returns': []}, {'Name': 'increaseAllowanceToCreditLine', 'Visibility': 'external', 'Purpose': 'Increases the allowance granted to the credit line address.', 'Parameters': ['uint256 _amount', 'address _token', 'address _from'], 'Returns': []}, {'Name': 'transfer', 'Visibility': 'external', 'Purpose': 'Allows users to transfer their tokens to another address.', 'Parameters': ['uint256 _amount', 'address _token', 'address _strategy', 'address _to'], 'Returns': ['uint256']}, {'Name': 'transferFrom', 'Visibility': 'external', 'Purpose': 'Allows a third party to transfer tokens on behalf of a user.', 'Parameters': ['uint256 _amount', 'address _token', 'address _strategy', 'address _from', 'address _to'], 'Returns': ['uint256']}, {'Name': 'getTotalTokens', 'Visibility': 'external', 'Purpose': 'Returns the total tokens held by a user across all strategies.', 'Parameters': ['address _user', 'address _token'], 'Returns': ['uint256']}]}, 'ExternalInteractions': ['IStrategyRegistry: Used to check if a strategy is registered.', 'IYield: Used to interact with yield strategies for locking and unlocking tokens.'], 'SpecialMechanisms': ['Upgradeable: The contract is initialized using the Initializable pattern.', 'ReentrancyGuard: Protects against reentrancy attacks in critical functions.', 'SafeMath and SafeERC20: Used for safe arithmetic operations and token transfers.'], 'Questions': ['How are the yield strategies implemented in the IYield interface?', 'What is the purpose of the liquidity token in the _withdraw function?', 'Are there any specific security considerations for the creditLine address?']}","{'Findings': [{'Issue': 'Potential Reentrancy in `switchStrategy` Despite `nonReentrant` Modifier', 'Severity': 'High', 'Description': 'The `switchStrategy` function updates state before making external calls to `IYield` for `unlockTokens` and `lockTokens`. If the external contracts are malicious or compromised, this could lead to reentrancy attacks where the attacker manipulates the state before the function completes. Similar issues exist in `withdrawAll` and `_transfer` functions, where external calls are made without adequate reentrancy protection.', 'Impact': 'An attacker could manipulate the state of the contract to their advantage, leading to loss of funds or unexpected behavior.', 'Location': 'switchStrategy, withdrawAll, _transfer functions'}, {'Issue': 'Non-Compliance with ERC-20 Standards in `transfer` and `transferFrom` Functions', 'Severity': 'High', 'Description': 'The `transfer` and `transferFrom` functions do not return a boolean value or emit the `Transfer` event as required by the ERC-20 standard.', 'Impact': 'Integration issues with other contracts or services expecting standard ERC-20 behavior, potentially causing transactions to fail or behave unexpectedly.', 'Location': 'transfer and transferFrom functions'}, {'Issue': 'Potential Loss of Tokens in `switchStrategy`', 'Severity': 'High', 'Description': 'The `switchStrategy` function does not handle the case where the `_newStrategy` fails to lock tokens after unlocking them from the `_currentStrategy`. If the `lockTokens` call fails, the tokens will be lost.', 'Impact': 'Users could lose their tokens permanently if the new strategy fails to lock tokens.', 'Location': 'switchStrategy function'}, {'Issue': 'Incorrect Handling of Share-Based Withdrawals in `_withdraw`', 'Severity': 'High', 'Description': 'The `_withdraw` function does not verify the correctness of the `_tokenReceived` address when handling share-based withdrawals. If the `liquidityToken` function returns an incorrect address, it could lead to the transfer of tokens to the wrong address.', 'Impact': 'Users could lose their tokens if the `liquidityToken` function returns an incorrect address.', 'Location': '_withdraw function'}, {'Issue': 'Reentrancy Risk in `_transfer` Function', 'Severity': 'High', 'Description': 'The `_transfer` function uses `call` to send Ether, which can be exploited in a reentrancy attack. Although the contract uses `nonReentrant` modifier, it is still a good practice to use `transfer` or `send` for Ether transfers to minimize risks.', 'Impact': 'Potential reentrancy attack leading to loss of funds.', 'Location': '_transfer function'}, {'Issue': 'Potential Reentrancy Vulnerability in `withdraw` and `withdrawFrom` Functions', 'Severity': 'High', 'Description': 'The `withdraw` and `withdrawFrom` functions use the `nonReentrant` modifier, but the `_transfer` function, which is called within these functions, performs an external call to transfer tokens or Ether. If the recipient is a malicious contract, it could potentially re-enter the `withdraw` or `withdrawFrom` functions before the state is updated.', 'Impact': 'This vulnerability could allow an attacker to drain funds from the contract by repeatedly re-entering the `withdraw` or `withdrawFrom` functions before the state is updated.', 'Location': 'withdraw, withdrawFrom, and _transfer functions'}, {'Issue': 'Potential Reentrancy in `withdrawAll`', 'Severity': 'High', 'Description': 'The `withdrawAll` function iterates over all strategies and unlocks tokens without checking for reentrancy. If a strategy is malicious or compromised, it could reenter the function and manipulate the state.', 'Impact': 'Users could lose their tokens or have their balances manipulated if a strategy is compromised.', 'Location': 'withdrawAll function'}, {'Issue': 'Insufficient Validation in `_depositToYield` Function', 'Severity': 'High', 'Description': 'The `_depositToYield` function does not validate the return value of `IYield(_strategy).lockTokens`. If the `lockTokens` function fails or returns zero, the contract may proceed with incorrect assumptions about the deposited shares.', 'Impact': 'Potential loss of funds or incorrect accounting of shares.', 'Location': '_depositToYield function'}, {'Issue': 'Arithmetic Operations Using `SafeMath`', 'Severity': 'Low', 'Description': ""All arithmetic operations in the contract use `SafeMath` to prevent overflow/underflow risks. However, it's important to ensure that all operations are covered by `SafeMath` and that there are no direct arithmetic operations that could lead to vulnerabilities."", 'Impact': 'If any arithmetic operations are not covered by `SafeMath`, it could lead to overflow/underflow vulnerabilities, potentially causing unexpected behavior or loss of funds.', 'Location': 'Various functions using arithmetic operations'}, {'Issue': 'External Calls to `IYield` and `IStrategyRegistry`', 'Severity': 'Medium', 'Description': 'The contract makes several external calls to `IYield` and `IStrategyRegistry` interfaces. These calls are not wrapped in try/catch blocks, and there is no explicit handling of potential failures or revert scenarios. This could lead to unexpected behavior if the external contracts revert or behave maliciously.', 'Impact': 'If an external call fails or behaves unexpectedly, it could cause the entire transaction to revert, leading to potential loss of funds or unexpected contract state.', 'Location': 'Functions making external calls (e.g., `deposit`, `withdraw`, `switchStrategy`)'}, {'Issue': 'ETH Transfer in `_transfer` Function', 'Severity': 'Low', 'Description': 'The `_transfer` function handles ETH transfers using a low-level call without checking the return value beyond a boolean success flag. While this is generally safe, it could be improved by using a more robust pattern like `Address.sendValue` from OpenZeppelin, which includes additional safety checks.', 'Impact': 'If the ETH transfer fails, the function will revert, but the error handling could be more robust to ensure that the transfer is always safe.', 'Location': '_transfer function'}, {'Issue': 'Inconsistent State Update in `withdrawAll`', 'Severity': 'Medium', 'Description': 'The `withdrawAll` function iterates over a list of strategies and withdraws tokens from each one. However, the state is updated (i.e., `delete balanceInShares`) before the external call to `unlockTokens`. This could lead to inconsistencies if the external call fails or reverts, leaving the state partially updated.', 'Impact': 'If an external call fails, the state could be left in an inconsistent state, potentially leading to loss of funds or unexpected behavior.', 'Location': 'withdrawAll function'}, {'Issue': 'Incorrect Use of Upgradeable Pattern', 'Severity': 'Medium', 'Description': 'The contract uses the `Initializable` and `OwnableUpgradeable` patterns from OpenZeppelin, which are correct for upgradeable contracts. However, the contract does not use the `UUPSUpgradeable` or `TransparentUpgradeableProxy` pattern, which is necessary for ensuring that the contract can be upgraded safely and securely. This omission could lead to issues during the upgrade process.', 'Impact': 'Without the proper upgradeable pattern, the contract may not be upgradeable in a secure manner, potentially leading to vulnerabilities or loss of functionality during upgrades.', 'Location': 'Contract: `SavingsAccount`'}, {'Issue': 'Lack of Input Validation in `_updateCreditLine` and `_updateStrategyRegistry` Functions', 'Severity': 'Medium', 'Description': ""The `_updateCreditLine` and `_updateStrategyRegistry` functions only check that the input address is not zero. They do not validate whether the address is a contract or whether it implements the expected interface. This could lead to setting invalid or malicious addresses, potentially compromising the contract's functionality or security."", 'Impact': 'Setting invalid or malicious addresses could lead to unexpected behavior, loss of funds, or security vulnerabilities.', 'Location': 'Functions: `_updateCreditLine` and `_updateStrategyRegistry`'}, {'Issue': 'Insufficient Error Handling in `_depositToYield` Function', 'Severity': 'Medium', 'Description': 'The `_depositToYield` function does not handle errors that may occur during the `lockTokens` call to the strategy contract. If the strategy contract reverts or fails, the error will propagate up, potentially causing the entire transaction to fail without providing meaningful feedback to the user.', 'Impact': 'This could lead to a poor user experience and make it difficult to diagnose issues when deposits fail.', 'Location': 'Function: `_depositToYield`'}, {'Issue': 'Missing Zero Address Check for Strategy Registry and Credit Line in Initialization', 'Severity': 'Medium', 'Description': 'The `initialize` function does not check if the `_strategyRegistry` and `_creditLine` addresses are zero addresses. This could lead to setting these critical addresses to zero, causing potential failures in external calls and contract functionality.', 'Impact': 'Contract may fail to interact with the `strategyRegistry` or `creditLine` contracts, leading to loss of funds or functionality.', 'Location': 'initialize function'}, {'Issue': 'Unchecked External Call in `switchStrategy` Function', 'Severity': 'Medium', 'Description': 'The `switchStrategy` function does not check the return value of `IYield(_newStrategy).lockTokens`. If the `lockTokens` function fails or returns zero, the contract may proceed with incorrect assumptions about the new strategy shares.', 'Impact': 'Potential loss of funds or incorrect accounting of shares.', 'Location': 'switchStrategy function'}, {'Issue': 'Inaccurate Token Calculation in `getTotalTokens`', 'Severity': 'Medium', 'Description': 'The `getTotalTokens` function incorrectly assumes that the `_liquidityShares` directly represent the token amount when the strategy is address(0). This could lead to inaccurate calculations of the total tokens across strategies.', 'Impact': 'Users may receive incorrect information about their total token holdings, leading to potential financial decisions based on wrong data.', 'Location': 'getTotalTokens function'}, {'Issue': 'Potential Front-Running in `updateCreditLine` and `updateStrategyRegistry` Functions', 'Severity': 'Low', 'Description': 'The `updateCreditLine` and `updateStrategyRegistry` functions allow the owner to update critical contract addresses without any delay or verification period. This could lead to front-running attacks where an attacker replaces these addresses with malicious ones.', 'Impact': 'Potential manipulation of contract behavior or loss of funds.', 'Location': 'updateCreditLine and updateStrategyRegistry functions'}, {'Issue': 'Inconsistent Use of `require` Statements', 'Severity': 'Low', 'Description': 'The contract uses `require` statements inconsistently. For example, some functions check for zero addresses while others do not. This inconsistency could lead to vulnerabilities if not properly maintained.', 'Impact': 'Potential logical errors or vulnerabilities due to inconsistent checks.', 'Location': 'Multiple locations, e.g., initialize, _updateCreditLine, _updateStrategyRegistry'}, {'Issue': 'Correctness of `onlyCreditLine` Modifier', 'Severity': 'Low', 'Description': 'The `onlyCreditLine` modifier is implemented correctly to restrict access to the `creditLine` address. It checks if the caller (`_caller`) matches the `creditLine` address. This ensures that only the designated `creditLine` address can call functions with this modifier.', 'Impact': 'If the modifier were incorrectly implemented, unauthorized addresses could access sensitive functions, leading to potential misuse or exploitation.', 'Location': 'onlyCreditLine modifier'}, {'Issue': 'Correct Application of `onlyOwner` Modifier', 'Severity': 'Low', 'Description': 'The `onlyOwner` modifier is correctly applied to the `updateCreditLine` and `updateStrategyRegistry` functions. This ensures that only the contract owner can update these critical addresses, maintaining proper access control.', 'Impact': 'If the `onlyOwner` modifier were missing or incorrectly applied, unauthorized users could change the `creditLine` or `strategyRegistry` addresses, leading to potential security breaches or loss of funds.', 'Location': 'updateCreditLine and updateStrategyRegistry functions'}, {'Issue': 'Single Initialization of `initialize` Function', 'Severity': 'Medium', 'Description': ""The `initialize` function uses the `initializer` modifier from OpenZeppelin's `Initializable` contract, which ensures that the function can only be called once. This prevents re-initialization, which could otherwise lead to unexpected behavior or resetting of critical contract state."", 'Impact': ""If the `initialize` function could be called multiple times, it could reset the contract's state, potentially leading to loss of data or control over the contract."", 'Location': 'initialize function'}, {'Issue': 'Zero Address Check in `_updateCreditLine` and `_updateStrategyRegistry`', 'Severity': 'Low', 'Description': 'Both `_updateCreditLine` and `_updateStrategyRegistry` functions include a check to ensure that the provided address is not the zero address. This prevents the contract from being configured with invalid addresses, which could lead to errors or vulnerabilities.', 'Impact': 'If zero addresses were allowed, it could lead to the contract being in an invalid state, potentially causing failures in function calls or loss of funds.', 'Location': '_updateCreditLine and _updateStrategyRegistry functions'}, {'Issue': 'Gas Optimization in `withdrawAll` Function', 'Severity': 'Medium', 'Description': 'The `withdrawAll` function iterates over all strategies for a given token and withdraws the balance for each strategy. This can be gas-intensive, especially if the number of strategies is large. The function also performs multiple external calls to `IYield(_strategyList[i]).unlockTokens`, which can further increase gas costs.', 'Impact': 'High gas costs for users withdrawing all tokens, especially in scenarios with many strategies.', 'Location': 'withdrawAll function'}, {'Issue': 'Gas Optimization in `getTotalTokens` Function', 'Severity': 'Medium', 'Description': 'The `getTotalTokens` function iterates over all strategies for a given token and calculates the total tokens by making external calls to `IYield(_strategyList[i]).getTokensForShares`. This can be gas-intensive, especially if the number of strategies is large.', 'Impact': 'High gas costs for users querying total tokens, especially in scenarios with many strategies.', 'Location': 'getTotalTokens function'}, {'Issue': 'Redundant External Calls in `withdrawAll` Function', 'Severity': 'Low', 'Description': 'In the `withdrawAll` function, the external call `IYield(_strategyList[i]).unlockTokens` is made even if the balance is zero. This is redundant and can be optimized by checking the balance before making the call.', 'Impact': 'Unnecessary gas consumption for strategies with zero balance.', 'Location': 'withdrawAll function'}, {'Issue': 'Use of Mappings for Balance Storage', 'Severity': 'Low', 'Description': 'The contract uses nested mappings (`mapping(address => mapping(address => mapping(address => uint256)))`) to store balances and allowances. While mappings are efficient for lookups, deeply nested mappings can complicate the code and increase gas costs for certain operations, especially when iterating over them.', 'Impact': 'Increased complexity and potential gas costs for operations involving deeply nested mappings.', 'Location': 'balanceInShares and allowance mappings'}, {'Issue': 'Potential for Gas Optimization in `switchStrategy` Function', 'Severity': 'Low', 'Description': 'The `switchStrategy` function performs multiple state updates and external calls, which can be optimized to reduce gas costs. For example, the function could be optimized by reducing the number of state updates or combining some operations.', 'Impact': 'Higher gas costs for users switching strategies.', 'Location': 'switchStrategy function'}], 'IssueNumber': 30, 'OutputList': 25}",409.62841415405273,"### **Output**

---

**[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues**

**Report Description**:
The `withdrawAll()` and `switchStrategy()` functions in the SavingsAccount contract can freeze user funds if the underlying strategy (e.g., AaveYield) has liquidity issues. When the entire amount is required to be moved at once, partial withdrawals due to liquidity constraints are incorrectly accounted for as full withdrawals. This leads to the deletion of user entries in `withdrawAll`, locking the remaining funds in the strategy. Similarly, `switchStrategy` subtracts the full number of shares from the old strategy but adds a lesser number of shares to the new strategy, effectively freezing the user's funds within the system.

**Match in Response List**:
Matches with the issue titled **""Inconsistent State Update in `withdrawAll`""** and **""Potential Loss of Tokens in `switchStrategy`""**.

**Validation**:
**Partially Correct**. The response identifies issues with state updates in `withdrawAll` and potential token loss in `switchStrategy`, but it does not explicitly address the core issue of liquidity constraints leading to frozen funds. The response focuses on reentrancy and state inconsistencies rather than the specific risk of liquidity issues in strategies like AaveYield.

---

**[H-08] Possibility to drain SavingsAccount contract assets**

**Report Description**:
A malicious actor can manipulate the `switchStrategy()` function to withdraw tokens locked in the SavingsAccount contract. This could occur if the function is exploited to bypass security checks or if the underlying strategy contracts are compromised, allowing unauthorized withdrawals.

**Match in Response List**:
Matches with the issue titled **""Potential Reentrancy in `switchStrategy` Despite `nonReentrant` Modifier""** and **""Unchecked External Call in `switchStrategy` Function""**.

**Validation**:
**Partially Correct**. The response highlights reentrancy risks and unchecked external calls in `switchStrategy`, which are relevant to the issue. However, it does not explicitly address the possibility of draining assets through manipulation of the function. The response focuses on reentrancy and token loss rather than the specific risk of asset drainage.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- **[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues**
- **[H-08] Possibility to drain SavingsAccount contract assets**

**Missed Issues from Issue Report**:
- *None*

---

### **Analysis**

The `response_list` partially addresses the issues raised in the `issue` report but misses critical details. For **[H-07]**, the response identifies state inconsistencies and token loss risks but does not explicitly cover the liquidity constraint issue. For **[H-08]**, the response highlights reentrancy and unchecked external calls but does not fully address the risk of asset drainage. Overall, the responses are **partially correct** but could be improved by explicitly addressing the specific risks outlined in the `issue` report.","```
None.
```",0.0
PriceOracle.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.6;

import '@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol';
import '@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/token/ERC20/ERC20.sol';

import './interfaces/IPriceOracle.sol';

contract PriceOracle is Initializable, OwnableUpgradeable, IPriceOracle {
    using SafeMath for uint256;

    uint32 uniswapPriceAveragingPeriod;
    struct PriceData {
        address oracle;
        uint256 decimals;
    }
    /**
     * @notice stores the price oracle and its decimals for chainlink feeds
     **/
    mapping(address => PriceData) public chainlinkFeedAddresses;
    mapping(address => uint256) decimals;

    /**
     * @notice stores the addresses of price feeds for uniswap token pairs
     **/
    mapping(bytes32 => address) public uniswapPools;

    /**
     * @notice Used to initialize the price oracle contract
     * @dev can only be invoked once
     * @param _admin owner of the price oracle
     **/
    function initialize(address _admin) external initializer {
        OwnableUpgradeable.__Ownable_init();
        OwnableUpgradeable.transferOwnership(_admin);
    }

    /**
     * @notice Used to get price of the num vs den token from chainlink
     * @param num the address of the token for which price in queried
     * @param den the address of the token in which price is queried
     * @return price of the num in terms of den
     * @return no of decimals for the price
     **/
    function getChainlinkLatestPrice(address num, address den) public view returns (uint256, uint256) {
        PriceData memory _feedData1 = chainlinkFeedAddresses[num];
        PriceData memory _feedData2 = chainlinkFeedAddresses[den];
        if (_feedData1.oracle == address(0) || _feedData2.oracle == address(0)) {
            return (0, 0);
        }
        int256 price1;
        int256 price2;
        {
            uint80 roundID1;
            uint256 timeStamp1;
            uint80 answeredInRound1;
            (
                roundID1,
                price1,
                ,
                timeStamp1,
                answeredInRound1
            ) = AggregatorV3Interface(_feedData1.oracle).latestRoundData();
            if(timeStamp1 == 0 || answeredInRound1 < roundID1) {
                return (0, 0);
            }
        }
        {
            uint80 roundID2;
            uint256 timeStamp2;
            uint80 answeredInRound2;
            (
                roundID2,
                price2,
                ,
                timeStamp2,
                answeredInRound2
            ) = AggregatorV3Interface(_feedData2.oracle).latestRoundData();
            if(timeStamp2 == 0 || answeredInRound2 < roundID2) {
                return (0, 0);
            }
        }
        uint256 price = uint256(price1)
            .mul(10**_feedData2.decimals)
            .mul(10**30)
            .div(uint256(price2))
            .div(10**_feedData1.decimals)
            .mul(10**decimals[den])
            .div(10**decimals[num]);
        return (price, 30);
    }

    /**
     * @notice Used to get decimals for a token
     * @param _token address of the token
     * @return number of decimals for the token
     **/
    function getDecimals(address _token) internal view returns (uint8) {
        if (_token == address(0)) {
            return 18;
        }

        try ERC20(_token).decimals() returns (uint8 v) {
            return v;
        } catch Error(string memory) {
            return 0;
        } catch (bytes memory) {
            return 0;
        }
    }

    /**
     * @notice Used to get price of the num vs den token from uniswap
     * @param num the address of the token for which price in queried
     * @param den the address of the token in which price is queried
     * @return price of the num in terms of den
     * @return no of decimals for the price
     **/
    function getUniswapLatestPrice(address num, address den) public view returns (uint256, uint256) {
        bytes32 _poolTokensId = getUniswapPoolTokenId(num, den);
        address _pool = uniswapPools[_poolTokensId];
        if (_pool == address(0)) {
            return (0, 0);
        }

        int24 _twapTick = OracleLibrary.consult(_pool, uniswapPriceAveragingPeriod);
        uint256 _numTokens = OracleLibrary.getQuoteAtTick(_twapTick, 10**30, num, den);
        return (_numTokens, 30);
    }

    function getUniswapPoolTokenId(address num, address den) internal pure returns (bytes32) {
        if (uint256(num) < uint256(den)) {
            return keccak256(abi.encodePacked(num, den));
        } else {
            return keccak256(abi.encodePacked(den, num));
        }
    }

    /**
     * @notice Used to get price of the num vs den token
     * @param num the address of the token for which price in queried
     * @param den the address of the token in which price is queried
     * @return price of the num in terms of den
     * @return no of decimals for the price
     **/
    function getLatestPrice(address num, address den) external view override returns (uint256, uint256) {
        uint256 _price;
        uint256 _decimals;
        (_price, _decimals) = getChainlinkLatestPrice(num, den);
        if (_decimals != 0) {
            return (_price, _decimals);
        }
        (_price, _decimals) = getUniswapLatestPrice(num, den);
        if (_decimals != 0) {
            return (_price, _decimals);
        }
        revert(""PriceOracle::getLatestPrice - Price Feed doesn't exist"");
    }

    /**
     * @notice used to check if price feed exists between 2 tokens
     * @param token1 one of the token for which price feed is to be checked
     * @param token2 other token for which price feed is to be checked
     * @return if price feed exists for the token pair
     **/
    function doesFeedExist(address token1, address token2) external view override returns (bool) {
        if (chainlinkFeedAddresses[token1].oracle != address(0) && chainlinkFeedAddresses[token2].oracle != address(0)) {
            return true;
        }

        bytes32 _poolTokensId = getUniswapPoolTokenId(token1, token2);

        if (uniswapPools[_poolTokensId] != address(0)) {
            return true;
        }

        return false;
    }

    /**
     * @notice Used to set the price feed address for a token in chainlink
     * @dev only owner can set
     * @param token address of token for which price feed is added
     * @param priceOracle addrewss of the price feed for the token
     **/
    function setChainlinkFeedAddress(address token, address priceOracle) external onlyOwner {
        uint256 priceOracleDecimals = AggregatorV3Interface(priceOracle).decimals();
        chainlinkFeedAddresses[token] = PriceData(priceOracle, priceOracleDecimals);
        decimals[token] = getDecimals(token);
        emit ChainlinkFeedUpdated(token, priceOracle);
    }

    /**
     * @notice Used to set the price feed address for a token pair in uniswap
     * @dev only owner can set
     * @param token1 address of one of the tokens for which price feed is added
     * @param token2 address of other token for which price feed is added
     * @param pool addrewss of the price feed for the token pair
     **/
    function setUniswapFeedAddress(
        address token1,
        address token2,
        address pool
    ) external onlyOwner {
        require(token1 != token2, 'token1 and token2 should be different addresses');
        bytes32 _poolTokensId = getUniswapPoolTokenId(token1, token2);
        uniswapPools[_poolTokensId] = pool;
        emit UniswapFeedUpdated(token1, token2, _poolTokensId, pool);
    }

    /**
     * @notice Used to set the period in which uniswap price is averaged
     * @dev only owner can set. This is used to prevent attacks to control price feed
     * @param _uniswapPriceAveragingPeriod period for uniswap price averaging
     **/
    function setUniswapPriceAveragingPeriod(uint32 _uniswapPriceAveragingPeriod) external onlyOwner {
        uniswapPriceAveragingPeriod = _uniswapPriceAveragingPeriod;
        emit UniswapPriceAveragingPeriodUpdated(_uniswapPriceAveragingPeriod);
    }
}",2032,223,"[H-09] PriceOracle Does Not Filter Price Feed Outliers

Function `getLatestPrice()`

If for whatever reason the Chainlink oracle returns a malformed price due to oracle manipulation or a malfunctioned price, the result will be passed onto users, causing unintended consequences as a result.
In the same time it's possible to construct mitigation mechanics for such cases, so user economics be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it's worth adding some complexity to the implementation.
",1,,"pragma solidity ^0.7.6;

import '@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol';
import '@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/token/ERC20/ERC20.sol';

import './interfaces/IPriceOracle.sol';

contract PriceOracle is Initializable, OwnableUpgradeable, IPriceOracle {
    using SafeMath for uint256;

    uint32 uniswapPriceAveragingPeriod;
    struct PriceData {
        address oracle;
        uint256 decimals;
    }
    
    mapping(address => PriceData) public chainlinkFeedAddresses;
    mapping(address => uint256) decimals;

    
    mapping(bytes32 => address) public uniswapPools;

    
    function initialize(address _admin) external initializer {
        OwnableUpgradeable.__Ownable_init();
        OwnableUpgradeable.transferOwnership(_admin);
    }

    
    function getChainlinkLatestPrice(address num, address den) public view returns (uint256, uint256) {
        PriceData memory _feedData1 = chainlinkFeedAddresses[num];
        PriceData memory _feedData2 = chainlinkFeedAddresses[den];
        if (_feedData1.oracle == address(0) || _feedData2.oracle == address(0)) {
            return (0, 0);
        }
        int256 price1;
        int256 price2;
        {
            uint80 roundID1;
            uint256 timeStamp1;
            uint80 answeredInRound1;
            (
                roundID1,
                price1,
                ,
                timeStamp1,
                answeredInRound1
            ) = AggregatorV3Interface(_feedData1.oracle).latestRoundData();
            if(timeStamp1 == 0 || answeredInRound1 < roundID1) {
                return (0, 0);
            }
        }
        {
            uint80 roundID2;
            uint256 timeStamp2;
            uint80 answeredInRound2;
            (
                roundID2,
                price2,
                ,
                timeStamp2,
                answeredInRound2
            ) = AggregatorV3Interface(_feedData2.oracle).latestRoundData();
            if(timeStamp2 == 0 || answeredInRound2 < roundID2) {
                return (0, 0);
            }
        }
        uint256 price = uint256(price1)
            .mul(10**_feedData2.decimals)
            .mul(10**30)
            .div(uint256(price2))
            .div(10**_feedData1.decimals)
            .mul(10**decimals[den])
            .div(10**decimals[num]);
        return (price, 30);
    }

    
    function getDecimals(address _token) internal view returns (uint8) {
        if (_token == address(0)) {
            return 18;
        }

        try ERC20(_token).decimals() returns (uint8 v) {
            return v;
        } catch Error(string memory) {
            return 0;
        } catch (bytes memory) {
            return 0;
        }
    }

    
    function getUniswapLatestPrice(address num, address den) public view returns (uint256, uint256) {
        bytes32 _poolTokensId = getUniswapPoolTokenId(num, den);
        address _pool = uniswapPools[_poolTokensId];
        if (_pool == address(0)) {
            return (0, 0);
        }

        int24 _twapTick = OracleLibrary.consult(_pool, uniswapPriceAveragingPeriod);
        uint256 _numTokens = OracleLibrary.getQuoteAtTick(_twapTick, 10**30, num, den);
        return (_numTokens, 30);
    }

    function getUniswapPoolTokenId(address num, address den) internal pure returns (bytes32) {
        if (uint256(num) < uint256(den)) {
            return keccak256(abi.encodePacked(num, den));
        } else {
            return keccak256(abi.encodePacked(den, num));
        }
    }

    
    function getLatestPrice(address num, address den) external view override returns (uint256, uint256) {
        uint256 _price;
        uint256 _decimals;
        (_price, _decimals) = getChainlinkLatestPrice(num, den);
        if (_decimals != 0) {
            return (_price, _decimals);
        }
        (_price, _decimals) = getUniswapLatestPrice(num, den);
        if (_decimals != 0) {
            return (_price, _decimals);
        }
        revert(""PriceOracle::getLatestPrice - Price Feed doesn't exist"");
    }

    
    function doesFeedExist(address token1, address token2) external view override returns (bool) {
        if (chainlinkFeedAddresses[token1].oracle != address(0) && chainlinkFeedAddresses[token2].oracle != address(0)) {
            return true;
        }

        bytes32 _poolTokensId = getUniswapPoolTokenId(token1, token2);

        if (uniswapPools[_poolTokensId] != address(0)) {
            return true;
        }

        return false;
    }

    
    function setChainlinkFeedAddress(address token, address priceOracle) external onlyOwner {
        uint256 priceOracleDecimals = AggregatorV3Interface(priceOracle).decimals();
        chainlinkFeedAddresses[token] = PriceData(priceOracle, priceOracleDecimals);
        decimals[token] = getDecimals(token);
        emit ChainlinkFeedUpdated(token, priceOracle);
    }

    
    function setUniswapFeedAddress(
        address token1,
        address token2,
        address pool
    ) external onlyOwner {
        require(token1 != token2, 'token1 and token2 should be different addresses');
        bytes32 _poolTokensId = getUniswapPoolTokenId(token1, token2);
        uniswapPools[_poolTokensId] = pool;
        emit UniswapFeedUpdated(token1, token2, _poolTokensId, pool);
    }

    
    function setUniswapPriceAveragingPeriod(uint32 _uniswapPriceAveragingPeriod) external onlyOwner {
        uniswapPriceAveragingPeriod = _uniswapPriceAveragingPeriod;
        emit UniswapPriceAveragingPeriodUpdated(_uniswapPriceAveragingPeriod);
    }
}",1404,1,0,,"{'ReviewingTheCode': ""The provided code snippet is a Solidity smart contract named 'PriceOracle'. It is designed to fetch and manage price data from Chainlink and Uniswap oracles. The contract inherits from 'Initializable' and 'OwnableUpgradeable' and implements the 'IPriceOracle' interface. It uses various libraries and interfaces for safe math operations, ERC20 token interactions, and oracle data fetching."", 'IdentifyingKeyComponents': {'ContractName': 'PriceOracle', 'Purpose': 'To fetch and manage price data from Chainlink and Uniswap oracles, providing a unified interface for price queries.', 'InheritanceAndImports': {'InheritsFrom': ['Initializable', 'OwnableUpgradeable', 'IPriceOracle'], 'Imports': ['@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol', '@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol', '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '@openzeppelin/contracts/math/SafeMath.sol', '@openzeppelin/contracts/token/ERC20/ERC20.sol', './interfaces/IPriceOracle.sol']}, 'StateVariables': [{'Name': 'uniswapPriceAveragingPeriod', 'Type': 'uint32', 'Purpose': 'Defines the time period over which the Uniswap price is averaged.'}, {'Name': 'chainlinkFeedAddresses', 'Type': 'mapping(address => PriceData)', 'Purpose': 'Stores Chainlink oracle addresses and their corresponding decimals for different tokens.'}, {'Name': 'decimals', 'Type': 'mapping(address => uint256)', 'Purpose': 'Stores the decimal places for different tokens.'}, {'Name': 'uniswapPools', 'Type': 'mapping(bytes32 => address)', 'Purpose': 'Stores Uniswap pool addresses for different token pairs.'}], 'FunctionsAndModifiers': [{'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract and sets the admin as the owner.', 'Parameters': ['address _admin'], 'Returns': []}, {'Name': 'getChainlinkLatestPrice', 'Visibility': 'public', 'Purpose': 'Fetches the latest price data from Chainlink oracles for a given token pair.', 'Parameters': ['address num', 'address den'], 'Returns': ['uint256', 'uint256']}, {'Name': 'getDecimals', 'Visibility': 'internal', 'Purpose': 'Retrieves the decimal places of a given token.', 'Parameters': ['address _token'], 'Returns': ['uint8']}, {'Name': 'getUniswapLatestPrice', 'Visibility': 'public', 'Purpose': 'Fetches the latest price data from Uniswap oracles for a given token pair.', 'Parameters': ['address num', 'address den'], 'Returns': ['uint256', 'uint256']}, {'Name': 'getUniswapPoolTokenId', 'Visibility': 'internal', 'Purpose': 'Generates a unique identifier for a Uniswap pool based on the token pair.', 'Parameters': ['address num', 'address den'], 'Returns': ['bytes32']}, {'Name': 'getLatestPrice', 'Visibility': 'external', 'Purpose': 'Fetches the latest price data from either Chainlink or Uniswap oracles for a given token pair.', 'Parameters': ['address num', 'address den'], 'Returns': ['uint256', 'uint256']}, {'Name': 'doesFeedExist', 'Visibility': 'external', 'Purpose': 'Checks if a price feed exists for a given token pair.', 'Parameters': ['address token1', 'address token2'], 'Returns': ['bool']}, {'Name': 'setChainlinkFeedAddress', 'Visibility': 'external', 'Purpose': 'Sets the Chainlink oracle address for a given token.', 'Parameters': ['address token', 'address priceOracle'], 'Returns': []}, {'Name': 'setUniswapFeedAddress', 'Visibility': 'external', 'Purpose': 'Sets the Uniswap pool address for a given token pair.', 'Parameters': ['address token1', 'address token2', 'address pool'], 'Returns': []}, {'Name': 'setUniswapPriceAveragingPeriod', 'Visibility': 'external', 'Purpose': 'Sets the time period over which the Uniswap price is averaged.', 'Parameters': ['uint32 _uniswapPriceAveragingPeriod'], 'Returns': []}]}, 'ExternalInteractions': [""Chainlink's AggregatorV3Interface for fetching price data."", ""Uniswap's OracleLibrary for fetching price data and calculating TWAP."", ""OpenZeppelin's ERC20 for token interactions.""], 'SpecialMechanisms': ['The contract uses a combination of Chainlink and Uniswap oracles to fetch price data, providing redundancy and flexibility.', 'It implements a time-weighted average price (TWAP) mechanism for Uniswap price data.', ""The contract is upgradeable, inheriting from 'Initializable' and 'OwnableUpgradeable'.""], 'Questions': [""How is the 'uniswapPriceAveragingPeriod' determined and what is its impact on the price data?"", 'Are there any security considerations when setting the Chainlink or Uniswap oracle addresses?', 'How does the contract handle cases where both Chainlink and Uniswap oracles return valid but differing price data?']}","{'Findings': [{'Issue': 'Potential Reentrancy in External Calls', 'Severity': 'High', 'Description': 'Functions `getChainlinkLatestPrice` and `getUniswapLatestPrice` interact with external contracts (Chainlink and Uniswap oracles). Although marked as `view`, future context changes could introduce reentrancy risks. Additionally, these calls lack try-catch blocks, leading to potential reverts.', 'Impact': 'Reentrancy attacks or unexpected reverts could manipulate contract state or cause denial of service.', 'Location': 'getChainlinkLatestPrice, getUniswapLatestPrice'}, {'Issue': 'Incorrect Handling of Decimals in Chainlink Price Calculation', 'Severity': 'High', 'Description': '`getChainlinkLatestPrice` mishandles decimals in price calculations, risking overflow/underflow and division by zero. It also lacks validation for price feed decimals, potentially returning inaccurate prices.', 'Impact': 'Financial losses due to incorrect price calculations in trading, lending, or other operations.', 'Location': 'getChainlinkLatestPrice function'}, {'Issue': ""Insufficient Error Handling in Chainlink's `latestRoundData`"", 'Severity': 'High', 'Description': ""`getChainlinkLatestPrice` fails to handle stale data, negative prices, or incomplete data from Chainlink's `latestRoundData`, risking incorrect price outputs."", 'Impact': 'Exploitable price inaccuracies leading to financial losses.', 'Location': 'getChainlinkLatestPrice function'}, {'Issue': ""Lack of Error Handling in Uniswap's `consult` and `getQuoteAtTick`"", 'Severity': 'High', 'Description': ""`getUniswapLatestPrice` lacks error handling for Uniswap's `consult` and `getQuoteAtTick` calls, potentially propagating invalid data."", 'Impact': 'Incorrect price data could be exploited for financial gain.', 'Location': 'getUniswapLatestPrice function'}, {'Issue': 'Potential Integer Overflow in Price Calculations', 'Severity': 'High', 'Description': 'Both `getChainlinkLatestPrice` and `getUniswapLatestPrice` perform arithmetic operations without overflow checks, risking incorrect calculations.', 'Impact': 'Security vulnerabilities or financial discrepancies due to overflow/underflow.', 'Location': 'getChainlinkLatestPrice, getUniswapLatestPrice'}, {'Issue': 'Reinitialization Attack', 'Severity': 'High', 'Description': 'The `initialize` function, though protected by an `initializer` modifier, must be audited to ensure no reinitialization is possible.', 'Impact': 'Contract state could be compromised by malicious reinitialization.', 'Location': 'initialize function'}, {'Issue': 'Uniswap TWAP Calculation Validation', 'Severity': 'High', 'Description': '`getUniswapLatestPrice` lacks validation for `uniswapPriceAveragingPeriod`, making it susceptible to manipulation via flash loans if set too short.', 'Impact': 'Price manipulation leading to financial losses.', 'Location': 'getUniswapLatestPrice function'}, {'Issue': 'Stale Data Check in Chainlink Price Feed', 'Severity': 'Medium', 'Description': '`getChainlinkLatestPrice` checks `answeredInRound` but omits `updatedAt` validation, risking stale price data usage.', 'Impact': 'Exploitable arbitrage opportunities due to outdated prices.', 'Location': 'getChainlinkLatestPrice function'}, {'Issue': 'Handling of External Calls', 'Severity': 'Medium', 'Description': 'External calls to Chainlink/Uniswap lack try-catch blocks, potentially reverting entire functions and disrupting operations.', 'Impact': 'Denial of service or unintended contract behavior.', 'Location': 'getChainlinkLatestPrice, getUniswapLatestPrice'}, {'Issue': 'Lack of Validation in Chainlink Feed Setup', 'Severity': 'Medium', 'Description': '`setChainlinkFeedAddress` does not validate if the input address is a valid Chainlink aggregator, risking invalid oracle setups.', 'Impact': 'Incorrect price feeds compromising contract integrity.', 'Location': 'setChainlinkFeedAddress function'}, {'Issue': 'No Validation for Uniswap Pool Address', 'Severity': 'Medium', 'Description': '`setUniswapFeedAddress` lacks validation for Uniswap pool addresses, potentially setting invalid pools.', 'Impact': 'Incorrect price data or function failures.', 'Location': 'setUniswapFeedAddress function'}, {'Issue': 'Potential Revert in `getDecimals`', 'Severity': 'Medium', 'Description': ""`getDecimals` returns 0 if the token's `decimals` call reverts, leading to incorrect price calculations."", 'Impact': 'Inaccurate pricing due to decimal mishandling.', 'Location': 'getDecimals function'}, {'Issue': 'Uniswap Price Averaging Period Setting', 'Severity': 'Medium', 'Description': '`setUniswapPriceAveragingPeriod` allows arbitrary values without validation, risking unreliable TWAP calculations.', 'Impact': 'Inaccurate price feeds affecting financial decisions.', 'Location': 'setUniswapPriceAveragingPeriod function'}, {'Issue': 'SafeMath Usage', 'Severity': 'Low', 'Description': 'Arithmetic operations inconsistently use `SafeMath`, leaving some calculations unprotected against overflow/underflow.', 'Impact': 'Potential vulnerabilities in unguarded operations.', 'Location': 'getChainlinkLatestPrice'}, {'Issue': 'Inconsistent Pool Identifier Generation in Uniswap', 'Severity': 'Low', 'Description': '`getUniswapPoolTokenId` generates pool IDs without enforcing token order consistency, risking mismanagement.', 'Impact': 'Confusion or errors in pool interactions.', 'Location': 'getUniswapPoolTokenId function'}, {'Issue': 'Lack of Price Feed Decentralization', 'Severity': 'Low', 'Description': 'Reliance solely on Chainlink and Uniswap for price feeds creates a single point of failure if either service is compromised.', 'Impact': 'Disrupted functionality during oracle downtime.', 'Location': 'Entire contract'}, {'Issue': 'Missing Zero Address Check in Chainlink Feed Setting', 'Severity': 'Low', 'Description': '`setChainlinkFeedAddress` does not prevent zero address inputs, risking invalid oracle configurations.', 'Impact': 'Failed price fetches due to invalid oracles.', 'Location': 'setChainlinkFeedAddress function'}, {'Issue': 'Gas Intensive Price Calculations', 'Severity': 'Low', 'Description': 'Both `getChainlinkLatestPrice` and `getUniswapLatestPrice` perform gas-intensive operations without optimizations like caching.', 'Impact': 'Higher transaction costs for users.', 'Location': 'getChainlinkLatestPrice, getUniswapLatestPrice'}], 'IssueNumber': 30, 'OutputList': 18}",304.65143299102783,"---

**[H-09] PriceOracle Does Not Filter Price Feed Outliers**

**Report Description**:
The `getLatestPrice()` function in the `PriceOracle` contract does not filter out price feed outliers. If the Chainlink oracle returns a malformed price due to manipulation or malfunction, the result will be passed to users, leading to unintended consequences. This issue creates a substantial attack surface, as price outliers can be exploited. Implementing mitigation mechanics to ensure sustainable price movements would reduce this risk.

**Match in Response List**:
Matches with the issue titled **""Insufficient Error Handling in Chainlink's `latestRoundData`""**.

**Validation**:
**Partially Correct**. The response identifies the issue of insufficient error handling in Chainlink's `latestRoundData` function, which includes risks of stale data, negative prices, or incomplete data. However, it does not explicitly address the specific concern of filtering price feed outliers or mitigating the impact of malformed prices. While the response covers some aspects of the vulnerability, it misses the critical detail of outlier filtering, which is the core issue in the report.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- **[H-09] PriceOracle Does Not Filter Price Feed Outliers**

**Missed Issues from Issue Report**:
- *None*

---","```
None.
```",0.0
NoYield.sol,"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/ICEther.sol';
import '../interfaces/Invest/ICToken.sol';

/**
 * @title Yield contract
 * @notice Implements the functions to lock/unlock tokens into available exchanges
 * @author Sublime
 **/
contract NoYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    /**
     * @notice stores the address of savings account contract
     **/
    address payable public savingsAccount;

    /**
     * @notice checks if contract is invoked by savings account
     **/
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    /**
     * @notice used to initialize the variables in the contract
     * @dev can only be called once
     * @param _owner address of the owner
     * @param _savingsAccount address of the savings account contract
     **/
    function initialize(address _owner, address payable _savingsAccount) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
    }

    /**
     * @notice used to query liquidity token for a given asset
     * @param _asset address of the asset
     * @return _tokenAddress address of the lqiudity token for the asset
     **/
    function liquidityToken(address _asset) external view override returns (address _tokenAddress) {
        _tokenAddress = _asset;
    }

    /**
     * @notice used to update savings account contract address
     * @dev can only be called by owner
     * @param _savingsAccount address of updated savings account contract
     **/
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    /**
     * @notice used to withdraw all tokens of a type in case of emergencies
     * @dev only owner can withdraw
     * @param _asset address of the token being withdrawn
     * @param _wallet address to which tokens are withdrawn
     */
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        uint256 amount = IERC20(_asset).balanceOf(address(this));
        IERC20(_asset).safeTransfer(_wallet, received);
        received = amount;
    }

    /**
     * @notice Used to lock tokens in the protocol
     * @dev Asset Tokens to be locked must be approved to this contract by user
     * @param user the address of user
     * @param asset the address of token to invest
     * @param amount the amount of asset
     * @return sharesReceived amount of shares received
     **/
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');
        if (asset != address(0)) {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
        } else {
            require(msg.value == amount, 'Invest: ETH amount');
        }
        sharesReceived = amount;
        emit LockedTokens(user, asset, sharesReceived);
    }

    /**
     * @notice Used to unlock tokens from the protocol
     * @param asset the address of underlying token
     * @param amount the amount of asset
     * @return tokensReceived received amount of tokens received
     **/
    function unlockTokens(address asset, uint256 amount)
        external
        override
        onlySavingsAccount
        nonReentrant
        returns (uint256 tokensReceived)
    {
        tokensReceived = _unlockTokens(asset, amount);
    }

    /**
     * @notice Used to unlock shares
     * @param asset the address of underlying token
     * @param amount the amount of shares to unlock
     * @return received amount of shares received
     **/
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        received = _unlockTokens(asset, amount);
    }

    function _unlockTokens(address asset, uint256 amount) internal returns (uint256 received) {
        require(amount != 0, 'Invest: amount');
        received = amount;
        if (asset == address(0)) {
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            IERC20(asset).safeTransfer(savingsAccount, received);
        }
        emit UnlockedTokens(asset, received);
    }

    /**
     * @dev Used to get amount of underlying tokens for given number of shares
     * @param shares the amount of shares
     * @param asset the address of token locked
     * @return amount amount of underlying tokens
     **/
    function getTokensForShares(uint256 shares, address asset) external pure override returns (uint256 amount) {
        amount = shares;
    }

    /**
     * @notice Used to get number of shares from an amount of underlying tokens
     * @param amount the amount of tokens
     * @param asset the address of token
     * @return shares amount of shares for given tokens
     **/
    function getSharesForTokens(uint256 amount, address asset) external pure override returns (uint256 shares) {
        shares = amount;
    }
}",1322,165,"[H-10] Wrong implementation of NoYield.sol#emergencyWithdraw()

Submitted by WatchPug, also found by 0x1f8b
https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L78-L83
function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {
    require(_wallet != address(0), 'cant burn');
    uint256 amount = IERC20(_asset).balanceOf(address(this));
    IERC20(_asset).safeTransfer(_wallet, received);
    received = amount;
}

received is not being assigned prior to L81, therefore, at L81, received is 0.
As a result, the emergencyWithdraw() does not work, in essence.


[H-11] Unable To Call emergencyWithdraw ETH in NoYield Contract

The `emergencyWithdraw` function is implemented in all yield sources to allow the onlyOwner role to drain the contract's balance in case of emergency. The contract considers ETH as a zero address asset. However, there is a call made on _asset which will revert if it is the zero address. As a result, ETH tokens can never be withdrawn from the NoYield contract in the event of an emergency.
  [M-06] NoYield.sol Tokens with fee on transfer are not supported

There are ERC20 tokens that charge fee for every transfer() or transferFrom().
In the current implementation, NoYield.sol#lockTokens() assumes that the received amount is the same as the transfer amount, and uses it to calculate sharesReceived amounts.
As a result, in `unlockTokens()`, later users may not be able to successfully withdraw their tokens, as it may revert at L141 for insufficient balance.
https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L93-L106
",3,,"pragma solidity 0.7.6;

import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
import '@openzeppelin/contracts/utils/ReentrancyGuard.sol';
import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import '@openzeppelin/contracts/math/SafeMath.sol';

import '../interfaces/IYield.sol';
import '../interfaces/Invest/ICEther.sol';
import '../interfaces/Invest/ICToken.sol';


contract NoYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    
    address payable public savingsAccount;

    
    modifier onlySavingsAccount() {
        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');
        _;
    }

    
    function initialize(address _owner, address payable _savingsAccount) external initializer {
        __Ownable_init();
        super.transferOwnership(_owner);

        _updateSavingsAccount(_savingsAccount);
    }

    
    function liquidityToken(address _asset) external view override returns (address _tokenAddress) {
        _tokenAddress = _asset;
    }

    
    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address payable _savingsAccount) internal {
        require(_savingsAccount != address(0), 'Invest: zero address');
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    
    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {
        require(_wallet != address(0), 'cant burn');
        uint256 amount = IERC20(_asset).balanceOf(address(this));
        IERC20(_asset).safeTransfer(_wallet, received);
        received = amount;
    }

    
    function lockTokens(
        address user,
        address asset,
        uint256 amount
    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {
        require(amount != 0, 'Invest: amount');
        if (asset != address(0)) {
            IERC20(asset).safeTransferFrom(user, address(this), amount);
        } else {
            require(msg.value == amount, 'Invest: ETH amount');
        }
        sharesReceived = amount;
        emit LockedTokens(user, asset, sharesReceived);
    }

    
    function unlockTokens(address asset, uint256 amount)
        external
        override
        onlySavingsAccount
        nonReentrant
        returns (uint256 tokensReceived)
    {
        tokensReceived = _unlockTokens(asset, amount);
    }

    
    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {
        received = _unlockTokens(asset, amount);
    }

    function _unlockTokens(address asset, uint256 amount) internal returns (uint256 received) {
        require(amount != 0, 'Invest: amount');
        received = amount;
        if (asset == address(0)) {
            (bool success, ) = savingsAccount.call{value: received}('');
            require(success, 'Transfer failed');
        } else {
            IERC20(asset).safeTransfer(savingsAccount, received);
        }
        emit UnlockedTokens(asset, received);
    }

    
    function getTokensForShares(uint256 shares, address asset) external pure override returns (uint256 amount) {
        amount = shares;
    }

    
    function getSharesForTokens(uint256 amount, address asset) external pure override returns (uint256 shares) {
        shares = amount;
    }
}",786,2,1,,"{'ReviewingTheCode': ""The contract 'NoYield' is an upgradeable smart contract designed to manage token locking and unlocking mechanisms, primarily interacting with a savings account. It leverages OpenZeppelin libraries for security and utility functions, and it implements reentrancy guards to prevent attacks. The contract is initialized with an owner and a savings account address, and it allows for emergency withdrawals and updates to the savings account."", 'IdentifyingKeyComponents': {'ContractName': 'NoYield', 'Purpose': 'To manage the locking and unlocking of tokens, primarily interacting with a savings account, and to allow emergency withdrawals and updates to the savings account.', 'InheritanceAndImports': {'InheritsFrom': ['IYield', 'Initializable', 'OwnableUpgradeable', 'ReentrancyGuard'], 'Imports': ['@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol', '@openzeppelin/contracts/utils/ReentrancyGuard.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '../interfaces/IYield.sol', '../interfaces/Invest/ICEther.sol', '../interfaces/Invest/ICToken.sol']}, 'StateVariables': [{'Name': 'savingsAccount', 'Type': 'address payable', 'Purpose': 'Stores the address of the savings account that can interact with the contract.'}], 'FunctionsAndModifiers': [{'Name': 'onlySavingsAccount', 'Visibility': 'modifier', 'Purpose': 'Ensures that only the savings account can invoke certain functions.', 'Parameters': [], 'Returns': []}, {'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with an owner and a savings account address.', 'Parameters': ['address _owner', 'address payable _savingsAccount'], 'Returns': []}, {'Name': 'liquidityToken', 'Visibility': 'external', 'Purpose': 'Returns the address of the asset as the liquidity token.', 'Parameters': ['address _asset'], 'Returns': ['address _tokenAddress']}, {'Name': 'updateSavingsAccount', 'Visibility': 'external', 'Purpose': 'Updates the savings account address.', 'Parameters': ['address payable _savingsAccount'], 'Returns': []}, {'Name': '_updateSavingsAccount', 'Visibility': 'internal', 'Purpose': 'Internal function to update the savings account address and emit an event.', 'Parameters': ['address payable _savingsAccount'], 'Returns': []}, {'Name': 'emergencyWithdraw', 'Visibility': 'external', 'Purpose': 'Allows the owner to withdraw tokens in case of an emergency.', 'Parameters': ['address _asset', 'address payable _wallet'], 'Returns': ['uint256 received']}, {'Name': 'lockTokens', 'Visibility': 'external', 'Purpose': 'Locks tokens from a user and returns the shares received.', 'Parameters': ['address user', 'address asset', 'uint256 amount'], 'Returns': ['uint256 sharesReceived']}, {'Name': 'unlockTokens', 'Visibility': 'external', 'Purpose': 'Unlocks tokens and returns the amount received.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256 tokensReceived']}, {'Name': 'unlockShares', 'Visibility': 'external', 'Purpose': 'Unlocks shares and returns the amount received.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256 received']}, {'Name': '_unlockTokens', 'Visibility': 'internal', 'Purpose': 'Internal function to unlock tokens and emit an event.', 'Parameters': ['address asset', 'uint256 amount'], 'Returns': ['uint256 received']}, {'Name': 'getTokensForShares', 'Visibility': 'external', 'Purpose': 'Returns the amount of tokens for a given number of shares.', 'Parameters': ['uint256 shares', 'address asset'], 'Returns': ['uint256 amount']}, {'Name': 'getSharesForTokens', 'Visibility': 'external', 'Purpose': 'Returns the number of shares for a given amount of tokens.', 'Parameters': ['uint256 amount', 'address asset'], 'Returns': ['uint256 shares']}]}, 'ExternalInteractions': [""OpenZeppelin's OwnableUpgradeable, ReentrancyGuard, SafeERC20, and SafeMath libraries."", 'Interfaces: IYield, ICEther, ICToken.'], 'SpecialMechanisms': ['ReentrancyGuard: Prevents reentrancy attacks.', 'Initializable: Allows the contract to be initialized.', 'OwnableUpgradeable: Provides ownership functionality.'], 'Questions': [""Why is the 'emergencyWithdraw' function transferring 'received' instead of 'amount'?"", 'Is there a specific reason for not using a more complex mechanism for calculating shares and tokens?', 'Are there any specific security considerations for the savings account address updates?']}","{'Findings': [{'Issue': 'Incorrect Emergency Withdraw Implementation', 'Severity': 'High', 'Description': 'The `emergencyWithdraw` function incorrectly transfers the `received` variable instead of the `amount` variable. This results in transferring an uninitialized or incorrect value, potentially leading to loss of funds.', 'Impact': 'Potential loss of funds due to incorrect transfer amount.', 'Location': 'emergencyWithdraw function'}, {'Issue': 'Potential Reentrancy Vulnerability in `emergencyWithdraw`', 'Severity': 'High', 'Description': 'The `emergencyWithdraw` function transfers tokens before updating the `received` variable. This could allow a reentrancy attack if the `_wallet` is a malicious contract that calls back into `emergencyWithdraw` before the state is updated.', 'Impact': ""An attacker could drain the contract's funds by repeatedly calling `emergencyWithdraw` before the state is updated."", 'Location': 'emergencyWithdraw function'}, {'Issue': 'Lack of Input Validation in `lockTokens`', 'Severity': 'Medium', 'Description': 'The `lockTokens` function does not validate the `asset` or `user` addresses. If a zero address or invalid address is passed, it could lead to unintended behavior or loss of funds.', 'Impact': 'Potential loss of funds or unexpected behavior if invalid addresses are used.', 'Location': 'lockTokens function'}, {'Issue': 'No Check for Contract Existence in `unlockTokens`', 'Severity': 'Medium', 'Description': 'The `_unlockTokens` function does not check if the `savingsAccount` address is a contract before transferring funds. This could lead to loss of funds if the address is not a valid contract.', 'Impact': 'Potential loss of funds if `savingsAccount` is not a valid contract address.', 'Location': '_unlockTokens function'}, {'Issue': 'Potential Reentrancy in `unlockTokens`', 'Severity': 'Medium', 'Description': 'Although the `unlockTokens` function uses the `nonReentrant` modifier, the `_unlockTokens` function performs external calls before updating the state. This could potentially allow reentrancy if the `savingsAccount` is a malicious contract.', 'Impact': 'Potential reentrancy attacks leading to loss of funds.', 'Location': '_unlockTokens function'}, {'Issue': 'Lack of Input Validation in `_updateSavingsAccount`', 'Severity': 'Medium', 'Description': 'The `_updateSavingsAccount` function does not validate if the new savings account address is different from the current one. This could lead to redundant updates and unnecessary event emissions.', 'Impact': 'Inefficient state management and potential confusion in event logs.', 'Location': '_updateSavingsAccount function'}, {'Issue': 'No Event Emission in `emergencyWithdraw`', 'Severity': 'Low', 'Description': 'The `emergencyWithdraw` function does not emit an event after transferring tokens. This makes it difficult to track emergency withdrawals.', 'Impact': 'Reduced transparency and auditability for emergency withdrawals.', 'Location': 'emergencyWithdraw function'}, {'Issue': 'No Event Emission in `initialize`', 'Severity': 'Low', 'Description': 'The `initialize` function does not emit an event after initializing the contract. This makes it difficult to track the initialization of the contract.', 'Impact': 'Lack of transparency in contract initialization.', 'Location': 'initialize function'}, {'Issue': 'Use of Deprecated SafeMath Library', 'Severity': 'Low', 'Description': 'The contract uses the `SafeMath` library, which is redundant in Solidity 0.8.x and above due to built-in overflow checks. This increases contract size and gas costs without additional security benefits.', 'Impact': 'Increased gas costs and unnecessary complexity.', 'Location': 'Throughout the contract where SafeMath is used'}], 'IssueNumber': 14, 'OutputList': 9}",512.0311360359192,"### **[H-10] Wrong implementation of NoYield.sol#emergencyWithdraw()**

**Report Description**:
The `emergencyWithdraw` function in `NoYield.sol` incorrectly transfers the `received` variable instead of the `amount` variable. Since `received` is not initialized before the transfer, it defaults to `0`, resulting in no tokens being transferred. This renders the `emergencyWithdraw` function ineffective, potentially leading to loss of funds in emergency situations.

**Match in Response List**:
Matches with the issue titled **""Incorrect Emergency Withdraw Implementation""**.

**Validation**:
**Correct**. The response accurately identifies the issue with the incorrect transfer of the `received` variable instead of the `amount` variable. It correctly explains the potential loss of funds due to this oversight, which aligns with the reported issue.

---

### **[H-11] Unable To Call emergencyWithdraw ETH in NoYield Contract**

**Report Description**:
The `emergencyWithdraw` function in `NoYield.sol` does not handle ETH withdrawals correctly. ETH is considered as a zero address asset, but the function attempts to call `IERC20(_asset)`, which will revert if `_asset` is the zero address. As a result, ETH cannot be withdrawn from the contract in emergency situations.

**Match in Response List**:
**No match found**.

**Validation**:
**Missed Issue**. The response list does not address the inability to withdraw ETH due to the zero address check in the `emergencyWithdraw` function. This is a critical oversight that should have been included in the response list.

---

### **[M-06] NoYield.sol Tokens with fee on transfer are not supported**

**Report Description**:
The `lockTokens` function in `NoYield.sol` assumes that the received amount is the same as the transfer amount. However, some ERC20 tokens charge a fee on transfer, leading to discrepancies between the transferred and received amounts. This can cause issues in `unlockTokens`, where users may not be able to withdraw their tokens due to insufficient balance.

**Match in Response List**:
**No match found**.

**Validation**:
**Missed Issue**. The response list does not address the issue of tokens with fee-on-transfer mechanisms. This is a medium-severity issue that should have been included, as it can lead to users being unable to withdraw their tokens.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-10] Wrong implementation of NoYield.sol#emergencyWithdraw()**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- **[H-11] Unable To Call emergencyWithdraw ETH in NoYield Contract**
- **[M-06] NoYield.sol Tokens with fee on transfer are not supported**

---

The response list accurately identifies the issue with the incorrect transfer in the `emergencyWithdraw` function but misses two critical issues: the inability to withdraw ETH and the lack of support for tokens with fee-on-transfer mechanisms. These gaps should be addressed to ensure comprehensive coverage of the vulnerabilities in the `NoYield.sol` contract.","```
1. Incorrect Emergency Withdraw Implementation
```",0.5
PoolFactory.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import '../Proxy.sol';
import '../interfaces/IPoolFactory.sol';
import '../interfaces/IPool.sol';
import '../interfaces/IVerification.sol';
import '../interfaces/IStrategyRegistry.sol';
import '../interfaces/IRepayment.sol';
import '../interfaces/IPriceOracle.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';

/**
 * @title Pool Factory contract with methods for handling different pools
 * @notice Implements the functions related to Pool (CRUD)
 * @author Sublime
 */
contract PoolFactory is Initializable, OwnableUpgradeable, IPoolFactory {
    /*
     * @notice Used to define limits for the Pool parameters
     * @param min the minimum threshold for the parameter
     * @param max the maximum threshold for the parameter
     */
    struct Limits {
        uint256 min;
        uint256 max;
    }

    /**
     * @notice function definition of the pool contract
     */
    bytes4 public poolInitFuncSelector; //  bytes4(keccak256(""initialize(uint256,address,address,address,uint256,uint256,uint256,uint256,bool)""))

    /**
     * @notice address of the latest implementation of the pool logic
     */
    address public poolImpl;

    /**
     * @notice address of the contract storing the user registry
     */
    address public override userRegistry;

    /**
     * @notice address of the contract storing the strategy registry
     */
    address public strategyRegistry;

    /**
     * @notice address of the latest implementation of the extension logic
     */
    address public override extension;

    /**
     * @notice address of the latest implementation of the repayment logic
     */
    address public override repaymentImpl;

    /**
     * @notice address of the latest implementation of the pool logic
     */
    address public override priceOracle;

    /**
     * @notice address of the savings account used
     */
    address public override savingsAccount;

    /**
     * @notice the time interval for the lenders to make contributions to pool
     */
    uint256 public override collectionPeriod;

    /**
     * @notice the time interval for the borrower to withdraw the loan from pool
     */
    uint256 public override loanWithdrawalDuration;

    /**
     * @notice the time interval for the active stage of the margin call
     */
    uint256 public override marginCallDuration;

    /**
     * @notice Fraction of the requested amount for pool below which pool is cancelled
     */
    uint256 public override minBorrowFraction;

    /**
     * @notice the fraction used for calculating the liquidator reward
     */
    uint256 public override liquidatorRewardFraction;

    /**
     * @notice the fraction used for calculating the penalty when the pool is cancelled
     */
    uint256 public override poolCancelPenaltyMultiple;

    /**
     * @notice Contract Address of no yield
     */
    address public override noStrategyAddress;

    uint256 protocolFeeFraction;
    address protocolFeeCollector;

    /*
     * @notice Used to mark assets supported for borrowing
     */
    mapping(address => bool) isBorrowToken;

    /*
     * @notice Used to mark supported collateral assets
     */
    mapping(address => bool) isCollateralToken;

    /**
     * @notice Used to keep track of valid pool addresses
     */
    mapping(address => bool) public override poolRegistry;

    /*
     * @notice Used to set the min/max borrow amount for Pools
     */
    Limits poolSizeLimit;

    /*
     * @notice Used to set the min/max collateral ratio for Pools
     */
    Limits idealCollateralRatioLimit;

    /*
     * @notice Used to set the min/max borrow rates (interest rate provided by borrower) for Pools
     */
    Limits borrowRateLimit;

    /*
     * @notice used to set the min/max repayment interval for Pools
     */
    Limits repaymentIntervalLimit;

    /*
     * @notice used to set the min/max number of repayment intervals for Pools
     */
    Limits noOfRepaymentIntervalsLimit;

    /**
     * @notice functions affected by this modifier can only be invoked by the Pool
     */
    modifier onlyPool() {
        require(poolRegistry[msg.sender], 'PoolFactory::onlyPool - Only pool can destroy itself');
        _;
    }

    /**
     * @notice functions affected by this modifier can only be invoked by the borrow of the Pool
     */
    modifier onlyBorrower(address _verifier) {
        require(
            IVerification(userRegistry).isUser(msg.sender, _verifier),
            'PoolFactory::onlyBorrower - Only a valid Borrower can create Pool'
        );
        _;
    }

    /**
     * @notice returns the owner of the pool
     */
    function owner() public view override(IPoolFactory, OwnableUpgradeable) returns (address) {
        return OwnableUpgradeable.owner();
    }

    /**
     * @notice used to initialize the pool factory
     * @dev initializer can only be run once
     * @param _admin address of admin
     * @param _collectionPeriod period for which lenders can lend for pool
     * @param _loanWithdrawalDuration period for which lent tokens can be withdrawn after pool starts
     * @param _marginCallDuration duration of margin call before which collateral ratio has to be maintained
     * @param _poolInitFuncSelector function signature for initializing pool
     * @param _liquidatorRewardFraction fraction of liquidation amount which is given to liquidator as reward multiplied by 10**30
     * @param _poolCancelPenaltyMultiple multiple of borrow rate of pool as penality for cancellation of pool multiplied by 10**30
     * @param _minBorrowFraction amountCollected/amountRequested for a pool, if less than fraction by pool start time then pool can be cancelled without penality multiplied by 10**30
     * @param _protocolFeeFraction fraction of amount borrowed in pool which is collected as protocol fee
     * @param _protocolFeeCollector address where protocol fee is collected
     * @param _noStrategy address of the no strategy address
     */
    function initialize(
        address _admin,
        uint256 _collectionPeriod,
        uint256 _loanWithdrawalDuration,
        uint256 _marginCallDuration,
        bytes4 _poolInitFuncSelector,
        uint256 _liquidatorRewardFraction,
        uint256 _poolCancelPenaltyMultiple,
        uint256 _minBorrowFraction,
        uint256 _protocolFeeFraction,
        address _protocolFeeCollector,
        address _noStrategy
    ) external initializer {
        {
            OwnableUpgradeable.__Ownable_init();
            OwnableUpgradeable.transferOwnership(_admin);
        }
        _updateCollectionPeriod(_collectionPeriod);
        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);
        _updateMarginCallDuration(_marginCallDuration);
        _updatepoolInitFuncSelector(_poolInitFuncSelector);
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);
        _updateMinBorrowFraction(_minBorrowFraction);
        _updateProtocolFeeFraction(_protocolFeeFraction);
        _updateProtocolFeeCollector(_protocolFeeCollector);
        _updateNoStrategy(_noStrategy);
    }

    /**
     * @notice used to setImplementation addresses
     * @dev used to set some of the contracts pool factory interacts with. only admin can invoke
     * @param _poolImpl address of the implementation address of pool
     * @param _repaymentImpl address of the implementation address of repayments
     * @param _userRegistry address of the user registry where users are verified
     * @param _strategyRegistry address of the startegy registry where strategies are whitelisted
     * @param _priceOracle address of the price oracle
     * @param _savingsAccount address of the savings account contract
     * @param _extension address of the extension contract for pools
     */
    function setImplementations(
        address _poolImpl,
        address _repaymentImpl,
        address _userRegistry,
        address _strategyRegistry,
        address _priceOracle,
        address _savingsAccount,
        address _extension
    ) external onlyOwner {
        _updatePoolLogic(_poolImpl);
        _updateRepaymentImpl(_repaymentImpl);
        _updateSavingsAccount(_savingsAccount);
        _updatedExtension(_extension);
        _updateUserRegistry(_userRegistry);
        _updateStrategyRegistry(_strategyRegistry);
        _updatePriceoracle(_priceOracle);
    }

    /**
     * @notice invoked when a new borrow pool is created. deploys a new pool for every borrow request
     * @param _poolSize loan amount requested
     * @param _borrowToken borrow asset requested
     * @param _collateralToken collateral asset requested
     * @param _idealCollateralRatio ideal pool collateral ratio set by the borrower
     * @param _borrowRate interest rate provided by the borrower
     * @param _repaymentInterval interval between the last dates of two repayment cycles
     * @param _noOfRepaymentIntervals number of repayments to be made during the duration of the loan
     * @param _poolSavingsStrategy savings strategy selected for the pool collateral
     * @param _collateralAmount collateral amount deposited
     * @param _transferFromSavingsAccount if true, initial collateral is transferred from borrower's savings account, if false, borrower transfers initial collateral deposit from wallet
     * @param _salt random and unique initial seed
     */
    function createPool(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        bytes32 _salt,
        address _verifier,
        address _lenderVerifier
    ) external payable onlyBorrower(_verifier) {
        if (_collateralToken == address(0)) {
            require(msg.value == _collateralAmount, 'PoolFactory::createPool - Ether send is different from collateral amount specified');
        }
        require(_borrowToken != _collateralToken, 'PoolFactory::createPool - cant borrow the asset put in as collateralToken');
        require(isBorrowToken[_borrowToken], 'PoolFactory::createPool - Invalid borrow token type');
        require(isCollateralToken[_collateralToken], 'PoolFactory::createPool - Invalid collateral token type');
        require(
            IPriceOracle(priceOracle).doesFeedExist(_collateralToken, _borrowToken),
            ""PoolFactory::createPool - Price feed doesn't support token pair""
        );
        require(IStrategyRegistry(strategyRegistry).registry(_poolSavingsStrategy), 'PoolFactory::createPool - Invalid strategy');
        require(isWithinLimits(_poolSize, poolSizeLimit.min, poolSizeLimit.max), 'PoolFactory::createPool - PoolSize not within limits');
        require(
            isWithinLimits(_idealCollateralRatio, idealCollateralRatioLimit.min, idealCollateralRatioLimit.max),
            'PoolFactory::createPool - Collateral Ratio not within limits'
        );
        require(
            isWithinLimits(_borrowRate, borrowRateLimit.min, borrowRateLimit.max),
            'PoolFactory::createPool - Borrow rate not within limits'
        );
        require(
            isWithinLimits(_noOfRepaymentIntervals, noOfRepaymentIntervalsLimit.min, noOfRepaymentIntervalsLimit.max),
            'PoolFactory::createPool - Loan duration not within limits'
        );
        require(
            isWithinLimits(_repaymentInterval, repaymentIntervalLimit.min, repaymentIntervalLimit.max),
            'PoolFactory::createPool - Repayment interval not within limits'
        );
        _createPool(
            _poolSize,
            _borrowRate,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _salt,
            _lenderVerifier
        );
    }

    // @dev These functions are used to avoid stack too deep
    function _createPool(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        bytes32 _salt,
        address _lenderVerifier
    ) internal {
        bytes memory data = _encodePoolInitCall(
            _poolSize,
            _borrowRate,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _lenderVerifier
        );
        bytes32 salt = keccak256(abi.encodePacked(_salt, msg.sender));
        bytes memory bytecode = abi.encodePacked(type(SublimeProxy).creationCode, abi.encode(poolImpl, address(0x01), data));
        uint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;

        address pool = _deploy(amount, salt, bytecode);

        poolRegistry[pool] = true;
        emit PoolCreated(pool, msg.sender);
    }

    // @dev These functions are used to avoid stack too deep
    function _encodePoolInitCall(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        address _lenderVerifier
    ) internal view returns (bytes memory data) {
        data = abi.encodeWithSelector(
            poolInitFuncSelector,
            _poolSize,
            _borrowRate,
            msg.sender,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _lenderVerifier,
            loanWithdrawalDuration,
            collectionPeriod
        );
    }

    /**
     * @dev Deploys a contract using `CREATE2`. The address where the contract
     * will be deployed can be known in advance via {computeAddress}.
     *
     * The bytecode for a contract can be obtained from Solidity with
     * `type(contractName).creationCode`.
     *
     * Requirements:
     *
     * - `bytecode` must not be empty.
     * - `salt` must have not been used for `bytecode` already.
     * - the factory must have a balance of at least `amount`.
     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.
     */
    function _deploy(
        uint256 amount,
        bytes32 salt,
        bytes memory bytecode
    ) internal returns (address addr) {
        require(bytecode.length != 0, 'Create2: bytecode length is zero');
        // solhint-disable-next-line no-inline-assembly
        assembly {
            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(addr != address(0), 'Create2: Failed on deploy');
    }

    /**
     * @notice invoked to check if pool parameters are within thresholds
     * @param _value supplied value of the parameter
     * @param _min minimum threshold of the parameter
     * @param _max maximum threshold of the parameter
     */
    function isWithinLimits(
        uint256 _value,
        uint256 _min,
        uint256 _max
    ) internal pure returns (bool) {
        if (_min != 0 && _max != 0) {
            return (_value >= _min && _value <= _max);
        } else if (_min != 0) {
            return (_value >= _min);
        } else if (_max != 0) {
            return (_value <= _max);
        } else {
            return true;
        }
    }

    /**
     * @notice used to update the list of supported borrow tokens
     * @param _borrowToken address of the borrow asset
     * @param _isSupported true if _borrowToken is a valid borrow asset, false if _borrowToken is an invalid borrow asset
     */
    function updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) external onlyOwner {
        _updateSupportedBorrowTokens(_borrowToken, _isSupported);
    }

    function _updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) internal {
        isBorrowToken[_borrowToken] = _isSupported;
        emit BorrowTokenUpdated(_borrowToken, _isSupported);
    }

    /**
     * @notice used to update the list of supported Collateral tokens
     * @param _collateralToken address of the Collateral asset
     * @param _isSupported true if _collateralToken is a valid Collateral asset, false if _collateralToken is an invalid Collateral asset
     */
    function updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) external onlyOwner {
        _updateSupportedCollateralTokens(_collateralToken, _isSupported);
    }

    function _updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) internal {
        isCollateralToken[_collateralToken] = _isSupported;
        emit CollateralTokenUpdated(_collateralToken, _isSupported);
    }

    /**
     * @notice used to update the pointer to Initializer function of the proxy pool contract
     * @param _functionId updated function definition of the proxy pool contract
     */
    function updatepoolInitFuncSelector(bytes4 _functionId) external onlyOwner {
        _updatepoolInitFuncSelector(_functionId);
    }

    function _updatepoolInitFuncSelector(bytes4 _functionId) internal {
        poolInitFuncSelector = _functionId;
        emit PoolInitSelectorUpdated(_functionId);
    }

    /**
     * @notice used to update the Pool.sol logic
     * @param _poolLogic the address of the new Pool logic contract
     */
    function updatePoolLogic(address _poolLogic) external onlyOwner {
        _updatePoolLogic(_poolLogic);
    }

    function _updatePoolLogic(address _poolLogic) internal {
        poolImpl = _poolLogic;
        emit PoolLogicUpdated(_poolLogic);
    }

    /**
     * @notice used to update the user registry
     * @param _userRegistry address of the contract storing the user registry
     */
    function updateUserRegistry(address _userRegistry) external onlyOwner {
        _updateUserRegistry(_userRegistry);
    }

    function _updateUserRegistry(address _userRegistry) internal {
        userRegistry = _userRegistry;
        emit UserRegistryUpdated(_userRegistry);
    }

    /**
     * @notice used to update the strategy registry
     * @param _strategyRegistry address of the contract storing the strategy registry
     */
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    /**
     * @notice used to update the implementation of the repayment logic
     * @param _repaymentImpl address of the updated repayment.sol contract
     */
    function updateRepaymentImpl(address _repaymentImpl) external onlyOwner {
        _updateRepaymentImpl(_repaymentImpl);
    }

    function _updateRepaymentImpl(address _repaymentImpl) internal {
        repaymentImpl = _repaymentImpl;
        emit RepaymentImplUpdated(_repaymentImpl);
    }

    /**
     * @notice used to update contract address of nostrategy contract
     * @param _noStrategy address of the updated noYield.sol contract
     */
    function updateNoStrategy(address _noStrategy) external onlyOwner {
        _updateNoStrategy(_noStrategy);
    }

    function _updateNoStrategy(address _noStrategy) internal {
        noStrategyAddress = _noStrategy;
        emit NoStrategyUpdated(_noStrategy);
    }

    /**
     * @notice used to update the implementation of the price oracle logic
     * @param _priceOracle address of the updated price oracle contract
     */
    function updatePriceoracle(address _priceOracle) external onlyOwner {
        _updatePriceoracle(_priceOracle);
    }

    function _updatePriceoracle(address _priceOracle) internal {
        priceOracle = _priceOracle;
        emit PriceOracleUpdated(_priceOracle);
    }

    /**
     * @notice used to update the extensions contract
     * @param _extension address of the updated extensions contract
     */
    function updatedExtension(address _extension) external onlyOwner {
        _updatedExtension(_extension);
    }

    function _updatedExtension(address _extension) internal {
        extension = _extension;
        emit ExtensionImplUpdated(_extension);
    }

    /**
     * @notice used to update the savings account contract
     * @param _savingsAccount address of the updated savings account contract
     */
    function updateSavingsAccount(address _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address _savingsAccount) internal {
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    /**
     * @notice used to update the collection period of the Pool
     * @param _collectionPeriod updated value of the collection period
     */
    function updateCollectionPeriod(uint256 _collectionPeriod) external onlyOwner {
        _updateCollectionPeriod(_collectionPeriod);
    }

    function _updateCollectionPeriod(uint256 _collectionPeriod) internal {
        collectionPeriod = _collectionPeriod;
        emit CollectionPeriodUpdated(_collectionPeriod);
    }

    /**
     * @notice used to update the loan withdrawal duration by owner
     * @param _loanWithdrawalDuration updated value of loanWithdrawalDuration
     */
    function updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) external onlyOwner {
        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);
    }

    function _updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) internal {
        loanWithdrawalDuration = _loanWithdrawalDuration;
        emit LoanWithdrawalDurationUpdated(_loanWithdrawalDuration);
    }

    /**
     * @notice used to update the active stage of the margin call of the Pool
     * @param _marginCallDuration updated value of the margin call duration
     */
    function updateMarginCallDuration(uint256 _marginCallDuration) external onlyOwner {
        _updateMarginCallDuration(_marginCallDuration);
    }

    function _updateMarginCallDuration(uint256 _marginCallDuration) internal {
        marginCallDuration = _marginCallDuration;
        emit MarginCallDurationUpdated(_marginCallDuration);
    }

    /**
     * @notice used to update the min borrow fraction by owner
     * @param _minBorrowFraction updated value of min borrow fraction multiplied by 10**30
     */
    function updateMinBorrowFraction(uint256 _minBorrowFraction) external onlyOwner {
        _updateMinBorrowFraction(_minBorrowFraction);
    }

    function _updateMinBorrowFraction(uint256 _minBorrowFraction) internal {
        minBorrowFraction = _minBorrowFraction;
        emit MinBorrowFractionUpdated(_minBorrowFraction);
    }

    /**
     * @notice used to update the reward fraction for liquidation of the Pool
     * @param _liquidatorRewardFraction updated value of the reward fraction for liquidation multiplied by 10**30
     */
    function updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) external onlyOwner {
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
    }

    function _updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) internal {
        liquidatorRewardFraction = _liquidatorRewardFraction;
        emit LiquidatorRewardFractionUpdated(_liquidatorRewardFraction);
    }

    /**
     * @notice used to update the pool cancel penalty multiple
     * @param _poolCancelPenaltyMultiple updated value of the pool cancel penalty multiple multiplied by 10**30
     */
    function updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) external onlyOwner {
        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);
    }

    function _updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) internal {
        poolCancelPenaltyMultiple = _poolCancelPenaltyMultiple;
        emit PoolCancelPenaltyMultipleUpdated(_poolCancelPenaltyMultiple);
    }

    /**
     * @notice used to update the fraction of borrowed amount charged as protocol fee
     * @param _protocolFee updated value of protocol fee fraction multiplied by 10**30
     */
    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {
        _updateProtocolFeeFraction(_protocolFee);
    }

    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {
        protocolFeeFraction = _protocolFee;
        emit ProtocolFeeFractionUpdated(_protocolFee);
    }

    /**
     * @notice used to update the address in which protocol fee is collected
     * @param _protocolFeeCollector updated address of protocol fee collector
     */
    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {
        _updateProtocolFeeCollector(_protocolFeeCollector);
    }

    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {
        protocolFeeCollector = _protocolFeeCollector;
        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);
    }

    /**
     * @notice used to update the thresholds of the pool size of the Pool
     * @param _min updated value of the minimum threshold value of the pool size
     * @param _max updated value of the maximum threshold value of the pool size
     */
    function updatePoolSizeLimit(uint256 _min, uint256 _max) external onlyOwner {
        poolSizeLimit = Limits(_min, _max);
        emit LimitsUpdated('PoolSize', _min, _max);
    }

    /**
     * @notice used to update the thresholds of the collateral ratio of the Pool
     * @param _min updated value of the minimum threshold value of the collateral ratio
     * @param _max updated value of the maximum threshold value of the collateral ratio
     */
    function updateidealCollateralRatioLimit(uint256 _min, uint256 _max) external onlyOwner {
        idealCollateralRatioLimit = Limits(_min, _max);
        emit LimitsUpdated('CollateralRatio', _min, _max);
    }

    /**
     * @notice used to update the thresholds of the borrow rate of the Pool
     * @param _min updated value of the minimum threshold value of the borrow rate
     * @param _max updated value of the maximum threshold value of the borrow rate
     */
    function updateBorrowRateLimit(uint256 _min, uint256 _max) external onlyOwner {
        borrowRateLimit = Limits(_min, _max);
        emit LimitsUpdated('BorrowRate', _min, _max);
    }

    /**
     * @notice used to update the thresholds of the repayment interval of the Pool
     * @param _min updated value of the minimum threshold value of the repayment interval
     * @param _max updated value of the maximum threshold value of the repayment interval
     */
    function updateRepaymentIntervalLimit(uint256 _min, uint256 _max) external onlyOwner {
        repaymentIntervalLimit = Limits(_min, _max);
        emit LimitsUpdated('RepaymentInterval', _min, _max);
    }

    /**
     * @notice used to update the thresholds of the number of repayment intervals of the Pool
     * @param _min updated value of the minimum threshold value of the number of repayment intervals
     * @param _max updated value of the maximum threshold value of the number of repayment intervals
     */
    function updateNoOfRepaymentIntervalsLimit(uint256 _min, uint256 _max) external onlyOwner {
        noOfRepaymentIntervalsLimit = Limits(_min, _max);
        emit LimitsUpdated('NoOfRepaymentIntervals', _min, _max);
    }

    /**
     * @notice used to query protocol fee fraction and address of the collector
     * @return protocolFee Fraction multiplied by 10**30
     * @return address of protocol fee collector
     */
    function getProtocolFeeData() external view override returns (uint256, address) {
        return (protocolFeeFraction, protocolFeeCollector);
    }
}",6187,746,"[M-01] Ether can be locked in the PoolFactory contract without a way to retrieve it

If a borrower calls the createPool function with a non-zero value, but also includes an ERC20 token address for _collateralToken, then the Ether value sent will be locked in the PoolFactory contract forever.
createPool L260-317
In the _createPool function, a _collateralToken address other than the zero address will set the amount variable to zero. That amount variable will be passed to create2 which will send 0 wei to the newly created Pool contract.
``` // _createPool L349
uint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;
```

",1,,"pragma solidity 0.7.6;

import '../Proxy.sol';
import '../interfaces/IPoolFactory.sol';
import '../interfaces/IPool.sol';
import '../interfaces/IVerification.sol';
import '../interfaces/IStrategyRegistry.sol';
import '../interfaces/IRepayment.sol';
import '../interfaces/IPriceOracle.sol';
import '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';


contract PoolFactory is Initializable, OwnableUpgradeable, IPoolFactory {
    
    struct Limits {
        uint256 min;
        uint256 max;
    }

    
    bytes4 public poolInitFuncSelector; 

    
    address public poolImpl;

    
    address public override userRegistry;

    
    address public strategyRegistry;

    
    address public override extension;

    
    address public override repaymentImpl;

    
    address public override priceOracle;

    
    address public override savingsAccount;

    
    uint256 public override collectionPeriod;

    
    uint256 public override loanWithdrawalDuration;

    
    uint256 public override marginCallDuration;

    
    uint256 public override minBorrowFraction;

    
    uint256 public override liquidatorRewardFraction;

    
    uint256 public override poolCancelPenaltyMultiple;

    
    address public override noStrategyAddress;

    uint256 protocolFeeFraction;
    address protocolFeeCollector;

    
    mapping(address => bool) isBorrowToken;

    
    mapping(address => bool) isCollateralToken;

    
    mapping(address => bool) public override poolRegistry;

    
    Limits poolSizeLimit;

    
    Limits idealCollateralRatioLimit;

    
    Limits borrowRateLimit;

    
    Limits repaymentIntervalLimit;

    
    Limits noOfRepaymentIntervalsLimit;

    
    modifier onlyPool() {
        require(poolRegistry[msg.sender], 'PoolFactory::onlyPool - Only pool can destroy itself');
        _;
    }

    
    modifier onlyBorrower(address _verifier) {
        require(
            IVerification(userRegistry).isUser(msg.sender, _verifier),
            'PoolFactory::onlyBorrower - Only a valid Borrower can create Pool'
        );
        _;
    }

    
    function owner() public view override(IPoolFactory, OwnableUpgradeable) returns (address) {
        return OwnableUpgradeable.owner();
    }

    
    function initialize(
        address _admin,
        uint256 _collectionPeriod,
        uint256 _loanWithdrawalDuration,
        uint256 _marginCallDuration,
        bytes4 _poolInitFuncSelector,
        uint256 _liquidatorRewardFraction,
        uint256 _poolCancelPenaltyMultiple,
        uint256 _minBorrowFraction,
        uint256 _protocolFeeFraction,
        address _protocolFeeCollector,
        address _noStrategy
    ) external initializer {
        {
            OwnableUpgradeable.__Ownable_init();
            OwnableUpgradeable.transferOwnership(_admin);
        }
        _updateCollectionPeriod(_collectionPeriod);
        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);
        _updateMarginCallDuration(_marginCallDuration);
        _updatepoolInitFuncSelector(_poolInitFuncSelector);
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);
        _updateMinBorrowFraction(_minBorrowFraction);
        _updateProtocolFeeFraction(_protocolFeeFraction);
        _updateProtocolFeeCollector(_protocolFeeCollector);
        _updateNoStrategy(_noStrategy);
    }

    
    function setImplementations(
        address _poolImpl,
        address _repaymentImpl,
        address _userRegistry,
        address _strategyRegistry,
        address _priceOracle,
        address _savingsAccount,
        address _extension
    ) external onlyOwner {
        _updatePoolLogic(_poolImpl);
        _updateRepaymentImpl(_repaymentImpl);
        _updateSavingsAccount(_savingsAccount);
        _updatedExtension(_extension);
        _updateUserRegistry(_userRegistry);
        _updateStrategyRegistry(_strategyRegistry);
        _updatePriceoracle(_priceOracle);
    }

    
    function createPool(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        bytes32 _salt,
        address _verifier,
        address _lenderVerifier
    ) external payable onlyBorrower(_verifier) {
        if (_collateralToken == address(0)) {
            require(msg.value == _collateralAmount, 'PoolFactory::createPool - Ether send is different from collateral amount specified');
        }
        require(_borrowToken != _collateralToken, 'PoolFactory::createPool - cant borrow the asset put in as collateralToken');
        require(isBorrowToken[_borrowToken], 'PoolFactory::createPool - Invalid borrow token type');
        require(isCollateralToken[_collateralToken], 'PoolFactory::createPool - Invalid collateral token type');
        require(
            IPriceOracle(priceOracle).doesFeedExist(_collateralToken, _borrowToken),
            ""PoolFactory::createPool - Price feed doesn't support token pair""
        );
        require(IStrategyRegistry(strategyRegistry).registry(_poolSavingsStrategy), 'PoolFactory::createPool - Invalid strategy');
        require(isWithinLimits(_poolSize, poolSizeLimit.min, poolSizeLimit.max), 'PoolFactory::createPool - PoolSize not within limits');
        require(
            isWithinLimits(_idealCollateralRatio, idealCollateralRatioLimit.min, idealCollateralRatioLimit.max),
            'PoolFactory::createPool - Collateral Ratio not within limits'
        );
        require(
            isWithinLimits(_borrowRate, borrowRateLimit.min, borrowRateLimit.max),
            'PoolFactory::createPool - Borrow rate not within limits'
        );
        require(
            isWithinLimits(_noOfRepaymentIntervals, noOfRepaymentIntervalsLimit.min, noOfRepaymentIntervalsLimit.max),
            'PoolFactory::createPool - Loan duration not within limits'
        );
        require(
            isWithinLimits(_repaymentInterval, repaymentIntervalLimit.min, repaymentIntervalLimit.max),
            'PoolFactory::createPool - Repayment interval not within limits'
        );
        _createPool(
            _poolSize,
            _borrowRate,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _salt,
            _lenderVerifier
        );
    }

    
    function _createPool(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        bytes32 _salt,
        address _lenderVerifier
    ) internal {
        bytes memory data = _encodePoolInitCall(
            _poolSize,
            _borrowRate,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _lenderVerifier
        );
        bytes32 salt = keccak256(abi.encodePacked(_salt, msg.sender));
        bytes memory bytecode = abi.encodePacked(type(SublimeProxy).creationCode, abi.encode(poolImpl, address(0x01), data));
        uint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;

        address pool = _deploy(amount, salt, bytecode);

        poolRegistry[pool] = true;
        emit PoolCreated(pool, msg.sender);
    }

    
    function _encodePoolInitCall(
        uint256 _poolSize,
        uint256 _borrowRate,
        address _borrowToken,
        address _collateralToken,
        uint256 _idealCollateralRatio,
        uint256 _repaymentInterval,
        uint256 _noOfRepaymentIntervals,
        address _poolSavingsStrategy,
        uint256 _collateralAmount,
        bool _transferFromSavingsAccount,
        address _lenderVerifier
    ) internal view returns (bytes memory data) {
        data = abi.encodeWithSelector(
            poolInitFuncSelector,
            _poolSize,
            _borrowRate,
            msg.sender,
            _borrowToken,
            _collateralToken,
            _idealCollateralRatio,
            _repaymentInterval,
            _noOfRepaymentIntervals,
            _poolSavingsStrategy,
            _collateralAmount,
            _transferFromSavingsAccount,
            _lenderVerifier,
            loanWithdrawalDuration,
            collectionPeriod
        );
    }

    
    function _deploy(
        uint256 amount,
        bytes32 salt,
        bytes memory bytecode
    ) internal returns (address addr) {
        require(bytecode.length != 0, 'Create2: bytecode length is zero');
        
        assembly {
            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)
        }
        require(addr != address(0), 'Create2: Failed on deploy');
    }

    
    function isWithinLimits(
        uint256 _value,
        uint256 _min,
        uint256 _max
    ) internal pure returns (bool) {
        if (_min != 0 && _max != 0) {
            return (_value >= _min && _value <= _max);
        } else if (_min != 0) {
            return (_value >= _min);
        } else if (_max != 0) {
            return (_value <= _max);
        } else {
            return true;
        }
    }

    
    function updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) external onlyOwner {
        _updateSupportedBorrowTokens(_borrowToken, _isSupported);
    }

    function _updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) internal {
        isBorrowToken[_borrowToken] = _isSupported;
        emit BorrowTokenUpdated(_borrowToken, _isSupported);
    }

    
    function updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) external onlyOwner {
        _updateSupportedCollateralTokens(_collateralToken, _isSupported);
    }

    function _updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) internal {
        isCollateralToken[_collateralToken] = _isSupported;
        emit CollateralTokenUpdated(_collateralToken, _isSupported);
    }

    
    function updatepoolInitFuncSelector(bytes4 _functionId) external onlyOwner {
        _updatepoolInitFuncSelector(_functionId);
    }

    function _updatepoolInitFuncSelector(bytes4 _functionId) internal {
        poolInitFuncSelector = _functionId;
        emit PoolInitSelectorUpdated(_functionId);
    }

    
    function updatePoolLogic(address _poolLogic) external onlyOwner {
        _updatePoolLogic(_poolLogic);
    }

    function _updatePoolLogic(address _poolLogic) internal {
        poolImpl = _poolLogic;
        emit PoolLogicUpdated(_poolLogic);
    }

    
    function updateUserRegistry(address _userRegistry) external onlyOwner {
        _updateUserRegistry(_userRegistry);
    }

    function _updateUserRegistry(address _userRegistry) internal {
        userRegistry = _userRegistry;
        emit UserRegistryUpdated(_userRegistry);
    }

    
    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {
        _updateStrategyRegistry(_strategyRegistry);
    }

    function _updateStrategyRegistry(address _strategyRegistry) internal {
        strategyRegistry = _strategyRegistry;
        emit StrategyRegistryUpdated(_strategyRegistry);
    }

    
    function updateRepaymentImpl(address _repaymentImpl) external onlyOwner {
        _updateRepaymentImpl(_repaymentImpl);
    }

    function _updateRepaymentImpl(address _repaymentImpl) internal {
        repaymentImpl = _repaymentImpl;
        emit RepaymentImplUpdated(_repaymentImpl);
    }

    
    function updateNoStrategy(address _noStrategy) external onlyOwner {
        _updateNoStrategy(_noStrategy);
    }

    function _updateNoStrategy(address _noStrategy) internal {
        noStrategyAddress = _noStrategy;
        emit NoStrategyUpdated(_noStrategy);
    }

    
    function updatePriceoracle(address _priceOracle) external onlyOwner {
        _updatePriceoracle(_priceOracle);
    }

    function _updatePriceoracle(address _priceOracle) internal {
        priceOracle = _priceOracle;
        emit PriceOracleUpdated(_priceOracle);
    }

    
    function updatedExtension(address _extension) external onlyOwner {
        _updatedExtension(_extension);
    }

    function _updatedExtension(address _extension) internal {
        extension = _extension;
        emit ExtensionImplUpdated(_extension);
    }

    
    function updateSavingsAccount(address _savingsAccount) external onlyOwner {
        _updateSavingsAccount(_savingsAccount);
    }

    function _updateSavingsAccount(address _savingsAccount) internal {
        savingsAccount = _savingsAccount;
        emit SavingsAccountUpdated(_savingsAccount);
    }

    
    function updateCollectionPeriod(uint256 _collectionPeriod) external onlyOwner {
        _updateCollectionPeriod(_collectionPeriod);
    }

    function _updateCollectionPeriod(uint256 _collectionPeriod) internal {
        collectionPeriod = _collectionPeriod;
        emit CollectionPeriodUpdated(_collectionPeriod);
    }

    
    function updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) external onlyOwner {
        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);
    }

    function _updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) internal {
        loanWithdrawalDuration = _loanWithdrawalDuration;
        emit LoanWithdrawalDurationUpdated(_loanWithdrawalDuration);
    }

    
    function updateMarginCallDuration(uint256 _marginCallDuration) external onlyOwner {
        _updateMarginCallDuration(_marginCallDuration);
    }

    function _updateMarginCallDuration(uint256 _marginCallDuration) internal {
        marginCallDuration = _marginCallDuration;
        emit MarginCallDurationUpdated(_marginCallDuration);
    }

    
    function updateMinBorrowFraction(uint256 _minBorrowFraction) external onlyOwner {
        _updateMinBorrowFraction(_minBorrowFraction);
    }

    function _updateMinBorrowFraction(uint256 _minBorrowFraction) internal {
        minBorrowFraction = _minBorrowFraction;
        emit MinBorrowFractionUpdated(_minBorrowFraction);
    }

    
    function updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) external onlyOwner {
        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);
    }

    function _updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) internal {
        liquidatorRewardFraction = _liquidatorRewardFraction;
        emit LiquidatorRewardFractionUpdated(_liquidatorRewardFraction);
    }

    
    function updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) external onlyOwner {
        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);
    }

    function _updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) internal {
        poolCancelPenaltyMultiple = _poolCancelPenaltyMultiple;
        emit PoolCancelPenaltyMultipleUpdated(_poolCancelPenaltyMultiple);
    }

    
    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {
        _updateProtocolFeeFraction(_protocolFee);
    }

    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {
        protocolFeeFraction = _protocolFee;
        emit ProtocolFeeFractionUpdated(_protocolFee);
    }

    
    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {
        _updateProtocolFeeCollector(_protocolFeeCollector);
    }

    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {
        protocolFeeCollector = _protocolFeeCollector;
        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);
    }

    
    function updatePoolSizeLimit(uint256 _min, uint256 _max) external onlyOwner {
        poolSizeLimit = Limits(_min, _max);
        emit LimitsUpdated('PoolSize', _min, _max);
    }

    
    function updateidealCollateralRatioLimit(uint256 _min, uint256 _max) external onlyOwner {
        idealCollateralRatioLimit = Limits(_min, _max);
        emit LimitsUpdated('CollateralRatio', _min, _max);
    }

    
    function updateBorrowRateLimit(uint256 _min, uint256 _max) external onlyOwner {
        borrowRateLimit = Limits(_min, _max);
        emit LimitsUpdated('BorrowRate', _min, _max);
    }

    
    function updateRepaymentIntervalLimit(uint256 _min, uint256 _max) external onlyOwner {
        repaymentIntervalLimit = Limits(_min, _max);
        emit LimitsUpdated('RepaymentInterval', _min, _max);
    }

    
    function updateNoOfRepaymentIntervalsLimit(uint256 _min, uint256 _max) external onlyOwner {
        noOfRepaymentIntervalsLimit = Limits(_min, _max);
        emit LimitsUpdated('NoOfRepaymentIntervals', _min, _max);
    }

    
    function getProtocolFeeData() external view override returns (uint256, address) {
        return (protocolFeeFraction, protocolFeeCollector);
    }
}",3731,0,1,,"{'ReviewingTheCode': ""The provided code is a Solidity smart contract named 'PoolFactory'. It is designed to manage the creation and configuration of pools, which are likely part of a decentralized finance (DeFi) protocol. The contract handles various parameters and limits for these pools, including pool size, borrow rate, collateral ratio, and repayment intervals. It also interacts with several external contracts for functionalities like user verification, strategy management, and price oracles."", 'IdentifyingKeyComponents': {'ContractName': 'PoolFactory', 'Purpose': 'To manage the creation, configuration, and lifecycle of pools in a DeFi protocol.', 'InheritanceAndImports': {'InheritsFrom': ['Initializable', 'OwnableUpgradeable', 'IPoolFactory'], 'Imports': ['../Proxy.sol', '../interfaces/IPoolFactory.sol', '../interfaces/IPool.sol', '../interfaces/IVerification.sol', '../interfaces/IStrategyRegistry.sol', '../interfaces/IRepayment.sol', '../interfaces/IPriceOracle.sol', '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol']}, 'StateVariables': [{'Name': 'poolInitFuncSelector', 'Type': 'bytes4', 'Purpose': 'Selector for the pool initialization function.'}, {'Name': 'poolImpl', 'Type': 'address', 'Purpose': 'Address of the pool implementation contract.'}, {'Name': 'userRegistry', 'Type': 'address', 'Purpose': 'Address of the user registry contract for user verification.'}, {'Name': 'strategyRegistry', 'Type': 'address', 'Purpose': 'Address of the strategy registry contract for managing strategies.'}, {'Name': 'extension', 'Type': 'address', 'Purpose': 'Address of the extension contract for additional functionalities.'}, {'Name': 'repaymentImpl', 'Type': 'address', 'Purpose': 'Address of the repayment implementation contract.'}, {'Name': 'priceOracle', 'Type': 'address', 'Purpose': 'Address of the price oracle contract for price feeds.'}, {'Name': 'savingsAccount', 'Type': 'address', 'Purpose': 'Address of the savings account contract.'}, {'Name': 'collectionPeriod', 'Type': 'uint256', 'Purpose': 'Duration for collecting funds in a pool.'}, {'Name': 'loanWithdrawalDuration', 'Type': 'uint256', 'Purpose': 'Duration for withdrawing loans from a pool.'}, {'Name': 'marginCallDuration', 'Type': 'uint256', 'Purpose': 'Duration for margin calls in a pool.'}, {'Name': 'minBorrowFraction', 'Type': 'uint256', 'Purpose': 'Minimum fraction of the pool size that can be borrowed.'}, {'Name': 'liquidatorRewardFraction', 'Type': 'uint256', 'Purpose': 'Fraction of the collateral given as a reward to liquidators.'}, {'Name': 'poolCancelPenaltyMultiple', 'Type': 'uint256', 'Purpose': 'Multiple of the pool size charged as a penalty for canceling a pool.'}, {'Name': 'noStrategyAddress', 'Type': 'address', 'Purpose': 'Address representing the absence of a strategy.'}, {'Name': 'protocolFeeFraction', 'Type': 'uint256', 'Purpose': 'Fraction of the pool size charged as a protocol fee.'}, {'Name': 'protocolFeeCollector', 'Type': 'address', 'Purpose': 'Address where protocol fees are collected.'}, {'Name': 'isBorrowToken', 'Type': 'mapping(address => bool)', 'Purpose': 'Mapping to track supported borrow tokens.'}, {'Name': 'isCollateralToken', 'Type': 'mapping(address => bool)', 'Purpose': 'Mapping to track supported collateral tokens.'}, {'Name': 'poolRegistry', 'Type': 'mapping(address => bool)', 'Purpose': 'Mapping to track registered pools.'}, {'Name': 'poolSizeLimit', 'Type': 'Limits', 'Purpose': 'Limits for the pool size.'}, {'Name': 'idealCollateralRatioLimit', 'Type': 'Limits', 'Purpose': 'Limits for the ideal collateral ratio.'}, {'Name': 'borrowRateLimit', 'Type': 'Limits', 'Purpose': 'Limits for the borrow rate.'}, {'Name': 'repaymentIntervalLimit', 'Type': 'Limits', 'Purpose': 'Limits for the repayment interval.'}, {'Name': 'noOfRepaymentIntervalsLimit', 'Type': 'Limits', 'Purpose': 'Limits for the number of repayment intervals.'}], 'FunctionsAndModifiers': [{'Name': 'onlyPool', 'Visibility': 'modifier', 'Purpose': 'Restricts access to only registered pools.', 'Parameters': [], 'Returns': []}, {'Name': 'onlyBorrower', 'Visibility': 'modifier', 'Purpose': 'Restricts access to only valid borrowers.', 'Parameters': ['address _verifier'], 'Returns': []}, {'Name': 'owner', 'Visibility': 'public', 'Purpose': 'Returns the address of the current owner.', 'Parameters': [], 'Returns': ['address']}, {'Name': 'initialize', 'Visibility': 'external', 'Purpose': 'Initializes the contract with essential parameters.', 'Parameters': ['address _admin', 'uint256 _collectionPeriod', 'uint256 _loanWithdrawalDuration', 'uint256 _marginCallDuration', 'bytes4 _poolInitFuncSelector', 'uint256 _liquidatorRewardFraction', 'uint256 _poolCancelPenaltyMultiple', 'uint256 _minBorrowFraction', 'uint256 _protocolFeeFraction', 'address _protocolFeeCollector', 'address _noStrategy'], 'Returns': []}, {'Name': 'setImplementations', 'Visibility': 'external', 'Purpose': 'Sets the addresses of various implementation contracts.', 'Parameters': ['address _poolImpl', 'address _repaymentImpl', 'address _userRegistry', 'address _strategyRegistry', 'address _priceOracle', 'address _savingsAccount', 'address _extension'], 'Returns': []}, {'Name': 'createPool', 'Visibility': 'external', 'Purpose': 'Creates a new pool with specified parameters.', 'Parameters': ['uint256 _poolSize', 'uint256 _borrowRate', 'address _borrowToken', 'address _collateralToken', 'uint256 _idealCollateralRatio', 'uint256 _repaymentInterval', 'uint256 _noOfRepaymentIntervals', 'address _poolSavingsStrategy', 'uint256 _collateralAmount', 'bool _transferFromSavingsAccount', 'bytes32 _salt', 'address _verifier', 'address _lenderVerifier'], 'Returns': []}, {'Name': '_createPool', 'Visibility': 'internal', 'Purpose': 'Internal function to handle the creation of a pool.', 'Parameters': ['uint256 _poolSize', 'uint256 _borrowRate', 'address _borrowToken', 'address _collateralToken', 'uint256 _idealCollateralRatio', 'uint256 _repaymentInterval', 'uint256 _noOfRepaymentIntervals', 'address _poolSavingsStrategy', 'uint256 _collateralAmount', 'bool _transferFromSavingsAccount', 'bytes32 _salt', 'address _lenderVerifier'], 'Returns': []}, {'Name': '_encodePoolInitCall', 'Visibility': 'internal', 'Purpose': 'Encodes the initialization call for a pool.', 'Parameters': ['uint256 _poolSize', 'uint256 _borrowRate', 'address _borrowToken', 'address _collateralToken', 'uint256 _idealCollateralRatio', 'uint256 _repaymentInterval', 'uint256 _noOfRepaymentIntervals', 'address _poolSavingsStrategy', 'uint256 _collateralAmount', 'bool _transferFromSavingsAccount', 'address _lenderVerifier'], 'Returns': ['bytes memory data']}, {'Name': '_deploy', 'Visibility': 'internal', 'Purpose': 'Deploys a new contract using CREATE2.', 'Parameters': ['uint256 amount', 'bytes32 salt', 'bytes memory bytecode'], 'Returns': ['address addr']}, {'Name': 'isWithinLimits', 'Visibility': 'internal', 'Purpose': 'Checks if a value is within specified limits.', 'Parameters': ['uint256 _value', 'uint256 _min', 'uint256 _max'], 'Returns': ['bool']}, {'Name': 'updateSupportedBorrowTokens', 'Visibility': 'external', 'Purpose': 'Updates the list of supported borrow tokens.', 'Parameters': ['address _borrowToken', 'bool _isSupported'], 'Returns': []}, {'Name': 'updateSupportedCollateralTokens', 'Visibility': 'external', 'Purpose': 'Updates the list of supported collateral tokens.', 'Parameters': ['address _collateralToken', 'bool _isSupported'], 'Returns': []}, {'Name': 'updatepoolInitFuncSelector', 'Visibility': 'external', 'Purpose': 'Updates the selector for the pool initialization function.', 'Parameters': ['bytes4 _functionId'], 'Returns': []}, {'Name': 'updatePoolLogic', 'Visibility': 'external', 'Purpose': 'Updates the address of the pool logic contract.', 'Parameters': ['address _poolLogic'], 'Returns': []}, {'Name': 'updateUserRegistry', 'Visibility': 'external', 'Purpose': 'Updates the address of the user registry contract.', 'Parameters': ['address _userRegistry'], 'Returns': []}, {'Name': 'updateStrategyRegistry', 'Visibility': 'external', 'Purpose': 'Updates the address of the strategy registry contract.', 'Parameters': ['address _strategyRegistry'], 'Returns': []}, {'Name': 'updateRepaymentImpl', 'Visibility': 'external', 'Purpose': 'Updates the address of the repayment implementation contract.', 'Parameters': ['address _repaymentImpl'], 'Returns': []}, {'Name': 'updateNoStrategy', 'Visibility': 'external', 'Purpose': 'Updates the address representing the absence of a strategy.', 'Parameters': ['address _noStrategy'], 'Returns': []}, {'Name': 'updatePriceoracle', 'Visibility': 'external', 'Purpose': 'Updates the address of the price oracle contract.', 'Parameters': ['address _priceOracle'], 'Returns': []}, {'Name': 'updatedExtension', 'Visibility': 'external', 'Purpose': 'Updates the address of the extension contract.', 'Parameters': ['address _extension'], 'Returns': []}, {'Name': 'updateSavingsAccount', 'Visibility': 'external', 'Purpose': 'Updates the address of the savings account contract.', 'Parameters': ['address _savingsAccount'], 'Returns': []}, {'Name': 'updateCollectionPeriod', 'Visibility': 'external', 'Purpose': 'Updates the collection period for pools.', 'Parameters': ['uint256 _collectionPeriod'], 'Returns': []}, {'Name': 'updateLoanWithdrawalDuration', 'Visibility': 'external', 'Purpose': 'Updates the loan withdrawal duration for pools.', 'Parameters': ['uint256 _loanWithdrawalDuration'], 'Returns': []}, {'Name': 'updateMarginCallDuration', 'Visibility': 'external', 'Purpose': 'Updates the margin call duration for pools.', 'Parameters': ['uint256 _marginCallDuration'], 'Returns': []}, {'Name': 'updateMinBorrowFraction', 'Visibility': 'external', 'Purpose': 'Updates the minimum borrow fraction for pools.', 'Parameters': ['uint256 _minBorrowFraction'], 'Returns': []}, {'Name': 'updateLiquidatorRewardFraction', 'Visibility': 'external', 'Purpose': 'Updates the liquidator reward fraction for pools.', 'Parameters': ['uint256 _liquidatorRewardFraction'], 'Returns': []}, {'Name': 'updatePoolCancelPenaltyMultiple', 'Visibility': 'external', 'Purpose': 'Updates the pool cancel penalty multiple for pools.', 'Parameters': ['uint256 _poolCancelPenaltyMultiple'], 'Returns': []}, {'Name': 'updateProtocolFeeFraction', 'Visibility': 'external', 'Purpose': 'Updates the protocol fee fraction.', 'Parameters': ['uint256 _protocolFee'], 'Returns': []}, {'Name': 'updateProtocolFeeCollector', 'Visibility': 'external', 'Purpose': 'Updates the address of the protocol fee collector.', 'Parameters': ['address _protocolFeeCollector'], 'Returns': []}, {'Name': 'updatePoolSizeLimit', 'Visibility': 'external', 'Purpose': 'Updates the limits for the pool size.', 'Parameters': ['uint256 _min', 'uint256 _max'], 'Returns': []}, {'Name': 'updateidealCollateralRatioLimit', 'Visibility': 'external', 'Purpose': 'Updates the limits for the ideal collateral ratio.', 'Parameters': ['uint256 _min', 'uint256 _max'], 'Returns': []}, {'Name': 'updateBorrowRateLimit', 'Visibility': 'external', 'Purpose': 'Updates the limits for the borrow rate.', 'Parameters': ['uint256 _min', 'uint256 _max'], 'Returns': []}, {'Name': 'updateRepaymentIntervalLimit', 'Visibility': 'external', 'Purpose': 'Updates the limits for the repayment interval.', 'Parameters': ['uint256 _min', 'uint256 _max'], 'Returns': []}, {'Name': 'updateNoOfRepaymentIntervalsLimit', 'Visibility': 'external', 'Purpose': 'Updates the limits for the number of repayment intervals.', 'Parameters': ['uint256 _min', 'uint256 _max'], 'Returns': []}, {'Name': 'getProtocolFeeData', 'Visibility': 'external', 'Purpose': 'Returns the protocol fee fraction and collector address.', 'Parameters': [], 'Returns': ['uint256', 'address']}]}, 'ExternalInteractions': ['IVerification(userRegistry)', 'IPriceOracle(priceOracle)', 'IStrategyRegistry(strategyRegistry)', 'SublimeProxy'], 'SpecialMechanisms': ['Factory Pattern: The contract acts as a factory for creating and managing pools.', 'Proxy Pattern: Uses a proxy contract for deploying new pools.', 'CREATE2: Utilizes the CREATE2 opcode for deterministic contract deployment.'], 'Questions': [""What is the exact purpose of the 'poolInitFuncSelector' and how is it used in the pool creation process?"", 'How does the contract handle the case where the collateral token is ETH (address(0))?', 'Are there any specific security considerations for the CREATE2 deployment mechanism used in this contract?', ""How is the 'noStrategyAddress' used within the protocol, and what are its implications?""]}","{'Findings': [{'Issue': 'Missing Input Validation in `createPool` Function', 'Severity': 'High', 'Description': 'The `createPool` function lacks validation for critical inputs such as `_poolSavingsStrategy`, `_borrowToken`, `_collateralToken`, `_salt`, `_verifier`, and `_lenderVerifier`. This could lead to deployment of pools with invalid or malicious strategies or tokens, replay attacks, and unauthorized access.', 'Impact': 'Financial losses due to invalid or malicious token addresses, unauthorized pool creation, and potential exploitation.', 'Location': 'createPool function'}, {'Issue': 'Uninitialized Proxy Risk', 'Severity': 'High', 'Description': 'Critical addresses like `poolImpl` and other state variables (e.g., `poolSizeLimit`, `idealCollateralRatioLimit`) are not initialized in the `initialize` function. This could lead to failed deployments or unexpected behavior.', 'Impact': 'Failed pool deployments or deployment of pools with incorrect logic, leading to loss of funds or operational issues.', 'Location': 'initialize function'}, {'Issue': 'Reentrancy Risk in `_createPool` and `_deploy` Functions', 'Severity': 'High', 'Description': 'The `_createPool` and `_deploy` functions use `create2` to deploy new contracts without safeguards against reentrancy. Malicious contracts could exploit this to manipulate state or drain funds.', 'Impact': 'Reentrancy attacks could lead to unauthorized actions, fund theft, or unexpected behavior.', 'Location': '_createPool and _deploy functions'}, {'Issue': 'Unrestricted Ether Transfer in `_deploy` Function', 'Severity': 'High', 'Description': 'The `_deploy` function allows Ether transfers without ensuring the `amount` matches the actual Ether sent, risking fund loss.', 'Impact': 'Potential loss of Ether if the `amount` parameter is incorrect.', 'Location': '_deploy function'}, {'Issue': 'Missing Access Control in `initialize` Function', 'Severity': 'High', 'Description': 'The `initialize` function can be called by anyone, allowing unauthorized reinitialization and potential overwriting of critical settings.', 'Impact': 'Compromise of contract integrity through malicious initialization.', 'Location': 'initialize function'}, {'Issue': 'Unrestricted Update of Critical Parameters', 'Severity': 'Medium', 'Description': 'Functions like `updateProtocolFeeFraction`, `updateProtocolFeeCollector`, and `setImplementations` allow the owner to update critical parameters without validation or bounds checks.', 'Impact': 'Potential financial abuse or system disruption if the owner is compromised.', 'Location': 'Various update functions'}, {'Issue': 'Potential Front-Running in `createPool` Function', 'Severity': 'Medium', 'Description': 'The `createPool` function uses a predictable `_salt` parameter, making it vulnerable to front-running attacks where an attacker could hijack pool creation.', 'Impact': 'Unauthorized pool deployments or disruption of legitimate pool creation.', 'Location': 'createPool function'}, {'Issue': 'Lack of Event Emission in Critical Functions', 'Severity': 'Low', 'Description': 'State-changing functions like `_updatePoolLogic`, `_updateUserRegistry`, and `updateSupportedBorrowTokens` do not emit events, reducing transparency.', 'Impact': 'Difficulty in auditing and tracking state changes.', 'Location': 'Various update functions'}, {'Issue': 'Potential Integer Overflow/Underflow', 'Severity': 'Low', 'Description': 'Arithmetic operations in functions like `isWithinLimits` lack explicit overflow/underflow checks, though Solidity 0.7.6 has built-in protections.', 'Impact': 'Incorrect calculations or unexpected behavior in edge cases.', 'Location': 'Multiple functions involving arithmetic'}, {'Issue': 'Lack of Zero Address Checks', 'Severity': 'Low', 'Description': 'Functions updating critical addresses (e.g., `_updateProtocolFeeCollector`) do not validate against the zero address, risking loss of functionality.', 'Impact': 'Critical functionality could be disabled if addresses are set to zero.', 'Location': 'Various update functions'}], 'IssueNumber': 60, 'OutputList': 10}",852.1015241146088,"---

**[M-01] Ether can be locked in the PoolFactory contract without a way to retrieve it**

**Report Description**:
If a borrower calls the `createPool` function with a non-zero value but includes an ERC20 token address for `_collateralToken`, the Ether value sent will be locked in the `PoolFactory` contract forever. This occurs because the `_createPool` function sets the `amount` variable to zero when `_collateralToken` is not the zero address. The `amount` variable is then passed to `create2`, which sends 0 wei to the newly created `Pool` contract. This design flaw results in Ether being permanently locked in the `PoolFactory` contract.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. None of the responses in the `response_list` address the specific issue of Ether being locked in the `PoolFactory` contract due to the logic in the `_createPool` function. While some responses discuss risks related to `createPool` (e.g., missing input validation, front-running, and reentrancy), none identify the critical flaw where Ether is irretrievably locked when an ERC20 token is used as collateral. This issue is distinct and requires specific attention to prevent fund loss.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[M-01] Ether can be locked in the PoolFactory contract without a way to retrieve it**

--- 

This evaluation highlights a significant gap in the `response_list`, as the critical issue of Ether being locked in the `PoolFactory` contract is entirely unaddressed. This oversight could lead to substantial financial losses and should be prioritized for remediation.","```
None.
```",0.0
