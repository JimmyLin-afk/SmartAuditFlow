nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,Comparison,matchList,MAP
TwabRewards.sol,"// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";

/**
 * @title PoolTogether V4 TwabRewards
 * @author PoolTogether Inc Team
 * @notice Contract to distribute rewards to depositors in a pool.
 * This contract supports the creation of several promotions that can run simultaneously.
 * In order to calculate user rewards, we use the TWAB (Time-Weighted Average Balance) from the Ticket contract.
 * This way, users simply need to hold their tickets to be eligible to claim rewards.
 * Rewards are calculated based on the average amount of tickets they hold during the epoch duration.
 */
contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    /* ============ Global Variables ============ */

    /// @notice Settings of each promotion.
    mapping(uint256 => Promotion) internal _promotions;

    /// @notice Latest recorded promotion id.
    /// @dev Starts at 0 and is incremented by 1 for each new promotion. So the first promotion will have id 1, the second 2, etc.
    uint256 internal _latestPromotionId;

    /// @notice Keeps track of claimed rewards per user.
    /// @dev _claimedEpochs[promotionId][user] => claimedEpochs
    /// @dev We pack epochs claimed by a user into a uint256. So we can't store more than 255 epochs.
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    /* ============ Events ============ */

    /**
        @notice Emitted when a promotion is created.
        @param promotionId Id of the newly created promotion
    */
    event PromotionCreated(uint256 indexed promotionId);

    /**
        @notice Emitted when a promotion is cancelled.
        @param promotionId Id of the promotion being cancelled
        @param amount Amount of tokens transferred to the promotion creator
    */
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    /**
        @notice Emitted when a promotion is extended.
        @param promotionId Id of the promotion being extended
        @param numberOfEpochs Number of epochs the promotion has been extended by
    */
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    /**
        @notice Emitted when rewards have been claimed.
        @param promotionId Id of the promotion for which epoch rewards were claimed
        @param epochIds Ids of the epochs being claimed
        @param user Address of the user for which the rewards were claimed
        @param amount Amount of tokens transferred to the recipient address
    */
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    /* ============ Modifiers ============ */

    /// @dev Ensure that the caller is the creator of the promotion.
    /// @param _promotionId Id of the promotion to check
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    /* ============ External Functions ============ */

    /// @inheritdoc ITwabRewards
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    /// @inheritdoc ITwabRewards
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    /// @inheritdoc ITwabRewards
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    /// @inheritdoc ITwabRewards
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    /// @inheritdoc ITwabRewards
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    /// @inheritdoc ITwabRewards
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    /* ============ Internal Functions ============ */

    /**
    @notice Determine if address passed is actually a ticket.
    @param _ticket Address to check
   */
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    /**
        @notice Determine if a promotion is active.
        @param _promotion Promotion to check
    */
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    /**
        @notice Get settings for a specific promotion.
        @dev Will revert if the promotion does not exist.
        @param _promotionId Promotion id to get settings for
        @return Promotion settings
     */
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    /**
        @notice Get the current epoch id of a promotion.
        @dev Epoch ids and their boolean values are tightly packed and stored in a uint256, so epoch id starts at 0.
        @param _promotion Promotion to get current epoch for
        @return Epoch id
     */
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        // elapsedTimestamp / epochDurationTimestamp
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    /**
        @notice Get reward amount for a specific user.
        @dev Rewards can only be claimed once the epoch is over.
        @param _user User to get reward amount for
        @param _promotion Promotion from which the epoch is
        @param _epochId Epoch id to get reward amount for
        @return Reward amount
     */
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    /**
        @notice Get the total amount of tokens left to be rewarded.
        @param _promotion Promotion to get the total amount of tokens left to be rewarded for
        @return Amount of tokens left to be rewarded
     */
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        // _tokensPerEpoch * _numberOfEpochsLeft
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    /**
        @notice Set boolean value for a specific epoch.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0011
        To set the boolean value to 1 for the epoch id 2, we need to create a mask by shifting 1 to the left by 2 bits.
        We get: 0000 0001 << 2 = 0000 0100
        We then OR the mask with the word to set the value.
        We get: 0110 0011 | 0000 0100 = 0110 0111
        @param _userClaimedEpochs Tightly packed epoch ids with their boolean values
        @param _epochId Id of the epoch to set the boolean for
        @return Tightly packed epoch ids with the newly boolean value set
    */
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    /**
        @notice Check if rewards of an epoch for a given promotion have already been claimed by the user.
        @dev Bits are stored in a uint256 from right to left.
        Let's take the example of the following 8 bits word. 0110 0111
        To retrieve the boolean value for the epoch id 2, we need to shift the word to the right by 2 bits.
        We get: 0110 0111 >> 2 = 0001 1001
        We then get the value of the last bit by masking with 1.
        We get: 0001 1001 & 0000 0001 = 0000 0001 = 1
        We then return the boolean value true since the last bit is 1.
        @param _userClaimedEpochs Record of epochs already claimed by the user
        @param _epochId Epoch id to check
        @return true if the rewards have already been claimed for the given epoch, false otherwise
     */
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",3228,378,"[H-01] createPromotion() Lack of input validation for _epochDuration can potentially freeze promotion creator's funds
In the current implementation of `createPromotion()`, `_epochDuration` is allowed to be 0.
However, when _epochDuration = 0, it will be impossible for users to claim the rewards, and the promotion creator won't be able to cancel it.

[H-02] Backdated _startTimestamp can lead to loss of funds

Function `createPromotion()`
This can lead to loss of funds as there is no recovery function of funds stuck like this
 [H-03] Continue claiming reqrds after numberOfEpochs are over

When claiming rewards via claimRewards(), the function `_calculateRewardAmount()` is called. The function \_calculateRewardAmount() has a check to make sure the epoch is over
  require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over""); 

However neither functions check if the \_epochId is within the range of the reward epochs. Ergo it is possible to continue claiming rewards after the reward period is over. This only works as long as there are enough tokens in the contract. But this is the case when not everyone has claimed, or other rewards use the same token.
The proof of concept contains a simplified version of the contract, and shows how this can be done. When run in remix you get the following output, while there is only 1 epoch. console.log:  Claiming for epoch 1 1  Claiming for epoch 2 1  Claiming for epoch 3 1  Claiming for epoch 4 1  Claiming for epoch 5 1
  [H-04] cancelPromotion is too rigorous

When you cancel a promotion with `cancelPromotion()` then the promotion is complete deleted. This means no-one can claim any rewards anymore, because \_promotions\[\_promotionId] no longer exists.
It also means all the unclaimed tokens (of the previous epochs) will stay locked in the contract.
  [H-05] Malicious tickets can lead to the loss of all tokens
 function `createPromotion()`
It allows an attacker to retrieve all the tokens of each promotions.
Analysis

Anyone can create a new promotion using createPromotion(). An attacker can create a new malicious promotion with the following parameters:
the address of a malicious ticket smart contract
the token address from the targeted promotion(s)
optionally, _numberOfEpochs equal to 0 to create this promotion for free
The only verification made on the ticket address given by _requireTicket() is that the smart contract must implement the ITicket interface.
  [H-06] Rewards can be claimed multiple times

Function `claimRewards() `
An attacker can claim its reward 256 * epochDuration seconds after the timestamp at which the promotion started. The vulnerability allows him to claim a reward several times to retrieve all the tokens associated to the promotion.
Analysis

claimRewards() claim rewards for a given promotion and epoch. In order to prevent a user from claiming a reward multiple times, the mapping _claimedEpochs keeps track of claimed rewards per user:
  [H-07] Contract does not work with fee-on transfer tokens

Function `_calculateRewardAmount()`
``` promotion.tokensPerEpoch * promotion.numberOfEpochs ``` 
There exist ERC20 tokens that charge a fee for every transfer.
This kind of token does not work correctly with the TwabRewards contract as the rewards calculation for an user is based on promotion.tokensPerEpoch (see line 320).
However, the actual amount of tokens the contract holds could be less than promotion.tokensPerEpoch * promotion.numberOfEpochs leading to not claimable rewards for users claiming later than others.
  [M-01] cancelPromotion() Unable to cancel unstarted promotions

Submitted by WatchPug, also found by kenzo, and certora
For unstarted promotions, cancelPromotion() will revert at block.timestamp - _promotion.startTimestamp in _getCurrentEpochId().
Call stack: cancelPromotion() -> _getRemainingRewards() -> _getCurrentEpochId().
https://github.com/pooltogether/v4-periphery/blob/0e94c54774a6fce29daf9cb23353208f80de63eb/contracts/TwabRewards.sol#L331-L336
function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
    // _tokensPerEpoch * _numberOfEpochsLeft
    return
        _promotion.tokensPerEpoch *
        (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
}

https://github.com/pooltogether/v4-periphery/blob/0e94c54774a6fce29daf9cb23353208f80de63eb/contracts/TwabRewards.sol#L276-L279
function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
    // elapsedTimestamp / epochDurationTimestamp
    return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
}
  [M-02] `getRewardsAmount` doesn't check epochs haven't been claimed

In ITwabRewards.sol, it is claimed that getRewardsAmount should account for epochs that have already been claimed, and not include these epochs in the total amount (indeed, there is a line that says @dev Will be 0 if user has already claimed rewards for the epoch.)
However, no such check is done in the implementation of getRewardsAmount. This means that users will be shown rewardAmounts that are higher than they should be, and users will be confused when they are transferred fewer tokens than they are told they will. This would cause confusion, and people may begin to mistrust the contract since they think they are being transferred fewer tokens than they are owed.
  [M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account

Users who have a small claim on rewards for various promotions, may not feasibly be able to claim these rewards as gas costs could outweigh the sum they receive in return. Hence, it is likely that a dust balance accrues overtime for tokens allocated for various promotions. Additionally, the _calculateRewardAmount calculation may result in truncated results, leading to further accrual of a dust balance. Therefore, it is useful that these funds do not go to waste
  [M-04] Unsafe uint64 casting may overflow

The `_calculateRewardAmount` function casts epoch timestamps from uint256 to uint64 and these may overflow. The epochStartTimestamp value is a function of the user-supplied \_epochId value, which could be extremely large (up to 2**255 – 1). While Solidity 0.8.x checks for overflows on arithmetic operations, it does not do so for casting – the OpenZeppelin SafeCast library offers this. The overflow condition could cause \_epochStartTimestamp > \_epochEndTimestamp, which the Ticket.sol getAverageBalanceBetween may not be expected to handle. The \_epochStartTimestamp could overflow to have a value before the actual start of the promotion, also impacting the rewards calculation.
  [M-05] Missing Check When Transferring Tokens Out For A Given Promotion

Submitted by leastwood
Impact

The claimRewards function is called upon by ticket holders who parse a set of _epochIds they wish to claim rewards on. An internal call is made to _calculateRewardAmount to calculate the correct reward amount owed to the user. Subsequently, the _updateClaimedEpoch function will set the epoch bit of the tracked _claimedEpochs mapping, ensuring an epochId cannot be claimed twice for a given promotion.
However, there may be inaccuracies in the _calculateRewardAmount function, which results in more tokens being sent out than allocated by a promotion creator. This severely impacts the ability for users to claim their owed tokens on other promotions.
",12,,"pragma solidity 0.8.6;

import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
import ""@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"";
import ""@pooltogether/v4-core/contracts/interfaces/ITicket.sol"";

import ""./interfaces/ITwabRewards.sol"";


contract TwabRewards is ITwabRewards {
    using SafeERC20 for IERC20;

    

    
    mapping(uint256 => Promotion) internal _promotions;

    
    
    uint256 internal _latestPromotionId;

    
    
    
    mapping(uint256 => mapping(address => uint256)) internal _claimedEpochs;

    

    
    event PromotionCreated(uint256 indexed promotionId);

    
    event PromotionCancelled(uint256 indexed promotionId, uint256 amount);

    
    event PromotionExtended(uint256 indexed promotionId, uint256 numberOfEpochs);

    
    event RewardsClaimed(
        uint256 indexed promotionId,
        uint256[] epochIds,
        address indexed user,
        uint256 amount
    );

    

    
    
    modifier onlyPromotionCreator(uint256 _promotionId) {
        require(
            msg.sender == _getPromotion(_promotionId).creator,
            ""TwabRewards/only-promotion-creator""
        );
        _;
    }

    

    
    function createPromotion(
        address _ticket,
        IERC20 _token,
        uint216 _tokensPerEpoch,
        uint32 _startTimestamp,
        uint32 _epochDuration,
        uint8 _numberOfEpochs
    ) external override returns (uint256) {
        _requireTicket(_ticket);

        uint256 _nextPromotionId = _latestPromotionId + 1;
        _latestPromotionId = _nextPromotionId;

        _promotions[_nextPromotionId] = Promotion(
            msg.sender,
            _ticket,
            _token,
            _tokensPerEpoch,
            _startTimestamp,
            _epochDuration,
            _numberOfEpochs
        );

        _token.safeTransferFrom(msg.sender, address(this), _tokensPerEpoch * _numberOfEpochs);

        emit PromotionCreated(_nextPromotionId);

        return _nextPromotionId;
    }

    
    function cancelPromotion(uint256 _promotionId, address _to)
        external
        override
        onlyPromotionCreator(_promotionId)
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);
        require(_to != address(0), ""TwabRewards/recipient-not-zero-address"");

        uint256 _remainingRewards = _getRemainingRewards(_promotion);

        delete _promotions[_promotionId];
        _promotion.token.safeTransfer(_to, _remainingRewards);

        emit PromotionCancelled(_promotionId, _remainingRewards);

        return true;
    }

    
    function extendPromotion(uint256 _promotionId, uint8 _numberOfEpochs)
        external
        override
        returns (bool)
    {
        Promotion memory _promotion = _getPromotion(_promotionId);

        _requirePromotionActive(_promotion);

        uint8 _extendedNumberOfEpochs = _promotion.numberOfEpochs + _numberOfEpochs;
        _promotions[_promotionId].numberOfEpochs = _extendedNumberOfEpochs;

        uint256 _amount = _numberOfEpochs * _promotion.tokensPerEpoch;
        _promotion.token.safeTransferFrom(msg.sender, address(this), _amount);

        emit PromotionExtended(_promotionId, _numberOfEpochs);

        return true;
    }

    
    function claimRewards(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external override returns (uint256) {
        Promotion memory _promotion = _getPromotion(_promotionId);

        uint256 _rewardsAmount;
        uint256 _userClaimedEpochs = _claimedEpochs[_promotionId][_user];

        for (uint256 index = 0; index < _epochIds.length; index++) {
            uint256 _epochId = _epochIds[index];

            require(
                !_isClaimedEpoch(_userClaimedEpochs, _epochId),
                ""TwabRewards/rewards-already-claimed""
            );

            _rewardsAmount += _calculateRewardAmount(_user, _promotion, _epochId);
            _userClaimedEpochs = _updateClaimedEpoch(_userClaimedEpochs, _epochId);
        }

        _claimedEpochs[_promotionId][_user] = _userClaimedEpochs;

        _promotion.token.safeTransfer(_user, _rewardsAmount);

        emit RewardsClaimed(_promotionId, _epochIds, _user, _rewardsAmount);

        return _rewardsAmount;
    }

    
    function getPromotion(uint256 _promotionId) external view override returns (Promotion memory) {
        return _getPromotion(_promotionId);
    }

    
    function getCurrentEpochId(uint256 _promotionId) external view override returns (uint256) {
        return _getCurrentEpochId(_getPromotion(_promotionId));
    }

    
    function getRemainingRewards(uint256 _promotionId) external view override returns (uint256) {
        return _getRemainingRewards(_getPromotion(_promotionId));
    }

    
    function getRewardsAmount(
        address _user,
        uint256 _promotionId,
        uint256[] calldata _epochIds
    ) external view override returns (uint256[] memory) {
        Promotion memory _promotion = _getPromotion(_promotionId);
        uint256[] memory _rewardsAmount = new uint256[](_epochIds.length);

        for (uint256 index = 0; index < _epochIds.length; index++) {
            _rewardsAmount[index] = _calculateRewardAmount(_user, _promotion, _epochIds[index]);
        }

        return _rewardsAmount;
    }

    

    
    function _requireTicket(address _ticket) internal view {
        require(_ticket != address(0), ""TwabRewards/ticket-not-zero-address"");

        (bool succeeded, bytes memory data) = address(_ticket).staticcall(
            abi.encodePacked(ITicket(_ticket).controller.selector)
        );

        address controllerAddress;

        if (data.length > 0) {
            controllerAddress = abi.decode(data, (address));
        }

        require(succeeded && controllerAddress != address(0), ""TwabRewards/invalid-ticket"");
    }

    
    function _requirePromotionActive(Promotion memory _promotion) internal view {
        uint256 _promotionEndTimestamp = _promotion.startTimestamp +
            (_promotion.epochDuration * _promotion.numberOfEpochs);

        require(
            _promotionEndTimestamp > 0 && _promotionEndTimestamp >= block.timestamp,
            ""TwabRewards/promotion-not-active""
        );
    }

    
    function _getPromotion(uint256 _promotionId) internal view returns (Promotion memory) {
        return _promotions[_promotionId];
    }

    
    function _getCurrentEpochId(Promotion memory _promotion) internal view returns (uint256) {
        
        return (block.timestamp - _promotion.startTimestamp) / _promotion.epochDuration;
    }

    
    function _calculateRewardAmount(
        address _user,
        Promotion memory _promotion,
        uint256 _epochId
    ) internal view returns (uint256) {
        uint256 _epochDuration = _promotion.epochDuration;
        uint256 _epochStartTimestamp = _promotion.startTimestamp + (_epochDuration * _epochId);
        uint256 _epochEndTimestamp = _epochStartTimestamp + _epochDuration;

        require(block.timestamp > _epochEndTimestamp, ""TwabRewards/epoch-not-over"");

        ITicket _ticket = ITicket(_promotion.ticket);

        uint256 _averageBalance = _ticket.getAverageBalanceBetween(
            _user,
            uint64(_epochStartTimestamp),
            uint64(_epochEndTimestamp)
        );

        uint64[] memory _epochStartTimestamps = new uint64[](1);
        _epochStartTimestamps[0] = uint64(_epochStartTimestamp);

        uint64[] memory _epochEndTimestamps = new uint64[](1);
        _epochEndTimestamps[0] = uint64(_epochEndTimestamp);

        uint256[] memory _averageTotalSupplies = _ticket.getAverageTotalSuppliesBetween(
            _epochStartTimestamps,
            _epochEndTimestamps
        );

        if (_averageTotalSupplies[0] > 0) {
            return (_promotion.tokensPerEpoch * _averageBalance) / _averageTotalSupplies[0];
        }

        return 0;
    }

    
    function _getRemainingRewards(Promotion memory _promotion) internal view returns (uint256) {
        
        return
            _promotion.tokensPerEpoch *
            (_promotion.numberOfEpochs - _getCurrentEpochId(_promotion));
    }

    
    function _updateClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (uint256)
    {
        return _userClaimedEpochs | (uint256(1) << _epochId);
    }

    
    function _isClaimedEpoch(uint256 _userClaimedEpochs, uint256 _epochId)
        internal
        pure
        returns (bool)
    {
        return (_userClaimedEpochs >> _epochId) & uint256(1) == 1;
    }
}",1979,7,5,,"{'ReviewingTheCode': ""The contract is a Solidity implementation of a reward distribution system, specifically designed to handle promotions and epoch-based rewards. It leverages OpenZeppelin's SafeERC20 library for secure token transfers and integrates with PoolTogether's v4-core for ticket management. The contract allows for the creation, cancellation, and extension of promotions, as well as the claiming of rewards by users based on their ticket balances during specific epochs."", 'IdentifyingKeyComponents': {'ContractName': 'TwabRewards', 'Purpose': 'To manage and distribute rewards in a time-weighted average balance (TWAB) based system, allowing users to claim rewards based on their ticket balances during specific epochs.', 'InheritanceAndImports': {'InheritsFrom': ['ITwabRewards'], 'Imports': ['@openzeppelin/contracts/token/ERC20/IERC20.sol', '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol', '@pooltogether/v4-core/contracts/interfaces/ITicket.sol', './interfaces/ITwabRewards.sol']}, 'StateVariables': [{'Name': '_promotions', 'Type': 'mapping(uint256 => Promotion)', 'Purpose': 'Stores all promotions by their unique ID.'}, {'Name': '_latestPromotionId', 'Type': 'uint256', 'Purpose': 'Tracks the latest promotion ID to ensure unique IDs for new promotions.'}, {'Name': '_claimedEpochs', 'Type': 'mapping(uint256 => mapping(address => uint256))', 'Purpose': 'Tracks which epochs have been claimed by users for each promotion.'}], 'FunctionsAndModifiers': [{'Name': 'createPromotion', 'Visibility': 'external', 'Purpose': 'Creates a new promotion with specified parameters and transfers the required tokens to the contract.', 'Parameters': ['address _ticket', 'IERC20 _token', 'uint216 _tokensPerEpoch', 'uint32 _startTimestamp', 'uint32 _epochDuration', 'uint8 _numberOfEpochs'], 'Returns': ['uint256']}, {'Name': 'cancelPromotion', 'Visibility': 'external', 'Purpose': 'Cancels an existing promotion and transfers any remaining rewards to a specified address.', 'Parameters': ['uint256 _promotionId', 'address _to'], 'Returns': ['bool']}, {'Name': 'extendPromotion', 'Visibility': 'external', 'Purpose': 'Extends the duration of an existing promotion by adding more epochs and transferring additional tokens to the contract.', 'Parameters': ['uint256 _promotionId', 'uint8 _numberOfEpochs'], 'Returns': ['bool']}, {'Name': 'claimRewards', 'Visibility': 'external', 'Purpose': 'Allows a user to claim rewards for specific epochs of a promotion based on their ticket balance during those epochs.', 'Parameters': ['address _user', 'uint256 _promotionId', 'uint256[] calldata _epochIds'], 'Returns': ['uint256']}, {'Name': 'onlyPromotionCreator', 'Visibility': 'modifier', 'Purpose': 'Ensures that only the creator of a promotion can perform certain actions (e.g., cancel or extend the promotion).', 'Parameters': ['uint256 _promotionId'], 'Returns': []}]}, 'ExternalInteractions': [""OpenZeppelin's IERC20 and SafeERC20 for token management"", ""PoolTogether's ITicket for ticket management"", 'External token contracts for reward distribution'], 'SpecialMechanisms': ['Time-weighted average balance (TWAB) calculation for determining user rewards', 'Epoch-based reward distribution with claims tracked via bitwise operations'], 'Questions': ['How does the contract handle potential reentrancy attacks during token transfers?', ""Is there a mechanism to handle cases where the ticket's average total supply is zero during reward calculation?"", 'What happens if the epoch duration is set to zero or an extremely small value?', 'Are there any safeguards against promotion creators draining funds by creating and canceling promotions rapidly?']}","{'Findings': [{'Issue': 'Reentrancy Risk in `claimRewards` Function', 'Severity': 'High', 'Description': 'The `claimRewards` function transfers tokens to the user before updating the claimed epochs. This could allow a malicious user to recursively call the function and claim rewards multiple times before the state is updated, leading to potential loss of funds.', 'Impact': 'An attacker could drain the contract of its tokens by exploiting this reentrancy vulnerability.', 'Location': '`claimRewards` function'}, {'Issue': 'Uninitialized Storage Pointer', 'Severity': 'High', 'Description': 'The `_promotions` mapping is used to store promotion data, but the `Promotion` struct is not initialized properly in the `createPromotion` function. This can lead to undefined behavior or data corruption.', 'Impact': 'Potential data corruption or unexpected behavior when accessing or modifying promotion data.', 'Location': '`createPromotion` function'}, {'Issue': 'Potential Integer Overflow in `createPromotion` Function', 'Severity': 'High', 'Description': 'The `createPromotion` function calculates the total tokens to transfer as `_tokensPerEpoch * _numberOfEpochs`. If `_tokensPerEpoch` and `_numberOfEpochs` are large enough, this multiplication could overflow, leading to incorrect token transfers.', 'Impact': 'An integer overflow could result in the contract transferring fewer tokens than intended, potentially leading to a loss of funds or incorrect reward distribution.', 'Location': '`createPromotion` function'}, {'Issue': 'Unbounded Loops in `claimRewards` and `getRewardsAmount` Functions', 'Severity': 'Medium', 'Description': 'The `claimRewards` and `getRewardsAmount` functions iterate over an array of `_epochIds` without any limit on its size. This could lead to excessive gas consumption or even out-of-gas errors if the array is too large.', 'Impact': 'High gas consumption or transaction failure due to exceeding the block gas limit.', 'Location': '`claimRewards` and `getRewardsAmount` functions'}, {'Issue': 'Lack of Access Control in `extendPromotion` Function', 'Severity': 'Medium', 'Description': 'The `extendPromotion` function does not restrict access to the promotion creator. Any user can extend a promotion, potentially leading to unauthorized changes.', 'Impact': 'Unauthorized modification of promotions, leading to unexpected behavior or loss of funds.', 'Location': '`extendPromotion` function'}, {'Issue': 'Insufficient Validation in `createPromotion` Function', 'Severity': 'Medium', 'Description': 'The `createPromotion` function does not validate the `_tokensPerEpoch` and `_numberOfEpochs` parameters to ensure they are greater than zero. This could lead to the creation of promotions with zero rewards or zero epochs.', 'Impact': 'Creation of invalid promotions that could confuse users or waste gas.', 'Location': '`createPromotion` function'}, {'Issue': 'Potential Division by Zero in `_calculateRewardAmount` Function', 'Severity': 'Medium', 'Description': 'The `_calculateRewardAmount` function divides by `_averageTotalSupplies[0]` without checking if it is zero. This could lead to a division by zero error if the total supply is zero for an epoch.', 'Impact': 'Division by zero error, causing the transaction to revert and potentially halting reward distribution.', 'Location': '`_calculateRewardAmount` function'}, {'Issue': 'Potential Integer Overflow in `_getCurrentEpochId` Function', 'Severity': 'Medium', 'Description': 'The `_getCurrentEpochId` function calculates the current epoch ID by dividing the difference between `block.timestamp` and `_promotion.startTimestamp` by `_promotion.epochDuration`. If `_promotion.epochDuration` is very small, this could lead to an integer overflow.', 'Impact': 'Incorrect epoch ID calculation could lead to incorrect reward distribution or other unintended behavior.', 'Location': '`_getCurrentEpochId` function'}, {'Issue': 'Incorrect Epoch Calculation in `_getCurrentEpochId` Function', 'Severity': 'Medium', 'Description': 'The `_getCurrentEpochId` function calculates the current epoch ID by dividing the time difference by the epoch duration. This calculation does not account for the possibility of the current time being exactly on the boundary between epochs, leading to incorrect epoch IDs.', 'Impact': 'Incorrect epoch ID calculation could lead to incorrect reward distribution or claims.', 'Location': '`_getCurrentEpochId` function'}, {'Issue': 'Lack of Event Emission in `extendPromotion` Function', 'Severity': 'Low', 'Description': 'The `extendPromotion` function does not emit an event when the promotion is extended. Emitting events is crucial for off-chain monitoring and transparency.', 'Impact': 'Lack of visibility into promotion extensions could make it difficult to track changes to promotions.', 'Location': '`extendPromotion` function'}, {'Issue': 'Potential Front-Running in `claimRewards` Function', 'Severity': 'Low', 'Description': 'The `claimRewards` function does not include any mechanism to prevent front-running. An attacker could monitor the blockchain for pending transactions and submit their own transaction with a higher gas price to claim rewards before the legitimate user.', 'Impact': 'Front-running could allow attackers to claim rewards intended for legitimate users, leading to loss of rewards.', 'Location': '`claimRewards` function'}, {'Issue': 'Uninitialized Promotion in `cancelPromotion`', 'Severity': 'Low', 'Description': 'The `cancelPromotion` function does not check if the promotion exists before attempting to delete it. If a non-existent promotion ID is provided, it could lead to unexpected behavior.', 'Impact': 'An attacker could potentially cancel a non-existent promotion, leading to unexpected behavior or resource exhaustion.', 'Location': '`cancelPromotion` function'}], 'IssueNumber': 12, 'OutputList': 12}",517.4143917560577,"### **Summary of Matches and Gaps**

---

#### **[H-01] createPromotion() Lack of input validation for _epochDuration can potentially freeze promotion creator's funds**

**Report Description**:  
The `createPromotion()` function allows `_epochDuration` to be set to 0. When `_epochDuration = 0`, users cannot claim rewards, and the promotion creator cannot cancel the promotion, potentially freezing their funds.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of `_epochDuration` validation in `createPromotion()`. This is a critical oversight, as it directly impacts the functionality and security of the contract.

---

#### **[H-02] Backdated _startTimestamp can lead to loss of funds**

**Report Description**:  
The `createPromotion()` function does not validate `_startTimestamp`, allowing it to be backdated. This can lead to loss of funds, as there is no recovery mechanism for funds stuck in such promotions.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of backdated `_startTimestamp` in `createPromotion()`. This is a significant vulnerability that could result in financial loss.

---

#### **[H-03] Continue claiming rewards after numberOfEpochs are over**

**Report Description**:  
The `claimRewards()` function does not check if `_epochId` is within the range of reward epochs. This allows users to claim rewards indefinitely, as long as there are sufficient tokens in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unchecked `_epochId` in `claimRewards()`. This could lead to unintended token distribution and potential loss of funds.

---

#### **[H-04] cancelPromotion is too rigorous**

**Report Description**:  
The `cancelPromotion()` function deletes the promotion entirely, preventing users from claiming rewards and locking unclaimed tokens in the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of overly rigorous cancellation in `cancelPromotion()`. This could lead to locked funds and user dissatisfaction.

---

#### **[H-05] Malicious tickets can lead to the loss of all tokens**

**Report Description**:  
The `createPromotion()` function does not properly validate the ticket address, allowing an attacker to create a malicious promotion and drain tokens from the contract.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of malicious ticket validation in `createPromotion()`. This is a critical vulnerability that could result in significant financial loss.

---

#### **[H-06] Rewards can be claimed multiple times**

**Report Description**:  
The `claimRewards()` function allows an attacker to claim rewards multiple times by exploiting the `_claimedEpochs` mapping, potentially draining the contract of tokens.

**Match in Response List**:  
Matches with the issue titled **""Reentrancy Risk in `claimRewards` Function""**.

**Validation**:  
**Partially Correct**. The response identifies the risk of multiple claims but misattributes it to reentrancy rather than the `_claimedEpochs` mapping. The core issue is partially addressed but mischaracterized.

---

#### **[H-07] Contract does not work with fee-on-transfer tokens**

**Report Description**:  
The `_calculateRewardAmount()` function does not account for fee-on-transfer tokens, leading to discrepancies in token balances and unclaimable rewards.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of fee-on-transfer tokens in `_calculateRewardAmount()`. This is a significant oversight that could impact token compatibility.

---

#### **[M-01] cancelPromotion() Unable to cancel unstarted promotions**

**Report Description**:  
The `cancelPromotion()` function reverts for unstarted promotions due to a division by zero error in `_getCurrentEpochId()`.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unstarted promotions in `cancelPromotion()`. This is a functional limitation that could lead to user frustration.

---

#### **[M-02] getRewardsAmount doesn't check epochs haven't been claimed**

**Report Description**:  
The `getRewardsAmount()` function does not account for claimed epochs, leading to incorrect reward calculations and user confusion.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unchecked claimed epochs in `getRewardsAmount()`. This could lead to user mistrust and incorrect reward distribution.

---

#### **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**

**Report Description**:  
Small reward claims may not be feasible due to high gas costs, leading to dust balances that cannot be claimed by users or admins.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of dust token balances. This is a usability concern that could lead to wasted funds.

---

#### **[M-04] Unsafe uint64 casting may overflow**

**Report Description**:  
The `_calculateRewardAmount()` function casts epoch timestamps from `uint256` to `uint64`, which could overflow and lead to incorrect reward calculations.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of unsafe casting in `_calculateRewardAmount()`. This could lead to incorrect reward distribution and potential vulnerabilities.

---

#### **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

**Report Description**:  
The `claimRewards()` function does not validate the calculated reward amount, potentially leading to over-transfers and insufficient tokens for other promotions.

**Match in Response List**:  
No match found.

**Validation**:  
**Incorrect**. The response list does not address the issue of missing validation in `claimRewards()`. This could lead to financial discrepancies and user dissatisfaction.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- None

**Partially Correct Matches**:
- **[H-06] Rewards can be claimed multiple times**

**Missed Issues from Issue Report**:
- **[H-01] createPromotion() Lack of input validation for _epochDuration can potentially freeze promotion creator's funds**
- **[H-02] Backdated _startTimestamp can lead to loss of funds**
- **[H-03] Continue claiming rewards after numberOfEpochs are over**
- **[H-04] cancelPromotion is too rigorous**
- **[H-05] Malicious tickets can lead to the loss of all tokens**
- **[H-07] Contract does not work with fee-on-transfer tokens**
- **[M-01] cancelPromotion() Unable to cancel unstarted promotions**
- **[M-02] getRewardsAmount doesn't check epochs haven't been claimed**
- **[M-03] Dust Token Balances Cannot Be Claimed By An `admin` Account**
- **[M-04] Unsafe uint64 casting may overflow**
- **[M-05] Missing Check When Transferring Tokens Out For A Given Promotion**

---

The response list fails to address the majority of the issues in the report, particularly those related to input validation, token handling, and reward distribution. The only partially correct match mischaracterizes the issue of multiple reward claims as a reentrancy risk. Overall, the response list is insufficient in addressing the vulnerabilities and risks outlined in the issue report.","```
None.
```",0.0
