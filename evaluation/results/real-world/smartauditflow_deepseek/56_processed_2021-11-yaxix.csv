nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,Comparison,matchList,MAP
YaxisVaultAdapter.sol,"// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import 'hardhat/console.sol';

import {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';

import {FixedPointMath} from '../libraries/FixedPointMath.sol';
import {IDetailedERC20} from '../interfaces/IDetailedERC20.sol';
import {IVaultAdapter} from '../interfaces/IVaultAdapter.sol';
import {IVault} from '../../interfaces/IVault.sol';

/// @title YaxisVaultAdapter
///
/// @dev A vault adapter implementation which wraps a yAxis vault.
contract YaxisVaultAdapter is IVaultAdapter {
    using FixedPointMath for FixedPointMath.FixedDecimal;
    using SafeERC20 for IDetailedERC20;
    using SafeMath for uint256;

    /// @dev The vault that the adapter is wrapping.
    IVault public vault;

    /// @dev The address which has admin control over this contract.
    address public admin;

    constructor(IVault _vault, address _admin) public {
        vault = _vault;
        admin = _admin;
        updateApproval();
    }

    /// @dev A modifier which reverts if the caller is not the admin.
    modifier onlyAdmin() {
        require(admin == msg.sender, 'YaxisVaultAdapter: only admin');
        _;
    }

    /// @dev Gets the token that the vault accepts.
    ///
    /// @return the accepted token.
    function token() external view override returns (IDetailedERC20) {
        return IDetailedERC20(vault.getToken());
    }

    /// @dev Gets the total value of the assets that the adapter holds in the vault.
    ///
    /// @return the total assets.
    function totalValue() external view override returns (uint256) {
        return _sharesToTokens(IDetailedERC20(vault.getLPToken()).balanceOf(address(this)));
    }

    /// @dev Deposits tokens into the vault.
    ///
    /// @param _amount the amount of tokens to deposit into the vault.
    function deposit(uint256 _amount) external override {
        vault.deposit(_amount);
    }

    /// @dev Withdraws tokens from the vault to the recipient.
    ///
    /// This function reverts if the caller is not the admin.
    ///
    /// @param _recipient the account to withdraw the tokes to.
    /// @param _amount    the amount of tokens to withdraw.
    function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
        vault.withdraw(_tokensToShares(_amount));
        address _token = vault.getToken();
        IDetailedERC20(_token).safeTransfer(_recipient, _amount);
    }

    /// @dev Updates the vaults approval of the token to be the maximum value.
    function updateApproval() public {
        address _token = vault.getToken();
        IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));
    }

    /// @dev Computes the number of tokens an amount of shares is worth.
    ///
    /// @param _sharesAmount the amount of shares.
    ///
    /// @return the number of tokens the shares are worth.

    function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {
        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);
    }

    /// @dev Computes the number of shares an amount of tokens is worth.
    ///
    /// @param _tokensAmount the amount of shares.
    ///
    /// @return the number of shares the tokens are worth.
    function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {
        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());
    }
}",820,98,"[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail
 Precision issue function `_tokensToShares`
Submitted by WatchPug
The actual token withdrawn from `vault.withdraw()` will most certainly less than the _amount, due to precision loss in _tokensToShares() and vault.withdraw().
As a result, IDetailedERC20(_token).safeTransfer(_recipient, _amount) will revert due to insufficant balance.
Based on the simulation we ran, it will fail 99.99% of the time unless the pps == 1e18.
https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/alchemix/adapters/YaxisVaultAdapter.sol#L68-L72
function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
    vault.withdraw(_tokensToShares(_amount));
    address _token = vault.getToken();
    IDetailedERC20(_token).safeTransfer(_recipient, _amount);
}
",1,,"pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import 'hardhat/console.sol';

import {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';

import {FixedPointMath} from '../libraries/FixedPointMath.sol';
import {IDetailedERC20} from '../interfaces/IDetailedERC20.sol';
import {IVaultAdapter} from '../interfaces/IVaultAdapter.sol';
import {IVault} from '../../interfaces/IVault.sol';




contract YaxisVaultAdapter is IVaultAdapter {
    using FixedPointMath for FixedPointMath.FixedDecimal;
    using SafeERC20 for IDetailedERC20;
    using SafeMath for uint256;

    
    IVault public vault;

    
    address public admin;

    constructor(IVault _vault, address _admin) public {
        vault = _vault;
        admin = _admin;
        updateApproval();
    }

    
    modifier onlyAdmin() {
        require(admin == msg.sender, 'YaxisVaultAdapter: only admin');
        _;
    }

    
    
    
    function token() external view override returns (IDetailedERC20) {
        return IDetailedERC20(vault.getToken());
    }

    
    
    
    function totalValue() external view override returns (uint256) {
        return _sharesToTokens(IDetailedERC20(vault.getLPToken()).balanceOf(address(this)));
    }

    
    
    
    function deposit(uint256 _amount) external override {
        vault.deposit(_amount);
    }

    
    
    
    
    
    
    function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
        vault.withdraw(_tokensToShares(_amount));
        address _token = vault.getToken();
        IDetailedERC20(_token).safeTransfer(_recipient, _amount);
    }

    
    function updateApproval() public {
        address _token = vault.getToken();
        IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));
    }

    
    
    
    
    

    function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {
        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);
    }

    
    
    
    
    
    function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {
        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());
    }
}",509,1,0,,"{'ReviewingTheCode': 'The provided code snippet is a Solidity smart contract named YaxisVaultAdapter, which acts as an adapter for interacting with a vault contract. It manages deposits, withdrawals, and value calculations for tokens held in the vault. The contract leverages several OpenZeppelin libraries for safe token operations and mathematical calculations.', 'IdentifyingKeyComponents': {'ContractName': 'YaxisVaultAdapter', 'Purpose': 'To facilitate interactions with a vault contract by managing token deposits, withdrawals, and value calculations.', 'InheritanceAndImports': {'InheritsFrom': ['IVaultAdapter'], 'Imports': ['hardhat/console.sol', '@openzeppelin/contracts/token/ERC20/SafeERC20.sol', '@openzeppelin/contracts/math/SafeMath.sol', '../libraries/FixedPointMath.sol', '../interfaces/IDetailedERC20.sol', '../interfaces/IVaultAdapter.sol', '../../interfaces/IVault.sol']}, 'StateVariables': [{'Name': 'vault', 'Type': 'IVault', 'Purpose': 'The vault contract that this adapter interacts with.'}, {'Name': 'admin', 'Type': 'address', 'Purpose': 'The address of the admin who can perform certain restricted actions.'}], 'FunctionsAndModifiers': [{'Name': 'constructor', 'Visibility': 'public', 'Purpose': 'Initializes the contract with the vault and admin addresses.', 'Parameters': ['IVault _vault', 'address _admin'], 'Returns': []}, {'Name': 'onlyAdmin', 'Visibility': 'modifier', 'Purpose': 'Restricts function access to the admin.', 'Parameters': [], 'Returns': []}, {'Name': 'token', 'Visibility': 'external', 'Purpose': 'Returns the token associated with the vault.', 'Parameters': [], 'Returns': ['IDetailedERC20']}, {'Name': 'totalValue', 'Visibility': 'external', 'Purpose': 'Returns the total value of tokens held in the vault.', 'Parameters': [], 'Returns': ['uint256']}, {'Name': 'deposit', 'Visibility': 'external', 'Purpose': 'Deposits tokens into the vault.', 'Parameters': ['uint256 _amount'], 'Returns': []}, {'Name': 'withdraw', 'Visibility': 'external', 'Purpose': 'Withdraws tokens from the vault and transfers them to the recipient.', 'Parameters': ['address _recipient', 'uint256 _amount'], 'Returns': []}, {'Name': 'updateApproval', 'Visibility': 'public', 'Purpose': 'Updates the token approval for the vault.', 'Parameters': [], 'Returns': []}, {'Name': '_sharesToTokens', 'Visibility': 'internal', 'Purpose': ""Converts shares to tokens based on the vault's price per full share."", 'Parameters': ['uint256 _sharesAmount'], 'Returns': ['uint256']}, {'Name': '_tokensToShares', 'Visibility': 'internal', 'Purpose': ""Converts tokens to shares based on the vault's price per full share."", 'Parameters': ['uint256 _tokensAmount'], 'Returns': ['uint256']}]}, 'ExternalInteractions': ['IVault (vault contract)', 'IDetailedERC20 (token contract)'], 'SpecialMechanisms': ['Use of SafeERC20 for safe token transfers and approvals.', 'Use of SafeMath for secure arithmetic operations.', ""Conversion between shares and tokens based on the vault's price per full share.""], 'Questions': ['What is the purpose of the FixedPointMath library and how is it utilized in this contract?', 'Is there a specific reason for using uint256(-1) in the updateApproval function?', 'How is the admin address managed or updated after deployment?', 'Are there any security considerations for the onlyAdmin modifier and its usage?']}","{'Findings': [{'Issue': 'Unbounded Approval', 'Severity': 'High', 'Description': 'The `updateApproval` function grants an unbounded approval (uint256(-1)) to the vault contract for the token. This can lead to potential risks if the vault contract is compromised or behaves maliciously, as it allows the vault to transfer an unlimited amount of tokens from the adapter.', 'Impact': 'If the vault contract is compromised, an attacker could drain all the tokens held by the adapter.', 'Location': 'Function `updateApproval`'}, {'Issue': 'Admin Privilege Abuse', 'Severity': 'High', 'Description': ""The `withdraw` function is restricted to the admin only, which means the admin has the sole authority to withdraw funds. If the admin's private key is compromised, an attacker could withdraw all funds from the adapter."", 'Impact': ""Potential loss of funds if the admin's private key is compromised."", 'Location': 'Function `withdraw`'}, {'Issue': 'Potential Reentrancy in Withdraw Function', 'Severity': 'High', 'Description': 'The `withdraw` function calls `vault.withdraw` and then transfers tokens to the recipient. If the recipient is a malicious contract, it could potentially reenter the `withdraw` function before the state is updated, leading to reentrancy attacks.', 'Impact': ""Reentrancy attacks could drain the adapter's funds."", 'Location': 'Function `withdraw`'}, {'Issue': 'Lack of Input Validation in Deposit Function', 'Severity': 'Medium', 'Description': 'The `deposit` function does not validate the input amount `_amount`. If a user accidentally or maliciously passes a zero or invalid amount, it could lead to unnecessary gas consumption or unexpected behavior.', 'Impact': 'Potential gas wastage or unexpected behavior in the contract.', 'Location': 'Function `deposit`'}, {'Issue': 'Lack of Input Validation in Withdraw Function', 'Severity': 'Medium', 'Description': 'The `withdraw` function does not validate the `_recipient` address or the `_amount` parameter. This could lead to unintended behavior, such as transferring tokens to the zero address or withdrawing zero tokens.', 'Impact': 'Potential loss of funds or unintended token transfers.', 'Location': 'Function `withdraw`'}, {'Issue': 'Potential Division by Zero in `_tokensToShares` Function', 'Severity': 'Medium', 'Description': 'The `_tokensToShares` function divides by `vault.getPricePerFullShare()`. If this value is zero, it could cause a division by zero error, leading to a revert.', 'Impact': 'Transaction reversion, potentially disrupting contract functionality.', 'Location': 'Function `_tokensToShares`'}, {'Issue': 'Use of Deprecated Solidity Version', 'Severity': 'Low', 'Description': 'The contract uses Solidity version ^0.6.12, which is deprecated and may contain known vulnerabilities or lack important security features found in more recent versions. Upgrading to a newer version of Solidity is recommended to benefit from the latest security patches and improvements.', 'Impact': 'Potential exposure to known vulnerabilities and lack of modern security features.', 'Location': 'pragma solidity ^0.6.12;'}, {'Issue': 'Use of Deprecated SafeMath Library', 'Severity': 'Low', 'Description': 'The contract uses the `SafeMath` library, which is deprecated in Solidity versions above 0.8.0. While not a security issue, it indicates that the contract is not leveraging the built-in overflow checks in newer Solidity versions.', 'Impact': 'Code maintainability and potential future compatibility issues.', 'Location': 'Import statement and usage throughout the contract'}, {'Issue': 'Lack of Event Emission', 'Severity': 'Low', 'Description': 'The contract does not emit events for critical state changes such as deposits and withdrawals. This makes it difficult to track and audit these actions.', 'Impact': 'Reduced transparency and auditability of the contract.', 'Location': 'Functions `deposit` and `withdraw`'}, {'Issue': 'Potential Integer Overflow/Underflow', 'Severity': 'Low', 'Description': 'The `_sharesToTokens` and `_tokensToShares` functions perform multiplication and division operations without checking for potential integer overflow. While SafeMath is used, it is still important to ensure that the values being operated on are within safe bounds.', 'Impact': 'Potential for incorrect calculations or vulnerabilities due to integer overflow.', 'Location': 'Functions `_sharesToTokens` and `_tokensToShares`'}], 'IssueNumber': 10, 'OutputList': 10}",468.21517300605774,"---

**[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail**

**Report Description**:
The `withdraw` function in `YaxisVaultAdapter.sol` is likely to fail due to precision loss in the `_tokensToShares` function and the `vault.withdraw` function. The actual tokens withdrawn from `vault.withdraw()` will almost certainly be less than the `_amount` specified, leading to a revert in `IDetailedERC20(_token).safeTransfer(_recipient, _amount)` due to insufficient balance. This issue is highly probable (99.99% failure rate) unless the price per share (`pps`) equals `1e18`.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. The response list does not address the precision loss issue in the `_tokensToShares` function or the resulting failure in the `withdraw` function. The identified issues in the response list, such as ""Unbounded Approval,"" ""Admin Privilege Abuse,"" and ""Potential Reentrancy in Withdraw Function,"" do not cover the specific precision-related vulnerability described in the issue report. This is a critical oversight, as the precision issue directly impacts the functionality and reliability of the `withdraw` function.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail**

--- 

The response list fails to address the precision loss issue in the `_tokensToShares` function and its impact on the `withdraw` function. This is a significant gap in the coverage of vulnerabilities, as the issue is highly likely to cause transaction failures and disrupt the contract's intended functionality.","```
None.
```",0.0
