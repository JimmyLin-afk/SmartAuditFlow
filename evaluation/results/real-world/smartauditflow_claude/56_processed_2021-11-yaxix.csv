nameid,code,tokens,loc,issue,vulnumber,Unnamed: 6,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,total_tokens,total_steps,Comparison,matchList,MAP
YaxisVaultAdapter.sol,"// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import 'hardhat/console.sol';

import {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';

import {FixedPointMath} from '../libraries/FixedPointMath.sol';
import {IDetailedERC20} from '../interfaces/IDetailedERC20.sol';
import {IVaultAdapter} from '../interfaces/IVaultAdapter.sol';
import {IVault} from '../../interfaces/IVault.sol';

/// @title YaxisVaultAdapter
///
/// @dev A vault adapter implementation which wraps a yAxis vault.
contract YaxisVaultAdapter is IVaultAdapter {
    using FixedPointMath for FixedPointMath.FixedDecimal;
    using SafeERC20 for IDetailedERC20;
    using SafeMath for uint256;

    /// @dev The vault that the adapter is wrapping.
    IVault public vault;

    /// @dev The address which has admin control over this contract.
    address public admin;

    constructor(IVault _vault, address _admin) public {
        vault = _vault;
        admin = _admin;
        updateApproval();
    }

    /// @dev A modifier which reverts if the caller is not the admin.
    modifier onlyAdmin() {
        require(admin == msg.sender, 'YaxisVaultAdapter: only admin');
        _;
    }

    /// @dev Gets the token that the vault accepts.
    ///
    /// @return the accepted token.
    function token() external view override returns (IDetailedERC20) {
        return IDetailedERC20(vault.getToken());
    }

    /// @dev Gets the total value of the assets that the adapter holds in the vault.
    ///
    /// @return the total assets.
    function totalValue() external view override returns (uint256) {
        return _sharesToTokens(IDetailedERC20(vault.getLPToken()).balanceOf(address(this)));
    }

    /// @dev Deposits tokens into the vault.
    ///
    /// @param _amount the amount of tokens to deposit into the vault.
    function deposit(uint256 _amount) external override {
        vault.deposit(_amount);
    }

    /// @dev Withdraws tokens from the vault to the recipient.
    ///
    /// This function reverts if the caller is not the admin.
    ///
    /// @param _recipient the account to withdraw the tokes to.
    /// @param _amount    the amount of tokens to withdraw.
    function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
        vault.withdraw(_tokensToShares(_amount));
        address _token = vault.getToken();
        IDetailedERC20(_token).safeTransfer(_recipient, _amount);
    }

    /// @dev Updates the vaults approval of the token to be the maximum value.
    function updateApproval() public {
        address _token = vault.getToken();
        IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));
    }

    /// @dev Computes the number of tokens an amount of shares is worth.
    ///
    /// @param _sharesAmount the amount of shares.
    ///
    /// @return the number of tokens the shares are worth.

    function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {
        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);
    }

    /// @dev Computes the number of shares an amount of tokens is worth.
    ///
    /// @param _tokensAmount the amount of shares.
    ///
    /// @return the number of shares the tokens are worth.
    function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {
        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());
    }
}",820,98,"[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail
 Precision issue function `_tokensToShares`
Submitted by WatchPug
The actual token withdrawn from `vault.withdraw()` will most certainly less than the _amount, due to precision loss in _tokensToShares() and vault.withdraw().
As a result, IDetailedERC20(_token).safeTransfer(_recipient, _amount) will revert due to insufficant balance.
Based on the simulation we ran, it will fail 99.99% of the time unless the pps == 1e18.
https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/alchemix/adapters/YaxisVaultAdapter.sol#L68-L72
function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
    vault.withdraw(_tokensToShares(_amount));
    address _token = vault.getToken();
    IDetailedERC20(_token).safeTransfer(_recipient, _amount);
}
",1,,"pragma solidity ^0.6.12;
pragma experimental ABIEncoderV2;

import 'hardhat/console.sol';

import {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';
import {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';

import {FixedPointMath} from '../libraries/FixedPointMath.sol';
import {IDetailedERC20} from '../interfaces/IDetailedERC20.sol';
import {IVaultAdapter} from '../interfaces/IVaultAdapter.sol';
import {IVault} from '../../interfaces/IVault.sol';




contract YaxisVaultAdapter is IVaultAdapter {
    using FixedPointMath for FixedPointMath.FixedDecimal;
    using SafeERC20 for IDetailedERC20;
    using SafeMath for uint256;

    
    IVault public vault;

    
    address public admin;

    constructor(IVault _vault, address _admin) public {
        vault = _vault;
        admin = _admin;
        updateApproval();
    }

    
    modifier onlyAdmin() {
        require(admin == msg.sender, 'YaxisVaultAdapter: only admin');
        _;
    }

    
    
    
    function token() external view override returns (IDetailedERC20) {
        return IDetailedERC20(vault.getToken());
    }

    
    
    
    function totalValue() external view override returns (uint256) {
        return _sharesToTokens(IDetailedERC20(vault.getLPToken()).balanceOf(address(this)));
    }

    
    
    
    function deposit(uint256 _amount) external override {
        vault.deposit(_amount);
    }

    
    
    
    
    
    
    function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {
        vault.withdraw(_tokensToShares(_amount));
        address _token = vault.getToken();
        IDetailedERC20(_token).safeTransfer(_recipient, _amount);
    }

    
    function updateApproval() public {
        address _token = vault.getToken();
        IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));
    }

    
    
    
    
    

    function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {
        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);
    }

    
    
    
    
    
    function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {
        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());
    }
}",509,1,0,"Based on the detailed analysis of the YaxisVaultAdapter contract, here's a comprehensive audit task list:

{
  ""task_list"": [
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Verify the robustness of the onlyAdmin modifier and its implementation"",
        ""Assess the risks of having a single admin with full withdrawal rights"",
        ""Evaluate the lack of admin role transfer or revocation mechanism"",
        ""Check for potential centralization risks in the admin-only functions""
      ]
    },
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Perform a detailed reentrancy check on withdraw and deposit functions"",
        ""Validate SafeMath usage to prevent potential overflow/underflow issues"",
        ""Review the maximum approval (uint256(-1)) for potential token approval vulnerabilities"",
        ""Investigate potential edge cases in _sharesToTokens and _tokensToShares conversion methods"",
        ""Check for any unhandled return values or potential silent failures in external calls""
      ]
    },
    {
      ""Area"": ""External Interactions"",
      ""Tasks"": [
        ""Verify the safety of interactions with the underlying vault contract"",
        ""Validate the correctness of token approval mechanisms"",
        ""Assess the robustness of token transfer operations using SafeERC20"",
        ""Check for potential oracle or price manipulation risks in getPricePerFullShare()""
      ]
    },
    {
      ""Area"": ""Functional Correctness"",
      ""Tasks"": [
        ""Verify the accuracy of shares-to-tokens and tokens-to-shares conversion logic"",
        ""Test deposit and withdrawal functions with various input amounts"",
        ""Check handling of tokens with different decimal precisions"",
        ""Validate totalValue() calculation method"",
        ""Ensure token() function returns the correct token address""
      ]
    },
    {
      ""Area"": ""Compliance and Standards"",
      ""Tasks"": [
        ""Confirm adherence to IVaultAdapter interface specifications"",
        ""Verify ERC20 token interaction compliance"",
        ""Check compatibility with different token implementations"",
        ""Validate library usage from OpenZeppelin for standard compliance""
      ]
    },
    {
      ""Area"": ""Code Quality and Optimization"",
      ""Tasks"": [
        ""Review gas efficiency of internal conversion methods"",
        ""Assess the necessity of experimental ABIEncoderV2"",
        ""Check for potential optimizations in function implementations"",
        ""Verify proper use of view and pure modifiers""
      ]
    },
    {
      ""Area"": ""Error Handling and Edge Cases"",
      ""Tasks"": [
        ""Identify and test potential zero-value edge cases"",
        ""Check error handling for invalid inputs"",
        ""Verify behavior when vault contract returns unexpected values"",
        ""Test scenarios with minimal and maximal token amounts""
      ]
    },
    {
      ""Area"": ""Upgradeability and Flexibility"",
      ""Tasks"": [
        ""Assess the contract's ability to adapt to changes in underlying vault"",
        ""Check limitations in current implementation"",
        ""Evaluate the need for potential upgrade mechanisms"",
        ""Verify the impact of hardcoded vault and admin addresses""
      ]
    }
  ]
}

Key Observations and Recommendations:

1. The task list covers comprehensive audit aspects, focusing on security, functionality, and potential risks.
2. Special attention is given to:
   - Single admin model
   - Token approval mechanisms
   - Conversion logic
   - External contract interactions
3. Recommended follow-up actions:
   - Implement multi-sig or time-lock for admin functions
   - Add events for critical operations
   - Consider adding emergency stop/pause functionality
   - Implement more granular access controls

The audit tasks are designed to provide a thorough examination of the YaxisVaultAdapter contract, addressing potential vulnerabilities and ensuring robust, secure implementation.

Would you like me to elaborate on any specific area or provide more detailed insights into the potential audit findings?","I've analyzed the smart contract and compiled my findings in the requested JSON format:

{
  ""ReviewingTheCode"": ""The contract is a vault adapter for a yield-generating vault, allowing for depositing tokens, withdrawing them, and tracking their value. It serves as an intermediary between users and a yield-generating vault protocol, following the adapter pattern."",
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""YaxisVaultAdapter"",
    ""Purpose"": ""Acts as an adapter for interfacing with a yield-generating vault (IVault), providing functionality to deposit tokens, withdraw them with admin privileges, and track the total value of assets."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [""IVaultAdapter""],
      ""Imports"": [
        ""SafeERC20 from OpenZeppelin"",
        ""SafeMath from OpenZeppelin"",
        ""FixedPointMath"",
        ""IDetailedERC20"",
        ""IVaultAdapter"",
        ""IVault""
      ]
    },
    ""StateVariables"": [
      {
        ""Name"": ""vault"",
        ""Type"": ""IVault"",
        ""Purpose"": ""Reference to the underlying vault contract that generates yield""
      },
      {
        ""Name"": ""admin"",
        ""Type"": ""address"",
        ""Purpose"": ""Address with privileged access to withdraw funds""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""constructor"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Initializes the adapter with the underlying vault and admin address"",
        ""Parameters"": [""_vault (IVault)"", ""_admin (address)""],
        ""Returns"": []
      },
      {
        ""Name"": ""onlyAdmin"",
        ""Visibility"": ""modifier"",
        ""Purpose"": ""Restricts function access to the admin address"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""token"",
        ""Visibility"": ""external view"",
        ""Purpose"": ""Returns the ERC20 token used by the vault"",
        ""Parameters"": [],
        ""Returns"": [""IDetailedERC20""]
      },
      {
        ""Name"": ""totalValue"",
        ""Visibility"": ""external view"",
        ""Purpose"": ""Calculates the total value of tokens held by this adapter in the vault"",
        ""Parameters"": [],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""deposit"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens into the vault"",
        ""Parameters"": [""_amount (uint256)""],
        ""Returns"": []
      },
      {
        ""Name"": ""withdraw"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws tokens from the vault and transfers them to a recipient (admin only)"",
        ""Parameters"": [""_recipient (address)"", ""_amount (uint256)""],
        ""Returns"": []
      },
      {
        ""Name"": ""updateApproval"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Approves the vault to spend tokens from this adapter"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""_sharesToTokens"",
        ""Visibility"": ""internal view"",
        ""Purpose"": ""Converts vault shares to token amounts"",
        ""Parameters"": [""_sharesAmount (uint256)""],
        ""Returns"": [""uint256""]
      },
      {
        ""Name"": ""_tokensToShares"",
        ""Visibility"": ""internal view"",
        ""Purpose"": ""Converts token amounts to vault shares"",
        ""Parameters"": [""_tokensAmount (uint256)""],
        ""Returns"": [""uint256""]
      }
    ]
  },
  ""ExternalInteractions"": [
    ""IVault - The underlying vault contract that this adapter interfaces with"",
    ""IDetailedERC20 - The token contract used for deposits/withdrawals"",
    ""SafeERC20 - Library for safe ERC20 operations""
  ],
  ""SpecialMechanisms"": [
    ""Adapter Pattern - Abstracts interaction with the underlying vault"",
    ""Shares to Tokens Conversion - Handles conversion between vault shares and actual token amounts"",
    ""Admin Role - Restricts withdrawal functionality to a privileged address"",
    ""Maximum Approval (uint256(-1)) - Uses maximum possible approval for the vault to spend tokens""
  ],
  ""Questions"": [
    ""There's no functionality to change the admin address if needed. Is this intentional?"",
    ""The deposit function does not enforce any access control. Is it intentional that anyone can deposit?"",
    ""There's no emergency withdrawal function in case of issues with the vault. Is this a concern?"",
    ""Could the contract handle tokens with different decimals than 18 correctly?"",
    ""What happens if the vault's getPricePerFullShare() returns 0?"",
    ""Unlimited approvals (uint256(-1)) might be a concern for some tokens. Has this been considered?""
  ]
}

After analyzing this contract, I'd like to highlight a few additional security considerations that weren't covered in the JSON format:

1. The contract uses `uint256(-1)` for approvals, which is the maximum possible value. While this is a common pattern, it potentially exposes more tokens than necessary to the vault contract if the vault is compromised.

2. The `withdraw` function converts tokens to shares and then back to tokens. This could lead to small rounding errors due to division operations, potentially locking small amounts of tokens in the contract.

3. The contract lacks events for important state changes like deposits and withdrawals, making it harder to track activity off-chain.

4. There's no mechanism to revoke the admin role or transfer it to another address, which could be problematic if the admin key is compromised.

5. The contract uses Solidity 0.6.12, which is now several versions behind the current recommended version. Newer Solidity versions include important security fixes and features.","I'll analyze the issues from the provided lists, combine similar ones, and provide a structured summary.

{
  ""Findings"": [
    {
      ""Issue"": ""Unrestricted admin privileges"",
      ""Severity"": ""High"",
      ""Description"": ""The contract has a single admin address with exclusive access to the withdraw function, but there is no mechanism to transfer admin privileges or revoke them. If the admin key is compromised or lost, the contract would be permanently locked or vulnerable to unauthorized withdrawals."",
      ""Impact"": ""Complete loss of access to funds or unauthorized withdrawals if the admin key is compromised. Potential permanent loss of funds if the admin key is lost."",
      ""Location"": ""admin variable, onlyAdmin modifier, withdraw function, and contract-wide lack of admin transfer functionality""
    },
    {
      ""Issue"": ""Implicit trust in external vault implementation"",
      ""Severity"": ""High"",
      ""Description"": ""The adapter implicitly trusts the external vault's implementation without validating its behavior or returned values. If the vault contract is malicious or compromised, it could affect this adapter."",
      ""Impact"": ""If the vault reports incorrect share prices or manipulates other return values, it could lead to incorrect calculation of token values, potentially allowing users to withdraw more or fewer tokens than they should."",
      ""Location"": ""All functions interacting with the vault""
    },
    {
      ""Issue"": ""Approval race condition vulnerability"",
      ""Severity"": ""High"",
      ""Description"": ""The updateApproval() function uses safeApprove with uint256(-1) (effectively infinite approval) without first resetting the approval to zero. This pattern can cause issues with certain tokens that don't support infinite approvals or require setting approvals to zero first."",
      ""Impact"": ""The adapter could fail to function with certain ERC20 tokens, potentially locking funds if they are deposited before discovering the incompatibility."",
      ""Location"": ""updateApproval() function""
    },
    {
      ""Issue"": ""Lack of input validation"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract lacks input validation in several functions. The deposit function doesn't check if the amount is greater than zero or if the user has sufficient balance. The constructor doesn't validate that _vault and _admin addresses are non-zero. The withdraw function doesn't validate withdrawal amounts."",
      ""Impact"": ""This could lead to unexpected behavior, including wasted gas on zero-value transactions, failed transactions, contract deployment with invalid parameters, or potential accounting inconsistencies."",
      ""Location"": ""deposit(), withdraw() functions and constructor""
    },
    {
      ""Issue"": ""Precision loss in token/share conversion"",
      ""Severity"": ""Medium"",
      ""Description"": ""The _tokensToShares and _sharesToTokens functions perform division operations that can lead to precision loss. In particular, if the price per full share is very high, _tokensToShares could return zero shares due to integer division, especially when dealing with small amounts or tokens with different decimals."",
      ""Impact"": ""Users might receive fewer tokens or shares than expected, especially for small amounts. This could potentially lock funds in the contract if small withdrawals convert to zero shares, or create attack vectors for value extraction through repeated operations."",
      ""Location"": ""_tokensToShares() and _sharesToTokens() helper functions""
    },
    {
      ""Issue"": ""No slippage protection in deposit and withdraw"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract's deposit and withdraw functions don't include any slippage protection or minimum return parameters. If the price changes between transaction submission and execution, users might receive fewer tokens or shares than expected."",
      ""Impact"": ""Users could experience unexpected losses due to price movements during transactions, front-running, or other market manipulation tactics."",
      ""Location"": ""deposit() and withdraw() functions""
    },
    {
      ""Issue"": ""Unchecked return values from external calls"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract makes external calls to the vault but doesn't validate the return values or success of these operations. For example, in the deposit and withdraw functions, there's no verification that vault.deposit() or vault.withdraw() were successful."",
      ""Impact"": ""If the external vault contract fails silently (without reverting), the adapter might think operations succeeded when they didn't, leading to accounting errors and potential fund loss."",
      ""Location"": ""deposit() and withdraw() functions""
    },
    {
      ""Issue"": ""Missing reentrancy protection"",
      ""Severity"": ""Medium"",
      ""Description"": ""The withdraw function does not implement the checks-effects-interactions pattern and makes external calls without reentrancy guards. This could be exploited if the vault or token contracts have reentrancy vulnerabilities."",
      ""Impact"": ""Depending on the vault implementation, reentrancy attacks could potentially bypass withdrawal limits, manipulate accounting, or drain funds."",
      ""Location"": ""withdraw() function""
    },
    {
      ""Issue"": ""Inconsistency between totalValue and actual withdrawable amount"",
      ""Severity"": ""Medium"",
      ""Description"": ""The totalValue function calculates the total value based on share price, but this may not reflect the actual amount that can be withdrawn due to potential fees, slippage, or price impact during withdrawal."",
      ""Impact"": ""Users might make decisions based on a totalValue that doesn't reflect the actual amount they can withdraw, leading to unexpected outcomes."",
      ""Location"": ""totalValue function""
    },
    {
      ""Issue"": ""No emergency withdrawal functionality"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract lacks emergency functionality to handle scenarios where the vault has issues or is compromised. There's no way to withdraw all funds in one transaction, which might be necessary in emergency situations."",
      ""Impact"": ""If the vault contract malfunctions or is compromised, funds could be locked in the adapter contract with no way to recover them quickly."",
      ""Location"": ""Throughout the contract - no emergency functions exist""
    },
    {
      ""Issue"": ""No contract pause mechanism"",
      ""Severity"": ""Medium"",
      ""Description"": ""The contract does not include functionality to pause operations in case of detected vulnerabilities or attacks."",
      ""Impact"": ""If a vulnerability is discovered, there's no way to temporarily prevent further exploitation while a fix is implemented."",
      ""Location"": ""Contract-wide""
    },
    {
      ""Issue"": ""Unlimited token approval"",
      ""Severity"": ""Low"",
      ""Description"": ""The updateApproval() function uses uint256(-1) to approve the vault to spend tokens, which is essentially an unlimited approval. While common, this approach may expose users to greater risk if the approved contract is compromised."",
      ""Impact"": ""If the vault contract is compromised, all tokens held by the adapter could be at risk."",
      ""Location"": ""updateApproval() function""
    },
    {
      ""Issue"": ""No function to rescue mistakenly sent tokens"",
      ""Severity"": ""Low"",
      ""Description"": ""The contract does not provide a mechanism to recover tokens other than the vault token that might be mistakenly sent to the contract address."",
      ""Impact"": ""Any ERC20 tokens accidentally sent to the contract address would be permanently locked."",
      ""Location"": ""Throughout the contract""
    },
    {
      ""Issue"": ""Missing events for critical operations"",
      ""Severity"": ""Low"",
      ""Description"": ""The contract doesn't emit events for important operations like deposits, withdrawals, or admin changes, making it difficult to track activity and limiting transparency."",
      ""Impact"": ""Reduced ability to monitor contract activity, audit operations off-chain, and debug issues."",
      ""Location"": ""deposit() and withdraw() functions""
    },
    {
      ""Issue"": ""No protection against token transfers"",
      ""Severity"": ""Low"",
      ""Description"": ""The contract might receive tokens directly via transfer methods which won't be accounted for in its accounting system."",
      ""Impact"": ""Potential discrepancy between actual token balance and reported values, which could lead to accounting issues."",
      ""Location"": ""Throughout the contract""
    }
  ],
  ""IssueNumber"": 50,
  ""OutputList"": 15
}",307.0865480899811,34967.0,32.0,"### **[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail**

**Report Description**:
The `withdraw()` function in `YaxisVaultAdapter.sol` is likely to fail due to precision loss in the `_tokensToShares()` function and the `vault.withdraw()` function. The actual tokens withdrawn from `vault.withdraw()` will almost always be less than the `_amount` specified, leading to a revert in `IDetailedERC20(_token).safeTransfer(_recipient, _amount)` due to insufficient balance. This issue occurs because of the precision loss in the conversion between tokens and shares, especially when the price per share (`pps`) is not exactly `1e18`. Based on simulations, this failure occurs 99.99% of the time unless `pps == 1e18`.

**Match in Response List**:
Matches with the issue titled **""Precision loss in token/share conversion""**.

**Validation**:
**Correct**. The response accurately identifies the issue of precision loss in the `_tokensToShares()` and `_sharesToTokens()` functions. It correctly explains the impact of this precision loss, which aligns with the issue described in the report. The response also highlights the potential for users to receive fewer tokens or shares than expected, which is consistent with the reported problem of the `withdraw()` function failing due to insufficient balance.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-01] YaxisVaultAdapter.sol#withdraw() will most certainly fail**

**Partially Correct Matches**:

- *None*

**Missed Issues from Issue Report**:

- *None*

---","```
1. Precision loss in token/share conversion
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the rank of the true positive**:
   - The true positive is ""Precision loss in token/share conversion"".
   - This issue appears at rank 5 in the ranked list of predictions.

2. **Calculate the precision at that rank**:
   - Precision at rank 5 (\( P@5 \)) is calculated as the number of true positives up to rank 5 divided by the rank.
   - Since there is only one true positive up to rank 5, \( P@5 = \frac{1}{5} = 0.2 \).

3. **Compute the Average Precision (AP)**:
   - Since there is only one true positive, the AP is simply the precision at the rank where the true positive appears.
   - Therefore, \( AP = 0.2 \).

**Output**:
```
0.2
```"
