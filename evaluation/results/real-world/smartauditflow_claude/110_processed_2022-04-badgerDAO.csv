nameid,code,tokens,loc,issue,vulnumber,code_snippet,processtokens,high_severity_count,medium_severity_count,audit_plan,initial_analysis,Findings,execution_time,total_tokens,total_steps,Comparison,matchList,MAP
StakedCitadel.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {IERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import {AddressUpgradeable} from ""openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol"";
import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import {PausableUpgradeable} from ""openzeppelin-contracts-upgradeable/security/PausableUpgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./lib/SettAccessControl.sol"";

import {IVault} from ""./interfaces/badger/IVault.sol"";
import {IVesting} from ""./interfaces/citadel/IVesting.sol"";
import {IStrategy} from ""./interfaces/badger/IStrategy.sol"";
import {IERC20} from ""./interfaces/erc20/IERC20.sol"";
import {IBadgerGuestlist} from ""./interfaces/badger/IBadgerGuestlist.sol"";

/*
    Source: https://github.com/iearn-finance/yearn-protocol/blob/develop/contracts/vaults/yVault.sol
    
    Changelog:

    V1.1
    * Strategist no longer has special function calling permissions
    * Version function added to contract
    * All write functions, with the exception of transfer, are pausable
    * Keeper or governance can pause
    * Only governance can unpause

    V1.2
    * Transfer functions are now pausable along with all other non-permissioned write functions
    * All permissioned write functions, with the exception of pause() & unpause(), are pausable as well

    V1.3
    * Add guest list functionality
    * All deposits can be optionally gated by external guestList approval logic on set guestList contract

    V1.4
    * Add depositFor() to deposit on the half of other users. That user will then be blockLocked.

    V1.5
    * Removed Controller
        - Removed harvest from vault (only on strategy)
    * Params added to track autocompounded rewards (lifeTimeEarned, lastHarvestedAt, lastHarvestAmount, assetsAtLastHarvest)
      this would work in sync with autoCompoundRatio to help us track harvests better.
    * Fees
        - Strategy would report the autocompounded harvest amount to the vault
        - Calculation performanceFeeGovernance, performanceFeeStrategist, withdrawalFee, managementFee moved to the vault.
        - Vault mints shares for performanceFees and managementFee to the respective recipient (treasury, strategist)
        - withdrawal fees is transferred to the rewards address set
    * Permission:
        - Strategist can now set performance, withdrawal and management fees
        - Governance will determine maxPerformanceFee, maxWithdrawalFee, maxManagementFee that can be set to prevent rug of funds.
    * Strategy would take the actors from the vault it is connected to
    * All governance related fees goes to treasury
*/

contract StakedCitadel is
    ERC20Upgradeable,
    SettAccessControl,
    PausableUpgradeable,
    ReentrancyGuardUpgradeable
{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using AddressUpgradeable for address;

    uint256 constant ONE_ETH = 1e18;

    /// ===== Storage Variables ====

    IERC20Upgradeable public token; // Token used for deposits
    IBadgerGuestlist public guestList; // guestlist when vault is in experiment/ guarded state

    bool public pausedDeposit; // false by default Allows to only block deposits, use pause for the normal pause state

    address public strategy; // address of the strategy connected to the vault
    address public guardian; // guardian of vault and strategy
    address public treasury; // set by governance ... any fees go there

    address public badgerTree; // Address we send tokens too via reportAdditionalTokens
    address public vesting; // Address of the vesting contract where after withdrawal we send CTDL to vest for 21 days

    /// @dev name and symbol prefixes for lpcomponent token of vault
    string internal constant _defaultNamePrefix = ""Staked "";
    string internal constant _symbolSymbolPrefix = ""x"";

    /// Params to track autocompounded rewards
    uint256 public lifeTimeEarned; // keeps track of total earnings
    uint256 public lastHarvestedAt; // timestamp of the last harvest
    uint256 public lastHarvestAmount; // amount harvested during last harvest
    uint256 public assetsAtLastHarvest; // assets for which the harvest took place.

    mapping(address => uint256) public additionalTokensEarned;
    mapping(address => uint256) public lastAdditionalTokenAmount;

    /// Fees ///
    /// @notice all fees will be in bps
    uint256 public performanceFeeGovernance; // Perf fee sent to `treasury`
    uint256 public performanceFeeStrategist; // Perf fee sent to `strategist`
    uint256 public withdrawalFee; // fee issued to `treasury` on withdrawal
    uint256 public managementFee; // fee issued to `treasury` on report (typically on harvest, but only if strat is autocompounding)

    uint256 public maxPerformanceFee; // maximum allowed performance fees
    uint256 public maxWithdrawalFee; // maximum allowed withdrawal fees
    uint256 public maxManagementFee; // maximum allowed management fees

    uint256 public toEarnBps; // NOTE: in BPS, minimum amount of token to deposit into strategy when earn is called

    /// ===== Constants ====

    uint256 public constant MAX_BPS = 10_000;
    uint256 public constant SECS_PER_YEAR = 31_556_952; // 365.2425 days

    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; // Never higher than 2%
    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; // Never higher than 30% // 30% maximum performance fee // We usually do 20, so this is insanely high already
    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; // Never higher than 2%

    /// ===== Events ====

    // Emitted when a token is sent to the badgerTree for emissions
    event TreeDistribution(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    // Emitted during a report, when there has been an increase in pricePerFullShare (ppfs)
    event Harvested(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    event SetTreasury(address indexed newTreasury);
    event SetStrategy(address indexed newStrategy);
    event SetToEarnBps(uint256 newEarnToBps);
    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);
    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);
    event SetMaxManagementFee(uint256 newMaxManagementFee);
    event SetGuardian(address indexed newGuardian);
    event SetVesting(address indexed newVesting);
    event SetGuestList(address indexed newGuestList);
    event SetWithdrawalFee(uint256 newWithdrawalFee);
    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);
    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);
    event SetManagementFee(uint256 newManagementFee);

    event PauseDeposits(address indexed pausedBy);
    event UnpauseDeposits(address indexed pausedBy);

    /// @notice Initializes the Sett. Can only be called once, ideally when the contract is deployed.
    /// @param _token Address of the token that can be deposited into the sett.
    /// @param _governance Address authorized as governance.
    /// @param _keeper Address authorized as keeper.
    /// @param _guardian Address authorized as guardian.
    /// @param _treasury Address to distribute governance fees/rewards to.
    /// @param _strategist Address authorized as strategist.
    /// @param _badgerTree Address of badgerTree used for emissions.
    /// @param _name Specify a custom sett name. Leave empty for default value.
    /// @param _symbol Specify a custom sett symbol. Leave empty for default value.
    /// @param _feeConfig Values for the 4 different types of fees charges by the sett
    ///         [performanceFeeGovernance, performanceFeeStrategist, withdrawToVault, managementFee]
    ///         Each fee should be less than the constant hard-caps defined above.
    function initialize(
        address _token,
        address _governance,
        address _keeper,
        address _guardian,
        address _treasury,
        address _strategist,
        address _badgerTree,
        address _vesting,
        string memory _name,
        string memory _symbol,
        uint256[4] memory _feeConfig
    ) public initializer whenNotPaused {
        require(_token != address(0)); // dev: _token address should not be zero
        require(_governance != address(0)); // dev: _governance address should not be zero
        require(_keeper != address(0)); // dev: _keeper address should not be zero
        require(_guardian != address(0)); // dev: _guardian address should not be zero
        require(_treasury != address(0)); // dev: _treasury address should not be zero
        require(_strategist != address(0)); // dev: _strategist address should not be zero
        require(_badgerTree != address(0)); // dev: _badgerTree address should not be zero
        require(_vesting != address(0)); // dev: _vesting address should not be zero

        // Check for fees being reasonable (see below for interpretation)
        require(
            _feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeGovernance too high""
        );
        require(
            _feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );
        require(
            _feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP,
            ""withdrawalFee too high""
        );
        require(
            _feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP,
            ""managementFee too high""
        );

        string memory name;
        string memory symbol;

        // If they are non empty string we'll use the custom names
        // Else just add the default prefix
        IERC20 namedToken = IERC20(_token);

        if (keccak256(abi.encodePacked(_name)) != keccak256("""")) {
            name = _name;
        } else {
            name = string(
                abi.encodePacked(_defaultNamePrefix, namedToken.name())
            );
        }

        if (keccak256(abi.encodePacked(_symbol)) != keccak256("""")) {
            symbol = _symbol;
        } else {
            symbol = string(
                abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol())
            );
        }

        // Initializing the lpcomponent token
        __ERC20_init(name, symbol);
        // Initialize the other contracts
        __Pausable_init();
        __ReentrancyGuard_init();

        token = IERC20Upgradeable(_token);
        governance = _governance;
        treasury = _treasury;
        strategist = _strategist;
        keeper = _keeper;
        guardian = _guardian;
        badgerTree = _badgerTree;
        vesting = _vesting;

        lastHarvestedAt = block.timestamp; // setting initial value to the time when the vault was deployed

        performanceFeeGovernance = _feeConfig[0];
        performanceFeeStrategist = _feeConfig[1];
        withdrawalFee = _feeConfig[2];
        managementFee = _feeConfig[3];
        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; // 30% max performance fee
        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; // 2% maximum withdrawal fee
        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; // 2% maximum management fee

        toEarnBps = 9_500; // initial value of toEarnBps // 95% is invested to the strategy, 5% for cheap withdrawals
    }

    /// ===== Modifiers ====

    /// @notice Checks whether a call is from guardian or governance.
    function _onlyAuthorizedPausers() internal view {
        require(
            msg.sender == guardian || msg.sender == governance,
            ""onlyPausers""
        );
    }

    /// @notice Checks whether a call is from the strategy.
    function _onlyStrategy() internal view {
        require(msg.sender == strategy, ""onlyStrategy"");
    }

    /// ===== View Functions =====

    /// @notice Used to track the deployed version of the contract.
    /// @return Current version of the contract.
    function version() external pure returns (string memory) {
        return ""1.5"";
    }

    /// @notice Gives the price for a single Sett share.
    /// @dev Sett starts with a price per share of 1.
    /// @return Value of a single share.
    function getPricePerFullShare() public view returns (uint256) {
        if (totalSupply() == 0) {
            return ONE_ETH;
        }
        return (balance() * ONE_ETH) / totalSupply();
    }

    /// @notice Gives the total balance of the underlying token within the sett and strategy system.
    /// @return Balance of token handled by the sett.
    function balance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    /// @notice Defines how much of the Setts' underlying is available for strategy to borrow.
    /// @return Amount of tokens that the sett can provide to the strategy.
    function available() public view returns (uint256) {
        return (token.balanceOf(address(this)) * toEarnBps) / MAX_BPS;
    }

    /// ===== Public Actions =====

    /// @notice Deposits `_amount` tokens, issuing shares.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    /// @param _amount Quantity of tokens to deposit.
    function deposit(uint256 _amount) external whenNotPaused {
        _depositWithAuthorization(_amount, new bytes32[](0));
    }

    /// @notice Deposits `_amount` tokens, issuing shares.
    ///         Checks the guestlist to verify that the calling account is authorized to make a deposit for the specified `_amount`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param _amount Quantity of tokens to deposit.
    /// @param proof Merkle proof to validate in the guestlist.
    function deposit(uint256 _amount, bytes32[] memory proof)
        external
        whenNotPaused
    {
        _depositWithAuthorization(_amount, proof);
    }

    /// @notice Deposits all tokens, issuing shares.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    function depositAll() external whenNotPaused {
        _depositWithAuthorization(
            token.balanceOf(msg.sender),
            new bytes32[](0)
        );
    }

    /// @notice Deposits all tokens, issuing shares.
    ///         Checks the guestlist to verify that the calling is authorized to make a full deposit.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param proof Merkle proof to validate in the guestlist.
    function depositAll(bytes32[] memory proof) external whenNotPaused {
        _depositWithAuthorization(token.balanceOf(msg.sender), proof);
    }

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositFor` for details on how deposit is implemented.
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function depositFor(address _recipient, uint256 _amount)
        external
        whenNotPaused
    {
        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));
    }

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Checks the guestlist to verify that `recipient` is authorized to make a deposit for the specified `_amount`.
    ///         Note that deposits are not accepted when the Sett is paused or when `pausedDeposit` is true.
    /// @dev See `_depositForWithAuthorization` for details on guestlist authorization.
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function depositFor(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) external whenNotPaused {
        _depositForWithAuthorization(_recipient, _amount, proof);
    }

    /// @notice Redeems `_shares` for an appropriate amount of tokens.
    ///         Note that withdrawals are not processed when the Sett is paused.
    /// @dev See `_withdraw` for details on how withdrawals are processed.
    /// @param _shares Quantity of shares to redeem.
    function withdraw(uint256 _shares) external whenNotPaused {
        _withdraw(_shares);
    }

    /// @notice Redeems all shares, issuing an appropriate amount of tokens.
    ///         Note that withdrawals are not processed when the Sett is paused.
    /// @dev See `_withdraw` for details on how withdrawals are processed.
    function withdrawAll() external whenNotPaused {
        _withdraw(balanceOf(msg.sender));
    }

    /// ===== Permissioned Actions: Strategy =====

    /// @notice Used by the strategy to report a harvest to the sett.
    ///         Issues shares for the strategist and treasury based on the performance fees and harvested amount.
    ///         Issues shares for the treasury based on the management fee and the time elapsed since last harvest.
    ///         Updates harvest variables for on-chain APR tracking.
    ///         This can only be called by the strategy.
    /// @dev This implicitly trusts that the strategy reports the correct amount.
    ///      Pausing on this function happens at the strategy level.
    /// @param _harvestedAmount Amount of underlying token harvested by the strategy.
    function reportHarvest(uint256 _harvestedAmount) external nonReentrant {
        _onlyStrategy();

        uint256 harvestTime = block.timestamp;
        uint256 assetsAtHarvest = balance() - _harvestedAmount; // Must be less than or equal or revert

        _handleFees(_harvestedAmount, harvestTime);

        // Updated lastHarvestAmount
        lastHarvestAmount = _harvestedAmount;

        // if we withdrawAll
        // we will have some yield left
        // having 0 for assets will inflate APY
        // Instead, have the last harvest report with the previous assets
        // And if you end up harvesting again, that report will have both 0s
        if (assetsAtHarvest != 0) {
            assetsAtLastHarvest = assetsAtHarvest;
        } else if (_harvestedAmount == 0) {
            // If zero
            assetsAtLastHarvest = 0;
        }

        lifeTimeEarned = lifeTimeEarned + _harvestedAmount;
        // Update time either way
        lastHarvestedAt = harvestTime;

        emit Harvested(
            address(token),
            _harvestedAmount,
            block.number,
            block.timestamp
        );
    }

    /// @notice Used by the strategy to report harvest of additional tokens to the sett.
    ///         Charges performance fees on the additional tokens and transfers fees to treasury and strategist.
    ///         The remaining amount is sent to badgerTree for emissions.
    ///         Updates harvest variables for on-chain APR tracking.
    ///         This can only be called by the strategy.
    /// @dev This function is called after the strategy sends the additional tokens to the sett.
    ///      Pausing on this function happens at the strategy level.
    /// @param _token Address of additional token harvested by the strategy.
    function reportAdditionalToken(address _token) external nonReentrant {
        _onlyStrategy();
        require(address(token) != _token, ""No want"");
        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(
            address(this)
        );

        additionalTokensEarned[_token] =
            additionalTokensEarned[_token] +
            tokenBalance;
        lastAdditionalTokenAmount[_token] = tokenBalance;

        // We may have more, but we still report only what the strat sent
        uint256 governanceRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeGovernance
        );
        uint256 strategistRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeStrategist
        );

        IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);
        IERC20Upgradeable(_token).safeTransfer(
            strategist,
            strategistRewardsFee
        );

        // Send rest to tree
        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));
        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);
        emit TreeDistribution(
            _token,
            newBalance,
            block.number,
            block.timestamp
        );
    }

    /// ===== Permissioned Actions: Governance =====

    /// @notice Changes the treasury address.
    ///         Treasury is recipient of management and governance performance fees.
    ///         This can only be called by governance.
    ///         Note that this can only be called when sett is not paused.
    /// @param _treasury Address of the new treasury.
    function setTreasury(address _treasury) external whenNotPaused {
        _onlyGovernance();
        require(_treasury != address(0), ""Address 0"");

        treasury = _treasury;
        emit SetTreasury(_treasury);
    }

    /// @notice Changes the strategy address.
    ///         This can only be called by governance.
    ///         Note that this can only be called when sett is not paused.
    /// @dev This is a rug vector, pay extremely close attention to the next strategy being set.
    ///      Changing the strategy should happen only via timelock.
    ///      This function must not be callable when the sett is paused as this would force depositors into a strategy they may not want to use.
    /// @param _strategy Address of new strategy.
    function setStrategy(address _strategy) external whenNotPaused {
        _onlyGovernance();
        require(_strategy != address(0), ""Address 0"");

        /// NOTE: Migrate funds if settings strategy when already existing one
        if (strategy != address(0)) {
            require(
                IStrategy(strategy).balanceOf() == 0,
                ""Please withdrawToVault before changing strat""
            );
        }
        strategy = _strategy;
        emit SetStrategy(_strategy);
    }

    // === Setters that can be called by governance even when paused ===

    /// @notice Sets the max withdrawal fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `WITHDRAWAL_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for withdrawal fee.
    function setMaxWithdrawalFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, ""withdrawalFee too high"");

        maxWithdrawalFee = _fees;
        emit SetMaxWithdrawalFee(_fees);
    }

    /// @notice Sets the max performance fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `PERFORMANCE_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for performance fee.
    function setMaxPerformanceFee(uint256 _fees) external {
        _onlyGovernance();
        require(
            _fees <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );

        maxPerformanceFee = _fees;
        emit SetMaxPerformanceFee(_fees);
    }

    /// @notice Sets the max management fee that can be charged by the Sett.
    ///         This can only be called by governance.
    /// @dev The input `_fees` should be less than the `MANAGEMENT_FEE_HARD_CAP` hard-cap.
    /// @param _fees The new maximum cap for management fee.
    function setMaxManagementFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= MANAGEMENT_FEE_HARD_CAP, ""managementFee too high"");

        maxManagementFee = _fees;
        emit SetMaxManagementFee(_fees);
    }

    /// @notice Changes the guardian address.
    ///         Guardian is an authorized actor that can pause the sett in case of an emergency.
    ///         This can only be called by governance.
    /// @param _guardian Address of the new guardian.
    function setGuardian(address _guardian) external {
        _onlyGovernance();
        require(_guardian != address(0), ""Address cannot be 0x0"");

        guardian = _guardian;
        emit SetGuardian(_guardian);
    }

    /// @notice Changes the vesting contract address.
    ///         Vesting contract is used to vest withdrawn tokens linearly over period of 21 days
    ///         This can only be called by governance.
    /// @param _vesting Address of the new guardian.
    function setVesting(address _vesting) external {
        _onlyGovernance();
        require(_vesting != address(0), ""Address cannot be 0x0"");

        vesting = _vesting;
        emit SetVesting(_vesting);
    }

    /// ===== Permissioned Functions: Trusted Actors =====

    /// @notice Sets the fraction of sett balance (in basis points) that the strategy can borrow.
    ///         This can be called by either governance or strategist.
    ///         Note that this can only be called when the sett is not paused.
    /// @param _newToEarnBps The new maximum cap for management fee.
    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_newToEarnBps <= MAX_BPS, ""toEarnBps should be <= MAX_BPS"");

        toEarnBps = _newToEarnBps;
        emit SetToEarnBps(_newToEarnBps);
    }

    /// @notice Changes the guestlist address.
    ///         The guestList is used to gate or limit deposits. If no guestlist is set then anyone can deposit any amount.
    ///         This can be called by either governance or strategist.
    ///         Note that this can only be called when the sett is not paused.
    /// @param _guestList Address of the new guestlist.
    function setGuestList(address _guestList) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        guestList = IBadgerGuestlist(_guestList);
        emit SetGuestList(_guestList);
    }

    /// @notice Sets the withdrawal fee charged by the Sett.
    ///         The fee is taken at the time of withdrawals in the underlying token which is then used to issue new shares for the treasury.
    ///         The new withdrawal fee should be less than `maxWithdrawalFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `_withdraw` to see how withdrawal fee is charged.
    /// @param _withdrawalFee The new withdrawal fee.
    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_withdrawalFee <= maxWithdrawalFee, ""Excessive withdrawal fee"");
        withdrawalFee = _withdrawalFee;
        emit SetWithdrawalFee(_withdrawalFee);
    }

    /// @notice Sets the performance fee taken by the strategist on the harvests.
    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.
    ///         For the underlying token, the fee is used to issue new shares for the strategist.
    ///         The new performance fee should be less than `maxPerformanceFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.
    /// @param _performanceFeeStrategist The new performance fee.
    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeStrategist <= maxPerformanceFee,
            ""Excessive strategist performance fee""
        );
        performanceFeeStrategist = _performanceFeeStrategist;
        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);
    }

    /// @notice Sets the performance fee taken by the treasury on the harvests.
    ///         The fee is taken at the time of harvest reporting for both the underlying token and additional tokens.
    ///         For the underlying token, the fee is used to issue new shares for the treasury.
    ///         The new performance fee should be less than `maxPerformanceFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `reportHarvest` and `reportAdditionalToken` to see how performance fees are charged.
    /// @param _performanceFeeGovernance The new performance fee.
    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeGovernance <= maxPerformanceFee,
            ""Excessive governance performance fee""
        );
        performanceFeeGovernance = _performanceFeeGovernance;
        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);
    }

    /// @notice Sets the management fee taken by the treasury on the AUM in the sett.
    ///         The fee is calculated at the time of `reportHarvest` and is used to issue new shares for the treasury.
    ///         The new management fee should be less than `maxManagementFee`.
    ///         This can be called by either governance or strategist.
    /// @dev See `_handleFees` to see how the management fee is calculated.
    /// @param _fees The new management fee.
    function setManagementFee(uint256 _fees) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_fees <= maxManagementFee, ""Excessive management fee"");
        managementFee = _fees;
        emit SetManagementFee(_fees);
    }

    /// === Strategist level operations that can be done even when paused ==

    /// @notice Withdraws all funds from the strategy back to the sett.
    ///         This can be called by either governance or strategist.
    /// @dev This calls `_withdrawAll` on the strategy and transfers the balance to the sett.
    function withdrawToVault() external {
        _onlyGovernanceOrStrategist();
        IStrategy(strategy).withdrawToVault();
    }

    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.)
    ///         to the badgerTree for emissions.
    ///         The `_token` should be different from any tokens managed by the strategy.
    ///         This can only be called by either strategist or governance.
    /// @dev See `BaseStrategy.emitNonProtectedToken` for details.
    /// @param _token Address of the token to be emitted.
    function emitNonProtectedToken(address _token) external {
        _onlyGovernanceOrStrategist();

        IStrategy(strategy).emitNonProtectedToken(_token);
    }

    /// @notice Sweeps the balance of an extra token from the vault and strategy and sends it to governance.
    ///         The `_token` should be different from any tokens managed by the strategy.
    ///         This can only be called by either strategist or governance.
    /// @dev Sweeping doesn't take any fee.
    /// @param _token Address of the token to be swept.
    function sweepExtraToken(address _token) external {
        _onlyGovernanceOrStrategist();
        require(address(token) != _token, ""No want"");

        IStrategy(strategy).withdrawOther(_token);
        // Send all `_token` we have
        // Safe because `withdrawOther` will revert on protected tokens
        // Done this way works for both a donation to strategy or to vault
        IERC20Upgradeable(_token).safeTransfer(
            governance,
            IERC20Upgradeable(_token).balanceOf(address(this))
        );
    }

    /// @notice Deposits the available balance of the underlying token into the strategy.
    ///         The strategy then uses the amount for yield-generating activities.
    ///         This can be called by either the keeper or governance.
    ///         Note that earn cannot be called when deposits are paused.
    /// @dev Pause is enforced at the Strategy level (this allows to still earn yield when the Vault is paused)
    function earn() external {
        require(!pausedDeposit, ""pausedDeposit""); // dev: deposits are paused, we don't earn as well
        _onlyAuthorizedActors();

        uint256 _bal = available();
        token.safeTransfer(strategy, _bal);
        IStrategy(strategy).earn();
    }

    /// @notice Pauses only deposits.
    ///         This can be called by either guardian or governance.
    function pauseDeposits() external {
        _onlyAuthorizedPausers();
        pausedDeposit = true;
        emit PauseDeposits(msg.sender);
    }

    /// @notice Unpauses deposits.
    ///         This can only be called by governance.
    function unpauseDeposits() external {
        _onlyGovernance();
        pausedDeposit = false;
        emit UnpauseDeposits(msg.sender);
    }

    /// @notice Pauses everything.
    ///         This can be called by either guardian or governance.
    function pause() external {
        _onlyAuthorizedPausers();
        _pause();
    }

    /// @notice Unpauses everything
    ///         This can only be called by governance.
    function unpause() external {
        _onlyGovernance();
        _unpause();
    }

    /// ===== Internal Implementations =====

    /// @notice Deposits `_amount` tokens, issuing shares to `recipient`.
    ///         Note that deposits are not accepted when `pausedDeposit` is true.
    /// @dev This is the actual deposit operation.
    ///      Deposits are based on the realized value of underlying assets between Sett & associated Strategy
    /// @param _recipient Address to issue the Sett shares to.
    /// @param _amount Quantity of tokens to deposit.
    function _depositFor(address _recipient, uint256 _amount)
        internal
        nonReentrant
    {
        require(_recipient != address(0), ""Address 0"");
        require(_amount != 0, ""Amount 0"");
        require(!pausedDeposit, ""pausedDeposit""); // dev: deposits are paused

        uint256 _pool = balance();
        uint256 _before = token.balanceOf(address(this));
        token.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 _after = token.balanceOf(address(this));
        _mintSharesFor(_recipient, _after - _before, _pool);
    }

    /// @dev See `_depositWithAuthorization`
    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof)
        internal
    {
        _depositForWithAuthorization(msg.sender, _amount, proof);
    }

    /// @dev Verifies that `_recipient` is authorized to deposit `_amount` based on the guestlist.
    ///      See `_depositFor` for deposit details.
    function _depositForWithAuthorization(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) internal {
        if (address(guestList) != address(0)) {
            require(
                guestList.authorized(_recipient, _amount, proof),
                ""GuestList: Not Authorized""
            );
        }
        _depositFor(_recipient, _amount);
    }

    /// @notice Redeems `_shares` for an appropriate amount of tokens.
    /// @dev This is the actual withdraw operation.
    ///      Withdraws from strategy positions if sett doesn't contain enough tokens to process the withdrawal.
    ///      Calculates withdrawal fees and issues corresponding shares to treasury.
    ///      No rebalance implementation for lower fees and faster swaps
    /// @param _shares Quantity of shares to redeem.
    function _withdraw(uint256 _shares) internal nonReentrant {
        require(_shares != 0, ""0 Shares"");

        uint256 r = (balance() * _shares) / totalSupply();
        _burn(msg.sender, _shares);

        // Check balance
        uint256 b = token.balanceOf(address(this));
        if (b < r) {
            uint256 _toWithdraw = r - b;
            IStrategy(strategy).withdraw(_toWithdraw);
            uint256 _after = token.balanceOf(address(this));
            uint256 _diff = _after - b;
            if (_diff < _toWithdraw) {
                r = b + _diff;
            }
        }

        uint256 _fee = _calculateFee(r, withdrawalFee);
        uint256 _amount = r - _fee;

        // Send funds to vesting contract and setup vesting
        IVesting(vesting).setupVesting(msg.sender, _amount, block.timestamp);
        token.safeTransfer(vesting, _amount);

        // After you burned the shares, and you have sent the funds, adding here is equivalent to depositing
        // Process withdrawal fee
        if(_fee > 0) {
            _mintSharesFor(treasury, _fee, balance() - _fee);
        }
    }

    /// @dev Helper function to calculate fees.
    /// @param amount Amount to calculate fee on.
    /// @param feeBps The fee to be charged in basis points.
    /// @return Amount of fees to take.
    function _calculateFee(uint256 amount, uint256 feeBps)
        internal
        pure
        returns (uint256)
    {
        if (feeBps == 0) {
            return 0;
        }
        uint256 fee = (amount * feeBps) / MAX_BPS;
        return fee;
    }

    /// @dev Helper function to calculate governance and strategist performance fees. Make sure to use it to get paid!
    /// @param _amount Amount to calculate fee on.
    /// @return Tuple containing amount of (governance, strategist) fees to take.
    function _calculatePerformanceFee(uint256 _amount)
        internal
        view
        returns (uint256, uint256)
    {
        uint256 governancePerformanceFee = _calculateFee(
            _amount,
            performanceFeeGovernance
        );

        uint256 strategistPerformanceFee = _calculateFee(
            _amount,
            performanceFeeStrategist
        );

        return (governancePerformanceFee, strategistPerformanceFee);
    }

    /// @dev Helper function to issue shares to `recipient` based on an input `_amount` and `_pool` size.
    /// @param recipient Address to issue shares to.
    /// @param _amount Amount to issue shares on.
    /// @param _pool Pool size to use while calculating amount of shares to mint.
    function _mintSharesFor(
        address recipient,
        uint256 _amount,
        uint256 _pool
    ) internal {
        uint256 shares;
        if (totalSupply() == 0) {
            shares = _amount;
        } else {
            shares = (_amount * totalSupply()) / _pool;
        }
        _mint(recipient, shares);
    }

    /// @dev Helper function that issues shares based on performance and management fee when a harvest is reported.
    /// @param _harvestedAmount The harvested amount to take fee on.
    /// @param harvestTime Time of harvest (block.timestamp).
    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime)
        internal
    {
        (
            uint256 feeGovernance,
            uint256 feeStrategist
        ) = _calculatePerformanceFee(_harvestedAmount);
        uint256 duration = harvestTime - lastHarvestedAt;

        // Management fee is calculated against the assets before harvest, to make it fair to depositors
        uint256 management_fee = managementFee > 0
            ? (managementFee * (balance() - _harvestedAmount) * duration) /
                SECS_PER_YEAR /
                MAX_BPS
            : 0;
        uint256 totalGovernanceFee = feeGovernance + management_fee;

        // Pool size is the size of the pool minus the fees, this way
        // it's equivalent to sending the tokens as rewards after the harvest
        // and depositing them again
        uint256 _pool = balance() - totalGovernanceFee - feeStrategist;

        // uint != is cheaper and equivalent to >
        if (totalGovernanceFee != 0) {
            _mintSharesFor(treasury, totalGovernanceFee, _pool);
        }

        if (feeStrategist != 0 && strategist != address(0)) {
            /// NOTE: adding feeGovernance backed to _pool as shares would have been issued for it.
            _mintSharesFor(
                strategist,
                feeStrategist,
                _pool + totalGovernanceFee
            );
        }
    }
}",9080,934,"[H-01] StakedCitadel doesn't use correct balance for internal accounting
The StakedCitadel contract's `balance()` function is supposed to return the balance of the vault + the balance of the strategy. But, it only returns the balance of the vault. The balance is used to determine the number of shares that should be minted when depositing funds into the vault and the number of shares that should be burned when withdrawing funds from it.
Since most of the funds will be located in the strategy, the vault's balance will be very low. Some of the issues that arise from this:
  [H-02] StakedCitadel: wrong setupVesting function name
In the `_withdraw` function of the StakedCitadel contract, the setupVesting function of vesting is called, while in the StakedCitadelVester contract, the function name is vest, which will cause the `_withdraw` function to fail, so that the user cannot withdraw the tokens.
  [H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination
`deposit()` -> `_depositFor()` -> `_mintSharesFor()` call doesn't require minimum amount and mints according to the provided amount:
Any deposit lower than total attacker's stake will be fully stolen from the depositor as 0 vault tokens will be issued in this case.",3,"pragma solidity 0.8.12;

import {IERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol"";
import {AddressUpgradeable} from ""openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol"";
import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol"";
import {PausableUpgradeable} from ""openzeppelin-contracts-upgradeable/security/PausableUpgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./lib/SettAccessControl.sol"";

import {IVault} from ""./interfaces/badger/IVault.sol"";
import {IVesting} from ""./interfaces/citadel/IVesting.sol"";
import {IStrategy} from ""./interfaces/badger/IStrategy.sol"";
import {IERC20} from ""./interfaces/erc20/IERC20.sol"";
import {IBadgerGuestlist} from ""./interfaces/badger/IBadgerGuestlist.sol"";



contract StakedCitadel is
    ERC20Upgradeable,
    SettAccessControl,
    PausableUpgradeable,
    ReentrancyGuardUpgradeable
{
    using SafeERC20Upgradeable for IERC20Upgradeable;
    using AddressUpgradeable for address;

    uint256 constant ONE_ETH = 1e18;

    

    IERC20Upgradeable public token; 
    IBadgerGuestlist public guestList; 

    bool public pausedDeposit; 

    address public strategy; 
    address public guardian; 
    address public treasury; 

    address public badgerTree; 
    address public vesting; 

    
    string internal constant _defaultNamePrefix = ""Staked "";
    string internal constant _symbolSymbolPrefix = ""x"";

    
    uint256 public lifeTimeEarned; 
    uint256 public lastHarvestedAt; 
    uint256 public lastHarvestAmount; 
    uint256 public assetsAtLastHarvest; 

    mapping(address => uint256) public additionalTokensEarned;
    mapping(address => uint256) public lastAdditionalTokenAmount;

    
    
    uint256 public performanceFeeGovernance; 
    uint256 public performanceFeeStrategist; 
    uint256 public withdrawalFee; 
    uint256 public managementFee; 

    uint256 public maxPerformanceFee; 
    uint256 public maxWithdrawalFee; 
    uint256 public maxManagementFee; 

    uint256 public toEarnBps; 

    

    uint256 public constant MAX_BPS = 10_000;
    uint256 public constant SECS_PER_YEAR = 31_556_952; 

    uint256 public constant WITHDRAWAL_FEE_HARD_CAP = 200; 
    uint256 public constant PERFORMANCE_FEE_HARD_CAP = 3_000; 
    uint256 public constant MANAGEMENT_FEE_HARD_CAP = 200; 

    

    
    event TreeDistribution(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    
    event Harvested(
        address indexed token,
        uint256 amount,
        uint256 indexed blockNumber,
        uint256 timestamp
    );

    event SetTreasury(address indexed newTreasury);
    event SetStrategy(address indexed newStrategy);
    event SetToEarnBps(uint256 newEarnToBps);
    event SetMaxWithdrawalFee(uint256 newMaxWithdrawalFee);
    event SetMaxPerformanceFee(uint256 newMaxPerformanceFee);
    event SetMaxManagementFee(uint256 newMaxManagementFee);
    event SetGuardian(address indexed newGuardian);
    event SetVesting(address indexed newVesting);
    event SetGuestList(address indexed newGuestList);
    event SetWithdrawalFee(uint256 newWithdrawalFee);
    event SetPerformanceFeeStrategist(uint256 newPerformanceFeeStrategist);
    event SetPerformanceFeeGovernance(uint256 newPerformanceFeeGovernance);
    event SetManagementFee(uint256 newManagementFee);

    event PauseDeposits(address indexed pausedBy);
    event UnpauseDeposits(address indexed pausedBy);

    
    
    
    
    
    
    
    
    
    
    
    
    
    function initialize(
        address _token,
        address _governance,
        address _keeper,
        address _guardian,
        address _treasury,
        address _strategist,
        address _badgerTree,
        address _vesting,
        string memory _name,
        string memory _symbol,
        uint256[4] memory _feeConfig
    ) public initializer whenNotPaused {
        require(_token != address(0)); 
        require(_governance != address(0)); 
        require(_keeper != address(0)); 
        require(_guardian != address(0)); 
        require(_treasury != address(0)); 
        require(_strategist != address(0)); 
        require(_badgerTree != address(0)); 
        require(_vesting != address(0)); 

        
        require(
            _feeConfig[0] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeGovernance too high""
        );
        require(
            _feeConfig[1] <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );
        require(
            _feeConfig[2] <= WITHDRAWAL_FEE_HARD_CAP,
            ""withdrawalFee too high""
        );
        require(
            _feeConfig[3] <= MANAGEMENT_FEE_HARD_CAP,
            ""managementFee too high""
        );

        string memory name;
        string memory symbol;

        
        
        IERC20 namedToken = IERC20(_token);

        if (keccak256(abi.encodePacked(_name)) != keccak256("""")) {
            name = _name;
        } else {
            name = string(
                abi.encodePacked(_defaultNamePrefix, namedToken.name())
            );
        }

        if (keccak256(abi.encodePacked(_symbol)) != keccak256("""")) {
            symbol = _symbol;
        } else {
            symbol = string(
                abi.encodePacked(_symbolSymbolPrefix, namedToken.symbol())
            );
        }

        
        __ERC20_init(name, symbol);
        
        __Pausable_init();
        __ReentrancyGuard_init();

        token = IERC20Upgradeable(_token);
        governance = _governance;
        treasury = _treasury;
        strategist = _strategist;
        keeper = _keeper;
        guardian = _guardian;
        badgerTree = _badgerTree;
        vesting = _vesting;

        lastHarvestedAt = block.timestamp; 

        performanceFeeGovernance = _feeConfig[0];
        performanceFeeStrategist = _feeConfig[1];
        withdrawalFee = _feeConfig[2];
        managementFee = _feeConfig[3];
        maxPerformanceFee = PERFORMANCE_FEE_HARD_CAP; 
        maxWithdrawalFee = WITHDRAWAL_FEE_HARD_CAP; 
        maxManagementFee = MANAGEMENT_FEE_HARD_CAP; 

        toEarnBps = 9_500; 
    }

    

    
    function _onlyAuthorizedPausers() internal view {
        require(
            msg.sender == guardian || msg.sender == governance,
            ""onlyPausers""
        );
    }

    
    function _onlyStrategy() internal view {
        require(msg.sender == strategy, ""onlyStrategy"");
    }

    

    
    
    function version() external pure returns (string memory) {
        return ""1.5"";
    }

    
    
    
    function getPricePerFullShare() public view returns (uint256) {
        if (totalSupply() == 0) {
            return ONE_ETH;
        }
        return (balance() * ONE_ETH) / totalSupply();
    }

    
    
    function balance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    
    
    function available() public view returns (uint256) {
        return (token.balanceOf(address(this)) * toEarnBps) / MAX_BPS;
    }

    

    
    
    
    
    function deposit(uint256 _amount) external whenNotPaused {
        _depositWithAuthorization(_amount, new bytes32[](0));
    }

    
    
    
    
    
    
    function deposit(uint256 _amount, bytes32[] memory proof)
        external
        whenNotPaused
    {
        _depositWithAuthorization(_amount, proof);
    }

    
    
    
    function depositAll() external whenNotPaused {
        _depositWithAuthorization(
            token.balanceOf(msg.sender),
            new bytes32[](0)
        );
    }

    
    
    
    
    
    function depositAll(bytes32[] memory proof) external whenNotPaused {
        _depositWithAuthorization(token.balanceOf(msg.sender), proof);
    }

    
    
    
    
    
    function depositFor(address _recipient, uint256 _amount)
        external
        whenNotPaused
    {
        _depositForWithAuthorization(_recipient, _amount, new bytes32[](0));
    }

    
    
    
    
    
    
    function depositFor(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) external whenNotPaused {
        _depositForWithAuthorization(_recipient, _amount, proof);
    }

    
    
    
    
    function withdraw(uint256 _shares) external whenNotPaused {
        _withdraw(_shares);
    }

    
    
    
    function withdrawAll() external whenNotPaused {
        _withdraw(balanceOf(msg.sender));
    }

    

    
    
    
    
    
    
    
    
    function reportHarvest(uint256 _harvestedAmount) external nonReentrant {
        _onlyStrategy();

        uint256 harvestTime = block.timestamp;
        uint256 assetsAtHarvest = balance() - _harvestedAmount; 

        _handleFees(_harvestedAmount, harvestTime);

        
        lastHarvestAmount = _harvestedAmount;

        
        
        
        
        
        if (assetsAtHarvest != 0) {
            assetsAtLastHarvest = assetsAtHarvest;
        } else if (_harvestedAmount == 0) {
            
            assetsAtLastHarvest = 0;
        }

        lifeTimeEarned = lifeTimeEarned + _harvestedAmount;
        
        lastHarvestedAt = harvestTime;

        emit Harvested(
            address(token),
            _harvestedAmount,
            block.number,
            block.timestamp
        );
    }

    
    
    
    
    
    
    
    
    function reportAdditionalToken(address _token) external nonReentrant {
        _onlyStrategy();
        require(address(token) != _token, ""No want"");
        uint256 tokenBalance = IERC20Upgradeable(_token).balanceOf(
            address(this)
        );

        additionalTokensEarned[_token] =
            additionalTokensEarned[_token] +
            tokenBalance;
        lastAdditionalTokenAmount[_token] = tokenBalance;

        
        uint256 governanceRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeGovernance
        );
        uint256 strategistRewardsFee = _calculateFee(
            tokenBalance,
            performanceFeeStrategist
        );

        IERC20Upgradeable(_token).safeTransfer(treasury, governanceRewardsFee);
        IERC20Upgradeable(_token).safeTransfer(
            strategist,
            strategistRewardsFee
        );

        
        uint256 newBalance = IERC20Upgradeable(_token).balanceOf(address(this));
        IERC20Upgradeable(_token).safeTransfer(badgerTree, newBalance);
        emit TreeDistribution(
            _token,
            newBalance,
            block.number,
            block.timestamp
        );
    }

    

    
    
    
    
    
    function setTreasury(address _treasury) external whenNotPaused {
        _onlyGovernance();
        require(_treasury != address(0), ""Address 0"");

        treasury = _treasury;
        emit SetTreasury(_treasury);
    }

    
    
    
    
    
    
    
    function setStrategy(address _strategy) external whenNotPaused {
        _onlyGovernance();
        require(_strategy != address(0), ""Address 0"");

        
        if (strategy != address(0)) {
            require(
                IStrategy(strategy).balanceOf() == 0,
                ""Please withdrawToVault before changing strat""
            );
        }
        strategy = _strategy;
        emit SetStrategy(_strategy);
    }

    

    
    
    
    
    function setMaxWithdrawalFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= WITHDRAWAL_FEE_HARD_CAP, ""withdrawalFee too high"");

        maxWithdrawalFee = _fees;
        emit SetMaxWithdrawalFee(_fees);
    }

    
    
    
    
    function setMaxPerformanceFee(uint256 _fees) external {
        _onlyGovernance();
        require(
            _fees <= PERFORMANCE_FEE_HARD_CAP,
            ""performanceFeeStrategist too high""
        );

        maxPerformanceFee = _fees;
        emit SetMaxPerformanceFee(_fees);
    }

    
    
    
    
    function setMaxManagementFee(uint256 _fees) external {
        _onlyGovernance();
        require(_fees <= MANAGEMENT_FEE_HARD_CAP, ""managementFee too high"");

        maxManagementFee = _fees;
        emit SetMaxManagementFee(_fees);
    }

    
    
    
    
    function setGuardian(address _guardian) external {
        _onlyGovernance();
        require(_guardian != address(0), ""Address cannot be 0x0"");

        guardian = _guardian;
        emit SetGuardian(_guardian);
    }

    
    
    
    
    function setVesting(address _vesting) external {
        _onlyGovernance();
        require(_vesting != address(0), ""Address cannot be 0x0"");

        vesting = _vesting;
        emit SetVesting(_vesting);
    }

    

    
    
    
    
    function setToEarnBps(uint256 _newToEarnBps) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_newToEarnBps <= MAX_BPS, ""toEarnBps should be <= MAX_BPS"");

        toEarnBps = _newToEarnBps;
        emit SetToEarnBps(_newToEarnBps);
    }

    
    
    
    
    
    function setGuestList(address _guestList) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        guestList = IBadgerGuestlist(_guestList);
        emit SetGuestList(_guestList);
    }

    
    
    
    
    
    
    function setWithdrawalFee(uint256 _withdrawalFee) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_withdrawalFee <= maxWithdrawalFee, ""Excessive withdrawal fee"");
        withdrawalFee = _withdrawalFee;
        emit SetWithdrawalFee(_withdrawalFee);
    }

    
    
    
    
    
    
    
    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeStrategist <= maxPerformanceFee,
            ""Excessive strategist performance fee""
        );
        performanceFeeStrategist = _performanceFeeStrategist;
        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);
    }

    
    
    
    
    
    
    
    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)
        external
        whenNotPaused
    {
        _onlyGovernanceOrStrategist();
        require(
            _performanceFeeGovernance <= maxPerformanceFee,
            ""Excessive governance performance fee""
        );
        performanceFeeGovernance = _performanceFeeGovernance;
        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);
    }

    
    
    
    
    
    
    function setManagementFee(uint256 _fees) external whenNotPaused {
        _onlyGovernanceOrStrategist();
        require(_fees <= maxManagementFee, ""Excessive management fee"");
        managementFee = _fees;
        emit SetManagementFee(_fees);
    }

    

    
    
    
    function withdrawToVault() external {
        _onlyGovernanceOrStrategist();
        IStrategy(strategy).withdrawToVault();
    }

    
    
    
    
    
    
    function emitNonProtectedToken(address _token) external {
        _onlyGovernanceOrStrategist();

        IStrategy(strategy).emitNonProtectedToken(_token);
    }

    
    
    
    
    
    function sweepExtraToken(address _token) external {
        _onlyGovernanceOrStrategist();
        require(address(token) != _token, ""No want"");

        IStrategy(strategy).withdrawOther(_token);
        
        
        
        IERC20Upgradeable(_token).safeTransfer(
            governance,
            IERC20Upgradeable(_token).balanceOf(address(this))
        );
    }

    
    
    
    
    
    function earn() external {
        require(!pausedDeposit, ""pausedDeposit""); 
        _onlyAuthorizedActors();

        uint256 _bal = available();
        token.safeTransfer(strategy, _bal);
        IStrategy(strategy).earn();
    }

    
    
    function pauseDeposits() external {
        _onlyAuthorizedPausers();
        pausedDeposit = true;
        emit PauseDeposits(msg.sender);
    }

    
    
    function unpauseDeposits() external {
        _onlyGovernance();
        pausedDeposit = false;
        emit UnpauseDeposits(msg.sender);
    }

    
    
    function pause() external {
        _onlyAuthorizedPausers();
        _pause();
    }

    
    
    function unpause() external {
        _onlyGovernance();
        _unpause();
    }

    

    
    
    
    
    
    
    function _depositFor(address _recipient, uint256 _amount)
        internal
        nonReentrant
    {
        require(_recipient != address(0), ""Address 0"");
        require(_amount != 0, ""Amount 0"");
        require(!pausedDeposit, ""pausedDeposit""); 

        uint256 _pool = balance();
        uint256 _before = token.balanceOf(address(this));
        token.safeTransferFrom(msg.sender, address(this), _amount);
        uint256 _after = token.balanceOf(address(this));
        _mintSharesFor(_recipient, _after - _before, _pool);
    }

    
    function _depositWithAuthorization(uint256 _amount, bytes32[] memory proof)
        internal
    {
        _depositForWithAuthorization(msg.sender, _amount, proof);
    }

    
    
    function _depositForWithAuthorization(
        address _recipient,
        uint256 _amount,
        bytes32[] memory proof
    ) internal {
        if (address(guestList) != address(0)) {
            require(
                guestList.authorized(_recipient, _amount, proof),
                ""GuestList: Not Authorized""
            );
        }
        _depositFor(_recipient, _amount);
    }

    
    
    
    
    
    
    function _withdraw(uint256 _shares) internal nonReentrant {
        require(_shares != 0, ""0 Shares"");

        uint256 r = (balance() * _shares) / totalSupply();
        _burn(msg.sender, _shares);

        
        uint256 b = token.balanceOf(address(this));
        if (b < r) {
            uint256 _toWithdraw = r - b;
            IStrategy(strategy).withdraw(_toWithdraw);
            uint256 _after = token.balanceOf(address(this));
            uint256 _diff = _after - b;
            if (_diff < _toWithdraw) {
                r = b + _diff;
            }
        }

        uint256 _fee = _calculateFee(r, withdrawalFee);
        uint256 _amount = r - _fee;

        
        IVesting(vesting).setupVesting(msg.sender, _amount, block.timestamp);
        token.safeTransfer(vesting, _amount);

        
        
        if(_fee > 0) {
            _mintSharesFor(treasury, _fee, balance() - _fee);
        }
    }

    
    
    
    
    function _calculateFee(uint256 amount, uint256 feeBps)
        internal
        pure
        returns (uint256)
    {
        if (feeBps == 0) {
            return 0;
        }
        uint256 fee = (amount * feeBps) / MAX_BPS;
        return fee;
    }

    
    
    
    function _calculatePerformanceFee(uint256 _amount)
        internal
        view
        returns (uint256, uint256)
    {
        uint256 governancePerformanceFee = _calculateFee(
            _amount,
            performanceFeeGovernance
        );

        uint256 strategistPerformanceFee = _calculateFee(
            _amount,
            performanceFeeStrategist
        );

        return (governancePerformanceFee, strategistPerformanceFee);
    }

    
    
    
    
    function _mintSharesFor(
        address recipient,
        uint256 _amount,
        uint256 _pool
    ) internal {
        uint256 shares;
        if (totalSupply() == 0) {
            shares = _amount;
        } else {
            shares = (_amount * totalSupply()) / _pool;
        }
        _mint(recipient, shares);
    }

    
    
    
    function _handleFees(uint256 _harvestedAmount, uint256 harvestTime)
        internal
    {
        (
            uint256 feeGovernance,
            uint256 feeStrategist
        ) = _calculatePerformanceFee(_harvestedAmount);
        uint256 duration = harvestTime - lastHarvestedAt;

        
        uint256 management_fee = managementFee > 0
            ? (managementFee * (balance() - _harvestedAmount) * duration) /
                SECS_PER_YEAR /
                MAX_BPS
            : 0;
        uint256 totalGovernanceFee = feeGovernance + management_fee;

        
        
        
        uint256 _pool = balance() - totalGovernanceFee - feeStrategist;

        
        if (totalGovernanceFee != 0) {
            _mintSharesFor(treasury, totalGovernanceFee, _pool);
        }

        if (feeStrategist != 0 && strategist != address(0)) {
            
            _mintSharesFor(
                strategist,
                feeStrategist,
                _pool + totalGovernanceFee
            );
        }
    }
}",4603,3,0,"{
  ""ReviewingTheCode"": ""The code is a Solidity smart contract named StakedCitadel, which appears to be a yield-generating vault for a token called Citadel. It follows the ERC20 standard with upgradability support and implements various security measures. The contract allows users to deposit tokens, which are then delegated to a strategy contract for yield generation. It includes fee mechanisms, access controls, and pause functionality for security."",
  
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""StakedCitadel"",
    ""Purpose"": ""A yield-generating vault that wraps tokens (likely Citadel) and issues shares (xCitadel) representing ownership of the underlying assets plus generated yield. It delegates actual yield strategies to a separate contract."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [
        ""ERC20Upgradeable"",
        ""SettAccessControl"",
        ""PausableUpgradeable"",
        ""ReentrancyGuardUpgradeable""
      ],
      ""Imports"": [
        ""IERC20Upgradeable"",
        ""AddressUpgradeable"",
        ""SafeERC20Upgradeable"",
        ""ERC20Upgradeable"",
        ""PausableUpgradeable"",
        ""ReentrancyGuardUpgradeable"",
        ""SettAccessControl"",
        ""IVault"",
        ""IVesting"",
        ""IStrategy"",
        ""IERC20"",
        ""IBadgerGuestlist""
      ]
    },
    ""StateVariables"": [
      {
        ""Name"": ""token"",
        ""Type"": ""IERC20Upgradeable"",
        ""Purpose"": ""The token being staked in the vault""
      },
      {
        ""Name"": ""guestList"",
        ""Type"": ""IBadgerGuestlist"",
        ""Purpose"": ""Access control for deposits, enabling whitelist functionality""
      },
      {
        ""Name"": ""pausedDeposit"",
        ""Type"": ""bool"",
        ""Purpose"": ""Flag to specifically pause deposit functionality""
      },
      {
        ""Name"": ""strategy"",
        ""Type"": ""address"",
        ""Purpose"": ""Address of the strategy contract that manages the assets for yield generation""
      },
      {
        ""Name"": ""guardian"",
        ""Type"": ""address"",
        ""Purpose"": ""Address with limited administrative capabilities, primarily for emergency responses""
      },
      {
        ""Name"": ""treasury"",
        ""Type"": ""address"",
        ""Purpose"": ""Destination for fee collection""
      },
      {
        ""Name"": ""badgerTree"",
        ""Type"": ""address"",
        ""Purpose"": ""Distribution mechanism for rewards""
      },
      {
        ""Name"": ""vesting"",
        ""Type"": ""address"",
        ""Purpose"": ""Contract handling the vesting schedule for withdrawals""
      },
      {
        ""Name"": ""lifeTimeEarned"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Total amount of tokens earned by the vault over its lifetime""
      },
      {
        ""Name"": ""lastHarvestedAt"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Timestamp of the last harvest operation""
      },
      {
        ""Name"": ""lastHarvestAmount"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Amount of tokens harvested in the last harvest operation""
      },
      {
        ""Name"": ""assetsAtLastHarvest"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Total assets in the vault at the time of the last harvest""
      },
      {
        ""Name"": ""performanceFeeGovernance"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Percentage of yield allocated as fees to governance (in basis points)""
      },
      {
        ""Name"": ""performanceFeeStrategist"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Percentage of yield allocated as fees to the strategist (in basis points)""
      },
      {
        ""Name"": ""withdrawalFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Fee charged on withdrawals (in basis points)""
      },
      {
        ""Name"": ""managementFee"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Annual fee for managing the assets (in basis points)""
      },
      {
        ""Name"": ""toEarnBps"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Percentage of funds to allocate to the strategy for earning yield (in basis points)""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""initialize"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Initializes the upgradeable contract with required parameters"",
        ""Parameters"": [
          ""address _token - The token to be staked"",
          ""address _governance - Address with highest privileges"",
          ""address _keeper - Address allowed to call certain maintenance functions"",
          ""address _guardian - Address with emergency powers"",
          ""address _treasury - Where fees are sent"",
          ""address _strategist - Address of the strategy creator/manager"",
          ""address _badgerTree - Where rewards are distributed from"",
          ""address _vesting - Contract handling withdrawal schedules"",
          ""string memory _name - Name for the token (optional)"",
          ""string memory _symbol - Symbol for the token (optional)"",
          ""uint256[4] memory _feeConfig - Array of fee configurations""
        ],
        ""Returns"": []
      },
      {
        ""Name"": ""deposit"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens into the vault, minting shares to the sender"",
        ""Parameters"": [""uint256 _amount - Amount of tokens to deposit""],
        ""Returns"": []
      },
      {
        ""Name"": ""deposit (with proof)"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens with a whitelist verification proof"",
        ""Parameters"": [
          ""uint256 _amount - Amount of tokens to deposit"",
          ""bytes32[] memory proof - Merkle proof for whitelist verification""
        ],
        ""Returns"": []
      },
      {
        ""Name"": ""depositAll"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits all tokens from sender's wallet"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""depositFor"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Deposits tokens on behalf of another user"",
        ""Parameters"": [
          ""address _recipient - Address receiving the shares"",
          ""uint256 _amount - Amount of tokens to deposit""
        ],
        ""Returns"": []
      },
      {
        ""Name"": ""withdraw"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws tokens by burning shares, with vesting schedule"",
        ""Parameters"": [""uint256 _shares - Number of shares to redeem""],
        ""Returns"": []
      },
      {
        ""Name"": ""withdrawAll"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Withdraws all tokens owned by the sender"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""reportHarvest"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Records yield harvested by the strategy, handles fee distribution"",
        ""Parameters"": [""uint256 _harvestedAmount - Amount of yield harvested""],
        ""Returns"": []
      },
      {
        ""Name"": ""reportAdditionalToken"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Handles extra tokens accumulated by the strategy"",
        ""Parameters"": [""address _token - Address of the additional token""],
        ""Returns"": []
      },
      {
        ""Name"": ""earn"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Transfers available funds to the strategy for yield generation"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""getPricePerFullShare"",
        ""Visibility"": ""public view"",
        ""Purpose"": ""Calculates the value of one share in terms of the underlying token"",
        ""Parameters"": [],
        ""Returns"": [""uint256 - Price per share in wei""]
      }
    ]
  },
  
  ""ExternalInteractions"": [
    ""IStrategy - The strategy contract that receives funds and generates yield"",
    ""IVesting - Contract that handles token vesting schedules for withdrawals"",
    ""IBadgerGuestlist - Whitelist contract for controlling who can deposit"",
    ""IERC20/IERC20Upgradeable - The underlying token contract""
  ],
  
  ""SpecialMechanisms"": [
    ""Upgradeable pattern using OpenZeppelin's upgradeable contracts"",
    ""Role-based access control with multiple privilege levels (governance, strategist, keeper, guardian)"",
    ""Fee system with performance, management, and withdrawal fees"",
    ""Vesting mechanism for withdrawals"",
    ""Guestlist (whitelist) mechanism for controlling deposits"",
    ""Harvest reporting system for yield accounting"",
    ""Emergency pause functionality with different pause levels""
  ],
  
  ""Questions"": [
    ""How is the SettAccessControl contract implemented? It's imported but its implementation isn't visible."",
    ""What happens if the strategy contract fails to withdraw the requested amount? There's a check for insufficient withdrawals but potential impacts aren't clear."",
    ""How does the vesting mechanism work in detail? The contract transfers to the vesting contract but the actual vesting logic isn't shown."",
    ""Are there any potential issues with the fee calculations, especially around precision loss?"",
    ""What prevents a malicious strategist from reporting false harvests to manipulate fees?"",
    ""How is 'balance' calculated for strategies that might use multiple protocols or have complex positions?"",
    ""Is there any mechanism to recover tokens if they're sent directly to the contract rather than through the deposit functions?""
  ]
}","{
  ""task_list"": [
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Thoroughly review reentrancy protection on critical functions like deposit, withdraw, and reportHarvest"",
        ""Verify SafeERC20Upgradeable library usage for all token transfers to prevent potential transfer failures"",
        ""Check for potential integer overflow/underflow risks in fee calculations and share minting"",
        ""Analyze the _withdraw function for potential edge cases in withdrawal logic"",
        ""Validate input validation checks, especially in initialize and setter functions""
      ]
    },
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Audit the SettAccessControl implementation and its inherited access control mechanisms"",
        ""Review the granularity and scope of different roles (governance, strategist, keeper, guardian)"",
        ""Verify that sensitive functions have appropriate access modifiers"",
        ""Check for potential privilege escalation vulnerabilities"",
        ""Ensure emergency pause and unpause mechanisms are properly secured""
      ]
    },
    {
      ""Area"": ""External Interactions"",
      ""Tasks"": [
        ""Analyze interaction points with IStrategy contract for potential manipulation risks"",
        ""Review the IBadgerGuestlist implementation and authorization mechanism"",
        ""Verify the safety of external contract calls in reportHarvest and reportAdditionalToken"",
        ""Check for potential oracle or price manipulation risks"",
        ""Validate the vesting contract interaction in withdrawal process""
      ]
    },
    {
      ""Area"": ""Fee Mechanisms"",
      ""Tasks"": [
        ""Audit fee calculation logic in _calculateFee and _handleFees functions"",
        ""Verify hard caps on performance, withdrawal, and management fees"",
        ""Check for potential precision loss in fee calculations"",
        ""Ensure fee distribution logic is transparent and fair"",
        ""Review the impact of fees on overall token economics""
      ]
    },
    {
      ""Area"": ""Token Economics and Shares"",
      ""Tasks"": [
        ""Analyze share minting and burning logic in _mintSharesFor function"",
        ""Verify getPricePerFullShare calculation for potential manipulation"",
        ""Check the toEarnBps mechanism for potential risks"",
        ""Review the initial share allocation strategy"",
        ""Validate the handling of edge cases (e.g., zero total supply)""
      ]
    },
    {
      ""Area"": ""Upgradeability and Initialization"",
      ""Tasks"": [
        ""Thoroughly review the initialize function for comprehensive parameter validation"",
        ""Check for potential reinitialization vulnerabilities"",
        ""Verify proper use of OpenZeppelin upgradeable contracts"",
        ""Ensure all critical parameters have appropriate checks and limits"",
        ""Review the version() function for potential information disclosure""
      ]
    },
    {
      ""Area"": ""Emergency and Pause Mechanisms"",
      ""Tasks"": [
        ""Audit the pause and unpause functionality across different contract states"",
        ""Verify the pausedDeposit mechanism and its interaction with deposit functions"",
        ""Check emergency withdrawal capabilities"",
        ""Review the guardian and governance roles in emergency scenarios"",
        ""Ensure proper events are emitted during pause/unpause actions""
      ]
    },
    {
      ""Area"": ""Gas Optimization and Efficiency"",
      ""Tasks"": [
        ""Analyze gas consumption of critical functions"",
        ""Review storage variable packing and optimization"",
        ""Check for unnecessary computations in view and external functions"",
        ""Verify the efficiency of fee calculations and share minting"",
        ""Identify potential gas-saving refactoring opportunities""
      ]
    },
    {
      ""Area"": ""Compliance and Standard Adherence"",
      ""Tasks"": [
        ""Verify full ERC20 standard compliance"",
        ""Check naming conventions and metadata handling"",
        ""Review implementation of upgradeable token standards"",
        ""Ensure proper event emissions for all critical state changes"",
        ""Validate interface implementations for external contracts""
      ]
    }
  ]
}","{
""Findings"": [
{
""Issue"": ""Trust and Access Control Issues in Harvest Reporting"",
""Severity"": ""High"",
""Description"": ""The reportHarvest function lacks proper validation of reported harvest amounts and relies heavily on the strategy's honesty. While the function checks that the caller is the strategy using _onlyStrategy, there's no verification of the reported harvest amount against actual balance changes. The calculation of assetsAtHarvest by subtracting the reported amount from current balance is vulnerable to manipulation."",
""Impact"": ""A malicious or compromised strategy could report inflated harvest amounts, leading to incorrect fee calculations, inflated performance metrics, and potential theft of funds through manipulated fee distributions. This could result in unfair fee payments and economic attacks on the protocol."",
""Location"": ""reportHarvest function""
},
{
""Issue"": ""Withdrawal Process Vulnerabilities"",
""Severity"": ""High"",
""Description"": ""Multiple critical issues exist in the withdrawal process: 1) Lack of slippage protection when withdrawing from strategy, 2) Incorrect fee calculations based on post-transfer balances, 3) No validation of minimum received amounts, and 4) Forced vesting through external contract without proper safety checks."",
""Impact"": ""Users may receive significantly fewer tokens than expected, face unexpected vesting locks, or lose funds due to incorrect fee calculations. If the vesting contract is compromised, all withdrawals could be at risk."",
""Location"": ""_withdraw function""
},
{
""Issue"": ""Centralization and Governance Risks"",
""Severity"": ""Medium"",
""Description"": ""The contract gives extensive privileges to governance, strategist, and guardian roles without proper timelocks or checks. These roles can change critical parameters like fees, strategy contracts, and pause functionality immediately. There's also a complex dual pause system that could lead to confusion."",
""Impact"": ""If privileged addresses are compromised, an attacker could set maximum fees, drain funds through a malicious strategy, or deny service through pausing. Users have no time to exit before unfavorable changes take effect."",
""Location"": ""Administrative functions including setStrategy, setWithdrawalFee, pause functions""
},
{
""Issue"": ""Fee Calculation and Distribution Issues"",
""Severity"": ""Medium"",
""Description"": ""The contract has multiple issues with fee handling: 1) Precision loss in calculations using BPS system, 2) Inconsistent fee distribution between different functions, 3) Share dilution through fee payments, and 4) Complex fee calculations that could lead to unintended behavior."",
""Impact"": ""Users might pay incorrect fees, experience share dilution, or face inconsistent treatment depending on the type of operation performed. The treasury might receive more or fewer shares than intended."",
""Location"": ""_calculateFee function, _handleFees function, fee distribution logic""
},
{
""Issue"": ""Balance and Share Calculation Vulnerabilities"",
""Severity"": ""Low"",
""Description"": ""The contract shows several issues with balance and share calculations: 1) Potential overflow in extreme cases, 2) Precision loss in share calculations, 3) No protection against flash loan manipulation, and 4) Incomplete validation of token transfers."",
""Impact"": ""Users might receive incorrect amounts of shares, especially for small deposits. The system could be vulnerable to manipulation through flash loans or direct token transfers."",
""Location"": ""_mintSharesFor function, balance calculations throughout contract""
}
],
""IssueNumber"": 43,
""OutputList"": 5
}",1081.0,74228.0,111.0,"### **Comparison and Evaluation**

---

#### **[H-01] StakedCitadel doesn't use correct balance for internal accounting**

**Report Description**:  
The `balance()` function in the StakedCitadel contract is intended to return the combined balance of the vault and the strategy. However, it only returns the vault's balance. Since most funds are located in the strategy, the vault's balance will be very low. This incorrect accounting affects the number of shares minted during deposits and burned during withdrawals, leading to potential discrepancies in share calculations and user funds.

**Match in Response List**:  
Matches with the issue titled **""Balance and Share Calculation Vulnerabilities""**.

**Validation**:  
**Partially Correct**. The response identifies issues with balance and share calculations, including potential overflow and precision loss. However, it does not explicitly address the specific problem of the `balance()` function failing to include the strategy's balance. While the response covers related vulnerabilities, it misses the critical detail of incomplete balance accounting, which is the core issue in this case.

---

#### **[H-02] StakedCitadel: wrong setupVesting function name**

**Report Description**:  
In the `_withdraw` function of the StakedCitadel contract, the `setupVesting` function of the vesting contract is called. However, the correct function name in the StakedCitadelVester contract is `vest`. This mismatch will cause the `_withdraw` function to fail, preventing users from withdrawing their tokens.

**Match in Response List**:  
Matches with the issue titled **""Withdrawal Process Vulnerabilities""**.

**Validation**:  
**Correct**. The response highlights critical issues in the withdrawal process, including forced vesting through an external contract without proper safety checks. The mismatch in function names directly impacts the withdrawal process, causing it to fail. The response accurately captures the risks associated with incorrect vesting logic, aligning with the reported issue.

---

#### **[H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination**

**Report Description**:  
The `deposit()` -> `_depositFor()` -> `_mintSharesFor()` call does not require a minimum deposit amount and mints shares according to the provided amount. If the deposit is lower than the total attacker's stake, the depositor will receive 0 vault tokens, effectively stealing their funds. This vulnerability allows the first depositor to manipulate the vault token denomination and exploit subsequent depositors.

**Match in Response List**:  
Matches with the issue titled **""Balance and Share Calculation Vulnerabilities""**.

**Validation**:  
**Partially Correct**. The response mentions issues with share calculations and potential manipulation through flash loans or direct token transfers. However, it does not explicitly address the specific attack vector of the first depositor depressing the vault token denomination. While the response covers related vulnerabilities, it misses the critical detail of this exploitation mechanism.

---

### **Summary of Matches and Gaps**

**Correct Matches**:

- **[H-02] StakedCitadel: wrong setupVesting function name**

**Partially Correct Matches**:

- **[H-01] StakedCitadel doesn't use correct balance for internal accounting**
- **[H-03] StakedCitadel depositors can be attacked by the first depositor with depressing of vault token denomination**

**Missed Issues from Issue Report**:

- *None*

---

### **Overall Assessment**

The `response_list` provides a reasonable coverage of the issues reported in `issue`, but there are gaps in specificity and detail. While the responses correctly identify broader categories of vulnerabilities (e.g., withdrawal process issues, balance and share calculation vulnerabilities), they often miss the precise exploitation mechanisms or critical details described in the issue report. This highlights the need for more granular analysis and explicit identification of specific vulnerabilities in the responses.","```
1. Withdrawal Process Vulnerabilities
```","To calculate the **Average Precision (AP)** for the given query, follow these steps:

1. **Identify the ranks at which the true positives appear in the ranked list of predictions**:
   - The true positive is ""Withdrawal Process Vulnerabilities"".
   - In the ranked list of predictions, ""Withdrawal Process Vulnerabilities"" appears at rank 2.

2. **Calculate the precision at that rank**:
   - Precision at rank 2 (\( P@2 \)) is calculated as the number of true positives up to rank 2 divided by the rank itself.
   - Since there is only one true positive up to rank 2, \( P@2 = \frac{1}{2} = 0.5 \).

3. **Average the precision values for all true positives**:
   - Since there is only one true positive, the **Average Precision (AP)** is simply the precision at that rank.

**Output**:
- **Average Precision (AP)**: 0.5"
Funding.sol,"// SPDX-License-Identifier: MIT
pragma solidity 0.8.12;

import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./interfaces/badger/IVault.sol"";
import ""./interfaces/erc20/IERC20.sol"";
import ""./lib/GlobalAccessControlManaged.sol"";
import ""./lib/SafeERC20.sol"";
import ""./interfaces/citadel/IMedianOracle.sol"";

/**
 * @notice Sells a token at a predetermined price to whitelisted buyers.
 * TODO: Better revert strings
 */
contract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {
    using SafeERC20 for IERC20;

    // Roles used from GAC
    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =
        keccak256(""CONTRACT_GOVERNANCE_ROLE"");
    bytes32 public constant POLICY_OPERATIONS_ROLE =
        keccak256(""POLICY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(""TREASURY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_VAULT_ROLE =
        keccak256(""TREASURY_VAULT_ROLE"");
    bytes32 public constant KEEPER_ROLE = keccak256(""KEEPER_ROLE"");

    uint256 public constant MAX_BPS = 10000;

    IERC20 public citadel; /// token to distribute (in vested xCitadel form)
    IVault public xCitadel; /// wrapped citadel form that is actually distributed
    IERC20 public asset; /// token to take in WBTC / bibbtc LP / CVX / bveCVX

    uint256 public citadelPriceInAsset; /// asset per citadel price eg. 1 WBTC (8 decimals) = 40,000 CTDL ==> price = 10^8 / 40,000
    uint256 public minCitadelPriceInAsset; /// Lower bound on expected citadel price in asset terms. Used as circuit breaker oracle.
    uint256 public maxCitadelPriceInAsset; /// Upper bound on expected citadel price in asset terms. Used as circuit breaker oracle.
    bool public citadelPriceFlag; /// Flag citadel price for review by guardian if it exceeds min and max bounds;

    uint256 public assetDecimalsNormalizationValue;

    address public citadelPriceInAssetOracle;
    address public saleRecipient;

    struct FundingParams {
        uint256 discount;
        uint256 minDiscount;
        uint256 maxDiscount;
        address discountManager;
        uint256 assetCumulativeFunded; /// persistent sum of asset amount in over lifetime of contract.
        uint256 assetCap; /// Max asset token that can be taken in by the contract (defines the cap for citadel sold)
    }

    FundingParams public funding;

    /// ==================
    /// ===== Events =====
    /// ==================

    // TODO: we should conform to some interface here
    event Deposit(
        address indexed buyer,
        uint256 assetIn,
        uint256 citadelOutValue
    );

    event CitadelPriceInAssetUpdated(uint256 citadelPrice);

    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);
    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);

    event SaleRecipientUpdated(address indexed recipient);
    event AssetCapUpdated(uint256 assetCap);

    event Sweep(address indexed token, uint256 amount);
    event ClaimToTreasury(address indexed token, uint256 amount);

    modifier onlyCitadelPriceInAssetOracle() {
        require(
            msg.sender == citadelPriceInAssetOracle,
            ""onlyCitadelPriceInAssetOracle""
        );
        _;
    }

    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);
    event DiscountSet(uint256 discount);
    event DiscountManagerSet(address discountManager);

    /// =======================
    /// ===== Initializer =====
    /// =======================

    /**
     * @notice Initializer.
     * @param _gac Global access control
     * @param _citadel The token this contract will return in a trade
     * @param _asset The token this contract will receive in a trade
     * @param _xCitadel Staked citadel, citadel will be granted to funders in this form
     * @param _saleRecipient The address receiving the proceeds of the sale - will be citadel multisig
     * @param _assetCap The max asset that the contract can take
     */
    function initialize(
        address _gac,
        address _citadel,
        address _asset,
        address _xCitadel,
        address _saleRecipient,
        address _citadelPriceInAssetOracle,
        uint256 _assetCap
    ) external initializer {
        require(
            _saleRecipient != address(0),
            ""Funding: 0 sale""
        );
        require(
            _citadelPriceInAssetOracle != address(0),
            ""Funding: 0 oracle""
        );

        __GlobalAccessControlManaged_init(_gac);
        __ReentrancyGuard_init();

        citadel = IERC20(_citadel);
        xCitadel = IVault(_xCitadel);
        asset = IERC20(_asset);
        saleRecipient = _saleRecipient;

        citadelPriceInAssetOracle = _citadelPriceInAssetOracle;

        funding = FundingParams(0, 0, 0, address(0), 0, _assetCap);

        assetDecimalsNormalizationValue = 10**asset.decimals();

        // No circuit breaker on price by default
        minCitadelPriceInAsset = 0;
        maxCitadelPriceInAsset = type(uint256).max;

        // Allow to deposit in vault
        // Done last for reEntrancy concerns
        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);
    }

    modifier onlyWhenPriceNotFlagged() {
        require(
            citadelPriceFlag == false,
            ""Funding: citadel price from oracle flagged and pending review""
        );
        _;
    }

    /// ==========================
    /// ===== Public actions =====
    /// ==========================

    /**
     * @notice Exchange `_assetAmountIn` of `asset` for `citadel`
     * @param _assetAmountIn Amount of `asset` to give
     * @param _minCitadelOut ID of DAO to vote for
     * @return citadelAmount_ Amount of `xCitadel` bought
     */
    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)
        external
        onlyWhenPriceNotFlagged
        gacPausable
        nonReentrant
        returns (uint256 citadelAmount_)
    {
        require(_assetAmountIn > 0, ""_assetAmountIn must not be 0"");
        require(
            funding.assetCumulativeFunded + _assetAmountIn <= funding.assetCap,
            ""asset funding cap exceeded""
        );
        funding.assetCumulativeFunded = funding.assetCumulativeFunded + _assetAmountIn;
        // Take in asset from user
        citadelAmount_ = getAmountOut(_assetAmountIn);
        require(citadelAmount_ >= _minCitadelOut, ""minCitadelOut"");

        asset.safeTransferFrom(msg.sender, saleRecipient, _assetAmountIn);
        
        // Deposit xCitadel and send to user
        // TODO: Check gas costs. How does this relate to market buying if you do want to deposit to xCTDL?
        xCitadel.depositFor(msg.sender, citadelAmount_);

        emit Deposit(
            msg.sender,
            _assetAmountIn,
            citadelAmount_
        );
    }

    /// =======================
    /// ===== Public view =====
    /// =======================

    /**
     * @notice Get the amount received when exchanging `asset`
     * @param _assetAmountIn Amount of `asset` to exchange
     * @return citadelAmount_ Amount of `citadel` received
     */
    function getAmountOut(uint256 _assetAmountIn)
        public
        view
        returns (uint256 citadelAmount_)
    {
        uint256 citadelAmountWithoutDiscount = _assetAmountIn * citadelPriceInAsset;

        if (funding.discount > 0) {
            citadelAmount_ =
                (citadelAmountWithoutDiscount * MAX_BPS) /
                (MAX_BPS - funding.discount);
        }

        citadelAmount_ = citadelAmount_ / assetDecimalsNormalizationValue;
    }

    /**
     * @notice Get the amount received when exchanging `asset`, in terms of xCitadel at current price per share
     * @param _assetAmountIn Amount of `asset` to exchange
     * @return xCitadelAmount_ Amount of `xCitadel` received at current price per share
     */
    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {
        uint citadelAmount = getAmountOut(_assetAmountIn);
        xCitadelAmount_ = citadelAmount * 10**citadel.decimals() / xCitadel.getPricePerFullShare();
    }

    /**
     * @notice Check how much `asset` can still be taken in, based on cap and cumulative amount funded
     * @return limitLeft_ Amount of `asset` that can still be exchanged for citadel
     */
    function getRemainingFundable() external view returns (uint256 limitLeft_) {
        uint256 assetCumulativeFunded = funding.assetCumulativeFunded;
        uint256 assetCap = funding.assetCap;
        if (assetCumulativeFunded < assetCap) {
            limitLeft_ = assetCap - assetCumulativeFunded;
        }
    }

    /**
     * @notice Get all funding params
     * @return funding all funding params
     */
    function getFundingParams() external view returns (FundingParams memory) {
        return funding;
    }

    /**
     * @notice Convenience function to get current discount rate
     * @return discount current discount rate
     */
    function getDiscount() external view returns (uint256) {
        return funding.discount;
    }

    /// ==============================
    /// ===== Policy Ops actions =====
    /// ==============================

    /**
     * @notice Set discount manually, within the constraints of min and max discount values
     * @dev managed by policy operations for rapid response to market conditions
     * @param _discount active discount (in bps)
     */
    function setDiscount(uint256 _discount)
        external
        gacPausable
        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)
    {
        require(_discount >= funding.minDiscount, ""discount < minDiscount"");
        require(_discount <= funding.maxDiscount, ""discount > maxDiscount"");

        funding.discount = _discount;

        emit DiscountSet(_discount);
    }

    function clearCitadelPriceFlag()
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        citadelPriceFlag = false;
    }

    /**
     * @notice Modify the max asset amount that this contract can take. Managed by policy governance.
     * @dev This is cumulative asset cap, so must take into account the asset amount already funded.
     * @param _assetCap New max cumulatiive amountIn
     */
    function setAssetCap(uint256 _assetCap)
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        require(
            _assetCap > funding.assetCumulativeFunded,
            ""cannot decrease cap below global sum of assets in""
        );
        funding.assetCap = _assetCap;
        emit AssetCapUpdated(_assetCap);
    }

    /// ================================
    /// ===== Treasury Ops actions =====
    /// ================================

    /**
     * @notice Transfers out any tokens accidentally sent to the contract. Can only be called by owner
     * @dev The contract transfers all `asset` directly to `saleRecipient` during a sale so it's safe
     *      to sweep `asset`. For `citadel`, the function only sweeps the extra amount
     *      (current contract balance - amount left to be claimed)
     * @param _token The token to sweep
     */
    function sweep(address _token)
        external
        gacPausable
        nonReentrant
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount > 0, ""nothing to sweep"");
        require(
            _token != address(asset),
            ""cannot sweep funding asset, use claimAssetToTreasury()""
        );

        emit Sweep(_token, amount);
        IERC20(_token).safeTransfer(saleRecipient, amount);
    }

    /// @notice Claim accumulated asset token to treasury
    /// @dev We let assets accumulate and batch transfer to treasury (rather than transfer atomically on each deposi)t for user gas savings
    function claimAssetToTreasury()
        external
        gacPausable
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = asset.balanceOf(address(this));
        require(amount > 0, ""nothing to claim"");
        asset.safeTransfer(saleRecipient, amount);

        emit ClaimToTreasury(address(asset), amount);
    }

    /// ==============================
    /// ===== Governance actions =====
    /// ==============================

    /**
     * @notice Set minimum and maximum discount
     * @dev managed by contract governance to place constraints around the parameter for policy operations to play within
     * @param _minDiscount minimum discount (in bps)
     * @param _maxDiscount maximum discount (in bps)
     */
    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(_maxDiscount < MAX_BPS , ""maxDiscount >= MAX_BPS"");
        funding.minDiscount = _minDiscount;
        funding.maxDiscount = _maxDiscount;

        emit DiscountLimitsSet(_minDiscount, _maxDiscount);
    }

    /**
     * @notice Set a discount manager address
     * @dev This is intended to be used for an automated discount manager contract to supplement or replace manual calls
     * @param _discountManager discount manager address
     */
    function setDiscountManager(address _discountManager)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        funding.discountManager = _discountManager;

        emit DiscountManagerSet(_discountManager);
    }

    function setSaleRecipient(address _saleRecipient)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(
            _saleRecipient != address(0),
            ""Funding: sale recipient should not be zero""
        );

        saleRecipient = _saleRecipient;
        emit SaleRecipientUpdated(_saleRecipient);
    }

    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        minCitadelPriceInAsset = _minPrice;
        maxCitadelPriceInAsset = _maxPrice;

        emit CitadelPriceBoundsSet(_minPrice, _maxPrice);
    }

    /// ==========================
    /// ===== Oracle actions =====
    /// ==========================

    /// @notice Update citadel price in asset terms from oracle source
    /// @dev Note that the oracle mechanics are abstracted to the oracle address
    function updateCitadelPriceInAsset()
        external
        gacPausable
        onlyRole(KEEPER_ROLE)
    {   
        uint _citadelPriceInAsset;
        bool _valid;

        (_citadelPriceInAsset, _valid) = IMedianOracle(citadelPriceInAssetOracle).getData();

        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");
        require(_valid, ""oracle data must be valid"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }


    /// @dev OUT OF AUDIT SCOPE: This is a test function that will be removed in final code
    /// @notice Update citadel price in asset terms from oracle source
    /// @dev Note that the oracle mechanics are abstracted to the oracle address
    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)
        external
        gacPausable
        onlyCitadelPriceInAssetOracle
    {
        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }
}",3777,469,"[M-02] Funding.deposit() doesn't work if there is no discount set
The Funding contract's `deposit()` function uses the `getAmountOut()` function to determine how many citadel tokens the user should receive for their deposit. But, if no discount is set, the function always returns 0. Now the `deposit()` function tries to deposit 0 tokens for the user through the StakedCitadel contract. But, that function requires the number of tokens to be `!= 0`. The transaction reverts.",1,"pragma solidity 0.8.12;

import {SafeERC20Upgradeable} from ""openzeppelin-contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol"";
import {ReentrancyGuardUpgradeable} from ""openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol"";

import ""./interfaces/badger/IVault.sol"";
import ""./interfaces/erc20/IERC20.sol"";
import ""./lib/GlobalAccessControlManaged.sol"";
import ""./lib/SafeERC20.sol"";
import ""./interfaces/citadel/IMedianOracle.sol"";


contract Funding is GlobalAccessControlManaged, ReentrancyGuardUpgradeable {
    using SafeERC20 for IERC20;

    
    bytes32 public constant CONTRACT_GOVERNANCE_ROLE =
        keccak256(""CONTRACT_GOVERNANCE_ROLE"");
    bytes32 public constant POLICY_OPERATIONS_ROLE =
        keccak256(""POLICY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_OPERATIONS_ROLE = keccak256(""TREASURY_OPERATIONS_ROLE"");
    bytes32 public constant TREASURY_VAULT_ROLE =
        keccak256(""TREASURY_VAULT_ROLE"");
    bytes32 public constant KEEPER_ROLE = keccak256(""KEEPER_ROLE"");

    uint256 public constant MAX_BPS = 10000;

    IERC20 public citadel; 
    IVault public xCitadel; 
    IERC20 public asset; 

    uint256 public citadelPriceInAsset; 
    uint256 public minCitadelPriceInAsset; 
    uint256 public maxCitadelPriceInAsset; 
    bool public citadelPriceFlag; 

    uint256 public assetDecimalsNormalizationValue;

    address public citadelPriceInAssetOracle;
    address public saleRecipient;

    struct FundingParams {
        uint256 discount;
        uint256 minDiscount;
        uint256 maxDiscount;
        address discountManager;
        uint256 assetCumulativeFunded; 
        uint256 assetCap; 
    }

    FundingParams public funding;

    
    
    

    
    event Deposit(
        address indexed buyer,
        uint256 assetIn,
        uint256 citadelOutValue
    );

    event CitadelPriceInAssetUpdated(uint256 citadelPrice);

    event CitadelPriceBoundsSet(uint256 minPrice, uint256 maxPrice);
    event CitadelPriceFlag(uint256 price, uint256 minPrice, uint256 maxPrice);

    event SaleRecipientUpdated(address indexed recipient);
    event AssetCapUpdated(uint256 assetCap);

    event Sweep(address indexed token, uint256 amount);
    event ClaimToTreasury(address indexed token, uint256 amount);

    modifier onlyCitadelPriceInAssetOracle() {
        require(
            msg.sender == citadelPriceInAssetOracle,
            ""onlyCitadelPriceInAssetOracle""
        );
        _;
    }

    event DiscountLimitsSet(uint256 minDiscount, uint256 maxDiscount);
    event DiscountSet(uint256 discount);
    event DiscountManagerSet(address discountManager);

    
    
    

    
    function initialize(
        address _gac,
        address _citadel,
        address _asset,
        address _xCitadel,
        address _saleRecipient,
        address _citadelPriceInAssetOracle,
        uint256 _assetCap
    ) external initializer {
        require(
            _saleRecipient != address(0),
            ""Funding: 0 sale""
        );
        require(
            _citadelPriceInAssetOracle != address(0),
            ""Funding: 0 oracle""
        );

        __GlobalAccessControlManaged_init(_gac);
        __ReentrancyGuard_init();

        citadel = IERC20(_citadel);
        xCitadel = IVault(_xCitadel);
        asset = IERC20(_asset);
        saleRecipient = _saleRecipient;

        citadelPriceInAssetOracle = _citadelPriceInAssetOracle;

        funding = FundingParams(0, 0, 0, address(0), 0, _assetCap);

        assetDecimalsNormalizationValue = 10**asset.decimals();

        
        minCitadelPriceInAsset = 0;
        maxCitadelPriceInAsset = type(uint256).max;

        
        
        IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max);
    }

    modifier onlyWhenPriceNotFlagged() {
        require(
            citadelPriceFlag == false,
            ""Funding: citadel price from oracle flagged and pending review""
        );
        _;
    }

    
    
    

    
    function deposit(uint256 _assetAmountIn, uint256 _minCitadelOut)
        external
        onlyWhenPriceNotFlagged
        gacPausable
        nonReentrant
        returns (uint256 citadelAmount_)
    {
        require(_assetAmountIn > 0, ""_assetAmountIn must not be 0"");
        require(
            funding.assetCumulativeFunded + _assetAmountIn <= funding.assetCap,
            ""asset funding cap exceeded""
        );
        funding.assetCumulativeFunded = funding.assetCumulativeFunded + _assetAmountIn;
        
        citadelAmount_ = getAmountOut(_assetAmountIn);
        require(citadelAmount_ >= _minCitadelOut, ""minCitadelOut"");

        asset.safeTransferFrom(msg.sender, saleRecipient, _assetAmountIn);
        
        
        
        xCitadel.depositFor(msg.sender, citadelAmount_);

        emit Deposit(
            msg.sender,
            _assetAmountIn,
            citadelAmount_
        );
    }

    
    
    

    
    function getAmountOut(uint256 _assetAmountIn)
        public
        view
        returns (uint256 citadelAmount_)
    {
        uint256 citadelAmountWithoutDiscount = _assetAmountIn * citadelPriceInAsset;

        if (funding.discount > 0) {
            citadelAmount_ =
                (citadelAmountWithoutDiscount * MAX_BPS) /
                (MAX_BPS - funding.discount);
        }

        citadelAmount_ = citadelAmount_ / assetDecimalsNormalizationValue;
    }

    
    function getStakedCitadelAmountOut(uint256 _assetAmountIn) public view returns (uint256 xCitadelAmount_) {
        uint citadelAmount = getAmountOut(_assetAmountIn);
        xCitadelAmount_ = citadelAmount * 10**citadel.decimals() / xCitadel.getPricePerFullShare();
    }

    
    function getRemainingFundable() external view returns (uint256 limitLeft_) {
        uint256 assetCumulativeFunded = funding.assetCumulativeFunded;
        uint256 assetCap = funding.assetCap;
        if (assetCumulativeFunded < assetCap) {
            limitLeft_ = assetCap - assetCumulativeFunded;
        }
    }

    
    function getFundingParams() external view returns (FundingParams memory) {
        return funding;
    }

    
    function getDiscount() external view returns (uint256) {
        return funding.discount;
    }

    
    
    

    
    function setDiscount(uint256 _discount)
        external
        gacPausable
        onlyRoleOrAddress(POLICY_OPERATIONS_ROLE, funding.discountManager)
    {
        require(_discount >= funding.minDiscount, ""discount < minDiscount"");
        require(_discount <= funding.maxDiscount, ""discount > maxDiscount"");

        funding.discount = _discount;

        emit DiscountSet(_discount);
    }

    function clearCitadelPriceFlag()
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        citadelPriceFlag = false;
    }

    
    function setAssetCap(uint256 _assetCap)
        external
        gacPausable
        onlyRole(POLICY_OPERATIONS_ROLE)
    {
        require(
            _assetCap > funding.assetCumulativeFunded,
            ""cannot decrease cap below global sum of assets in""
        );
        funding.assetCap = _assetCap;
        emit AssetCapUpdated(_assetCap);
    }

    
    
    

    
    function sweep(address _token)
        external
        gacPausable
        nonReentrant
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        require(amount > 0, ""nothing to sweep"");
        require(
            _token != address(asset),
            ""cannot sweep funding asset, use claimAssetToTreasury()""
        );

        emit Sweep(_token, amount);
        IERC20(_token).safeTransfer(saleRecipient, amount);
    }

    
    
    function claimAssetToTreasury()
        external
        gacPausable
        onlyRole(TREASURY_OPERATIONS_ROLE)
    {
        uint256 amount = asset.balanceOf(address(this));
        require(amount > 0, ""nothing to claim"");
        asset.safeTransfer(saleRecipient, amount);

        emit ClaimToTreasury(address(asset), amount);
    }

    
    
    

    
    function setDiscountLimits(uint256 _minDiscount, uint256 _maxDiscount)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(_maxDiscount < MAX_BPS , ""maxDiscount >= MAX_BPS"");
        funding.minDiscount = _minDiscount;
        funding.maxDiscount = _maxDiscount;

        emit DiscountLimitsSet(_minDiscount, _maxDiscount);
    }

    
    function setDiscountManager(address _discountManager)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        funding.discountManager = _discountManager;

        emit DiscountManagerSet(_discountManager);
    }

    function setSaleRecipient(address _saleRecipient)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        require(
            _saleRecipient != address(0),
            ""Funding: sale recipient should not be zero""
        );

        saleRecipient = _saleRecipient;
        emit SaleRecipientUpdated(_saleRecipient);
    }

    function setCitadelAssetPriceBounds(uint256 _minPrice, uint256 _maxPrice)
        external
        gacPausable
        onlyRole(CONTRACT_GOVERNANCE_ROLE)
    {
        minCitadelPriceInAsset = _minPrice;
        maxCitadelPriceInAsset = _maxPrice;

        emit CitadelPriceBoundsSet(_minPrice, _maxPrice);
    }

    
    
    

    
    
    function updateCitadelPriceInAsset()
        external
        gacPausable
        onlyRole(KEEPER_ROLE)
    {   
        uint _citadelPriceInAsset;
        bool _valid;

        (_citadelPriceInAsset, _valid) = IMedianOracle(citadelPriceInAssetOracle).getData();

        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");
        require(_valid, ""oracle data must be valid"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }


    
    
    
    function updateCitadelPriceInAsset(uint256 _citadelPriceInAsset)
        external
        gacPausable
        onlyCitadelPriceInAssetOracle
    {
        require(_citadelPriceInAsset > 0, ""citadel price must not be zero"");

        if (
            _citadelPriceInAsset < minCitadelPriceInAsset ||
            _citadelPriceInAsset > maxCitadelPriceInAsset
        ) {
            citadelPriceFlag = true;
            emit CitadelPriceFlag(
                _citadelPriceInAsset,
                minCitadelPriceInAsset,
                maxCitadelPriceInAsset
            );
        } else {
            citadelPriceInAsset = _citadelPriceInAsset;
            emit CitadelPriceInAssetUpdated(_citadelPriceInAsset);
        }
    }
}",2553,0,1,"{
  ""task_list"": [
    {
      ""Area"": ""Security Vulnerabilities"",
      ""Tasks"": [
        ""Verify reentrancy protection in deposit, sweep, and claimAssetToTreasury functions"",
        ""Check for potential integer overflow/underflow in calculation methods (getAmountOut, getStakedCitadelAmountOut)"",
        ""Audit transfer and approval mechanisms for potential external call vulnerabilities"",
        ""Validate input validation and boundary checks in all external functions""
      ]
    },
    {
      ""Area"": ""Access Control"",
      ""Tasks"": [
        ""Verify role-based access control implementation for each administrative function"",
        ""Review the permissions and potential risks of CONTRACT_GOVERNANCE_ROLE"",
        ""Check the security of discount management role assignment and limits"",
        ""Validate the scope and restrictions of onlyCitadelPriceInAssetOracle modifier""
      ]
    },
    {
      ""Area"": ""Oracle Integration"",
      ""Tasks"": [
        ""Thoroughly analyze oracle price validation mechanism"",
        ""Review citadelPriceFlag implementation and potential manipulation risks"",
        ""Check the robustness of price bounds checking (minCitadelPriceInAsset, maxCitadelPriceInAsset)"",
        ""Verify oracle data retrieval and validation process in updateCitadelPriceInAsset functions""
      ]
    },
    {
      ""Area"": ""Token Economics"",
      ""Tasks"": [
        ""Analyze the discount calculation mechanism for potential exploits"",
        ""Review the asset funding cap implementation and its effectiveness"",
        ""Check the decimal normalization process for potential rounding errors"",
        ""Validate the xCitadel token conversion logic""
      ]
    },
    {
      ""Area"": ""External Interactions"",
      ""Tasks"": [
        ""Verify safe approval and transfer mechanisms with xCitadel and asset tokens"",
        ""Check the security of depositFor method in xCitadel interaction"",
        ""Review the sweep and claimAssetToTreasury functions for potential misuse"",
        ""Validate initialization process and parameter validation""
      ]
    },
    {
      ""Area"": ""Governance and Emergency Controls"",
      ""Tasks"": [
        ""Review the emergency pause mechanism (gacPausable modifier)"",
        ""Check the clearCitadelPriceFlag function for potential abuse"",
        ""Validate the process of updating sale recipient and discount parameters"",
        ""Verify the robustness of asset cap modification""
      ]
    },
    {
      ""Area"": ""Mathematical Precision"",
      ""Tasks"": [
        ""Audit getAmountOut calculation for potential precision loss"",
        ""Review discount calculation for edge cases and potential manipulation"",
        ""Check decimal normalization logic for potential rounding vulnerabilities"",
        ""Verify staked token amount calculation accuracy""
      ]
    },
    {
      ""Area"": ""Potential Attack Vectors"",
      ""Tasks"": [
        ""Analyze potential front-running risks in deposit function"",
        ""Check for possible price oracle manipulation scenarios"",
        ""Review potential griefing attacks through price flagging mechanism"",
        ""Validate protection against sandwich attacks in token purchases""
      ]
    }
  ]
}","{
  ""ReviewingTheCode"": ""The contract 'Funding' appears to be a mechanism for selling Citadel tokens in exchange for another asset at a determined price, with features like discount management, price boundaries, and role-based access control. It uses xCitadel as an intermediary staking token into which the purchased Citadel is deposited for buyers."",
  
  ""IdentifyingKeyComponents"": {
    ""ContractName"": ""Funding"",
    ""Purpose"": ""Facilitates the sale of Citadel tokens in exchange for another asset (likely a stablecoin) at a price determined by an oracle, with configurable discounts and funding limits."",
    ""InheritanceAndImports"": {
      ""InheritsFrom"": [""GlobalAccessControlManaged"", ""ReentrancyGuardUpgradeable""],
      ""Imports"": [
        ""SafeERC20Upgradeable"", 
        ""ReentrancyGuardUpgradeable"", 
        ""IVault"", 
        ""IERC20"", 
        ""GlobalAccessControlManaged"", 
        ""SafeERC20"", 
        ""IMedianOracle""
      ]
    },
    ""StateVariables"": [
      {
        ""Name"": ""citadel"",
        ""Type"": ""IERC20"",
        ""Purpose"": ""The Citadel token being sold""
      },
      {
        ""Name"": ""xCitadel"",
        ""Type"": ""IVault"",
        ""Purpose"": ""Staking contract for Citadel tokens""
      },
      {
        ""Name"": ""asset"",
        ""Type"": ""IERC20"",
        ""Purpose"": ""The token used to purchase Citadel (e.g., a stablecoin)""
      },
      {
        ""Name"": ""citadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Current price of Citadel in terms of the asset""
      },
      {
        ""Name"": ""minCitadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Minimum allowed price for Citadel""
      },
      {
        ""Name"": ""maxCitadelPriceInAsset"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Maximum allowed price for Citadel""
      },
      {
        ""Name"": ""citadelPriceFlag"",
        ""Type"": ""bool"",
        ""Purpose"": ""Flag to indicate if price is outside allowed bounds""
      },
      {
        ""Name"": ""assetDecimalsNormalizationValue"",
        ""Type"": ""uint256"",
        ""Purpose"": ""Value to normalize decimal places between tokens""
      },
      {
        ""Name"": ""citadelPriceInAssetOracle"",
        ""Type"": ""address"",
        ""Purpose"": ""Oracle address that provides Citadel price data""
      },
      {
        ""Name"": ""saleRecipient"",
        ""Type"": ""address"",
        ""Purpose"": ""Address that receives the assets from sales""
      },
      {
        ""Name"": ""funding"",
        ""Type"": ""FundingParams struct"",
        ""Purpose"": ""Structure containing parameters for the funding process""
      }
    ],
    ""FunctionsAndModifiers"": [
      {
        ""Name"": ""initialize"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Initializes the contract with required parameters"",
        ""Parameters"": [""_gac"", ""_citadel"", ""_asset"", ""_xCitadel"", ""_saleRecipient"", ""_citadelPriceInAssetOracle"", ""_assetCap""],
        ""Returns"": []
      },
      {
        ""Name"": ""deposit"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Allows users to deposit assets and receive Citadel tokens (as xCitadel)"",
        ""Parameters"": [""_assetAmountIn"", ""_minCitadelOut""],
        ""Returns"": [""citadelAmount_""]
      },
      {
        ""Name"": ""getAmountOut"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Calculates the amount of Citadel tokens to be received for a given asset amount"",
        ""Parameters"": [""_assetAmountIn""],
        ""Returns"": [""citadelAmount_""]
      },
      {
        ""Name"": ""getStakedCitadelAmountOut"",
        ""Visibility"": ""public"",
        ""Purpose"": ""Calculates the amount of xCitadel tokens to be received for a given asset amount"",
        ""Parameters"": [""_assetAmountIn""],
        ""Returns"": [""xCitadelAmount_""]
      },
      {
        ""Name"": ""getRemainingFundable"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Returns the remaining amount that can be funded"",
        ""Parameters"": [],
        ""Returns"": [""limitLeft_""]
      },
      {
        ""Name"": ""setDiscount"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Sets the discount rate for Citadel purchases"",
        ""Parameters"": [""_discount""],
        ""Returns"": []
      },
      {
        ""Name"": ""updateCitadelPriceInAsset (with params)"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Updates the Citadel price directly from the oracle"",
        ""Parameters"": [""_citadelPriceInAsset""],
        ""Returns"": []
      },
      {
        ""Name"": ""updateCitadelPriceInAsset (no params)"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Updates the Citadel price by fetching from the oracle"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""sweep"",
        ""Visibility"": ""external"",
        ""Purpose"": ""Allows treasury operations to withdraw tokens accidentally sent to contract"",
        ""Parameters"": [""_token""],
        ""Returns"": []
      },
      {
        ""Name"": ""onlyWhenPriceNotFlagged"",
        ""Visibility"": ""modifier"",
        ""Purpose"": ""Restricts function execution when price is flagged for review"",
        ""Parameters"": [],
        ""Returns"": []
      },
      {
        ""Name"": ""onlyCitadelPriceInAssetOracle"",
        ""Visibility"": ""modifier"",
        ""Purpose"": ""Restricts function to only be called by the oracle"",
        ""Parameters"": [],
        ""Returns"": []
      }
    ]
  },
  
  ""ExternalInteractions"": [
    ""IVault - For depositing Citadel tokens on behalf of users"",
    ""IERC20 - For token transfers and approvals"",
    ""IMedianOracle - For fetching price data"",
    ""GlobalAccessControlManaged - For role-based access control""
  ],
  
  ""SpecialMechanisms"": [
    ""Role-based access control with specific roles for different operations"",
    ""Price oracle integration with validity bounds checking"",
    ""Discount mechanism for calculating token amounts"",
    ""Reentrancy protection for external calls"",
    ""Cap on total funding to limit sale size""
  ],
  
  ""Questions"": [
    ""What security measures are in place for the oracle integration?"",
    ""How is the oracle's price data validated beyond the simple bounds check?"",
    ""What mechanisms exist to update the oracle address if needed?"",
    ""Is there any slippage protection beyond _minCitadelOut in the deposit function?"",
    ""How is the discount manager role assigned and what controls exist on its actions?""
  ]
}","{
""Findings"": [
{
""Issue"": ""Oracle Price Manipulation Vulnerability"",
""Severity"": ""High"",
""Description"": ""The contract has critical vulnerabilities in its oracle price mechanism: 1) Relies on a single oracle source without robust validation, 2) Has two different update methods for price (keeper and direct oracle) with inconsistent validation, 3) Lacks TWAP implementation making it vulnerable to flash loan attacks, 4) No freshness/staleness checks for oracle data."",
""Impact"": ""Attackers could manipulate oracle prices to extract value by depositing assets when price is artificially high/low, potentially draining protocol reserves. Even with price bounds, sophisticated attackers could execute price manipulation within accepted ranges."",
""Location"": ""updateCitadelPriceInAsset() functions (both keeper and oracle versions), getAmountOut() function""
},
{
""Issue"": ""Precision Loss and Calculation Issues"",
""Severity"": ""Medium"",
""Description"": ""Multiple precision and calculation issues exist: 1) Division by assetDecimalsNormalizationValue occurs after discount calculation causing precision loss, 2) Potential division by zero in getAmountOut and getStakedCitadelAmountOut functions, 3) Complex mathematical operations without considering edge cases for large values."",
""Impact"": ""Users might receive fewer tokens than expected due to truncation, particularly for small deposits. Large but legitimate transactions could fail due to overflow. Some calculations could revert due to division by zero."",
""Location"": ""getAmountOut(), getStakedCitadelAmountOut() functions""
},
{
""Issue"": ""Unlimited Token Approval Risk"",
""Severity"": ""Medium"",
""Description"": ""The contract grants unlimited approval (type(uint256).max) for CITADEL tokens to the xCITADEL vault in the initialize function. This represents a significant security risk if the approved contract is compromised."",
""Impact"": ""If the xCITADEL vault is compromised, all CITADEL tokens held by this contract could be drained without requiring additional approvals."",
""Location"": ""initialize() function: IERC20(_citadel).safeApprove(address(_xCitadel), type(uint256).max)""
},
{
""Issue"": ""Centralization Risks"",
""Severity"": ""Medium"",
""Description"": ""Several centralization risks exist: 1) Only POLICY_OPERATIONS_ROLE can clear price flags, 2) Critical parameters like citadelPriceInAsset, discount rates, and price bounds are controlled by privileged roles, 3) No mechanism to change oracle address after initialization."",
""Impact"": ""If privileged roles are compromised or unavailable, critical contract functionality could be frozen. Malicious administrators could manipulate parameters to extract value."",
""Location"": ""clearCitadelPriceFlag(), setDiscount(), setCitadelAssetPriceBounds() functions""
},
{
""Issue"": ""Missing Input Validation"",
""Severity"": ""Low"",
""Description"": ""Several key validation checks are missing: 1) Zero address checks for critical parameters like _citadel, _asset, and _xCitadel, 2) Insufficient validation in setDiscount function, 3) No validation for coherent discount bounds (minDiscount <= maxDiscount)."",
""Impact"": ""Contract could be initialized with invalid addresses requiring redeployment. Discount mechanism could become unusable if bounds are set incorrectly."",
""Location"": ""initialize() function, setDiscount() function, setDiscountLimits() function""
}
],
""IssueNumber"": 45,
""OutputList"": 5
}",24.6467990875244,0.0,5.0,"---

**[M-02] Funding.deposit() doesn't work if there is no discount set**

**Report Description**:
The `Funding` contract's `deposit()` function relies on the `getAmountOut()` function to determine the number of citadel tokens a user should receive for their deposit. However, if no discount is set, `getAmountOut()` always returns 0. Consequently, the `deposit()` function attempts to deposit 0 tokens into the `StakedCitadel` contract, which requires the number of tokens to be `!= 0`. This causes the transaction to revert, rendering the `deposit()` function non-functional when no discount is set.

**Match in Response List**:
**No match found**.

**Validation**:
**Incorrect**. None of the responses in the `response_list` address the specific issue of the `deposit()` function failing when no discount is set. While the ""Precision Loss and Calculation Issues"" response mentions potential division by zero in `getAmountOut()`, it does not cover the scenario where `getAmountOut()` returns 0 due to an unset discount, nor does it address the resulting transaction revert in `deposit()`. This issue is entirely missed in the response list.

---

### **Summary of Matches and Gaps**

**Correct Matches**:
- *None*

**Partially Correct Matches**:
- *None*

**Missed Issues from Issue Report**:
- **[M-02] Funding.deposit() doesn't work if there is no discount set**

---","```
None.
```",0.0
